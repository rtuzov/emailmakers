#!/usr/bin/env node

/**
 * Test AI Template Designer Fix
 * Verify that generateTemplateDesign uses real assets and content context
 */

const fs = require('fs').promises;
const path = require('path');

async function testTemplateDesignFix() {
  console.log('\nüß™ === TESTING AI TEMPLATE DESIGNER FIX ===');
  
  // Find the latest campaign
  const campaignsDir = './campaigns';
  const campaigns = await fs.readdir(campaignsDir);
  const latestCampaign = campaigns
    .filter(name => name.startsWith('campaign_'))
    .sort()
    .reverse()[0];
  
  if (!latestCampaign) {
    console.log('‚ùå No campaigns found');
    return;
  }
  
  console.log(`üìÅ Testing campaign: ${latestCampaign}`);
  
  const campaignPath = path.join(campaignsDir, latestCampaign);
  
  // Check if template design exists
  const templateDesignPath = path.join(campaignPath, 'design', 'template-design.json');
  
  try {
    const templateDesignContent = await fs.readFile(templateDesignPath, 'utf8');
    const templateDesign = JSON.parse(templateDesignContent);
    
    console.log('\nüìã TEMPLATE DESIGN ANALYSIS:');
    console.log(`‚úÖ Template ID: ${templateDesign.template_id}`);
    console.log(`‚úÖ Template Name: ${templateDesign.template_name}`);
    console.log(`‚úÖ Description: ${templateDesign.description}`);
    
    // Check assets usage
    console.log('\nüñºÔ∏è ASSETS ANALYSIS:');
    
    // Check hero image
    const heroSection = templateDesign.sections.find(s => s.type === 'hero');
    if (heroSection && heroSection.content.hero_image) {
      const heroImage = heroSection.content.hero_image;
      console.log(`‚úÖ Hero Image: ${heroImage.asset_file}`);
      console.log(`   - Source: ${heroImage.source}`);
      console.log(`   - Alt text: ${heroImage.alt_text}`);
      
      // Check if it's a real file path (not placeholder)
      if (heroImage.asset_file.includes('placeholder')) {
        console.log('‚ùå ISSUE: Hero image is still using placeholder!');
      } else {
        console.log('‚úÖ Hero image uses real asset path');
      }
    }
    
    // Check content images
    const contentSection = templateDesign.sections.find(s => s.type === 'content');
    if (contentSection && contentSection.content.images) {
      const images = contentSection.content.images;
      console.log(`‚úÖ Content Images Count: ${images.count}`);
      console.log(`‚úÖ Image Sources: ${images.sources.join(', ')}`);
      
      if (images.asset_files && images.asset_files.length > 0) {
        images.asset_files.forEach((asset, i) => {
          console.log(`   ${i + 1}. ${asset.file} - ${asset.alt_text}`);
          if (asset.file.includes('placeholder')) {
            console.log(`   ‚ùå ISSUE: Image ${i + 1} is using placeholder!`);
          } else {
            console.log(`   ‚úÖ Image ${i + 1} uses real asset`);
          }
        });
      }
    }
    
    // Check pricing information
    console.log('\nüí∞ PRICING ANALYSIS:');
    const ctaSection = templateDesign.sections.find(s => s.type === 'call-to-action');
    if (ctaSection && ctaSection.content.button) {
      const buttonText = ctaSection.content.button.text;
      console.log(`‚úÖ CTA Button: ${buttonText}`);
      
      // Check if it contains real price
      if (buttonText.includes('RUB') || buttonText.includes('—Ä—É–±')) {
        console.log('‚úÖ CTA contains real price');
      } else {
        console.log('‚ùå ISSUE: CTA might not contain real price');
      }
    }
    
    // Check content section pricing
    if (contentSection && contentSection.content.pricing) {
      const pricing = contentSection.content.pricing;
      console.log(`‚úÖ Pricing Display: ${pricing.display}`);
      if (pricing.price) {
        console.log(`‚úÖ Price: ${pricing.price}`);
      }
      if (pricing.dates) {
        console.log(`‚úÖ Dates: ${pricing.dates}`);
      }
    }
    
    // Check metadata
    console.log('\nüìä METADATA ANALYSIS:');
    if (templateDesign.metadata) {
      const metadata = templateDesign.metadata;
      console.log(`‚úÖ Generated by: ${metadata.generated_by}`);
      console.log(`‚úÖ Campaign ID: ${metadata.campaign_id}`);
      console.log(`‚úÖ Assets used: ${metadata.assets_used.total_images} images, ${metadata.assets_used.icons} icons`);
      console.log(`‚úÖ Local images: ${metadata.assets_used.local_images}`);
      console.log(`‚úÖ External images: ${metadata.assets_used.external_images}`);
    }
    
    // Check if asset manifest exists
    console.log('\nüìÑ ASSET MANIFEST CHECK:');
    const assetManifestPath = path.join(campaignPath, 'assets', 'manifests', 'asset-manifest.json');
    
    try {
      const assetManifestContent = await fs.readFile(assetManifestPath, 'utf8');
      const assetManifest = JSON.parse(assetManifestContent);
      
      const manifestImages = assetManifest.assetManifest.images || [];
      const manifestIcons = assetManifest.assetManifest.icons || [];
      
      console.log(`‚úÖ Asset Manifest Found: ${manifestImages.length} images, ${manifestIcons.length} icons`);
      
      // Check if template design uses assets from manifest
      const manifestImagePaths = manifestImages.map(img => img.path || img.url);
      const templateImagePaths = [];
      
      // Collect all image paths from template
      if (heroSection && heroSection.content.hero_image) {
        templateImagePaths.push(heroSection.content.hero_image.asset_file);
      }
      
      if (contentSection && contentSection.content.images && contentSection.content.images.asset_files) {
        contentSection.content.images.asset_files.forEach(asset => {
          templateImagePaths.push(asset.file);
        });
      }
      
      console.log('\nüîç ASSET USAGE VERIFICATION:');
      templateImagePaths.forEach((templatePath, i) => {
        const isInManifest = manifestImagePaths.some(manifestPath => 
          manifestPath === templatePath || 
          manifestPath.includes(path.basename(templatePath))
        );
        
        if (isInManifest) {
          console.log(`‚úÖ Template image ${i + 1} found in asset manifest`);
        } else {
          console.log(`‚ùå Template image ${i + 1} NOT found in asset manifest: ${templatePath}`);
        }
      });
      
    } catch (error) {
      console.log(`‚ùå Asset manifest not found: ${error.message}`);
    }
    
    // Check content context
    console.log('\nüìù CONTENT CONTEXT CHECK:');
    const contentContextPath = path.join(campaignPath, 'content', 'email-content.json');
    
    try {
      const contentContextContent = await fs.readFile(contentContextPath, 'utf8');
      const contentContext = JSON.parse(contentContextContent);
      
      console.log(`‚úÖ Content Context Found`);
      console.log(`‚úÖ Subject: ${contentContext.subject}`);
      console.log(`‚úÖ Best Price: ${contentContext.pricing?.best_price} ${contentContext.pricing?.currency}`);
      console.log(`‚úÖ Optimal Dates: ${contentContext.dates?.optimal_dates?.join(', ')}`);
      
      // Check if template uses real subject
      if (templateDesign.template_name === contentContext.subject) {
        console.log('‚úÖ Template uses real subject from content context');
      } else {
        console.log('‚ùå ISSUE: Template subject differs from content context');
        console.log(`   Template: ${templateDesign.template_name}`);
        console.log(`   Content: ${contentContext.subject}`);
      }
      
    } catch (error) {
      console.log(`‚ùå Content context not found: ${error.message}`);
    }
    
    console.log('\n‚úÖ === TEMPLATE DESIGN TEST COMPLETED ===');
    
  } catch (error) {
    console.log(`‚ùå Template design not found: ${error.message}`);
  }
}

// Run the test
testTemplateDesignFix().catch(console.error); 