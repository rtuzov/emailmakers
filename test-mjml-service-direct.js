#!/usr/bin/env node

/**
 * –¢–ï–°–¢ –ü–†–Ø–ú–û–ì–û –û–ë–†–ê–©–ï–ù–ò–Ø –ö MJML COMPILATION SERVICE
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MJML –∏ HTML —Ñ–∞–π–ª—ã
 * –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π action: 'render_mjml'
 */

const fs = require('fs');
const path = require('path');

// Test configuration
const API_BASE_URL = 'http://localhost:3000';
const TEST_OUTPUT_DIR = './test-outputs';

console.log('\nüß™ –¢–ï–°–¢: –ü–†–Ø–ú–û–ï –û–ë–†–ê–©–ï–ù–ò–ï –ö MJML COMPILATION SERVICE');
console.log('==================================================');
console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å action: render_mjml (–ù–ï optimize_output)');

// –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
const testRequest = {
  task_type: 'generate_content',
  input: {
    brief: 'Create a beautiful email for winter skiing trip to Alps with special offers and amazing mountain views. Include pricing information and call to action.',
    content_type: 'email_marketing',
    target_audience: 'adventure travel enthusiasts',
    tone: 'exciting and inspiring',
    language: 'Russian',
    campaign_context: 'winter sports promotion'
  },
  context: {
    test_mode: true
  }
};

async function testMjmlCompilationService() {
  try {
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API...');
    console.log('URL:', `${API_BASE_URL}/api/agent/run-improved`);
    console.log('Method: POST');
    console.log('Body preview:', JSON.stringify(testRequest, null, 2).substring(0, 300) + '...');

    const response = await fetch(`${API_BASE_URL}/api/agent/run-improved`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      },
      body: JSON.stringify(testRequest)
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();
    
    console.log('\n‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API');
    console.log('Status:', response.status);
    console.log('Headers:', Object.fromEntries(response.headers.entries()));
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const timestamp = Date.now();
    const filename = `mjml_service_test_${timestamp}.json`;
    const filepath = path.join(TEST_OUTPUT_DIR, filename);
    
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(TEST_OUTPUT_DIR)) {
      fs.mkdirSync(TEST_OUTPUT_DIR, { recursive: true });
    }
    
    fs.writeFileSync(filepath, JSON.stringify(result, null, 2));
    console.log(`üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filepath}`);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    console.log('====================');
    
    if (result.success) {
      console.log('‚úÖ API –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω');
    } else {
      console.log('‚ùå API –∑–∞–ø—Ä–æ—Å –Ω–µ—É—Å–ø–µ—à–µ–Ω');
      console.log('–û—à–∏–±–∫–∞:', result.error || 'Unknown error');
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ action
    const actions = extractActionsFromResult(result);
    console.log('\nüîç –î–ï–ô–°–¢–í–ò–Ø –í WORKFLOW:');
    actions.forEach((action, index) => {
      console.log(`${index + 1}. ${action}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é MJML
    const mjmlGenerated = checkMjmlGeneration(result);
    console.log('\nüìß MJML –ì–ï–ù–ï–†–ê–¶–ò–Ø:');
    console.log(mjmlGenerated ? '‚úÖ MJML –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω' : '‚ùå MJML –ù–ï –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    const filesSaved = checkFilesSaved(result);
    console.log('\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –§–ê–ô–õ–û–í:');
    console.log(filesSaved ? '‚úÖ –§–∞–π–ª—ã –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' : '‚ùå –§–∞–π–ª—ã –ù–ï –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—É—é –ø–∞–ø–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
    const campaignFolder = findCampaignFolder(result);
    if (campaignFolder) {
      console.log('\nüìÅ –ù–ê–ô–î–ï–ù–ù–ê–Ø –ü–ê–ü–ö–ê –ö–ê–ú–ü–ê–ù–ò–ò:');
      console.log(`–ü—É—Ç—å: mails/${campaignFolder}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∞–ø–∫–∏
      const campaignPath = path.join('mails', campaignFolder);
      if (fs.existsSync(campaignPath)) {
        const files = fs.readdirSync(campaignPath);
        console.log('–§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ:', files);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–π–ª—ã
        const emailHtml = path.join(campaignPath, 'email.html');
        const emailMjml = path.join(campaignPath, 'email.mjml');
        
        if (fs.existsSync(emailHtml)) {
          const htmlStats = fs.statSync(emailHtml);
          console.log(`‚úÖ email.html: ${htmlStats.size} bytes`);
        } else {
          console.log('‚ùå email.html: –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (fs.existsSync(emailMjml)) {
          const mjmlStats = fs.statSync(emailMjml);
          console.log(`‚úÖ email.mjml: ${mjmlStats.size} bytes`);
        } else {
          console.log('‚ùå email.mjml: –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } else {
        console.log('‚ùå –ü–∞–ø–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
    }
    
    console.log('\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log('=====================');
    
    if (mjmlGenerated && filesSaved) {
      console.log('üéâ –£–°–ü–ï–•! MJML –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∏ —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
    } else {
      console.log('‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –Ω–µ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
    }
    
    return result;
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    throw error;
  }
}

function extractActionsFromResult(result) {
  const actions = [];
  const resultStr = JSON.stringify(result);
  
  // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –≤ –ª–æ–≥–∞—Ö
  const actionMatches = resultStr.match(/"action":"([^"]+)"/g);
  if (actionMatches) {
    actionMatches.forEach(match => {
      const action = match.replace(/"action":"([^"]+)"/, '$1');
      if (!actions.includes(action)) {
        actions.push(action);
      }
    });
  }
  
  return actions;
}

function checkMjmlGeneration(result) {
  const resultStr = JSON.stringify(result).toLowerCase();
  
  // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ MJML
  return resultStr.includes('mjml') && 
         resultStr.includes('mj-body') ||
         resultStr.includes('mjml_content') ||
         resultStr.includes('generatestandardmjmltemplate');
}

function checkFilesSaved(result) {
  const resultStr = JSON.stringify(result).toLowerCase();
  
  // –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
  return resultStr.includes('savehtml') ||
         resultStr.includes('savemjml') ||
         resultStr.includes('saved') ||
         resultStr.includes('email.html') ||
         resultStr.includes('email.mjml');
}

function findCampaignFolder(result) {
  const resultStr = JSON.stringify(result);
  
  // –ò—â–µ–º –∏–º—è –ø–∞–ø–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
  const folderMatches = resultStr.match(/"campaignId":"([^"]+)"/);
  if (folderMatches) {
    return folderMatches[1];
  }
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
  const emailFolderMatches = resultStr.match(/"emailFolder":"([^"]+)"/);
  if (emailFolderMatches) {
    return emailFolderMatches[1];
  }
  
  return null;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testMjmlCompilationService()
  .then(result => {
    console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    process.exit(0);
  })
  .catch(error => {
    console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error.message);
    process.exit(1);
  }); 