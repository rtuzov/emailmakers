const { execSync } = require('child_process');

console.log('\nüß™ === TESTING REFACTORED ASSET MANIFEST SYSTEM ===');
console.log(`üìÖ Started at: ${new Date().toISOString()}`);

// Test input for Spain campaign to verify dynamic destination detection
const spainInput = `–°–æ–∑–¥–∞–π email-–∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è —Ç—É—Ä–æ–≤ –≤ –ò—Å–ø–∞–Ω–∏—é –≤–µ—Å–Ω–æ–π:

üèñÔ∏è –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–∞–Ω–∏—è (–ú–∞–¥—Ä–∏–¥, –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –°–µ–≤–∏–ª—å—è)
üåÖ –°–ï–ó–û–ù: –í–µ—Å–Ω–∞ 2025 (–∞–ø—Ä–µ–ª—å-–º–∞–π)
üí∞ –ë–Æ–î–ñ–ï–¢: 60,000-140,000 —Ä—É–±–ª–µ–π
üë• –ê–£–î–ò–¢–û–†–ò–Ø: –ö—É–ª—å—Ç—É—Ä–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç—ã –∏ –ø–∞—Ä—ã 30-50 –ª–µ—Ç
üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´: –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ñ–ª–∞–º–µ–Ω–∫–æ, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –∏—Å—Ç–æ—Ä–∏—è
üìß –¢–ò–ü: –ö—É–ª—å—Ç—É—Ä–Ω–æ-–ø–æ–∑–Ω–∞–≤–∞—Ç–µ–ª—å–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è
üé® –°–¢–ò–õ–¨: –≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–π, –∫—É–ª—å—Ç—É—Ä–Ω—ã–π, —Ç–µ–ø–ª—ã–π

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ –ì–∞—É–¥–∏ –≤ –ë–∞—Ä—Å–µ–ª–æ–Ω–µ
- –ú—É–∑–µ–∏ –ü—Ä–∞–¥–æ –∏ –†–µ–π–Ω–∞ –°–æ—Ñ–∏—è –≤ –ú–∞–¥—Ä–∏–¥–µ
- –§–ª–∞–º–µ–Ω–∫–æ –∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏ –°–µ–≤–∏–ª—å–∏
- –ò—Å–ø–∞–Ω—Å–∫–∞—è –∫—É—Ö–Ω—è –∏ –≤–∏–Ω–æ
- –í–µ—Å–µ–Ω–Ω—è—è –ø–æ–≥–æ–¥–∞ –∏ —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏`;

async function testRefactoredSystem() {
  try {
    console.log('\nüìù Testing Content Specialist with Spain campaign...');
    
    const contentResult = execSync(`node -e "
      const { runSpecialistAgent } = require('./src/agent/specialists/content-specialist.js');
      
      runSpecialistAgent({
        task: 'generate_content',
        brief: \`${spainInput.replace(/`/g, '\\`')}\`,
        campaign_id: 'campaign_${Date.now()}_spain_test',
        language: 'ru',
        campaign_type: 'travel_promotion',
        target_audience: 'cultural_tourists_couples_30_50',
        trace_id: 'test_refactored_${Date.now()}'
      }).then(result => {
        console.log('‚úÖ Content generation completed');
        console.log('üìä Result:', JSON.stringify(result, null, 2));
      }).catch(error => {
        console.error('‚ùå Content generation failed:', error.message);
        process.exit(1);
      });
    "`, { encoding: 'utf8', maxBuffer: 1024 * 1024 * 10 });
    
    console.log('Content Result:', contentResult);
    
    // Find the generated campaign directory
    console.log('\nüîç Finding generated campaign directory...');
    const campaignDirs = execSync('find campaigns -name "campaign_*spain_test*" -type d 2>/dev/null || echo ""', { encoding: 'utf8' }).trim();
    
    if (!campaignDirs) {
      throw new Error('No Spain campaign directory found');
    }
    
    const campaignPath = campaignDirs.split('\n')[0];
    console.log(`üìÅ Found campaign: ${campaignPath}`);
    
    // Test the refactored Asset Manifest Generator
    console.log('\nüìã Testing refactored Asset Manifest Generator...');
    
    const manifestResult = execSync(`node -e "
      const { generateAssetManifest } = require('./src/agent/tools/asset-preparation/asset-manifest-generator.js');
      
      // Mock content context based on Spain campaign
      const contentContext = {
        generated_content: {
          subject: '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∏—é –ò—Å–ø–∞–Ω–∏–∏ —ç—Ç–æ–π –≤–µ—Å–Ω–æ–π',
          preheader: '–ú–∞–¥—Ä–∏–¥, –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –°–µ–≤–∏–ª—å—è –∂–¥—É—Ç –≤–∞—Å',
          body: '–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ì–∞—É–¥–∏, –Ω–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å —Ñ–ª–∞–º–µ–Ω–∫–æ –≤ –°–µ–≤–∏–ª—å–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –ü—Ä–∞–¥–æ –≤ –ú–∞–¥—Ä–∏–¥–µ. –í–µ—Å–µ–Ω–Ω—è—è –ò—Å–ø–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.',
          dates: {
            destination: '–ò—Å–ø–∞–Ω–∏—è (–ú–∞–¥—Ä–∏–¥, –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –°–µ–≤–∏–ª—å—è)',
            season: '–≤–µ—Å–Ω–∞',
            seasonal_factors: '—Ç–µ–ø–ª–∞—è –ø–æ–≥–æ–¥–∞, —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏, —Ü–≤–µ—Ç–µ–Ω–∏–µ'
          },
          context: {
            destination: '–ò—Å–ø–∞–Ω–∏—è',
            emotional_triggers: '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ñ–ª–∞–º–µ–Ω–∫–æ, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –∏—Å—Ç–æ—Ä–∏—è'
          },
          pricing: {
            best_price: 60000,
            currency: 'RUB',
            route: '–ú–æ—Å–∫–≤–∞-–ú–∞–¥—Ä–∏–¥'
          }
        },
        asset_requirements: {
          hero_image: true,
          content_images: 3,
          icons: 2,
          logos: true
        },
        campaign_type: 'travel_promotion',
        language: 'ru',
        target_audience: 'cultural_tourists_couples_30_50'
      };
      
      const assetSources = [
        {
          type: 'local',
          path: 'figma-all-pages-1750993353363',
          priority: 'primary'
        },
        {
          type: 'url',
          path: 'external_fallback',
          priority: 'fallback'
        }
      ];
      
      generateAssetManifest.execute({
        campaignId: 'spain_test_campaign',
        campaignPath: '${campaignPath}',
        contentContext: contentContext,
        assetSources: assetSources,
        options: {
          analyzeContentContext: true,
          collectFromSources: true,
          generateUsageInstructions: true,
          includePerformanceMetrics: true
        },
        context: {
          campaignId: 'spain_test_campaign',
          language: 'ru',
          campaign_type: 'travel_promotion'
        },
        trace_id: 'refactored_test_${Date.now()}'
      }).then(result => {
        console.log('‚úÖ Asset manifest generation completed');
        console.log('üìä Result:', result);
      }).catch(error => {
        console.error('‚ùå Asset manifest generation failed:', error.message);
        console.error('Stack:', error.stack);
        process.exit(1);
      });
    "`, { encoding: 'utf8', maxBuffer: 1024 * 1024 * 10 });
    
    console.log('Manifest Result:', manifestResult);
    
    // Check generated files
    console.log('\nüìÅ Checking generated manifest files...');
    try {
      const manifestFile = execSync(`find ${campaignPath} -name "asset-manifest.json" -type f`, { encoding: 'utf8' }).trim();
      if (manifestFile) {
        console.log(`‚úÖ Asset manifest file created: ${manifestFile}`);
        
        const manifestContent = execSync(`head -20 "${manifestFile}"`, { encoding: 'utf8' });
        console.log('üìÑ Manifest preview:', manifestContent);
      }
      
      const instructionsFile = execSync(`find ${campaignPath} -name "usage-instructions.json" -type f`, { encoding: 'utf8' }).trim();
      if (instructionsFile) {
        console.log(`‚úÖ Usage instructions file created: ${instructionsFile}`);
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Could not find manifest files');
    }
    
    console.log('\nüéâ === REFACTORED SYSTEM TEST COMPLETED ===');
    console.log('‚úÖ All components working correctly');
    console.log('üîß System successfully refactored and modularized');
    
  } catch (error) {
    console.error('\n‚ùå === TEST FAILED ===');
    console.error('Error:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

testRefactoredSystem(); 