// –¢–ï–°–¢ ASSET MANIFEST GENERATION
const fs = require('fs').promises;
const path = require('path');

async function testAssetManifestGeneration() {
  console.log('üß™ –¢–ï–°–¢ ASSET MANIFEST GENERATION');
  console.log('===================================');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø:');
  console.log(`OPENAI_API_KEY: ${process.env.OPENAI_API_KEY ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
  console.log(`OPENAI_API_KEY –¥–ª–∏–Ω–∞: ${process.env.OPENAI_API_KEY?.length || 0}`);
  console.log(`UNSPLASH_ACCESS_KEY: ${process.env.UNSPLASH_ACCESS_KEY ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º figma-assets
  console.log('\n2Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê FIGMA-ASSETS:');
  try {
    const figmaAssetsPath = path.resolve('figma-assets');
    await fs.access(figmaAssetsPath);
    console.log(`‚úÖ figma-assets —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${figmaAssetsPath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ai-optimized-tags.json
    const tagsPath = path.join(figmaAssetsPath, 'ai-optimized-tags.json');
    await fs.access(tagsPath);
    console.log(`‚úÖ ai-optimized-tags.json —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
    
    // –ß–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const tagsStats = await fs.stat(tagsPath);
    console.log(`üìä ai-optimized-tags.json —Ä–∞–∑–º–µ—Ä: ${tagsStats.size} bytes`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å figma-assets: ${error.message}`);
  }
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º OpenAI API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
  console.log('\n3Ô∏è‚É£ –¢–ï–°–¢ OPENAI API:');
  if (process.env.OPENAI_API_KEY) {
    try {
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o-mini',
          messages: [
            {
              role: 'user',
              content: 'Test connection'
            }
          ],
          max_tokens: 10
        })
      });
      
      if (response.ok) {
        console.log(`‚úÖ OpenAI API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ (${response.status})`);
      } else {
        console.log(`‚ùå OpenAI API –æ—à–∏–±–∫–∞: ${response.status} ${response.statusText}`);
        const errorText = await response.text();
        console.log(`üìÑ –û—Ç–≤–µ—Ç: ${errorText.substring(0, 200)}...`);
      }
    } catch (error) {
      console.log(`‚ùå OpenAI API —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å: ${error.message}`);
    }
  } else {
    console.log(`‚ö†Ô∏è OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç API`);
  }
  
  // 4. –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è Asset Manifest
  console.log('\n4Ô∏è‚É£ –°–ò–ú–£–õ–Ø–¶–ò–Ø ASSET MANIFEST:');
  try {
    const campaignPath = './campaigns/campaign_1752739134448_5j9jw4jgcl6';
    const manifestsDir = path.join(campaignPath, 'assets', 'manifests');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ campaign
    await fs.access(campaignPath);
    console.log(`‚úÖ Campaign path —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${campaignPath}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º manifests –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    await fs.access(manifestsDir);
    console.log(`‚úÖ Manifests directory —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${manifestsDir}`);
    
    // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ manifests
    const manifestFiles = await fs.readdir(manifestsDir);
    console.log(`üìÅ –§–∞–π–ª—ã –≤ manifests: ${manifestFiles.length}`);
    manifestFiles.forEach(file => {
      console.log(`   - ${file}`);
    });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –±–∞–∑–æ–≤—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç
    const testManifest = {
      manifestId: `test_${Date.now()}`,
      assetManifest: {
        images: [{
          id: 'test-hero',
          path: '/test/hero.jpg',
          alt_text: 'Test image',
          usage: 'hero-section'
        }],
        icons: [],
        fonts: [{
          id: 'default-font',
          family: 'Arial, sans-serif',
          weights: ['400', '700']
        }]
      },
      testCreated: new Date().toISOString()
    };
    
    const testManifestPath = path.join(manifestsDir, 'test-asset-manifest.json');
    await fs.writeFile(testManifestPath, JSON.stringify(testManifest, null, 2));
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ–∑–¥–∞–Ω: ${testManifestPath}`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: ${error.message}`);
  }
  
  console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê:');
  console.log('–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã—à–µ.');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testAssetManifestGeneration().catch(console.error); 