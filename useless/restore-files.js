#!/usr/bin/env node

/**
 * –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–æ–º–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –º–∞—Å—Å–æ–≤–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 * –ë—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∏–∑ git —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
 */

const fs = require('fs');
const { execSync } = require('child_process');

class FileRestorer {
  constructor() {
    this.restoredFiles = new Set();
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
  getFilesWithSyntaxErrors() {
    try {
      execSync('npm run type-check', { stdio: 'pipe' });
      return [];
    } catch (error) {
      const output = error.stdout?.toString() || error.stderr?.toString() || '';
      const syntaxErrorLines = output.split('\n').filter(line => 
        line.includes('error TS1') && line.includes('):')
      );
      
      const files = new Set();
      syntaxErrorLines.forEach(line => {
        const match = line.match(/^(.+?)\(\d+,\d+\)/);
        if (match) {
          files.add(match[1]);
        }
      });
      
      return Array.from(files);
    }
  }

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª –∏–∑ git
  restoreFileFromGit(filePath) {
    try {
      console.log(`üîÑ Restoring ${filePath} from git...`);
      execSync(`git checkout HEAD -- "${filePath}"`, { stdio: 'pipe' });
      this.restoredFiles.add(filePath);
      return true;
    } catch (error) {
      console.warn(`‚ùå Could not restore ${filePath}: ${error.message}`);
      return false;
    }
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  applyBasicFixes(filePath) {
    try {
      const content = fs.readFileSync(filePath, 'utf8');
      let fixedContent = content;
      let modified = false;

      // –¢–æ–ª—å–∫–æ —Å–∞–º—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:
      
      // 1. –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–π
      fixedContent = fixedContent.replace(
        /(\w+):\s*([^,)]+)(,|\))/g,
        (match, paramName, paramType, separator) => {
          if (paramName.match(/^(params|options|config|context|request|data|input|result)$/)) {
            return `_${paramName}: ${paramType}${separator}`;
          }
          return match;
        }
      );

      // 2. Error instanceof checks
      fixedContent = fixedContent.replace(
        /error\.message/g,
        'error instanceof Error ? error.message : String(error)'
      );

      // 3. Simple null checks
      fixedContent = fixedContent.replace(
        /(\w+)\[(\d+)\](?!\s*=)/g,
        '($1 && $1[$2] ? $1[$2] : "")'
      );

      if (fixedContent !== content) {
        fs.writeFileSync(filePath, fixedContent, 'utf8');
        modified = true;
      }

      return modified;
    } catch (error) {
      console.warn(`‚ùå Could not apply basic fixes to ${filePath}: ${error.message}`);
      return false;
    }
  }

  // –ó–∞–ø—É—Å–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
  async run() {
    console.log('üîß Restoring files with syntax errors...');
    
    const syntaxErrorFiles = this.getFilesWithSyntaxErrors();
    console.log(`üìä Found ${syntaxErrorFiles.length} files with syntax errors`);

    if (syntaxErrorFiles.length === 0) {
      console.log('‚úÖ No syntax errors found!');
      return;
    }

    let restoredCount = 0;
    let fixedCount = 0;

    for (const filePath of syntaxErrorFiles) {
      console.log(`\nüìÅ Processing: ${filePath}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ git
      if (this.restoreFileFromGit(filePath)) {
        restoredCount++;
        
        // –ó–∞—Ç–µ–º –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if (this.applyBasicFixes(filePath)) {
          fixedCount++;
          console.log(`  ‚úÖ Applied basic fixes`);
        }
      }
    }

    console.log(`\nüéØ File restoration completed!`);
    console.log(`üìÅ Files restored: ${restoredCount}`);
    console.log(`üîß Files with basic fixes: ${fixedCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingSyntaxErrors = this.getFilesWithSyntaxErrors();
    console.log(`üìâ Remaining syntax error files: ${remainingSyntaxErrors.length}`);
    
    if (remainingSyntaxErrors.length === 0) {
      console.log('\n‚úÖ All syntax errors fixed! Now checking TypeScript errors...');
      try {
        const result = execSync('npm run type-check 2>&1 | grep -E "error TS[0-9]+" | wc -l', { encoding: 'utf8' });
        const errorCount = parseInt(result.trim());
        console.log(`üìä Total TypeScript errors: ${errorCount}`);
        
        if (errorCount > 0) {
          console.log('\nüöÄ Ready for next round of systematic error fixing!');
        }
      } catch (e) {
        // Ignore check errors
      }
    } else {
      console.log('\n‚ö†Ô∏è Some syntax errors remain. Manual intervention may be needed.');
      console.log('Remaining files with syntax errors:');
      remainingSyntaxErrors.slice(0, 10).forEach(file => console.log(`  - ${file}`));
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const restorer = new FileRestorer();
  restorer.run().catch(console.error);
}

module.exports = FileRestorer;