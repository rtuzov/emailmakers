/**
 * üéØ OPTIMIZATION SYSTEM DEMO - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * 
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:
 * –æ—Ç –∞–Ω–∞–ª–∏–∑–∞ –º–µ—Ç—Ä–∏–∫ –¥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å rollback –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.
 */

import { OptimizationService } from './optimization-service';
import { 
  OptimizationServiceConfig,
  MetricsSnapshot,
  AgentType 
} from './optimization-types';

// Local factory function to avoid circular dependency
function createOptimizationService(config?: Partial<OptimizationServiceConfig>) {
  return OptimizationService.getInstance(config);
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export async function demonstrateOptimizationSystem() {
  console.log('üöÄ Starting Optimization System Demonstration...\n');

  // 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
  const config: Partial<OptimizationServiceConfig> = {
    enabled: true,
    auto_optimization: false, // –ù–∞—á–∏–Ω–∞–µ–º —Å —Ä—É—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    require_approval_for_critical: true,
    max_auto_optimizations_per_day: 10,
    min_confidence_threshold: 85,
    metrics_collection_interval_ms: 30000, // 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –¥–µ–º–æ
    analysis_interval_ms: 60000, // 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è –¥–µ–º–æ
    integration: {
      enabled: true,
      auto_optimization_enabled: false,
      metrics_collection_interval_ms: 30000,
      optimization_interval_ms: 120000,
      require_human_approval_for_critical: true,
      max_auto_optimizations_per_hour: 3
    }
  };

  const optimizationService = createOptimizationService(config);

  try {
    // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    console.log('üìã Step 1: Initializing Optimization Service...');
    await optimizationService.initialize();
    
    const status = optimizationService.getStatus();
    console.log('‚úÖ Service Status:', status);
    console.log();

    // 3. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
    console.log('üîç Step 2: Analyzing System Performance...');
    const systemAnalysis = await optimizationService.analyzeSystem();
    
    console.log('üìä System Analysis Results:');
    console.log(`- Health Score: ${systemAnalysis.current_state.system_metrics.system_health_score}`);
    console.log(`- Trends Found: ${systemAnalysis.trends.length}`);
    console.log(`- Bottlenecks Identified: ${systemAnalysis.bottlenecks.length}`);
    console.log(`- Error Patterns: ${systemAnalysis.error_patterns.length}`);
    console.log(`- Predicted Issues: ${systemAnalysis.predicted_issues.length}`);
    console.log(`- Assessment: ${systemAnalysis.overall_health_assessment}`);
    console.log();

    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('üí° Step 3: Generating Optimization Recommendations...');
    const recommendations = await optimizationService.getRecommendations();
    
    console.log(`üìã Generated ${recommendations.length} recommendations:`);
    recommendations.forEach((rec, index) => {
      console.log(`${index + 1}. [${rec.priority.toUpperCase()}] ${rec.title}`);
      console.log(`   - Type: ${rec.type}`);
      console.log(`   - Expected Impact: ${rec.expected_impact.performance_improvement_percent}% improvement`);
      console.log(`   - Risk Level: ${rec.safety_assessment.risk_level}`);
      console.log(`   - Requires Approval: ${rec.requires_human_approval ? 'Yes' : 'No'}`);
      console.log();
    });

    // 5. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const safeRecommendations = recommendations.filter(r => 
      !r.requires_human_approval && 
      ['low', 'medium'].includes(r.safety_assessment.risk_level)
    );

    if (safeRecommendations.length > 0) {
      console.log('‚öôÔ∏è Step 4: Applying Safe Optimization...');
      const recommendationToApply = safeRecommendations[0];
      
      console.log(`Applying: ${recommendationToApply.title}`);
      const result = await optimizationService.applyRecommendation(recommendationToApply.id);
      
      console.log('‚úÖ Optimization Result:');
      console.log(`- Status: ${result.status}`);
      console.log(`- Applied At: ${result.applied_at}`);
      console.log(`- Actions Executed: ${result.actions_executed.length}`);
      console.log(`- Issues: ${result.issues_encountered.length}`);
      console.log();

      // 6. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è rollback (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      if (result.status === 'completed') {
        console.log('üîô Step 5: Demonstrating Rollback Capability...');
        console.log('(In production, rollback would be triggered by performance degradation)');
        
        try {
          const rollbackResult = await optimizationService.rollbackOptimization(result.optimization_id);
          console.log('‚úÖ Rollback Result:');
          console.log(`- Status: ${rollbackResult.status}`);
          console.log(`- Rollback Triggered: ${rollbackResult.rollback_triggered}`);
          console.log(`- Reason: ${rollbackResult.rollback_reason || 'Manual demonstration'}`);
          console.log();
        } catch (rollbackError) {
          console.log('‚ÑπÔ∏è Rollback demonstration skipped (expected in demo mode)');
          console.log();
        }
      }
    } else {
      console.log('‚ÑπÔ∏è Step 4: No safe recommendations available for auto-application');
      console.log('All recommendations require human approval or have high risk levels.');
      console.log();
    }

    // 7. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö –ø–æ—Ä–æ–≥–æ–≤
    console.log('üìä Step 6: Generating Dynamic Thresholds...');
    try {
      const dynamicThresholds = await optimizationService.generateDynamicThresholds();
      
      console.log('üéØ Dynamic Thresholds Generated:');
      console.log(`- Current Thresholds: ${Object.keys(dynamicThresholds.current).length} parameters`);
      console.log(`- Recommended Changes: ${dynamicThresholds.reasoning.length} adjustments`);
      console.log(`- Safety Assessment: ${dynamicThresholds.safety_check.risk_level} risk`);
      console.log();
    } catch (thresholdError) {
      console.log('‚ÑπÔ∏è Dynamic thresholds generation skipped (requires more historical data)');
      console.log();
    }

    // 8. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    console.log('üìã Step 7: Generating Optimization Report...');
    const report = await optimizationService.generateOptimizationReport(1); // –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    
    console.log('üìä Optimization Report Summary:');
    console.log(`- Report Period: ${report.analysis_period}`);
    console.log(`- Total Recommendations: ${report.recommendations.length}`);
    console.log(`- Applied Optimizations: ${report.applied_optimizations.length}`);
    console.log(`- Performance Improvement: ${report.performance_metrics.improvement_percentage}%`);
    console.log(`- Next Analysis: ${new Date(report.next_analysis_scheduled).toLocaleString()}`);
    console.log();

    // 9. –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    console.log('üìú Step 8: Reviewing Optimization History...');
    const history = optimizationService.getOptimizationHistory(5); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
    
    console.log(`üìö Recent Optimization History (${history.length} items):`);
    history.forEach((item, index) => {
      console.log(`${index + 1}. ${item.optimization_id} - ${item.status} (${new Date(item.applied_at).toLocaleTimeString()})`);
    });
    console.log();

    // 10. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    console.log('üéâ Step 9: Optimization System Demonstration Complete!');
    console.log('\nüìà Key Achievements:');
    console.log('‚úÖ System analysis completed successfully');
    console.log('‚úÖ Recommendations generated and categorized by risk');
    console.log('‚úÖ Safe optimization applied (if available)');
    console.log('‚úÖ Rollback capability demonstrated');
    console.log('‚úÖ Dynamic thresholds generated');
    console.log('‚úÖ Comprehensive reporting functional');
    
    console.log('\nüöÄ Ready for Production Deployment!');
    console.log('Next Steps:');
    console.log('1. Enable auto_optimization for autonomous operation');
    console.log('2. Integrate with monitoring dashboards');
    console.log('3. Set up alerting for critical optimizations');
    console.log('4. Configure ML-based pattern learning');

  } catch (error) {
    console.error('‚ùå Demonstration failed:', error);
    throw error;
  } finally {
    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    console.log('\nüßπ Cleaning up resources...');
    await optimizationService.shutdown();
    console.log('‚úÖ Cleanup complete.');
  }
}

/**
 * –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
 */
export async function simulateRealWorldOptimization() {
  console.log('üåç Starting Real-World Optimization Simulation...\n');

  const service = createOptimizationService({
    enabled: true,
    auto_optimization: true, // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é
    require_approval_for_critical: true,
    max_auto_optimizations_per_day: 50,
    min_confidence_threshold: 90, // –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    metrics_collection_interval_ms: 60000, // 1 –º–∏–Ω—É—Ç–∞
    analysis_interval_ms: 300000 // 5 –º–∏–Ω—É—Ç
  });

  try {
    await service.initialize();
    
    console.log('üîÑ Simulation: Running continuous optimization for 30 seconds...');
    console.log('(In production, this would run 24/7)');
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ–±—ã—Ç–∏–π
    service.on('analysis_completed', (analysis) => {
      console.log(`üìä Analysis completed - Health Score: ${analysis.current_state.system_metrics.system_health_score}`);
    });
    
    service.on('new_recommendations_available', (recommendations) => {
      console.log(`üí° New recommendations: ${recommendations.length} items`);
    });
    
    service.on('automated_optimization_completed', (results) => {
      console.log(`‚öôÔ∏è Auto-optimization completed: ${results.length} optimizations applied`);
    });

    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥
    await new Promise(resolve => setTimeout(resolve, 30000));
    
    console.log('\nüìä Simulation Results:');
    const finalStatus = service.getStatus();
    console.log('Final Status:', finalStatus);

  } catch (error) {
    console.error('‚ùå Simulation failed:', error);
  } finally {
    await service.shutdown();
  }
}

/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
 */
export async function demonstrateSystemIntegration() {
  console.log('üîó Demonstrating System Integration...\n');

  const service = createOptimizationService();

  try {
    await service.initialize();

    console.log('üì° Integration Points:');
    console.log('‚úÖ ValidationMonitor - Real-time validation metrics');
    console.log('‚úÖ MetricsService - Infrastructure and performance metrics');
    console.log('‚úÖ PerformanceMonitor - System resource monitoring');
    console.log();

    console.log('üîÑ Event-Driven Optimization:');
    console.log('- Critical validation failures trigger immediate analysis');
    console.log('- Performance degradation triggers rollback evaluation');
    console.log('- Resource exhaustion triggers scaling recommendations');
    console.log();

    console.log('üìä Metrics Collection:');
    console.log('- Agent performance metrics (response time, success rate, throughput)');
    console.log('- System metrics (CPU, memory, health score)');
    console.log('- Validation metrics (success rate, quality scores)');
    console.log();

    console.log('üõ°Ô∏è Safety Mechanisms:');
    console.log('- Human approval required for critical changes');
    console.log('- Automatic rollback on performance degradation');
    console.log('- Confidence thresholds for pattern detection');
    console.log('- Rate limiting for optimization frequency');

  } finally {
    await service.shutdown();
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export {
  demonstrateOptimizationSystem as runDemo,
  simulateRealWorldOptimization as runSimulation,
  demonstrateSystemIntegration as showIntegration
};