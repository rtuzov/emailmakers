/**
 * üîç MONITORING INTEGRATION TESTS
 * 
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞–º–∏
 * Zero tolerance –∫ –æ—à–∏–±–∫–∞–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */

// @ts-nocheck

import { describe, test, expect, beforeEach, jest } from '@jest/globals';
import { ValidationMonitor } from '../monitoring/validation-monitor';
import { HandoffValidator } from '../validators/agent-handoff-validator';
import { AICorrector } from '../validators/ai-corrector';
import { createValidContentToDesignData } from './setup';

describe('üîç Monitoring Integration', () => {
  let monitor: ValidationMonitor;
  let validator: HandoffValidator;
  let mockAICorrector: AICorrector;

  beforeEach(() => {
    // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitor = ValidationMonitor.getInstance();
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω –±—ã–ª –∑–∞–ø—É—â–µ–Ω
    monitor.stopMonitoring();
    
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    monitor.cleanup();
    
    // –ú–æ–∫ AI –∫–æ—Ä—Ä–µ–∫—Ç–æ—Ä–∞
    mockAICorrector = {
      correctData: jest.fn().mockResolvedValue({
        ...createValidContentToDesignData(),
        corrected: true
      })
    } as any;
    
    validator = HandoffValidator.getInstance(mockAICorrector);
  });

  describe('üìä –ú–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', () => {
    test('–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é', async () => {
      const validData = createValidContentToDesignData();
      
      const result = await validator.validateContentToDesign(validData, false);
      
      expect(result.isValid).toBe(true);
      
      const metrics = monitor.getMetrics();
      expect(metrics.totalValidations).toBe(1);
      expect(metrics.successfulValidations).toBe(1);
      expect(metrics.failedValidations).toBe(0);
      expect(metrics.successRate).toBe(100);
    });

    test('–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–µ—É–¥–∞—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é', async () => {
      const invalidData = {
        invalid: 'data structure'
      };
      
      const result = await validator.validateContentToDesign(invalidData, false);
      
      expect(result.isValid).toBe(false);
      
      const metrics = monitor.getMetrics();
      expect(metrics.totalValidations).toBe(1);
      expect(metrics.successfulValidations).toBe(0);
      expect(metrics.failedValidations).toBe(1);
      expect(metrics.successRate).toBe(0);
    });

    test('–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—É—é AI –∫–æ—Ä—Ä–µ–∫—Ü–∏—é', async () => {
      const invalidData = {
        content_package: {
          complete_content: {
            subject: '', // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π subject
            preheader: 'Test',
            body: 'Test',
            cta: 'Test'
          }
        }
      };
      
      const result = await validator.validateContentToDesign(invalidData, true);
      
      // AI –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å
      expect(mockAICorrector.correctData).toHaveBeenCalled();
      
      const metrics = monitor.getMetrics();
      expect(metrics.totalCorrections).toBe(1);
      expect(metrics.successfulCorrections).toBe(1);
      expect(metrics.correctionSuccessRate).toBe(100);
    });
  });

  describe('üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è', () => {
    test('–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', async () => {
      // –ú–æ–∫–∞–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
      const slowValidation = jest.fn().mockImplementation(() => {
        return new Promise(resolve => {
          setTimeout(() => resolve(createValidContentToDesignData()), 1500); // 1.5 —Å–µ–∫—É–Ω–¥—ã
        });
      });
      
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏
      monitor.recordValidation({
        agentId: 'test-agent',
        agentType: 'content',
        success: true,
        duration: 1500, // –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç –≤ 1000–º—Å
        validationType: 'test-validation'
      });
      
      const metrics = monitor.getMetrics();
      const criticalEvents = metrics.criticalEvents.filter(e => e.type === 'timeout');
      
      expect(criticalEvents.length).toBeGreaterThan(0);
      expect(criticalEvents[0].severity).toBe('critical');
      expect(criticalEvents[0].message).toContain('Validation timeout');
    });

    test('–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–∞–ª–µ AI –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏', async () => {
      // –ú–æ–∫–∞–µ–º –ø—Ä–æ–≤–∞–ª AI –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
      const failingCorrector = {
        correctData: jest.fn().mockRejectedValue(new Error('AI correction failed'))
      } as any;
      
      const validatorWithFailingCorrector = HandoffValidator.getInstance(failingCorrector);
      
      const invalidData = { invalid: 'structure' };
      
      const result = await validatorWithFailingCorrector.validateContentToDesign(invalidData, true);
      
      expect(result.isValid).toBe(false);
      
      const metrics = monitor.getMetrics();
      const correctionFailures = metrics.criticalEvents.filter(e => e.type === 'correction_failure');
      
      expect(correctionFailures.length).toBeGreaterThan(0);
    });
  });

  describe('üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–≥–µ–Ω—Ç–æ–≤', () => {
    test('–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞', async () => {
      const validData = createValidContentToDesignData();
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–π
      await validator.validateContentToDesign(validData, false);
      await validator.validateContentToDesign(validData, false);
      await validator.validateContentToDesign(validData, false);
      
      const agentMetrics = monitor.getAgentMetrics('content-specialist');
      
      expect(agentMetrics).toBeDefined();
      expect(agentMetrics!.totalExecutions).toBe(3);
      expect(agentMetrics!.successfulExecutions).toBe(3);
      expect(agentMetrics!.validationSuccessRate).toBe(100);
      expect(agentMetrics!.agentType).toBe('content');
    });

    test('–≤—ã—á–∏—Å–ª—è–µ—Ç —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞', async () => {
      const validData = createValidContentToDesignData();
      
      // –ú–æ–∫–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
      monitor.recordValidation({
        agentId: 'test-agent',
        agentType: 'content',
        success: true,
        duration: 100,
        validationType: 'test'
      });
      
      monitor.recordValidation({
        agentId: 'test-agent',
        agentType: 'content',
        success: true,
        duration: 200,
        validationType: 'test'
      });
      
      const agentMetrics = monitor.getAgentMetrics('test-agent');
      
      expect(agentMetrics!.averageExecutionTime).toBe(150); // (100 + 200) / 2
    });
  });

  describe('‚ö° Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', () => {
    test('–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥', () => {
      expect(() => {
        monitor.startMonitoring({
          metricsInterval: 1000,
          healthCheckInterval: 2000
        });
      }).not.toThrow();
      
      expect(() => {
        monitor.stopMonitoring();
      }).not.toThrow();
    });

    test('–æ–±–Ω–æ–≤–ª—è–µ—Ç alert thresholds', () => {
      const newThresholds = {
        maxFailureRate: 10,
        minSuccessRate: 90
      };
      
      expect(() => {
        monitor.updateAlertThresholds(newThresholds);
      }).not.toThrow();
    });

    test('–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã', () => {
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–∞—Ü–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤
      monitor.recordValidation({
        agentId: 'trend-test',
        agentType: 'content',
        success: true,
        duration: 500,
        validationType: 'trend-analysis'
      });
      
      monitor.recordValidation({
        agentId: 'trend-test',
        agentType: 'content',
        success: false,
        duration: 800,
        validationType: 'trend-analysis'
      });
      
      const trends = monitor.getSystemTrends(5);
      
      expect(trends).toBeDefined();
      expect(trends.recommendation).toBeDefined();
      expect(typeof trends.recommendation).toBe('string');
    });
  });

  describe('üéØ Zero Tolerance –∞–ª–µ—Ä—Ç—ã', () => {
    test('–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –ø—Ä–∏ –Ω–∏–∑–∫–æ–º success rate', () => {
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≤–∞–ª—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      for (let i = 0; i < 20; i++) {
        monitor.recordValidation({
          agentId: `failing-agent-${i}`,
          agentType: 'content',
          success: false,
          duration: 500,
          validationType: 'failure-test',
          errorDetails: [{ message: 'Test failure' }]
        });
      }
      
      const metrics = monitor.getMetrics();
      expect(metrics.successRate).toBeLessThan(95); // –ù–∏–∂–µ –ø–æ—Ä–æ–≥–∞
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∞–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
      const systemErrors = metrics.criticalEvents.filter(e => e.type === 'system_error');
      expect(systemErrors.length).toBeGreaterThan(0);
    });

    test('—Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è', () => {
      // –°–æ–∑–¥–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ
      monitor.recordCriticalEvent({
        type: 'validation_failure',
        severity: 'critical',
        message: 'Test critical event',
        details: { test: true }
      });
      
      const metrics = monitor.getMetrics();
      const unresolvedEvents = metrics.criticalEvents.filter(e => !e.resolved);
      expect(unresolvedEvents.length).toBe(1);
      
      const eventId = unresolvedEvents[0].id;
      
      // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
      monitor.resolveCriticalEvent(eventId, 'Manually resolved for testing');
      
      const updatedMetrics = monitor.getMetrics();
      const resolvedEvent = updatedMetrics.criticalEvents.find(e => e.id === eventId);
      
      expect(resolvedEvent!.resolved).toBe(true);
      expect(resolvedEvent!.resolutionDetails).toBe('Manually resolved for testing');
    });
  });

  describe('üîç System Health', () => {
    test('–≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã', () => {
      // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ health checks
      monitor.startMonitoring({
        metricsInterval: 100,
        healthCheckInterval: 200
      });
      
      // –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è health check
      return new Promise<void>((resolve) => {
        monitor.once('health_check_completed', (healthStatus) => {
          expect(healthStatus).toBeDefined();
          expect(healthStatus.status).toBeDefined();
          expect(healthStatus.healthScore).toBeGreaterThanOrEqual(0);
          expect(healthStatus.healthScore).toBeLessThanOrEqual(100);
          
          monitor.stopMonitoring();
          resolve();
        });
      });
    });

    test('–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é', () => {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –≤ —Å–∏—Å—Ç–µ–º–µ
      monitor.recordValidation({
        agentId: 'slow-agent',
        agentType: 'content',
        success: false,
        duration: 2000, // –ú–µ–¥–ª–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        validationType: 'slow-test',
        errorDetails: [{ message: 'Slow validation' }]
      });
      
      const trends = monitor.getSystemTrends(1);
      expect(trends.recommendation).toBeDefined();
      expect(trends.recommendation.length).toBeGreaterThan(0);
    });
  });

  describe('üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö', () => {
    test('–æ—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –º–µ—Ç—Ä–∏–∫–∏', () => {
      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      monitor.recordValidation({
        agentId: 'cleanup-test',
        agentType: 'content',
        success: true,
        duration: 500,
        validationType: 'cleanup-test'
      });
      
      expect(() => {
        monitor.cleanup();
      }).not.toThrow();
    });
  });
});