/**
 * ü§ñ –¢–ï–°–¢–´ AI –ö–û–†–†–ï–ö–¶–ò–ò –î–ê–ù–ù–´–•
 * 
 * Comprehensive testing suite –¥–ª—è —Å–∏—Å—Ç–µ–º—ã AI –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å AI –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤
 */

import { describe, test, expect, beforeEach, jest } from '@jest/globals';
import { AICorrector, HandoffType } from '../validators/ai-corrector';
import { CorrectionSuggestion, AGENT_CONSTANTS } from '../types/base-agent-types';

// Mock OpenAI Agent –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
jest.mock('@openai/agents', () => ({
  Agent: jest.fn().mockImplementation(() => ({})),
  run: jest.fn()
}));

import { run } from '@openai/agents';

describe('ü§ñ AI Correction System Tests', () => {
  let aiCorrector: AICorrector;

  beforeEach(() => {
    aiCorrector = new AICorrector();
    jest.clearAllMocks();
  });

  describe('üìù Content-to-Design Correction', () => {
    test('‚úÖ –î–æ–ª–∂–µ–Ω –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –ø—É—Å—Ç—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è', async () => {
      // Mock —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç AI
      const mockAIResponse = {
        content_package: {
          complete_content: {
            subject: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
            preheader: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π preheader —Å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º',
            body: '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–∏—Å—å–º–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –∏ –ø—Ä–∏–∑—ã–≤–æ–º –∫ –¥–µ–π—Å—Ç–≤–∏—é.',
            cta: '–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º'
          },
          content_metadata: {
            language: 'ru',
            tone: 'friendly',
            word_count: 20,
            reading_time: 1
          },
          brand_guidelines: {
            voice_tone: 'professional',
            key_messages: ['–∫–∞—á–µ—Å—Ç–≤–æ', '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å'],
            compliance_notes: []
          }
        },
        design_requirements: {
          template_type: 'promotional',
          visual_priority: 'balanced',
          layout_preferences: ['responsive', 'clean'],
          color_scheme: 'warm_inviting'
        },
        campaign_context: {
          topic: '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
          target_audience: 'travelers',
          urgency_level: 'medium'
        },
        trace_id: 'cnt-' + Date.now() + '-corrected',
        timestamp: new Date().toISOString()
      };

      (run as any).mockResolvedValue(JSON.stringify(mockAIResponse));

      const invalidData = {
        content_package: {
          complete_content: {
            subject: '', // –ü—É—Å—Ç–æ–π subject
            preheader: '',
            body: '',
            cta: ''
          }
        }
      };

      const suggestions: CorrectionSuggestion[] = [
        {
          field: 'content_package.complete_content.subject',
          issue: '–ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
          correctionPrompt: '–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è email –∫–∞–º–ø–∞–Ω–∏–∏',
          priority: 'high'
        },
        {
          field: 'content_package.complete_content.cta',
          issue: '–ü—É—Å—Ç–æ–π CTA',
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å —á–µ—Ç–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é',
          correctionPrompt: '–°–æ–∑–¥–∞–π—Ç–µ —á–µ—Ç–∫–∏–π –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é',
          priority: 'high'
        }
      ];

      const correctedData = await aiCorrector.correctData(
        invalidData,
        suggestions,
        'content-to-design'
      );

      expect(correctedData).toBeDefined();
      expect(correctedData.content_package.complete_content.subject).toBe('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
      expect(correctedData.content_package.complete_content.cta).toBe('–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º');
      expect(run).toHaveBeenCalledTimes(1);
    });

    test('üîß –î–æ–ª–∂–µ–Ω –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–µ —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö', async () => {
      const mockAIResponse = {
        content_package: {
          content_metadata: {
            language: 'ru', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 'invalid-lang'
            tone: 'friendly',
            word_count: 15, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞
            reading_time: 1
          }
        },
        design_requirements: {
          template_type: 'promotional', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 'invalid-type'
          visual_priority: 'balanced',
          layout_preferences: ['responsive'],
          color_scheme: 'warm_inviting'
        },
        trace_id: 'cnt-' + Date.now() + '-uuid-format', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç
        timestamp: new Date().toISOString() // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
      };

      (run as any).mockResolvedValue(`\`\`\`json\n${JSON.stringify(mockAIResponse)}\n\`\`\``);

      const invalidData = {
        content_package: {
          content_metadata: {
            language: 'invalid-lang',
            tone: 'friendly',
            word_count: -5,
            reading_time: 1
          }
        },
        design_requirements: {
          template_type: 'invalid-type',
          visual_priority: 'balanced',
          layout_preferences: ['responsive'],
          color_scheme: 'warm_inviting'
        },
        trace_id: 'invalid-id-format',
        timestamp: 'invalid-date'
      };

      const suggestions: CorrectionSuggestion[] = [
        {
          field: 'content_package.content_metadata.language',
          issue: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞',
          suggestion: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (ru –∏–ª–∏ en)',
          correctionPrompt: '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω—ã–π',
          priority: 'high'
        },
        {
          field: 'content_package.content_metadata.word_count',
          issue: '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤',
          suggestion: '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ',
          correctionPrompt: '–ü–æ–¥—Å—á–∏—Ç–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤',
          priority: 'medium'
        }
      ];

      const correctedData = await aiCorrector.correctData(
        invalidData,
        suggestions,
        'content-to-design'
      );

      expect(correctedData).toBeDefined();
      expect(correctedData.content_package.content_metadata.language).toBe('ru');
      expect(correctedData.content_package.content_metadata.word_count).toBe(15);
      expect(correctedData.design_requirements.template_type).toBe('promotional');
    });

    test('‚ùå –î–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å null –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫', async () => {
      // Mock AI –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç
      (run as any).mockResolvedValue('Invalid response');

      const invalidData = { invalid: 'data' };
      const suggestions: CorrectionSuggestion[] = [];

      // –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞
      let result = await aiCorrector.correctData(invalidData, suggestions, 'content-to-design');
      expect(result).toBeNull();

      // –í—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞
      result = await aiCorrector.correctData(invalidData, suggestions, 'content-to-design');
      expect(result).toBeNull();

      // –¢—Ä–µ—Ç—å—è –ø–æ–ø—ã—Ç–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–π)
      result = await aiCorrector.correctData(invalidData, suggestions, 'content-to-design');
      expect(result).toBeNull();

      // –ß–µ—Ç–≤–µ—Ä—Ç–∞—è –ø–æ–ø—ã—Ç–∫–∞ (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞)
      result = await aiCorrector.correctData(invalidData, suggestions, 'content-to-design');
      expect(result).toBeNull();

      expect(run).toHaveBeenCalledTimes(3); // –¢–æ–ª—å–∫–æ 3 –ø–æ–ø—ã—Ç–∫–∏
    });
  });

  describe('üé® Design-to-Quality Correction', () => {
    test('üìè –î–æ–ª–∂–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤', async () => {
      const mockAIResponse = {
        email_package: {
          html_output: '<!DOCTYPE html><html><head><title>Optimized</title></head><body><h1>Optimized Email</h1><p>Content optimized for size.</p></body></html>', // –°–∂–∞—Ç—ã–π HTML
          rendering_metadata: {
            template_type: 'promotional',
            responsive_design: true,
            dark_mode_support: false,
            rendering_time_ms: 400, // –£–ª—É—á—à–µ–Ω–æ —Å 2000ms
            total_size_kb: 80 // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 150KB
          }
        },
        design_context: {
          visual_elements: ['header', 'content'],
          color_palette: ['#2B5CE6'],
          typography_choices: ['Arial'],
          layout_structure: 'standard'
        },
        brand_compliance: {
          guidelines_followed: true,
          brand_consistency_score: 90,
          deviation_notes: []
        },
        trace_id: 'dsn-' + Date.now() + '-optimized',
        timestamp: new Date().toISOString()
      };

      (run as any).mockResolvedValue(JSON.stringify(mockAIResponse));

      const oversizedData = {
        email_package: {
          html_output: '<!DOCTYPE html><html><body>' + 'x'.repeat(200000) + '</body></html>', // –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
          rendering_metadata: {
            rendering_time_ms: 2000, // –°–ª–∏—à–∫–æ–º –º–µ–¥–ª–µ–Ω–Ω–æ
            total_size_kb: 150 // –ü—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç 100KB
          }
        }
      };

      const suggestions: CorrectionSuggestion[] = [
        {
          field: 'email_package.rendering_metadata.total_size_kb',
          issue: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞',
          suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–∂–∞—Ç—å HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ <100KB',
          correctionPrompt: '–°–æ–∂–º–∏—Ç–µ HTML –∫–æ–Ω—Ç–µ–Ω—Ç, —É–¥–∞–ª–∏—Ç–µ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–¥ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –º–µ–Ω–µ–µ 100KB',
          priority: 'high'
        },
        {
          field: 'email_package.rendering_metadata.rendering_time_ms',
          issue: '–ú–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞',
          suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ <1000ms',
          correctionPrompt: '–£–ø—Ä–æ—Å—Ç–∏—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É HTML –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞',
          priority: 'medium'
        }
      ];

      const correctedData = await aiCorrector.correctData(
        oversizedData,
        suggestions,
        'design-to-quality'
      );

      expect(correctedData).toBeDefined();
      expect(correctedData.email_package.rendering_metadata.total_size_kb).toBeLessThanOrEqual(100);
      expect(correctedData.email_package.rendering_metadata.rendering_time_ms).toBeLessThan(1000);
    });

    test('üîß –î–æ–ª–∂–µ–Ω –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É', async () => {
      const mockAIResponse = {
        email_package: {
          html_output: '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"><html><head><meta charset="UTF-8"><title>Fixed Email</title></head><body><h1>Fixed Email Structure</h1><p>Properly structured HTML content.</p></body></html>', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π HTML
          mjml_source: '<mjml><mj-body><mj-section><mj-column><mj-text>Fixed</mj-text></mj-column></mj-section></mj-body></mjml>' // –í–∞–ª–∏–¥–Ω—ã–π MJML
        }
      };

      (run as any).mockResolvedValue(JSON.stringify(mockAIResponse));

      const brokenData = {
        email_package: {
          html_output: '<div>Broken HTML without DOCTYPE', // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π HTML
          mjml_source: '<mjml><invalid-tag>Broken MJML</invalid-tag></mjml>' // –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π MJML
        }
      };

      const suggestions: CorrectionSuggestion[] = [
        {
          field: 'email_package.html_output',
          issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DOCTYPE –∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DOCTYPE –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
          correctionPrompt: '–°–æ–∑–¥–∞–π—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π HTML —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º DOCTYPE, –º–µ—Ç–∞—Ç–µ–≥–∞–º–∏ –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–ª—è email',
          priority: 'high'
        }
      ];

      const correctedData = await aiCorrector.correctData(
        brokenData,
        suggestions,
        'design-to-quality'
      );

      expect(correctedData).toBeDefined();
      expect(correctedData.email_package.html_output).toContain('<!DOCTYPE');
      expect(correctedData.email_package.html_output).toContain('<html>');
      expect(correctedData.email_package.html_output).toContain('<head>');
      expect(correctedData.email_package.html_output).toContain('<body>');
    });
  });

  describe('üîç Quality-to-Delivery Correction', () => {
    test('üìä –î–æ–ª–∂–µ–Ω –ø–æ–≤—ã—à–∞—Ç—å quality scores –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π', async () => {
      const mockAIResponse = {
        quality_assessment: {
          overall_score: 75, // –ü–æ–≤—ã—à–µ–Ω–æ —Å 50 –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ 70+
          html_validation: {
            w3c_compliant: true, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å false
            validation_errors: [], // –û—á–∏—â–µ–Ω—ã –æ—à–∏–±–∫–∏
            semantic_correctness: true
          },
          email_compliance: {
            client_compatibility_score: 95, // –£–ª—É—á—à–µ–Ω–æ —Å 60
            spam_score: 2, // –°–Ω–∏–∂–µ–Ω–æ —Å 8
            deliverability_rating: 'excellent' // –£–ª—É—á—à–µ–Ω–æ —Å 'poor'
          },
          accessibility: {
            wcag_aa_compliant: true, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å false
            accessibility_score: 85, // –ü–æ–≤—ã—à–µ–Ω–æ —Å 40
            screen_reader_compatible: true
          },
          performance: {
            load_time_ms: 800, // –£–ª—É—á—à–µ–Ω–æ —Å 3000
            file_size_kb: 95, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 150
            image_optimization_score: 90, // –£–ª—É—á—à–µ–Ω–æ —Å 30
            css_efficiency_score: 85 // –£–ª—É—á—à–µ–Ω–æ —Å 25
          }
        },
        test_results: {
          cross_client_tests: [
            { client: 'gmail', status: 'passed', score: 95 }, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            { client: 'outlook', status: 'passed', score: 90 } // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
          ],
          device_compatibility: [
            { device: 'desktop', status: 'passed' }, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            { device: 'mobile', status: 'passed' } // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
          ],
          rendering_verification: {
            screenshots_generated: true, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            visual_regression_passed: true, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            rendering_consistency_score: 92 // –£–ª—É—á—à–µ–Ω–æ —Å 20
          }
        },
        optimization_applied: {
          performance_optimizations: ['minification', 'compression', 'image_optimization'], // –î–æ–±–∞–≤–ª–µ–Ω—ã
          code_minification: true, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
          image_compression: true, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
          css_inlining: true // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        },
        trace_id: 'qlt-' + Date.now() + '-corrected',
        timestamp: new Date().toISOString()
      };

      (run as any).mockResolvedValue(JSON.stringify(mockAIResponse));

      const lowQualityData = {
        quality_assessment: {
          overall_score: 50, // –ù–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
          html_validation: {
            w3c_compliant: false,
            validation_errors: ['Missing DOCTYPE'],
            semantic_correctness: false
          },
          accessibility: {
            wcag_aa_compliant: false,
            accessibility_score: 40
          },
          performance: {
            load_time_ms: 3000,
            file_size_kb: 150
          }
        }
      };

      const suggestions: CorrectionSuggestion[] = [
        {
          field: 'quality_assessment.overall_score',
          issue: 'Quality score –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ (70)',
          suggestion: '–ü–æ–≤—ã—Å–∏—Ç—å –æ–±—â–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ 70+',
          correctionPrompt: '–£–ª—É—á—à–∏—Ç–µ –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–ª–∞ 70+',
          priority: 'high'
        },
        {
          field: 'quality_assessment.accessibility.wcag_aa_compliant',
          issue: '–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç WCAG AA',
          suggestion: '–û–±–µ—Å–ø–µ—á–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ WCAG AA',
          correctionPrompt: '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è WCAG AA',
          priority: 'high'
        }
      ];

      const correctedData = await aiCorrector.correctData(
        lowQualityData,
        suggestions,
        'quality-to-delivery'
      );

      expect(correctedData).toBeDefined();
      expect(correctedData.quality_assessment.overall_score).toBeGreaterThanOrEqual(AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_QUALITY_SCORE);
      expect(correctedData.quality_assessment.html_validation.w3c_compliant).toBe(true);
      expect(correctedData.quality_assessment.accessibility.wcag_aa_compliant).toBe(true);
      expect(correctedData.quality_assessment.performance.file_size_kb).toBeLessThanOrEqual(100);
    });

    test('üö´ –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å spam score –∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å', async () => {
      const mockAIResponse = {
        quality_assessment: {
          email_compliance: {
            client_compatibility_score: 95, // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å 60
            spam_score: 1, // –°–Ω–∏–∂–µ–Ω–æ —Å 9
            deliverability_rating: 'excellent' // –£–ª—É—á—à–µ–Ω–æ
          },
          performance: {
            load_time_ms: 600, // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
            file_size_kb: 45 // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
          }
        },
        test_results: {
          cross_client_tests: [
            { client: 'gmail', status: 'passed', score: 98 },
            { client: 'outlook', status: 'passed', score: 94 },
            { client: 'apple_mail', status: 'passed', score: 96 }
          ]
        }
      };

      (run as any).mockResolvedValue(JSON.stringify(mockAIResponse));

      const problematicData = {
        quality_assessment: {
          email_compliance: {
            client_compatibility_score: 60, // –ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
            spam_score: 9, // –í—ã—Å–æ–∫–∏–π spam score
            deliverability_rating: 'poor'
          }
        }
      };

      const suggestions: CorrectionSuggestion[] = [
        {
          field: 'quality_assessment.email_compliance.spam_score',
          issue: '–í—ã—Å–æ–∫–∏–π spam score (9)',
          suggestion: '–°–Ω–∏–∑–∏—Ç—å spam score –¥–æ ‚â§3',
          correctionPrompt: '–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è spam score –¥–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è ‚â§3',
          priority: 'high'
        },
        {
          field: 'quality_assessment.email_compliance.client_compatibility_score',
          issue: '–ù–∏–∑–∫–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å email –∫–ª–∏–µ–Ω—Ç–∞–º–∏',
          suggestion: '–ü–æ–≤—ã—Å–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ ‚â•95%',
          correctionPrompt: '–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å email –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è 95%+ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
          priority: 'high'
        }
      ];

      const correctedData = await aiCorrector.correctData(
        problematicData,
        suggestions,
        'quality-to-delivery'
      );

      expect(correctedData).toBeDefined();
      expect(correctedData.quality_assessment.email_compliance.spam_score).toBeLessThanOrEqual(3);
      expect(correctedData.quality_assessment.email_compliance.client_compatibility_score).toBeGreaterThanOrEqual(95);
    });
  });

  describe('üõ°Ô∏è Error Handling & Resilience', () => {
    test('‚ùå –î–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Å–±–æ–π AI —Å–µ—Ä–≤–∏—Å–∞', async () => {
      // Mock —Å–±–æ—è AI
      (run as any).mockRejectedValue(new Error('AI service unavailable'));

      const invalidData = { test: 'data' };
      const suggestions: CorrectionSuggestion[] = [];

      const result = await aiCorrector.correctData(invalidData, suggestions, 'content-to-design');

      expect(result).toBeNull();
    });

    test('üîç –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ AI', async () => {
      const testData = { test: 'corrected' };
      
      // –¢–µ—Å—Ç JSON –≤ markdown –±–ª–æ–∫–µ
      (run as any).mockResolvedValue(`\`\`\`json\n${JSON.stringify(testData)}\n\`\`\``);
      let result = await aiCorrector.correctData({}, [], 'content-to-design');
      expect(result).toEqual(testData);

      // –¢–µ—Å—Ç —á–∏—Å—Ç–æ–≥–æ JSON
      (run as any).mockResolvedValue(JSON.stringify(testData));
      result = await aiCorrector.correctData({}, [], 'content-to-design');
      expect(result).toEqual(testData);

      // –¢–µ—Å—Ç JSON –≤ —Ç–µ–∫—Å—Ç–µ
      (run as any).mockResolvedValue(`Here is the corrected data: ${JSON.stringify(testData)} - please use it.`);
      result = await aiCorrector.correctData({}, [], 'content-to-design');
      expect(result).toEqual(testData);
    });

    test('üßπ –î–æ–ª–∂–µ–Ω –æ—á–∏—â–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ—Ä—Ä–µ–∫—Ü–∏–π', () => {
      const initialStats = aiCorrector.getCorrectionStats();
      
      aiCorrector.clearCorrectionHistory();
      
      const clearedStats = aiCorrector.getCorrectionStats();
      expect(clearedStats.activeCorrections).toBe(0);
      expect(clearedStats.totalAttempts).toBe(0);
    });

    test('üìä –î–æ–ª–∂–µ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ—Ä—Ä–µ–∫—Ü–∏–π', async () => {
      // Mock —É—Å–ø–µ—à–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
      (run as any).mockResolvedValue('{"corrected": "data"}');

      await aiCorrector.correctData({}, [], 'content-to-design');
      await aiCorrector.correctData({}, [], 'design-to-quality');

      const stats = aiCorrector.getCorrectionStats();
      expect(stats.activeCorrections).toBeGreaterThanOrEqual(0);
      expect(stats.totalAttempts).toBeGreaterThanOrEqual(2);
    });
  });

  describe('üéØ Prompt Engineering Tests', () => {
    test('üìù –î–æ–ª–∂–µ–Ω –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ handoff', async () => {
      const suggestions: CorrectionSuggestion[] = [
        {
          field: 'test_field',
          issue: 'Test issue',
          suggestion: 'Test suggestion',
          correctionPrompt: 'Test correction prompt',
          priority: 'high'
        }
      ];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ AI –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
      (run as any).mockImplementation((agent, prompt) => {
        expect(prompt).toContain('–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ö–û–†–†–ï–ö–¶–ò–Ø –î–ê–ù–ù–´–•');
        
        if (prompt.includes('content-to-design')) {
          expect(prompt).toContain('Subject: 1-100 —Å–∏–º–≤–æ–ª–æ–≤');
          expect(prompt).toContain('CTA: 1-50 —Å–∏–º–≤–æ–ª–æ–≤');
        } else if (prompt.includes('design-to-quality')) {
          expect(prompt).toContain('HTML –∫–æ–Ω—Ç–µ–Ω—Ç: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–∞–ª–∏–¥–Ω—ã–π');
          expect(prompt).toContain('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –°–¢–†–û–ì–û ‚â§100KB');
        } else if (prompt.includes('quality-to-delivery')) {
          expect(prompt).toContain('Quality score: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û ‚â•70 –±–∞–ª–ª–æ–≤');
          expect(prompt).toContain('WCAG AA compliance: –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û true');
        }

        return Promise.resolve('{"corrected": "data"}');
      });

      await aiCorrector.correctData({}, suggestions, 'content-to-design');
      await aiCorrector.correctData({}, suggestions, 'design-to-quality');
      await aiCorrector.correctData({}, suggestions, 'quality-to-delivery');

      expect(run).toHaveBeenCalledTimes(3);
    });

    test('üîÑ –î–æ–ª–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏', async () => {
      let attemptCount = 0;
      
      (run as any).mockImplementation((agent, prompt) => {
        attemptCount++;
        expect(prompt).toContain(`–ü–û–ü–´–¢–ö–ê ${attemptCount}`);
        
        if (attemptCount < 3) {
          return Promise.resolve('invalid json'); // –ü–µ—Ä–≤—ã–µ 2 –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ—É—Å–ø–µ—à–Ω—ã
        }
        return Promise.resolve('{"success": "corrected"}');
      });

      const result = await aiCorrector.correctData({}, [], 'content-to-design');
      
      expect(attemptCount).toBe(3);
      expect(result).toEqual({ success: 'corrected' });
    });
  });
});