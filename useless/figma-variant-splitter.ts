import { config } from 'dotenv';
import * as path from 'path';
import * as fs from 'fs/promises';

// Load .env.local file
config({ path: path.resolve(process.cwd(), '.env.local') });

// Import only what we need to break circular dependency
import { handleToolErrorUnified } from '../core/error-orchestrator';
import { logger } from '../core/logger';

// Define ToolResult locally to avoid circular import
interface ToolResult {
  success: boolean;
  data?: any;
  error?: string;
  metadata?: Record<string, any>;
}

// Local error handling function
function handleToolError(toolName: string, error: any): ToolResult {
  logger.error(`Tool ${toolName} failed`, { error });
  return handleToolErrorUnified(toolName, error);
}

interface FigmaVariantSplitterParams {
  assetPath?: string;        // –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∞—Å—Å–µ—Ç—É
  figmaNodeId?: string;      // ID –Ω–æ–¥–∞ –≤ Figma –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  figmaUrl?: string;         // –ü–æ–ª–Ω—ã–π URL Figma –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è node ID
  context?: {
    campaign_type?: 'urgent' | 'newsletter' | 'seasonal' | 'promotional' | 'informational';
    emotional_tone?: 'positive' | 'neutral' | 'urgent' | 'friendly';
    preferred_variant?: 'first' | 'middle' | 'last' | 'auto'; // –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  };
}

interface FigmaVariantResult {
  variants: VariantInfo[];
  selected_variant: VariantInfo | null;
  selection_reason: string;
  metadata: {
    source_type: 'local_asset' | 'figma_api';
    source_path?: string;
    figma_node_id?: string;
    total_variants: number;
    extraction_method: string;
  };
}

interface VariantInfo {
  id: string;
  name: string;
  path: string;
  properties?: Record<string, string>;
  dimensions: {
    width: number;
    height: number;
  };
  position?: {
    x: number;
    y: number;
  };
  confidence_score: number;
  description: string;
}

interface FigmaNodeStructure {
  id: string;
  name: string;
  type: string;
  children?: FigmaNodeStructure[];
  variantProperties?: Record<string, string>;
  absoluteBoundingBox?: {
    x: number;
    y: number;
    width: number;
    height: number;
  };
}

/**
 * Figma Variant Splitter Tool
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–¥–µ–ª—è–µ—Ç Figma –∞—Å—Å–µ—Ç—ã –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏–π
 */
export async function splitFigmaVariants(params: FigmaVariantSplitterParams): Promise<ToolResult> {
  try {
    console.log('üéØ Figma Variant Splitter: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');

    const figmaToken = process.env.FIGMA_ACCESS_TOKEN || process.env.FIGMA_TOKEN;
    const figmaProjectId = process.env.FIGMA_PROJECT_ID;

    if (!figmaToken || !figmaProjectId) {
      throw new Error('Figma credentials not found. FIGMA_ACCESS_TOKEN and FIGMA_PROJECT_ID required.');
    }

    let result: FigmaVariantResult;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
    if (params.figmaNodeId || params.figmaUrl) {
      // –†–∞–±–æ—Ç–∞–µ–º —Å Figma API
      const nodeId = params.figmaNodeId || extractNodeIdFromUrl(params.figmaUrl!);
      result = await splitFromFigmaAPI(figmaToken, figmaProjectId, nodeId, params.context);
    } else if (params.assetPath) {
      // –†–∞–±–æ—Ç–∞–µ–º —Å –ª–æ–∫–∞–ª—å–Ω—ã–º –∞—Å—Å–µ—Ç–æ–º
      result = await splitFromLocalAsset(params.assetPath, params.context);
    } else {
      throw new Error('Either assetPath, figmaNodeId, or figmaUrl must be provided');
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
    if (result.variants.length > 0) {
      const selectedVariant = selectBestVariant(result.variants, params.context);
      result.selected_variant = selectedVariant.variant;
      result.selection_reason = selectedVariant.reason;
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${result.variants.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, –≤—ã–±—Ä–∞–Ω: ${result.selected_variant?.name || 'none'}`);

    return {
      success: true,
      data: result,
      metadata: {
        tool: 'figma-variant-splitter',
        timestamp: new Date().toISOString(),
        source: result.metadata.source_type
      }
    };

  } catch (error) {
    return handleToolError('splitFigmaVariants', error);
  }
}

/**
 * –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Figma API
 */
async function splitFromFigmaAPI(
  token: string, 
  projectId: string, 
  nodeId: string, 
  context?: FigmaVariantSplitterParams['context']
): Promise<FigmaVariantResult> {
  console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º Figma node: ${nodeId}`);

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–æ–¥–∞
  const nodeUrl = `https://api.figma.com/v1/files/${projectId}/nodes?ids=${nodeId}`;
  
  const nodeResponse = await fetch(nodeUrl, {
    headers: { 'X-Figma-Token': token }
  });

  if (!nodeResponse.ok) {
    throw new Error(`Figma API request failed: ${nodeResponse.status}`);
  }

  const nodeData = await nodeResponse.json();
  
  if (nodeData.err) {
    throw new Error(`Figma API error: ${nodeData.err}`);
  }

  const targetNode = nodeData.nodes[nodeId]?.document;
  
  if (!targetNode) {
    throw new Error('Target node not found');
  }

  console.log(`üìã –ù–∞–π–¥–µ–Ω ${targetNode.type}: "${targetNode.name}"`);

  let variants: VariantInfo[] = [];

  if (targetNode.type === 'COMPONENT_SET' && targetNode.children) {
    // –≠—Ç–æ –Ω–∞–±–æ—Ä –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    console.log(`üé® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${targetNode.children.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ COMPONENT_SET`);
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
    const variantIds = targetNode.children.map((child: any) => child.id);
    const exportUrl = `https://api.figma.com/v1/images/${encodeURIComponent(projectId)}?ids=${variantIds.join(',')}&format=png&scale=2`;
    
    const exportResponse = await fetch(exportUrl, {
      headers: { 'X-Figma-Token': token }
    });
    
    const exportData = await exportResponse.json();
    
    if (exportData.err) {
      throw new Error(`Export failed: ${exportData.err}`);
    }

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    const outputDir = path.join(process.cwd(), 'figma-assets', `variants-${nodeId}-${Date.now()}`);
    await fs.mkdir(outputDir, { recursive: true });

    // –°–∫–∞—á–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    for (let i = 0; i < targetNode.children.length; i++) {
      const child = targetNode.children[i];
      const imageUrl = exportData.images[child.id];
      
      if (!imageUrl) {
        console.log(`‚ö†Ô∏è –ù–µ—Ç URL –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${child.name}`);
        continue;
      }

      console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç: "${child.name}"`);
      
      const imageResponse = await fetch(imageUrl);
      const buffer = Buffer.from(await imageResponse.arrayBuffer());
      
      const filename = `variant-${i + 1}-${sanitizeFilename(child.name)}.png`;
      const outputPath = path.join(outputDir, filename);
      
      await fs.writeFile(outputPath, buffer);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
      const description = generateVariantDescription(child, i, targetNode.children.length);
      
      variants.push({
        id: child.id,
        name: child.name,
        path: outputPath,
        properties: child.variantProperties || {},
        dimensions: {
          width: child.absoluteBoundingBox?.width || 0,
          height: child.absoluteBoundingBox?.height || 0
        },
        position: child.absoluteBoundingBox ? {
          x: child.absoluteBoundingBox.x,
          y: child.absoluteBoundingBox.y
        } : undefined,
        confidence_score: 0.9, // –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è API —ç–∫—Å–ø–æ—Ä—Ç–∞
        description
      });
    }

  } else {
    // –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–µ—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
    console.log('üîç –û–±—ã—á–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç, –∏—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–µ—Ç –¥–ª—è pixel-–∞–Ω–∞–ª–∏–∑–∞');
    
    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const exportUrl = `https://api.figma.com/v1/images/${encodeURIComponent(projectId)}?ids=${nodeId}&format=png&scale=2`;
    
    const exportResponse = await fetch(exportUrl, {
      headers: { 'X-Figma-Token': token }
    });
    
    const exportData = await exportResponse.json();
    
    if (exportData.err) {
      throw new Error(`Export failed: ${exportData.err}`);
    }

    const imageUrl = exportData.images[nodeId];
    if (imageUrl) {
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
      const tempDir = path.join(process.cwd(), 'temp');
      await fs.mkdir(tempDir, { recursive: true });
      
      const tempPath = path.join(tempDir, `figma-node-${nodeId}-${Date.now()}.png`);
      
      const imageResponse = await fetch(imageUrl);
      const buffer = Buffer.from(await imageResponse.arrayBuffer());
      await fs.writeFile(tempPath, buffer);
      
      console.log(`üì• –°–∫–∞—á–∞–Ω –∞—Å—Å–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: ${tempPath}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
      const localResult = await splitFromLocalAsset(tempPath, context);
      variants = localResult.variants;
    }
  }

  return {
    variants,
    selected_variant: null,
    selection_reason: '',
    metadata: {
      source_type: 'figma_api',
      figma_node_id: nodeId,
      total_variants: variants.length,
      extraction_method: targetNode.type === 'COMPONENT_SET' ? 'api_export' : 'pixel_analysis'
    }
  };
}

/**
 * –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∞—Å—Å–µ—Ç–∞
 */
async function splitFromLocalAsset(
  assetPath: string, 
  context?: FigmaVariantSplitterParams['context']
): Promise<FigmaVariantResult> {
  console.log(`üñºÔ∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∞—Å—Å–µ—Ç: ${assetPath}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
  try {
    await fs.access(assetPath);
  } catch {
    throw new Error(`Asset file not found: ${assetPath}`);
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π sprite splitter –¥–ª—è pixel-–∞–Ω–∞–ª–∏–∑–∞
  const sharp = require('sharp');
  
  const image = sharp(assetPath);
  const metadata = await image.metadata();
  
  console.log(`üìê –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${metadata.width}√ó${metadata.height}`);

  const variants: VariantInfo[] = [];

  // –£–ª—É—á—à–µ–Ω–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
  if (metadata.width && metadata.height) {
    const aspectRatio = metadata.width / metadata.height;
    
    if (aspectRatio > 1.5) {
      // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–ª–æ–Ω–∫–∏
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
      const horizontalVariants = await analyzeHorizontalVariants(image, metadata, assetPath);
      variants.push(...horizontalVariants);
      
    } else if (aspectRatio < 1.2) {
      // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ - –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      console.log('üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤');
      const verticalVariants = await analyzeVerticalVariants(image, metadata, assetPath);
      variants.push(...verticalVariants);
      
    } else {
      // –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ - –ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞
      console.log('üîÑ –ù–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω - –ø—Ä–æ–±—É–µ–º –æ–±–∞ –º–µ—Ç–æ–¥–∞ –∞–Ω–∞–ª–∏–∑–∞');
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const verticalVariants = await analyzeVerticalVariants(image, metadata, assetPath);
      if (verticalVariants.length > 1) {
        variants.push(...verticalVariants);
      } else {
        // –ï—Å–ª–∏ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–æ–±—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π
        const horizontalVariants = await analyzeHorizontalVariants(image, metadata, assetPath);
        if (horizontalVariants.length > 1) {
          variants.push(...horizontalVariants);
        } else {
          // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–º
          console.log('üîÑ –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç');
          
          variants.push({
            id: 'local-single',
            name: 'Single Variant',
            path: assetPath,
            dimensions: {
              width: metadata.width,
              height: metadata.height
            },
            confidence_score: 0.9,
            description: '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç'
          });
        }
      }
    }
  }

  return {
    variants,
    selected_variant: null,
    selection_reason: '',
    metadata: {
      source_type: 'local_asset',
      source_path: assetPath,
      total_variants: variants.length,
      extraction_method: 'smart_pixel_analysis'
    }
  };
}

/**
 * –ê–Ω–∞–ª–∏–∑ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
 */
async function analyzeHorizontalVariants(
  image: any, 
  metadata: any, 
  assetPath: string
): Promise<VariantInfo[]> {
  const variants: VariantInfo[] = [];
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data } = await image.raw().toBuffer({ resolveWithObject: true });
    const channels = metadata.channels || 4;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–æ–Ω–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—É—Å—Ç—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    const emptyColumns: number[] = [];
    
    for (let x = 0; x < metadata.width; x++) {
      let isEmpty = true;
      
      for (let y = 0; y < metadata.height; y++) {
        const pixelIndex = (y * metadata.width + x) * channels;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —è—Ä–∫–æ—Å—Ç—å
        const alpha = channels === 4 ? data[pixelIndex + 3] : 255;
        const r = data[pixelIndex];
        const g = data[pixelIndex + 1];
        const b = data[pixelIndex + 2];
        
        // –°—á–∏—Ç–∞–µ–º –ø–∏–∫—Å–µ–ª—å –Ω–µ–ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ñ–∞ –∏–ª–∏ –Ω–µ –±–µ–ª—ã–π/–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        if (alpha > 10 && (r < 240 || g < 240 || b < 240)) {
          isEmpty = false;
          break;
        }
      }
      
      if (isEmpty) {
        emptyColumns.push(x);
      }
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${emptyColumns.length} –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫`);
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –ø—É—Å—Ç—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
    const separators = findSeparators(emptyColumns, 5); // –º–∏–Ω–∏–º—É–º 5 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    
    if (separators.length > 0) {
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${separators.length} —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: ${separators.join(', ')}`);
      
      // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
      let startX = 0;
      
      for (let i = 0; i <= separators.length; i++) {
        const endX = i < separators.length ? separators[i] : metadata.width;
        const variantWidth = endX - startX;
        
        if (variantWidth > 50) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
          const outputPath = assetPath.replace('.png', `-variant-${i + 1}.png`);
          
          try {
            await image
              .extract({ left: startX, top: 0, width: variantWidth, height: metadata.height })
              .png()
              .toFile(outputPath);
            
            variants.push({
              id: `horizontal-variant-${i + 1}`,
              name: `Variant ${i + 1}`,
              path: outputPath,
              dimensions: {
                width: variantWidth,
                height: metadata.height
              },
              position: { x: startX, y: 0 },
              confidence_score: 0.8,
              description: `–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ${i + 1} (${startX}-${endX}px)`
            });
            
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç ${i + 1}: ${startX}-${endX}px (—à–∏—Ä–∏–Ω–∞: ${variantWidth}px)`);
            
          } catch (error) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${i + 1}: ${error.message}`);
          }
        }
        
        startX = endX;
      }
    } else {
      // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∏–º –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
      console.log('üîÑ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ');
      return await createEqualHorizontalVariants(image, metadata, assetPath, 3);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${error.message}`);
  }
  
  return variants;
}

/**
 * –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
 */
async function analyzeVerticalVariants(
  image: any, 
  metadata: any, 
  assetPath: string
): Promise<VariantInfo[]> {
  const variants: VariantInfo[] = [];
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const { data } = await image.raw().toBuffer({ resolveWithObject: true });
    const channels = metadata.channels || 4;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—É—Å—Ç—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
    const emptyRows: number[] = [];
    
    for (let y = 0; y < metadata.height; y++) {
      let isEmpty = true;
      
      for (let x = 0; x < metadata.width; x++) {
        const pixelIndex = (y * metadata.width + x) * channels;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–ª–∏ —è—Ä–∫–æ—Å—Ç—å
        const alpha = channels === 4 ? data[pixelIndex + 3] : 255;
        const r = data[pixelIndex];
        const g = data[pixelIndex + 1];
        const b = data[pixelIndex + 2];
        
        // –°—á–∏—Ç–∞–µ–º –ø–∏–∫—Å–µ–ª—å –Ω–µ–ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–ª—å—Ñ–∞ –∏–ª–∏ –Ω–µ –±–µ–ª—ã–π/–ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
        if (alpha > 10 && (r < 240 || g < 240 || b < 240)) {
          isEmpty = false;
          break;
        }
      }
      
      if (isEmpty) {
        emptyRows.push(y);
      }
    }
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${emptyRows.length} –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫`);
    
    // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—ã –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏)
    const separators = findSeparators(emptyRows, 10); // –º–∏–Ω–∏–º—É–º 10 –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
    
    if (separators.length > 0) {
      console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${separators.length} —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π: ${separators.join(', ')}`);
      
      // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
      let startY = 0;
      
      for (let i = 0; i <= separators.length; i++) {
        const endY = i < separators.length ? separators[i] : metadata.height;
        const variantHeight = endY - startY;
        
        if (variantHeight > 100) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
          const outputPath = assetPath.replace('.png', `-variant-${i + 1}.png`);
          
          try {
            await image
              .extract({ left: 0, top: startY, width: metadata.width, height: variantHeight })
              .png()
              .toFile(outputPath);
            
            variants.push({
              id: `vertical-variant-${i + 1}`,
              name: `Variant ${i + 1}`,
              path: outputPath,
              dimensions: {
                width: metadata.width,
                height: variantHeight
              },
              position: { x: 0, y: startY },
              confidence_score: 0.8,
              description: `–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ${i + 1} (${startY}-${endY}px)`
            });
            
            console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç ${i + 1}: ${startY}-${endY}px (–≤—ã—Å–æ—Ç–∞: ${variantHeight}px)`);
            
          } catch (error) {
            console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${i + 1}: ${error.message}`);
          }
        }
        
        startY = endY;
      }
    } else {
      // –ï—Å–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–µ–ª–∏–º –Ω–∞ —Ä–∞–≤–Ω—ã–µ —á–∞—Å—Ç–∏
      console.log('üîÑ –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ');
      return await createEqualVerticalVariants(image, metadata, assetPath, 3);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: ${error.message}`);
  }
  
  return variants;
}

/**
 * –ü–æ–∏—Å–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π –≤ –º–∞—Å—Å–∏–≤–µ –ø—É—Å—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
 */
function findSeparators(emptyPositions: number[], minGapSize: number): number[] {
  if (emptyPositions.length === 0) return [];
  
  const separators: number[] = [];
  let gapStart = -1;
  let gapSize = 0;
  
  for (let i = 1; i < emptyPositions.length; i++) {
    if (emptyPositions[i] === emptyPositions[i - 1] + 1) {
      // –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã
      if (gapStart === -1) {
        gapStart = emptyPositions[i - 1];
      }
      gapSize++;
    } else {
      // –ö–æ–Ω–µ—Ü –≥—Ä—É–ø–ø—ã
      if (gapSize >= minGapSize && gapStart !== -1) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ä–µ–¥–∏–Ω—É –≥—Ä—É–ø–ø—ã –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        separators.push(gapStart + Math.floor(gapSize / 2));
      }
      gapStart = -1;
      gapSize = 0;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≥—Ä—É–ø–ø—É
  if (gapSize >= minGapSize && gapStart !== -1) {
    separators.push(gapStart + Math.floor(gapSize / 2));
  }
  
  return separators;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
 */
async function createEqualHorizontalVariants(
  image: any, 
  metadata: any, 
  assetPath: string, 
  count: number
): Promise<VariantInfo[]> {
  const variants: VariantInfo[] = [];
  const variantWidth = Math.floor(metadata.width / count);
  
  for (let i = 0; i < count; i++) {
    const x = i * variantWidth;
    const outputPath = assetPath.replace('.png', `-variant-${i + 1}.png`);
    
    try {
      await image
        .extract({ left: x, top: 0, width: variantWidth, height: metadata.height })
        .png()
        .toFile(outputPath);
      
      variants.push({
        id: `equal-horizontal-variant-${i + 1}`,
        name: `Variant ${i + 1}`,
        path: outputPath,
        dimensions: {
          width: variantWidth,
          height: metadata.height
        },
        position: { x, y: 0 },
        confidence_score: 0.6, // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
        description: `–†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ${i + 1} –∏–∑ ${count}`
      });
      
    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${i + 1}: ${error.message}`);
    }
  }
  
  return variants;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
 */
async function createEqualVerticalVariants(
  image: any, 
  metadata: any, 
  assetPath: string, 
  count: number
): Promise<VariantInfo[]> {
  const variants: VariantInfo[] = [];
  const variantHeight = Math.floor(metadata.height / count);
  
  for (let i = 0; i < count; i++) {
    const y = i * variantHeight;
    const outputPath = assetPath.replace('.png', `-variant-${i + 1}.png`);
    
    try {
      await image
        .extract({ left: 0, top: y, width: metadata.width, height: variantHeight })
        .png()
        .toFile(outputPath);
      
      variants.push({
        id: `equal-vertical-variant-${i + 1}`,
        name: `Variant ${i + 1}`,
        path: outputPath,
        dimensions: {
          width: metadata.width,
          height: variantHeight
        },
        position: { x: 0, y },
        confidence_score: 0.6, // –ù–∏–∑–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –¥–µ–ª–µ–Ω–∏—è
        description: `–†–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç ${i + 1} –∏–∑ ${count}`
      });
      
    } catch (error) {
      console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ ${i + 1}: ${error.message}`);
    }
  }
  
  return variants;
}

/**
 * –í—ã–±–æ—Ä –ª—É—á—à–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function selectBestVariant(
  variants: VariantInfo[], 
  context?: FigmaVariantSplitterParams['context']
): { variant: VariantInfo; reason: string } {
  
  if (variants.length === 0) {
    throw new Error('No variants available for selection');
  }

  if (variants.length === 1) {
    return {
      variant: variants[0],
      reason: '–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç'
    };
  }

  // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  let selectedIndex = 0;
  let reason = '–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é';

  if (context?.preferred_variant) {
    switch (context.preferred_variant) {
      case 'first':
        selectedIndex = 0;
        reason = '–í—ã–±—Ä–∞–Ω –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É';
        break;
      case 'middle':
        selectedIndex = Math.floor(variants.length / 2);
        reason = '–í—ã–±—Ä–∞–Ω —Å—Ä–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É';
        break;
      case 'last':
        selectedIndex = variants.length - 1;
        reason = '–í—ã–±—Ä–∞–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É';
        break;
      case 'auto':
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        selectedIndex = selectVariantByContext(variants, context);
        reason = '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏';
        break;
    }
  } else if (context?.emotional_tone || context?.campaign_type) {
    // –í—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞ –∏ —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏
    selectedIndex = selectVariantByContext(variants, context);
    reason = `–í—ã–±—Ä–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–Ω–∞: ${context.emotional_tone}, —Ç–∏–ø–∞: ${context.campaign_type}`;
  }

  return {
    variant: variants[selectedIndex],
    reason
  };
}

/**
 * –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏
 */
function selectVariantByContext(
  variants: VariantInfo[], 
  context: FigmaVariantSplitterParams['context']
): number {
  
  // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞:
  // - urgent/positive -> –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç (–æ–±—ã—á–Ω–æ —Å–∞–º—ã–π —è—Ä–∫–∏–π)
  // - neutral -> —Å—Ä–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
  // - friendly -> –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç (–æ–±—ã—á–Ω–æ —Å–∞–º—ã–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π)
  
  if (context?.emotional_tone === 'urgent' || context?.campaign_type === 'urgent') {
    return 0; // –ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
  }
  
  if (context?.emotional_tone === 'neutral' || context?.campaign_type === 'informational') {
    return Math.floor(variants.length / 2); // –°—Ä–µ–¥–Ω–∏–π –¥–ª—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ—Å—Ç–∏
  }
  
  if (context?.emotional_tone === 'friendly' || context?.campaign_type === 'newsletter') {
    return variants.length - 1; // –ü–æ—Å–ª–µ–¥–Ω–∏–π –¥–ª—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ—Å—Ç–∏
  }
  
  if (context?.emotional_tone === 'positive' || context?.campaign_type === 'promotional') {
    return 0; // –ü–µ—Ä–≤—ã–π –¥–ª—è –ø–æ–∑–∏—Ç–∏–≤–∞
  }
  
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—Ä–µ–¥–Ω–∏–π
  return Math.floor(variants.length / 2);
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ Node ID –∏–∑ Figma URL
 */
function extractNodeIdFromUrl(url: string): string {
  const match = url.match(/node-id=([^&]+)/);
  if (!match) {
    throw new Error('Cannot extract node ID from Figma URL');
  }
  
  // –î–µ–∫–æ–¥–∏—Ä—É–µ–º URL-encoded —Å–∏–º–≤–æ–ª—ã
  return decodeURIComponent(match[1]).replace(/-/g, ':');
}

/**
 * –û—á–∏—Å—Ç–∫–∞ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
 */
function sanitizeFilename(name: string): string {
  return name
    .replace(/[^a-zA-Z0-9–∞-—è–ê-–Ø\s\-_]/g, '')
    .replace(/\s+/g, '-')
    .toLowerCase();
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
 */
function generateVariantDescription(
  variant: any, 
  index: number, 
  total: number
): string {
  const descriptions = [
    '–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - –æ–±—ã—á–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–ª–∏ –Ω–∞–∏–±–æ–ª–µ–µ –∑–∞–º–µ—Ç–Ω—ã–π',
    '–°—Ä–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä',
    '–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π'
  ];
  
  if (variant.variantProperties) {
    const props = Object.entries(variant.variantProperties)
      .map(([key, value]) => `${key}: ${value}`)
      .join(', ');
    return `–í–∞—Ä–∏–∞–Ω—Ç ${index + 1} –∏–∑ ${total} (${props})`;
  }
  
  return descriptions[Math.min(index, descriptions.length - 1)] || `–í–∞—Ä–∏–∞–Ω—Ç ${index + 1} –∏–∑ ${total}`;
}