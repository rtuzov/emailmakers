const fs = require('fs');
const path = require('path');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
function processFolderMatching(folderPath, folderName) {
  console.log(`\n${'='.repeat(60)}`);
  console.log(`üîÑ –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–ü–ö–ò: ${folderName}`);
  console.log(`${'='.repeat(60)}`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
  const tagDictPath = path.join(folderPath, 'tag-dictionary.json');
  const reportPath = path.join(folderPath, 'page-processing-report.json');
  const renamePath = path.join(folderPath, 'rename-report.json');

  if (!fs.existsSync(tagDictPath)) {
    console.log(`‚ùå –§–∞–π–ª tag-dictionary.json –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${folderName}`);
    return false;
  }

  // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª—ã
  const tagDict = JSON.parse(fs.readFileSync(tagDictPath, 'utf8'));
  let report = null;
  let renameReport = null;

  if (fs.existsSync(reportPath)) {
    report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
  }
  
  if (fs.existsSync(renamePath)) {
    renameReport = JSON.parse(fs.readFileSync(renamePath, 'utf8'));
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
  const files = fs.readdirSync(folderPath).filter(f => f.endsWith('.png'));

  console.log(`üìÅ –§–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ: ${files.length}`);
  console.log(`üìù –ó–∞–ø–∏—Å–µ–π –≤ tag-dictionary: ${Object.keys(tagDict.entries).length}`);

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥—É–±–ª–∏
  const fileUsage = {};
  Object.entries(tagDict.entries).forEach(([key, entry]) => {
    const fileName = entry.originalName;
    if (!fileUsage[fileName]) {
      fileUsage[fileName] = [];
    }
    fileUsage[fileName].push(key);
  });

  const duplicates = Object.entries(fileUsage).filter(([, keys]) => keys.length > 1);
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –¥—É–±–ª–µ–π: ${duplicates.length}`);

  if (duplicates.length > 0) {
    console.log('\nüìã –î–£–ë–õ–ò –§–ê–ô–õ–û–í:');
    duplicates.forEach(([fileName, keys]) => {
      console.log(`  "${fileName}" –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${keys.length} —Ä–∞–∑:`);
      keys.forEach(key => console.log(`    - ${key}`));
    });
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É shortName –∏ fileName
  function calculateCompatibility(shortName, fileName) {
    const shortWords = shortName.split('-');
    const fileWords = fileName.replace('.png', '').split('-');
    
    let score = 0;
    const maxScore = shortWords.length;
    
    // –ü—Ä—è–º—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
    shortWords.forEach(word => {
      if (fileWords.some(fw => fw.includes(word) || word.includes(fw))) {
        score += 1;
      }
    });
    
    // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–π—Ü–µ–≤ –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
    const semanticMap = {
      '–∑–∞—è—Ü': ['–∑–∞—è—Ü', '–∫—Ä–æ–ª–∏–∫', '–∑–∞–π—á–∏–∫'],
      '–Ω–æ–≤–æ—Å—Ç–∏': ['–Ω–æ–≤–æ—Å—Ç–∏', '–Ω–æ–≤–æ—Å—Ç—å', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '—Å–æ–æ–±—â–µ–Ω–∏–µ'],
      '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–ø–æ–µ–∑–¥–∫–∞', '–æ—Ç–ø—É—Å–∫', '—Ç—É—Ä–∏–∑–º', '—Å–∞–º–æ–ª–µ—Ç', '–±–∏–ª–µ—Ç'],
      '–±–∏–ª–µ—Ç—ã': ['–±–∏–ª–µ—Ç', '–∞–≤–∏–∞–±–∏–ª–µ—Ç', '–ø–æ–∫—É–ø–∫–∞', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
      '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è': ['–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è', '–∞–≤–∏–∞—Ü–∏—è', '—Å–∞–º–æ–ª–µ—Ç', '–ø–æ–ª–µ—Ç'],
      '–¥–µ—à–µ–≤—ã–µ': ['–¥–µ—à–µ–≤—ã–π', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '–≤—ã–≥–æ–¥–Ω–æ'],
      '–±—ã—Å—Ç—Ä–æ': ['–±—ã—Å—Ç—Ä–æ', '—Å–∫–æ—Ä–æ—Å—Ç—å', '—ç–∫—Å–ø—Ä–µ—Å—Å'],
      '—É–¥–æ–±–Ω–æ': ['—É–¥–æ–±–Ω–æ', '–∫–æ–º—Ñ–æ—Ä—Ç', '—Å–µ—Ä–≤–∏—Å'],
      '–±–µ–∑–æ–ø–∞—Å–Ω–æ': ['–±–µ–∑–æ–ø–∞—Å–Ω–æ', '–Ω–∞–¥–µ–∂–Ω–æ', '–∑–∞—â–∏—Ç–∞'],
      '–Ω–∞–¥–µ–∂–Ω–æ': ['–Ω–∞–¥–µ–∂–Ω–æ', '–±–µ–∑–æ–ø–∞—Å–Ω–æ', '–∫–∞—á–µ—Å—Ç–≤–æ'],
      '–∫–∞—á–µ—Å—Ç–≤–æ': ['–∫–∞—á–µ—Å—Ç–≤–æ', '–ø—Ä–µ–º–∏—É–º', '–ª—É—á—à–∏–π'],
      '—Å–µ—Ä–≤–∏—Å': ['—Å–µ—Ä–≤–∏—Å', '–æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞'],
      '–ø–æ–¥–¥–µ—Ä–∂–∫–∞': ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'],
      '–ø–æ–º–æ—â—å': ['–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '—Å–µ—Ä–≤–∏—Å'],
      '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è': ['–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–ø–æ–º–æ—â—å', '—Å–æ–≤–µ—Ç'],
      '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ': ['–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∑–∞–∫–∞–∑', '—Ä–µ–∑–µ—Ä–≤'],
      '–æ–ø–ª–∞—Ç–∞': ['–æ–ø–ª–∞—Ç–∞', '–ø–ª–∞—Ç–µ–∂', '–¥–µ–Ω—å–≥–∏'],
      '–∫–∞—Ä—Ç–∞': ['–∫–∞—Ä—Ç–∞', '–±–∞–Ω–∫', '–ø–ª–∞—Ç–µ–∂'],
      '–±–∞–Ω–∫': ['–±–∞–Ω–∫', '–∫–∞—Ä—Ç–∞', '—Ñ–∏–Ω–∞–Ω—Å—ã'],
      '–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π': ['–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π', '–∫–∞—Ä—Ç–∞', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π'],
      '–Ω–∞–ª–∏—á–Ω—ã–µ': ['–Ω–∞–ª–∏—á–Ω—ã–µ', '–¥–µ–Ω—å–≥–∏', '–∫—ç—à'],
      '—Ä–∞—Å—Å—Ä–æ—á–∫–∞': ['—Ä–∞—Å—Å—Ä–æ—á–∫–∞', '–∫—Ä–µ–¥–∏—Ç', '–ø–ª–∞—Ç–µ–∂'],
      '–∫—Ä–µ–¥–∏—Ç': ['–∫—Ä–µ–¥–∏—Ç', '—Ä–∞—Å—Å—Ä–æ—á–∫–∞', '–∑–∞–π–º'],
      '–ª—å–≥–æ—Ç—ã': ['–ª—å–≥–æ—Ç—ã', '—Å–∫–∏–¥–∫–∞', '–≤—ã–≥–æ–¥–∞'],
      '–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã': ['–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä', '–ª—å–≥–æ—Ç—ã', '—Å—Ç–∞—Ä—à–∏–π'],
      '—Å—Ç—É–¥–µ–Ω—Ç—ã': ['—Å—Ç—É–¥–µ–Ω—Ç', '–º–æ–ª–æ–¥–µ–∂—å', '—É—á–µ–±–∞'],
      '–º–æ–ª–æ–¥–µ–∂—å': ['–º–æ–ª–æ–¥–µ–∂—å', '—Å—Ç—É–¥–µ–Ω—Ç', '–º–æ–ª–æ–¥–æ–π'],
      '–≤–∑—Ä–æ—Å–ª—ã–µ': ['–≤–∑—Ä–æ—Å–ª—ã–π', '–ª—é–¥–∏', '–∫–ª–∏–µ–Ω—Ç'],
      '—ç–º–æ—Ü–∏–∏': ['—ç–º–æ—Ü–∏—è', '—á—É–≤—Å—Ç–≤–æ', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ'],
      '—Ä–∞–¥–æ—Å—Ç—å': ['—Ä–∞–¥–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ', '–ø–æ–∑–∏—Ç–∏–≤'],
      '–≥—Ä—É—Å—Ç—å': ['–≥—Ä—É—Å—Ç—å', '–ø–µ—á–∞–ª—å', '—Ç–æ—Å–∫–∞'],
      '—É–¥–∏–≤–ª–µ–Ω–∏–µ': ['—É–¥–∏–≤–ª–µ–Ω–∏–µ', '—à–æ–∫', '–≤–æ—Å—Ç–æ—Ä–≥'],
      '—Å—Ç—Ä–∞—Ö': ['—Å—Ç—Ä–∞—Ö', '—Ç—Ä–µ–≤–æ–≥–∞', '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ']
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –±–∞–ª–ª—ã
    shortWords.forEach(word => {
      if (semanticMap[word]) {
        semanticMap[word].forEach(semantic => {
          if (fileWords.some(fw => fw.includes(semantic))) {
            score += 0.5;
          }
        });
      }
    });
    
    return score / maxScore;
  }

  // –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  const shortNames = Object.keys(tagDict.entries);
  const compatibilityMatrix = {};

  shortNames.forEach(shortName => {
    compatibilityMatrix[shortName] = {};
    files.forEach(fileName => {
      compatibilityMatrix[shortName][fileName] = calculateCompatibility(shortName, fileName);
    });
  });

  // –ê–ª–≥–æ—Ä–∏—Ç–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è (–∂–∞–¥–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
  const usedFiles = new Set();
  const finalMatching = {};

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º shortNames –ø–æ —É–±—ã–≤–∞–Ω–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ score –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const sortedShortNames = shortNames.sort((a, b) => {
    const maxScoreA = Math.max(...Object.values(compatibilityMatrix[a]));
    const maxScoreB = Math.max(...Object.values(compatibilityMatrix[b]));
    return maxScoreB - maxScoreA;
  });

  console.log('\nüéØ –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–û–í:');
  sortedShortNames.forEach(shortName => {
    // –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —ç—Ç–æ–≥–æ shortName
    const availableFiles = files.filter(f => !usedFiles.has(f));
    
    if (availableFiles.length > 0) {
      const bestFile = availableFiles.reduce((best, file) => {
        return compatibilityMatrix[shortName][file] > compatibilityMatrix[shortName][best] ? file : best;
      });
      
      finalMatching[shortName] = bestFile;
      usedFiles.add(bestFile);
      
      const score = compatibilityMatrix[shortName][bestFile];
      console.log(`‚úì ${shortName} -> ${bestFile.substring(0, 60)}... (${score.toFixed(2)})`);
    } else {
      console.log(`‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è ${shortName}`);
    }
  });

  console.log('\nüìù –û–ë–ù–û–í–õ–ï–ù–ò–ï TAG-DICTIONARY:');
  let updatedCount = 0;

  // –û–±–Ω–æ–≤–ª—è–µ–º tag-dictionary.json
  Object.entries(finalMatching).forEach(([shortName, fileName]) => {
    if (tagDict.entries[shortName]) {
      const oldFileName = tagDict.entries[shortName].originalName;
      if (oldFileName !== fileName) {
        tagDict.entries[shortName].originalName = fileName;
        updatedCount++;
        console.log(`  ‚úì ${shortName}: ${oldFileName.substring(0, 40)}... -> ${fileName.substring(0, 40)}...`);
      }
    }
  });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
  if (updatedCount > 0) {
    fs.writeFileSync(tagDictPath, JSON.stringify(tagDict, null, 2));
    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${updatedCount}`);
  } else {
    console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è');
  }

  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏
  console.log('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê:');
  const finalFileUsage = {};
  Object.entries(tagDict.entries).forEach(([key, entry]) => {
    const fileName = entry.originalName;
    if (!finalFileUsage[fileName]) {
      finalFileUsage[fileName] = [];
    }
    finalFileUsage[fileName].push(key);
  });

  const finalDuplicates = Object.entries(finalFileUsage).filter(([, keys]) => keys.length > 1);
  if (finalDuplicates.length === 0) {
    console.log('‚úÖ –î—É–±–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ! –ö–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.');
  } else {
    console.log('‚ùå –û—Å—Ç–∞–ª–∏—Å—å –¥—É–±–ª–∏:');
    finalDuplicates.forEach(([fileName, keys]) => {
      console.log(`  ${fileName}: ${keys.join(', ')}`);
    });
  }

  const missingFiles = Object.values(tagDict.entries).filter(entry => {
    return !files.includes(entry.originalName);
  });

  console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –§–∞–π–ª–æ–≤: ${files.length}, –ó–∞–ø–∏—Å–µ–π: ${Object.keys(tagDict.entries).length}, –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö: ${missingFiles.length}`);
  
  return true;
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
const currentDir = process.cwd();
const folderName = path.basename(currentDir);
processFolderMatching(currentDir, folderName); 