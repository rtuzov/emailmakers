/**
 * üéØ AUTOMATIC TRACING APPLICATION
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–ª–∞—Å—Å–∞–º
 * –ë–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
 */

import { tracingConfig, AgentTracingProfile } from './tracing-config';
import { 
  Traced, 
  TracedAgent, 
  TracedTool, 
  TracedHandoff, 
  TracedPerformance,
  TracingDecoratorOptions 
} from './tracing-decorators';

export interface AutoApplyOptions {
  agentType: string;
  targetClass: any;
  includePrivateMethods: boolean;
  customMethodMap?: Record<string, TracingDecoratorOptions>;
}

/**
 * üîß AUTO TRACING APPLICATOR
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –∫ –º–µ—Ç–æ–¥–∞–º –∫–ª–∞—Å—Å–∞
 */
export class AutoTracingApplicator {
  private static appliedClasses = new Set<string>();
  
  /**
   * üéØ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–π—Å–∏–Ω–≥ –∫ –∫–ª–∞—Å—Å—É –∞–≥–µ–Ω—Ç–∞
   */
  static applyToAgent(targetClass: any, agentType: string, options: Partial<AutoApplyOptions> = {}): void {
    const className = targetClass.name || targetClass.constructor.name;
    const classId = `${className}_${agentType}`;
    
    // –ò–∑–±–µ–≥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
    if (this.appliedClasses.has(classId)) {
      console.log(`‚ö†Ô∏è [AUTO TRACING] Skipping already traced class: ${className}`);
      return;
    }
    
    console.log(`üéØ [AUTO TRACING] Applying tracing to agent class: ${className} (${agentType})`);
    
    const profile = tracingConfig.getAgentProfile(agentType);
    if (!profile) {
      console.warn(`‚ö†Ô∏è [AUTO TRACING] No profile found for agent type: ${agentType}`);
      return;
    }
    
    const prototype = targetClass.prototype;
    const methodNames = this.getMethodNames(prototype, options.includePrivateMethods || false);
    
    let appliedCount = 0;
    
    methodNames.forEach(methodName => {
      if (this.shouldTraceMethod(methodName, profile)) {
        const decoratorType = this.determineDecoratorType(methodName, profile);
        const decoratorOptions = tracingConfig.getDecoratorOptions(agentType, methodName);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
        this.applyMethodDecorator(prototype, methodName, decoratorType, agentType, decoratorOptions);
        appliedCount++;
      }
    });
    
    this.appliedClasses.add(classId);
    console.log(`‚úÖ [AUTO TRACING] Applied tracing to ${appliedCount} methods in ${className}`);
  }
  
  /**
   * üîß –ü–æ–ª—É—á–∏—Ç—å –∏–º–µ–Ω–∞ –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞
   */
  private static getMethodNames(prototype: any, includePrivate: boolean): string[] {
    const methodNames = Object.getOwnPropertyNames(prototype);
    
    return methodNames.filter(name => {
      if (name === 'constructor') return false;
      if (!includePrivate && name.startsWith('_')) return false;
      if (typeof prototype[name] !== 'function') return false;
      
      return true;
    });
  }
  
  /**
   * üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–ª–µ–¥—É–µ—Ç –ª–∏ —Ç—Ä–µ–π—Å–∏—Ç—å –º–µ—Ç–æ–¥
   */
  private static shouldTraceMethod(methodName: string, profile: AgentTracingProfile): boolean {
    const excludedMethods = ['toString', 'valueOf', 'hasOwnProperty'];
    return !excludedMethods.includes(methodName);
  }
  
  /**
   * üîç –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞
   */
  private static determineDecoratorType(methodName: string, profile: AgentTracingProfile): string {
    if (profile.criticalMethods.includes(methodName)) return 'critical';
    if (profile.performanceMethods.includes(methodName)) return 'performance';
    if (profile.toolMethods.includes(methodName)) return 'tool';
    if (profile.handoffMethods.includes(methodName)) return 'handoff';
    
    return 'default';
  }
  
  /**
   * üé® –ü—Ä–∏–º–µ–Ω–∏—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫ –º–µ—Ç–æ–¥—É
   */
  private static applyMethodDecorator(
    prototype: any, 
    methodName: string, 
    decoratorType: string, 
    agentType: string, 
    options: TracingDecoratorOptions
  ): void {
    const originalMethod = prototype[methodName];
    if (!originalMethod || typeof originalMethod !== 'function') return;
    
    let wrappedMethod: any;
    
    switch (decoratorType) {
      case 'critical':
      case 'default':
        wrappedMethod = this.wrapWithAgentDecorator(originalMethod, agentType, methodName, options);
        break;
        
      case 'performance':
        wrappedMethod = this.wrapWithPerformanceDecorator(originalMethod, agentType, methodName, options);
        break;
        
      case 'tool':
        wrappedMethod = this.wrapWithToolDecorator(originalMethod, agentType, methodName, options);
        break;
        
      case 'handoff':
        wrappedMethod = this.wrapWithHandoffDecorator(originalMethod, agentType, methodName, options);
        break;
        
      default:
        wrappedMethod = this.wrapWithAgentDecorator(originalMethod, agentType, methodName, options);
    }
    
    // –ó–∞–º–µ–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±–µ—Ä–Ω—É—Ç—ã–º
    prototype[methodName] = wrappedMethod;
    
    console.log(`üîß [AUTO TRACING] Applied ${decoratorType} tracing to ${agentType}.${methodName}`);
  }
  
  /**
   * ü§ñ –û–±–µ—Ä–Ω—É—Ç—å –º–µ—Ç–æ–¥ –∞–≥–µ–Ω—Ç–æ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
   */
  private static wrapWithAgentDecorator(
    originalMethod: Function, 
    agentType: string, 
    methodName: string, 
    options: TracingDecoratorOptions
  ): Function {
    return async function (this: any, ...args: any[]) {
      const decoratorInstance = TracedAgent(agentType, options);
      const descriptor = { value: originalMethod };
      decoratorInstance(this, methodName, descriptor);
      return descriptor.value.apply(this, args);
    };
  }
  
  /**
   * ‚ö° –û–±–µ—Ä–Ω—É—Ç—å –º–µ—Ç–æ–¥ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private static wrapWithPerformanceDecorator(
    originalMethod: Function, 
    agentType: string, 
    methodName: string, 
    options: TracingDecoratorOptions
  ): Function {
    return async function (this: any, ...args: any[]) {
      const decoratorInstance = TracedPerformance(options);
      const descriptor = { value: originalMethod };
      decoratorInstance(this, methodName, descriptor);
      return descriptor.value.apply(this, args);
    };
  }
  
  /**
   * üîß –û–±–µ—Ä–Ω—É—Ç—å –º–µ—Ç–æ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
   */
  private static wrapWithToolDecorator(
    originalMethod: Function, 
    agentType: string, 
    methodName: string, 
    options: TracingDecoratorOptions
  ): Function {
    return async function (this: any, ...args: any[]) {
      const decoratorInstance = TracedTool(agentType, options);
      const descriptor = { value: originalMethod };
      decoratorInstance(this, methodName, descriptor);
      return descriptor.value.apply(this, args);
    };
  }
  
  /**
   * üîÑ –û–±–µ—Ä–Ω—É—Ç—å –º–µ—Ç–æ–¥ handoff –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–º
   */
  private static wrapWithHandoffDecorator(
    originalMethod: Function, 
    agentType: string, 
    methodName: string, 
    options: TracingDecoratorOptions
  ): Function {
    return async function (this: any, ...args: any[]) {
      const decoratorInstance = TracedHandoff(options);
      const descriptor = { value: originalMethod };
      decoratorInstance(this, methodName, descriptor);
      return descriptor.value.apply(this, args);
    };
  }
  
  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
   */
  static getApplicationStats(): {
    appliedClasses: number;
    classNames: string[];
  } {
    return {
      appliedClasses: this.appliedClasses.size,
      classNames: Array.from(this.appliedClasses)
    };
  }
  
  /**
   * üîÑ –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
   */
  static resetApplicationStats(): void {
    this.appliedClasses.clear();
    console.log('üîÑ [AUTO TRACING] Application stats reset');
  }
}

/**
 * üöÄ BATCH AUTO APPLICATOR
 * 
 * –ú–∞—Å—Å–æ–≤–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –∫ –≥—Ä—É–ø–ø–µ –∫–ª–∞—Å—Å–æ–≤
 */
export class BatchAutoTracing {
  /**
   * üéØ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–π—Å–∏–Ω–≥ –∫–æ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º
   */
  static applyToAllAgents(agentClasses: Record<string, any>): void {
    console.log('üöÄ [BATCH TRACING] Starting batch application to all agents');
    
    const agentTypes = Object.keys(agentClasses);
    let totalApplied = 0;
    
    agentTypes.forEach(agentType => {
      const agentClass = agentClasses[agentType];
      if (agentClass) {
        try {
          AutoTracingApplicator.applyToAgent(agentClass, agentType);
          totalApplied++;
        } catch (error) {
          console.error(`‚ùå [BATCH TRACING] Failed to apply tracing to ${agentType}:`, error);
        }
      }
    });
    
    console.log(`‚úÖ [BATCH TRACING] Applied tracing to ${totalApplied}/${agentTypes.length} agent classes`);
  }
  
  /**
   * üéØ –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–π—Å–∏–Ω–≥ –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º
   */
  static applyToSpecialists(specialists: {
    contentSpecialist?: any;
    designSpecialist?: any;
    qualitySpecialist?: any;
    deliverySpecialist?: any;
  }): void {
    console.log('üéØ [BATCH TRACING] Applying tracing to specialist agents');
    
    const agentMap = {
      content: specialists.contentSpecialist,
      design: specialists.designSpecialist,
      quality: specialists.qualitySpecialist,
      delivery: specialists.deliverySpecialist
    };
    
    this.applyToAllAgents(agentMap);
  }
  
  /**
   * üîß –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–π—Å–∏–Ω–≥ –∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º
   */
  static applyToTools(toolClasses: Record<string, any>): void {
    console.log('üîß [BATCH TRACING] Applying tracing to tool classes');
    
    Object.entries(toolClasses).forEach(([toolName, toolClass]) => {
      if (toolClass && typeof toolClass === 'function') {
        try {
          AutoTracingApplicator.applyToAgent(toolClass, 'tool', {
            customMethodMap: {
              execute: { spanType: 'tool', includeArgs: true, includeResult: true }
            }
          });
          console.log(`‚úÖ [BATCH TRACING] Applied tracing to tool: ${toolName}`);
        } catch (error) {
          console.error(`‚ùå [BATCH TRACING] Failed to apply tracing to tool ${toolName}:`, error);
        }
      }
    });
  }
}

/**
 * üé® –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø
 * 
 * –ö–ª–∞—Å—Å-–¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
 */
export function AutoTracedAgent(agentType: string) {
  return function <T extends { new (...args: any[]): {} }>(constructor: T) {
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–π—Å–∏–Ω–≥ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞—Å—Å–∞
    AutoTracingApplicator.applyToAgent(constructor, agentType);
    
    return class extends constructor {
      constructor(...args: any[]) {
        super(...args);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–≥–µ–Ω—Ç–∞
        (this as any).agentType = agentType;
        (this as any).tracingApplied = true;
        (this as any).tracingTimestamp = new Date().toISOString();
        
        console.log(`ü§ñ [AUTO TRACED] Created traced agent instance: ${agentType}`);
      }
    };
  };
}

/**
 * üîß –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –¢–†–ï–ô–°–ò–ù–ì–ê
 */
export class TracingValidator {
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø—Ä–∏–º–µ–Ω–µ–Ω –ª–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥ –∫ –∫–ª–∞—Å—Å—É
   */
  static isClassTraced(className: string, agentType: string): boolean {
    const classId = `${className}_${agentType}`;
    return AutoTracingApplicator.getApplicationStats().classNames.includes(classId);
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ç—Ä–µ–π—Å–∏–Ω–≥ —É —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
   */
  static isInstanceTraced(instance: any): boolean {
    return !!(instance.tracingApplied && instance.agentType);
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–π—Å–∏–Ω–≥–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
   */
  static getInstanceTracingInfo(instance: any): any {
    if (!this.isInstanceTraced(instance)) {
      return { traced: false };
    }
    
    return {
      traced: true,
      agentType: instance.agentType,
      appliedAt: instance.tracingTimestamp,
      className: instance.constructor.name
    };
  }
}