/**
 * üîç TRACING DECORATORS
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ —Ñ—É–Ω–∫—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ OpenAI Agent SDK
 * 
 * –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ spans –¥–ª—è –º–µ—Ç–æ–¥–æ–≤
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI SDK withTrace
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ createFunctionSpan –∏ createCustomSpan
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤ —Ç—Ä–µ–π—Å–∏–Ω–≥–µ
 */

import { withTrace, createFunctionSpan, createCustomSpan } from '@openai/agents';

export interface TracingDecoratorOptions {
  spanName?: string;
  spanType?: 'function' | 'custom' | 'agent' | 'tool';
  includeArgs?: boolean;
  includeResult?: boolean;
  metadata?: Record<string, any>;
  sensitiveDataMode?: boolean;
  errorHandler?: (error: Error, context: any) => void;
}

export interface DecoratorMetadata {
  agentType?: string;
  functionName: string;
  category?: 'core' | 'specialist' | 'tool' | 'utility';
  importance?: 'critical' | 'high' | 'medium' | 'low';
}

/**
 * üéØ –û–°–ù–û–í–ù–û–ô –î–ï–ö–û–†–ê–¢–û–† –¢–†–ï–ô–°–ò–ù–ì–ê
 * 
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã –≤ OpenAI SDK —Ç—Ä–µ–π—Å–∏–Ω–≥
 */
export function Traced(options: TracingDecoratorOptions = {}) {
  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {
    const method = descriptor.value;
    const className = target.constructor.name;
    const spanName = options.spanName || `${className}.${propertyName}`;
    
    descriptor.value = async function (...args: any[]) {
      const startTime = Date.now();
      const traceId = `trace_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
      const tracingContext = {
        className,
        methodName: propertyName,
        spanName,
        traceId,
        startTime,
        agentType: (this as any).agentType || 'unknown',
        ...options.metadata
      };
      
      console.log(`üîç [${tracingContext.agentType}] Starting traced method: ${spanName}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º withTrace –∏–∑ OpenAI SDK
      return withTrace(
        {
          name: spanName,
          metadata: {
            ...tracingContext,
            functionCategory: 'agent_method',
            argsCount: args.length,
            includeArgs: options.includeArgs,
            includeResult: options.includeResult,
            timestamp: new Date().toISOString()
          }
        },
        async () => {
          try {
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
            if (options.includeArgs && !options.sensitiveDataMode) {
              console.log(`üì• [${spanName}] Args:`, args.map(arg => 
                typeof arg === 'object' ? JSON.stringify(arg).slice(0, 200) + '...' : arg
              ));
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            const result = await method.apply(this, args);
            const duration = Date.now() - startTime;
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ)
            if (options.includeResult && !options.sensitiveDataMode) {
              console.log(`üì§ [${spanName}] Result:`, 
                typeof result === 'object' ? JSON.stringify(result).slice(0, 200) + '...' : result
              );
            }
            
            console.log(`‚úÖ [${tracingContext.agentType}] Completed traced method: ${spanName} (${duration}ms)`);
            return result;
            
          } catch (error) {
            const duration = Date.now() - startTime;
            const errorMessage = error instanceof Error ? error.message : String(error);
            
            console.error(`‚ùå [${tracingContext.agentType}] Failed traced method: ${spanName} (${duration}ms)`, errorMessage);
            
            // –ö–∞—Å—Ç–æ–º–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            if (options.errorHandler) {
              options.errorHandler(error as Error, tracingContext);
            }
            
            throw error;
          }
        }
      );
    };
    
    return descriptor;
  };
}

/**
 * üîß –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø TOOL –§–£–ù–ö–¶–ò–ô
 * 
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –∞–≥–µ–Ω—Ç–æ–≤
 */
export function TracedTool(toolName: string, options: TracingDecoratorOptions = {}) {
  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {
    const method = descriptor.value;
    const spanName = `tool_${toolName}_${propertyName}`;
    
    descriptor.value = async function (...args: any[]) {
      const startTime = Date.now();
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º createFunctionSpan –∏–∑ OpenAI SDK –¥–ª—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
      console.log(`üîß [TOOL] Starting tool execution: ${toolName}.${propertyName}`);
      
      return withTrace(
        {
          name: spanName,
          metadata: {
            toolName,
            functionName: propertyName,
            spanType: 'tool_execution',
            agentType: (this as any).agentType || 'unknown',
            argsCount: args.length,
            timestamp: new Date().toISOString(),
            ...options.metadata
          }
        },
        async () => {
          try {
            const result = await method.apply(this, args);
            const duration = Date.now() - startTime;
            
            console.log(`‚úÖ [TOOL] Completed tool execution: ${toolName}.${propertyName} (${duration}ms)`);
            return result;
            
          } catch (error) {
            const duration = Date.now() - startTime;
            const errorMessage = error instanceof Error ? error.message : String(error);
            
            console.error(`‚ùå [TOOL] Failed tool execution: ${toolName}.${propertyName} (${duration}ms)`, errorMessage);
            throw error;
          }
        }
      );
    };
    
    return descriptor;
  };
}

/**
 * üéØ –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø HANDOFF –û–ü–ï–†–ê–¶–ò–ô
 * 
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–µ—Ä–µ–¥–∞—á –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
 */
export function TracedHandoff(options: TracingDecoratorOptions = {}) {
  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {
    const method = descriptor.value;
    const className = target.constructor.name;
    const spanName = `handoff_${className}_${propertyName}`;
    
    descriptor.value = async function (...args: any[]) {
      const startTime = Date.now();
      const fromAgent = (this as any).agentType || className;
      
      console.log(`üîÑ [HANDOFF] Starting handoff from ${fromAgent}: ${propertyName}`);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º createCustomSpan –¥–ª—è handoff –æ–ø–µ—Ä–∞—Ü–∏–π
      try {
        await createCustomSpan({
          data: {
            name: spanName
          }
        });
      } catch (error) {
        console.warn('‚ö†Ô∏è Failed to create custom span for handoff:', error);
      }
      
      return withTrace(
        {
          name: spanName,
          metadata: {
            handoffType: 'agent_to_agent',
            fromAgent,
            operation: propertyName,
            timestamp: new Date().toISOString(),
            ...options.metadata
          }
        },
        async () => {
          try {
            const result = await method.apply(this, args);
            const duration = Date.now() - startTime;
            
            console.log(`‚úÖ [HANDOFF] Completed handoff from ${fromAgent}: ${propertyName} (${duration}ms)`);
            return result;
            
          } catch (error) {
            const duration = Date.now() - startTime;
            const errorMessage = error instanceof Error ? error.message : String(error);
            
            console.error(`‚ùå [HANDOFF] Failed handoff from ${fromAgent}: ${propertyName} (${duration}ms)`, errorMessage);
            throw error;
          }
        }
      );
    };
    
    return descriptor;
  };
}

/**
 * üß† –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø AGENT –û–ü–ï–†–ê–¶–ò–ô
 * 
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∞–≥–µ–Ω—Ç–æ–≤
 */
export function TracedAgent(agentType: string, options: TracingDecoratorOptions = {}) {
  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {
    const method = descriptor.value;
    const spanName = `agent_${agentType}_${propertyName}`;
    
    descriptor.value = async function (...args: any[]) {
      const startTime = Date.now();
      
      console.log(`ü§ñ [${agentType.toUpperCase()}] Starting agent operation: ${propertyName}`);
      
      return withTrace(
        {
          name: spanName,
          metadata: {
            agentType,
            operation: propertyName,
            spanType: 'agent_operation',
            argsCount: args.length,
            timestamp: new Date().toISOString(),
            ...options.metadata
          }
        },
        async () => {
          try {
            const result = await method.apply(this, args);
            const duration = Date.now() - startTime;
            
            console.log(`‚úÖ [${agentType.toUpperCase()}] Completed agent operation: ${propertyName} (${duration}ms)`);
            return result;
            
          } catch (error) {
            const duration = Date.now() - startTime;
            const errorMessage = error instanceof Error ? error.message : String(error);
            
            console.error(`‚ùå [${agentType.toUpperCase()}] Failed agent operation: ${propertyName} (${duration}ms)`, errorMessage);
            throw error;
          }
        }
      );
    };
    
    return descriptor;
  };
}

/**
 * üìä –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
 * 
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */
export function TracedPerformance(options: TracingDecoratorOptions = {}) {
  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {
    const method = descriptor.value;
    const className = target.constructor.name;
    const spanName = `perf_${className}_${propertyName}`;
    
    descriptor.value = async function (...args: any[]) {
      const startTime = Date.now();
      const startMemory = process.memoryUsage();
      
      console.log(`üìä [PERF] Starting performance tracking: ${spanName}`);
      
      return withTrace(
        {
          name: spanName,
          metadata: {
            performanceTracking: true,
            className,
            methodName: propertyName,
            startMemory: startMemory.heapUsed,
            timestamp: new Date().toISOString(),
            ...options.metadata
          }
        },
        async () => {
          try {
            const result = await method.apply(this, args);
            const duration = Date.now() - startTime;
            const endMemory = process.memoryUsage();
            const memoryDelta = endMemory.heapUsed - startMemory.heapUsed;
            
            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            console.log(`üìä [PERF] Performance metrics for ${spanName}:`, {
              duration: `${duration}ms`,
              memoryDelta: `${Math.round(memoryDelta / 1024)}KB`,
              heapUsed: `${Math.round(endMemory.heapUsed / 1024 / 1024)}MB`,
              resultSize: typeof result === 'object' ? JSON.stringify(result).length : 0
            });
            
            return result;
            
          } catch (error) {
            const duration = Date.now() - startTime;
            const errorMessage = error instanceof Error ? error.message : String(error);
            
            console.error(`‚ùå [PERF] Performance tracking failed for ${spanName} (${duration}ms)`, errorMessage);
            throw error;
          }
        }
      );
    };
    
    return descriptor;
  };
}

/**
 * üîß –£–¢–ò–õ–ò–¢–ê–†–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –î–ï–ö–û–†–ê–¢–û–†–û–í
 */
export class TracingUtils {
  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–∞—Å—Ç–æ–º–Ω—É—é –º–µ—Ç—Ä–∏–∫—É —Ç—Ä–µ–π—Å–∏–Ω–≥–∞
   */
  static async createCustomMetric(name: string, value: number, metadata?: Record<string, any>) {
    try {
      await createCustomSpan({
        data: {
          name: `metric_${name}`
        }
      });
      
      console.log(`üìà [METRIC] ${name}: ${value}`, metadata);
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to create custom metric:', error);
    }
  }
  
  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç—Ä–µ–π—Å–∏–Ω–≥–µ
   */
  static async logTraceEvent(eventName: string, data: any, agentType?: string) {
    const timestamp = new Date().toISOString();
    const prefix = agentType ? `[${agentType.toUpperCase()}]` : '[EVENT]';
    
    console.log(`üéØ ${prefix} Trace Event: ${eventName}`, {
      timestamp,
      data: typeof data === 'object' ? JSON.stringify(data).slice(0, 200) + '...' : data
    });
  }
  
  /**
   * –°–æ–∑–¥–∞—Ç—å span –¥–ª—è –≥—Ä—É–ø–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π
   */
  static async createOperationGroup(groupName: string, operations: string[], agentType?: string) {
    try {
      await createCustomSpan({
        data: {
          name: `group_${groupName}`
        }
      });
      
      console.log(`üèóÔ∏è [GROUP] ${agentType ? `[${agentType.toUpperCase()}] ` : ''}Operation group: ${groupName}`, {
        operationsCount: operations.length,
        operations: operations.join(', ')
      });
    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to create operation group span:', error);
    }
  }
}

/**
 * üé® –î–ï–ö–û–†–ê–¢–û–† –î–õ–Ø –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–†–ò–ú–ï–ù–ï–ù–ò–Ø –¢–†–ï–ô–°–ò–ù–ì–ê
 * 
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç—Ä–µ–π—Å–∏–Ω–≥ –∫–æ –≤—Å–µ–º –º–µ—Ç–æ–¥–∞–º –∫–ª–∞—Å—Å–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
 */
export function AutoTraced(agentType: string, options: TracingDecoratorOptions = {}) {
  return function <T extends { new (...args: any[]): {} }>(constructor: T) {
    const prototype = constructor.prototype;
    const methodNames = Object.getOwnPropertyNames(prototype);
    
    methodNames.forEach(methodName => {
      if (methodName !== 'constructor' && typeof prototype[methodName] === 'function') {
        const originalMethod = prototype[methodName];
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–µ–π—Å–∏–Ω–≥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
        prototype[methodName] = async function (...args: any[]) {
          const spanName = `${agentType}_${methodName}`;
          
          return withTrace(
            {
              name: spanName,
              metadata: {
                agentType,
                methodName,
                autoTraced: true,
                timestamp: new Date().toISOString(),
                ...options.metadata
              }
            },
            async () => {
              return originalMethod.apply(this, args);
            }
          );
        };
      }
    });
    
    return constructor;
  };
}