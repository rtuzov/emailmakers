/**
 * üîß TRACING CONFIGURATION
 * 
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –¥–ª—è –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI SDK tracing –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { TracingDecoratorOptions } from './tracing-decorators';

export interface TracingConfig {
  enabled: boolean;
  sensitiveDataMode: boolean;
  includeArgs: boolean;
  includeResults: boolean;
  performanceTracking: boolean;
  agentTypes: string[];
  excludedMethods: string[];
  customMetadata: Record<string, any>;
}

export interface AgentTracingProfile {
  agentType: string;
  criticalMethods: string[];
  performanceMethods: string[];
  toolMethods: string[];
  handoffMethods: string[];
  defaultOptions: TracingDecoratorOptions;
}

/**
 * üìä –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –¢–†–ï–ô–°–ò–ù–ì–ê
 */
export class TracingConfiguration {
  private static instance: TracingConfiguration;
  private config: TracingConfig;
  private profiles: Map<string, AgentTracingProfile> = new Map();

  private constructor() {
    this.config = {
      enabled: true,
      sensitiveDataMode: false,
      includeArgs: true,
      includeResults: true,
      performanceTracking: true,
      agentTypes: ['content', 'design', 'quality', 'delivery'],
      excludedMethods: ['constructor', 'toString', 'valueOf'],
      customMetadata: {
        environment: process.env.NODE_ENV || 'development',
        project: 'Email-Makers',
        version: '2.0.0'
      }
    };

    this.initializeAgentProfiles();
  }

  static getInstance(): TracingConfiguration {
    if (!TracingConfiguration.instance) {
      TracingConfiguration.instance = new TracingConfiguration();
    }
    return TracingConfiguration.instance;
  }

  /**
   * üéØ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –∞–≥–µ–Ω—Ç–æ–≤
   */
  private initializeAgentProfiles(): void {
    // Content Specialist Profile
    this.profiles.set('content', {
      agentType: 'content',
      criticalMethods: ['generateContent', 'analyzeContent', 'optimizeContent'],
      performanceMethods: ['generateContent', 'processLargeContent'],
      toolMethods: ['getPrices', 'getCurrentDate', 'planEmailImages'],
      handoffMethods: ['transferToDesignSpecialist', 'handoffToNext'],
      defaultOptions: {
        includeArgs: true,
        includeResult: true,
        metadata: { priority: 'high', category: 'content_generation' }
      }
    });

    // Design Specialist Profile
    this.profiles.set('design', {
      agentType: 'design',
      criticalMethods: ['renderEmail', 'compileTemplate', 'optimizeDesign'],
      performanceMethods: ['renderEmail', 'processAssets', 'compileMJML'],
      toolMethods: ['selectFigmaAssets', 'compileToHTML', 'optimizeImages'],
      handoffMethods: ['transferToQualitySpecialist', 'handoffToNext'],
      defaultOptions: {
        includeArgs: true,
        includeResult: true,
        metadata: { priority: 'high', category: 'design_rendering' }
      }
    });

    // Quality Specialist Profile
    this.profiles.set('quality', {
      agentType: 'quality',
      criticalMethods: ['validateQuality', 'checkCompatibility', 'runTests'],
      performanceMethods: ['runComprehensiveTests', 'validateLargeTemplates'],
      toolMethods: ['validateHTML', 'testRendering', 'checkAccessibility'],
      handoffMethods: ['transferToDeliverySpecialist', 'handoffToNext', 'returnForFixes'],
      defaultOptions: {
        includeArgs: true,
        includeResult: true,
        metadata: { priority: 'critical', category: 'quality_assurance' }
      }
    });

    // Delivery Specialist Profile
    this.profiles.set('delivery', {
      agentType: 'delivery',
      criticalMethods: ['deployContent', 'organizeFiles', 'finalizeDelivery'],
      performanceMethods: ['uploadLargeFiles', 'processMultipleAssets'],
      toolMethods: ['uploadToS3', 'organizeAssets', 'generateReport'],
      handoffMethods: ['completeWorkflow', 'finalizeDelivery'],
      defaultOptions: {
        includeArgs: true,
        includeResult: true,
        metadata: { priority: 'high', category: 'delivery_deployment' }
      }
    });
  }

  /**
   * üîß –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç—Ä–µ–π—Å–∏–Ω–≥–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞
   */
  getAgentProfile(agentType: string): AgentTracingProfile | undefined {
    return this.profiles.get(agentType);
  }

  /**
   * üìã –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏
   */
  getAllProfiles(): AgentTracingProfile[] {
    return Array.from(this.profiles.values());
  }

  /**
   * ‚öôÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  updateConfig(updates: Partial<TracingConfig>): void {
    this.config = { ...this.config, ...updates };
    console.log('üîß [TRACING CONFIG] Configuration updated:', updates);
  }

  /**
   * üìä –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
   */
  getConfig(): TracingConfig {
    return { ...this.config };
  }

  /**
   * üéØ –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –¥–æ–ª–∂–µ–Ω –ª–∏ –º–µ—Ç–æ–¥ –±—ã—Ç—å –æ—Ç—Å–ª–µ–∂–µ–Ω
   */
  shouldTraceMethod(agentType: string, methodName: string): boolean {
    if (!this.config.enabled) return false;
    if (this.config.excludedMethods.includes(methodName)) return false;
    
    const profile = this.profiles.get(agentType);
    if (!profile) return true; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—Ä–µ–π—Å–∏–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã
    
    return true; // –í—Å–µ –º–µ—Ç–æ–¥—ã –≤ –ø—Ä–æ—Ñ–∏–ª–µ —Ç—Ä–µ–π—Å—è—Ç—Å—è
  }

  /**
   * üîß –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –º–µ—Ç–æ–¥–∞
   */
  getDecoratorOptions(agentType: string, methodName: string): TracingDecoratorOptions {
    const profile = this.profiles.get(agentType);
    const baseOptions = profile?.defaultOptions || {};
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –º–µ—Ç–æ–¥–æ–≤
    let specificOptions: Partial<TracingDecoratorOptions> = {};
    
    if (profile?.criticalMethods.includes(methodName)) {
      specificOptions = {
        metadata: { ...baseOptions.metadata, importance: 'critical' }
      };
    } else if (profile?.performanceMethods.includes(methodName)) {
      specificOptions = {
        metadata: { ...baseOptions.metadata, trackPerformance: true }
      };
    } else if (profile?.toolMethods.includes(methodName)) {
      specificOptions = {
        spanType: 'tool',
        metadata: { ...baseOptions.metadata, category: 'tool_execution' }
      };
    } else if (profile?.handoffMethods.includes(methodName)) {
      specificOptions = {
        spanType: 'custom',
        metadata: { ...baseOptions.metadata, category: 'agent_handoff' }
      };
    }
    
    return {
      ...baseOptions,
      ...specificOptions,
      sensitiveDataMode: this.config.sensitiveDataMode,
      includeArgs: this.config.includeArgs,
      includeResult: this.config.includeResults
    };
  }

  /**
   * üìà –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  enablePerformanceMode(): void {
    this.updateConfig({
      performanceTracking: true,
      includeArgs: false,
      includeResults: false,
      sensitiveDataMode: true
    });
    console.log('üöÄ [TRACING CONFIG] Performance mode enabled');
  }

  /**
   * üîç –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏
   */
  enableDebugMode(): void {
    this.updateConfig({
      includeArgs: true,
      includeResults: true,
      sensitiveDataMode: false,
      performanceTracking: true
    });
    console.log('üêõ [TRACING CONFIG] Debug mode enabled');
  }

  /**
   * üîí –í–∫–ª—é—á–∏—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Ä–µ–∂–∏–º
   */
  enableSecureMode(): void {
    this.updateConfig({
      sensitiveDataMode: true,
      includeArgs: false,
      includeResults: false
    });
    console.log('üîí [TRACING CONFIG] Secure mode enabled');
  }

  /**
   * üìä –≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  exportConfig(): any {
    return {
      config: this.config,
      profiles: Array.from(this.profiles.entries()),
      timestamp: new Date().toISOString(),
      version: '1.0.0'
    };
  }
}

/**
 * üåç –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export const tracingConfig = TracingConfiguration.getInstance();

/**
 * üé® –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 */
export const TracingPresets = {
  development: {
    enabled: true,
    sensitiveDataMode: false,
    includeArgs: true,
    includeResults: true,
    performanceTracking: true
  },
  
  production: {
    enabled: true,
    sensitiveDataMode: true,
    includeArgs: false,
    includeResults: false,
    performanceTracking: true
  },
  
  testing: {
    enabled: true,
    sensitiveDataMode: false,
    includeArgs: true,
    includeResults: true,
    performanceTracking: false
  },
  
  debugging: {
    enabled: true,
    sensitiveDataMode: false,
    includeArgs: true,
    includeResults: true,
    performanceTracking: true
  }
};

/**
 * üîß –£—Ç–∏–ª–∏—Ç–∞—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
 */
export class TracingSetup {
  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
   */
  static applyPreset(presetName: keyof typeof TracingPresets): void {
    const preset = TracingPresets[presetName];
    tracingConfig.updateConfig(preset);
    console.log(`üéØ [TRACING SETUP] Applied preset: ${presetName}`);
  }
  
  /**
   * –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç—Ä–µ–π—Å–∏–Ω–≥ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
   */
  static configureAgent(agentType: string, options: Partial<AgentTracingProfile>): void {
    const currentProfile = tracingConfig.getAgentProfile(agentType);
    if (currentProfile) {
      const updatedProfile = { ...currentProfile, ...options };
      tracingConfig.getAllProfiles(); // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      console.log(`ü§ñ [TRACING SETUP] Configured agent: ${agentType}`);
    }
  }
  
  /**
   * –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
   */
  static setupDevelopment(): void {
    TracingSetup.applyPreset('development');
    tracingConfig.enableDebugMode();
  }
  
  /**
   * –ë—ã—Å—Ç—Ä–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
   */
  static setupProduction(): void {
    TracingSetup.applyPreset('production');
    tracingConfig.enableSecureMode();
  }
}