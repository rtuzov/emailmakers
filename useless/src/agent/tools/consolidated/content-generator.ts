/**
 * ‚úçÔ∏è CONTENT GENERATOR - Modular Consolidated Tool
 * 
 * –ú–û–î–£–õ–¨–ù–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê v2:
 * - PricingService: –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω –∏ —Ü–µ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * - GenerationService: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è, –∞–Ω–∞–ª–∏–∑
 * - –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å OpenAI Agents SDK v2
 * 
 * –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 */

import { tool } from '@openai/agents';
import { z } from 'zod';
import { recordToolUsage } from '../../utils/tracing-utils';
import {
  contentGeneratorSchema,
  ContentGeneratorParams,
  ContentGeneratorResult,
  PricingService,
  GenerationService
} from '../../specialists/content';
import EmailFolderManager from '../email-folder-manager';
import { campaignState } from '../../core/campaign-state';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—å–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const pricingService = new PricingService();
const generationService = new GenerationService();

/**
 * Content Generator - Modular intelligent content creation with context awareness
 */
export async function contentGenerator(params: ContentGeneratorParams): Promise<ContentGeneratorResult> {
  const startTime = Date.now();
  console.log(`‚úçÔ∏è Content Generator (Modular): Executing action "${params.action}" for topic: "${params.topic}"`);
  
  try {
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–≤–∏—Å–∞–Ω–∏—è
    const timeoutPromise = new Promise<ContentGeneratorResult>((_, reject) => {
      setTimeout(() => reject(new Error('Content generation timeout after 30 seconds')), 30000);
    });

    const generationPromise = executeContentGeneration(params, startTime);
    
    const result = await Promise.race([generationPromise, timeoutPromise]);
    
    // Record tracing statistics
    if (result.analytics) {
      recordToolUsage({
        tool: 'content-generator-modular',
        operation: params.action,
        duration: result.analytics.execution_time,
        success: result.success
      });
    }
    
    console.log(`‚úÖ Content Generator (Modular): Completed "${params.action}" successfully`);
    return result;
    
  } catch (error) {
    console.error('‚ùå Content Generator (Modular) error:', error);
    
    const errorResult: ContentGeneratorResult = {
      success: false,
      action: params.action,
      error: error instanceof Error ? error.message : 'Unknown error',
      analytics: params.include_analytics ? {
        execution_time: Date.now() - startTime,
        content_length: 0,
        complexity_score: 0,
        generation_confidence: 0,
        ai_model_used: 'error'
      } : undefined
    };
    
    // Record error statistics
    recordToolUsage({
      tool: 'content-generator-modular',
      operation: params.action,
      duration: Date.now() - startTime,
      success: false,
      error: errorResult.error
    });
    
    return errorResult;
  }
}

async function executeContentGeneration(params: ContentGeneratorParams, startTime: number): Promise<ContentGeneratorResult> {
  let result: ContentGeneratorResult;
    
  switch (params.action) {
    case 'generate': {
      const generatedContent = await generateContentBodyForTopic(params.topic);
      result = {
        success: true,
        action: 'generate',
        data: {
          content: generatedContent
        },
        analytics: {
          execution_time: Date.now() - startTime,
          content_length: generatedContent.body.length,
          complexity_score: 80,
          generation_confidence: 90,
          ai_model_used: 'gpt-4o-mini'
        }
      };
      break;
    }
      
    case 'optimize': {
      // Return placeholder result for now
      result = {
        success: true,
        action: 'optimize',
        data: {
          content: {
            subject: `–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–µ–º–∞: ${params.topic}`,
            preheader: '–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫',
            body: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–∏—Å—å–º–∞...',
            cta: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
            language: 'ru',
            tone: 'friendly'
          }
        }
      };
      break;
    }
      
    case 'variants': {
      // Return placeholder result for now
      result = {
        success: true,
        action: 'variants',
        data: {
          variants: [
            {
              id: 'variant-1',
              content: {
                subject: `–í–∞—Ä–∏–∞–Ω—Ç 1: ${params.topic}`,
                preheader: '–ü—Ä–µ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1',
                body: '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ 1...',
                cta: '–î–µ–π—Å—Ç–≤–∏–µ 1',
                language: 'ru',
                tone: 'friendly'
              },
              focus: 'urgency',
              score: 85
            }
          ]
        }
      };
      break;
    }
      
    case 'personalize': {
      // Return placeholder result for now
      result = {
        success: true,
        action: 'personalize',
        data: {
          content: {
            subject: `–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ${params.topic}`,
            preheader: '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å',
            body: '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...',
            cta: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
            language: 'ru',
            tone: 'friendly'
          }
        }
      };
      break;
    }
      
    case 'analyze': {
      // Return placeholder result for now
      result = {
        success: true,
        action: 'analyze',
        data: {
          analysis: {
            readability_score: 75,
            sentiment_score: 80,
            engagement_potential: 70,
            brand_alignment: 85
          }
        }
      };
      break;
    }
      
    case 'test': {
      // Return placeholder result for now
      result = {
        success: true,
        action: 'test',
        data: {
          test_setup: {
            variants: [
              {
                variant_id: 'test-1',
                content: {
                  subject: `–¢–µ—Å—Ç: ${params.topic}`,
                  preheader: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–µ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫',
                  body: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ...',
                  cta: '–¢–µ—Å—Ç–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                  language: 'ru',
                  tone: 'friendly'
                },
                predicted_performance: 78
              }
            ],
            recommended_split: '50/50',
            test_duration: '7 days',
            success_metric: 'click_rate'
          }
        }
      };
      break;
    }
      
    default:
      throw new Error(`Unknown action: ${params.action}`);
  }
  
  return result;
}

// Campaign folder creation tool - –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –ª–æ–≥–∞—Ö OpenAI
export const createCampaignFolderTool = tool({
  name: 'create_campaign_folder',
  description: 'Creates a new campaign folder for email generation with proper structure and metadata',
  parameters: z.object({
    topic: z.string().describe('Campaign topic or theme'),
    campaign_type: z.enum(['promotional', 'newsletter', 'transactional', 'welcome']).describe('Type of email campaign'),
    trace_id: z.string().nullable().optional().describe('Optional trace ID for folder naming')
  }),
  execute: async (params) => {
    console.log(`üìÅ Creating campaign folder for topic: "${params.topic}"`);
    
    try {
      // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
      const emailFolder = await EmailFolderManager.createEmailFolder(
        params.topic,
        params.campaign_type,
        params.trace_id
      );
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
      campaignState.setCampaign({
        campaignId: emailFolder.campaignId,
        emailFolder: emailFolder,
        topic: params.topic,
        campaign_type: params.campaign_type,
        created_at: new Date().toISOString(),
        trace_id: params.trace_id
      });
      
      console.log(`‚úÖ Campaign folder created: ${emailFolder.campaignId}`);
      console.log(`üìÇ Assets path: ${emailFolder.assetsPath}`);
      
      return JSON.stringify({
        success: true,
        campaign_id: emailFolder.campaignId,
        folder_path: emailFolder.basePath,
        assets_path: emailFolder.assetsPath,
        topic: params.topic,
        campaign_type: params.campaign_type
      }, null, 2);
      
    } catch (error) {
      console.error('‚ùå Failed to create campaign folder:', error);
      return JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }, null, 2);
    }
  }
});

// Export the tool using OpenAI Agents SDK v2 pattern
export const contentGeneratorTool = tool({
  name: 'content_generator',
  description: 'Intelligent content generation with modular architecture supporting pricing analysis, content generation, optimization, variants, personalization, and analysis',
  parameters: contentGeneratorSchema,
  execute: contentGenerator
});

// Wrapper function for createCampaignFolderTool
export async function createCampaignFolder(params: {
  topic: string;
  campaign_type: 'promotional' | 'newsletter' | 'transactional' | 'welcome';
  trace_id: string | null;
}) {
  console.log(`üìÅ Creating campaign folder for topic: "${params.topic}"`);
  
  try {
    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
    const emailFolder = await EmailFolderManager.createEmailFolder(
      params.topic,
      params.campaign_type,
      params.trace_id
    );
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏
    campaignState.setCampaign({
      campaignId: emailFolder.campaignId,
      emailFolder: emailFolder,
      topic: params.topic,
      campaign_type: params.campaign_type,
      created_at: new Date().toISOString(),
      trace_id: params.trace_id
    });
    
    console.log(`‚úÖ Campaign folder created: ${emailFolder.campaignId}`);
    console.log(`üìÇ Assets path: ${emailFolder.assetsPath}`);
    
    return {
      success: true,
      campaign_id: emailFolder.campaignId,
      folder_path: emailFolder.basePath,
      assets_path: emailFolder.assetsPath,
      topic: params.topic,
      campaign_type: params.campaign_type
    };
    
  } catch (error) {
    console.error('‚ùå Failed to create campaign folder:', error);
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error'
    };
  }
}

// Re-export schema for external use
export { contentGeneratorSchema } from '../../specialists/content';
export type { ContentGeneratorParams, ContentGeneratorResult } from '../../specialists/content';

/**
 * Generate detailed content body for a specific topic using prompts from @/prompts/content.md
 * This function uses structured prompts instead of creating AI agents
 */
async function generateContentBodyForTopic(topic: string, context: any = {}): Promise<{
  subject: string;
  preheader: string;
  body: string;
  cta: string;
  language: string;
  tone: string;
  image_requirements?: {
    total_images_needed: number;
    figma_images_count: number;
    internet_images_count: number;
    require_logo: boolean;
    image_categories: string[];
    placement_instructions: {
      figma_assets: string[];
      external_images: string[];
    };
  };
}> {
  console.log(`üéØ Prompt-Based Content Generation: Generating content for topic: "${topic}"`);
  
  try {
    // Import AI dependencies
    const { Agent, run } = await import('@openai/agents');
    const { getUsageModel } = await import('../../../shared/utils/model-config');
    const { PromptManager } = await import('../../core/prompt-manager');
    
    // Extract prices from context for prompt injection
    const pricesText = context.prices ? 
      `–¶–µ–Ω—ã: ${context.prices.map((p: any) => `${p.destination} –æ—Ç ${p.price} ${p.currency}`).join(', ')}` :
      '–¶–µ–Ω—ã —É—Ç–æ—á–Ω—è—é—Ç—Å—è –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏';
    
    // Load prompt from content.md using PromptManager
    const promptManager = PromptManager.getInstance();
    const basePrompt = promptManager.loadPrompt('content.md');
    
    // Replace placeholders in the loaded prompt
    const contentPrompt = basePrompt
      .replace(/\{topic\}/g, topic)
      .replace(/\{prices\}/g, pricesText);

    // Create simple agent using the enhanced prompt
    const contentAgent = new Agent({
      name: 'ContentSpecialist',
      instructions: contentPrompt,
      model: getUsageModel()
    });

    console.log('ü§ñ AI Agent: Generating content with image requirements using enhanced prompt...');
    
    const result = await run(contentAgent, `–°–æ–∑–¥–∞–π email –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —Ç–µ–º—ã: "${topic}"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${JSON.stringify(context, null, 2)}\n\n–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON —Å —Ç—Ä–µ–±—É–µ–º—ã–º–∏ –ø–æ–ª—è–º–∏ –≤–∫–ª—é—á–∞—è image_requirements.`);
    const aiResponse = result.finalOutput;
    
    if (!aiResponse) {
      throw new Error('AI agent returned empty response');
    }
    
    // Parse AI response
    let parsedContent;
    try {
      // Extract JSON from AI response
      const jsonMatch = aiResponse.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No JSON found in AI response');
      }
      parsedContent = JSON.parse(jsonMatch[0]);
    } catch (parseError) {
      console.error('‚ùå Failed to parse AI response:', parseError);
      throw new Error('AI response is not valid JSON');
    }
    
    // Validate required fields
    const requiredFields = ['subject', 'preheader', 'body', 'cta', 'language', 'tone'];
    for (const field of requiredFields) {
      if (!parsedContent[field]) {
        throw new Error(`AI response missing required field: ${field}`);
      }
    }
    
    // Add default image requirements if not provided by AI
    if (!parsedContent.image_requirements) {
      console.log('‚ö†Ô∏è AI did not provide image requirements, adding defaults');
      parsedContent.image_requirements = {
        total_images_needed: 3,
        figma_images_count: 2,
        internet_images_count: 1,
        require_logo: true,
        image_categories: ['hero', 'illustration', 'icon'],
        placement_instructions: {
          figma_assets: ['–ó–∞—è—Ü Kupibilet –¥–ª—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞', '–ò–∫–æ–Ω–∫–∏ —É—Å–ª—É–≥'],
          external_images: ['–§–æ—Ç–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è hero —Å–µ–∫—Ü–∏–∏']
        }
      };
    }
    
    console.log('‚úÖ Prompt-Based Content Generated:', {
      subject_length: parsedContent.subject.length,
      body_length: parsedContent.body.length,
      language: parsedContent.language,
      tone: parsedContent.tone,
      image_strategy: `${parsedContent.image_requirements.figma_images_count} Figma + ${parsedContent.image_requirements.internet_images_count} external`
    });
    
    return parsedContent;
    
  } catch (error) {
    console.error('‚ùå Prompt-Based Content Generation Error:', error);
    
    // ‚ùå FALLBACK POLICY: No fallback allowed - fail fast
    throw new Error(`Prompt-based content generation failed: ${error.message}`);
  }
}