const http = require('http');
const fs = require('fs').promises;
const path = require('path');

// –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const testData = {
  task_type: "generate_content",
  input: {
    brief: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",
    tone: "—É–≤–µ—Ä–µ–Ω–Ω—ã–π",
    target_audience: "—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫–∏",
    brand_guidelines: {
      style: "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏ —Ç–æ—á–Ω—ã–π",
      language: "ru",
      content_type: "promotional"
    }
  },
  context: {
    figma_url: "https://www.figma.com/design/gJBHVJSHhOJdVLcXQEELpy/Email-Makers?node-id=4-9&t=uPmvpJMJLXPzfNVK-1",
    user_id: "fix_test_user"
  }
};

const postData = JSON.stringify(testData);
const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/api/agent/run-improved',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

console.log('üîß Test Fixed System: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π');
console.log('üìù Brief:', testData.input.brief);
console.log('üìÖ –í—Ä–µ–º—è:', new Date().toLocaleString());
console.log('==========================================');

const startTime = Date.now();

const req = http.request(options, (res) => {
  console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
  
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', async () => {
    const endTime = Date.now();
    console.log('==========================================');
    console.log(`üì¶ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}ms`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${data.length} –±–∞–π—Ç`);
    
    try {
      const result = JSON.parse(data);
      console.log('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω');
      console.log('üèÅ –°—Ç–∞—Ç—É—Å:', result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
      console.log('üÜî Trace ID:', result.traceId || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      
      if (result.error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
        return;
      }
      
      // –ò—â–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é –∫–∞–º–ø–∞–Ω–∏—é
      console.log('\nüîç –ü–æ–∏—Å–∫ —Å–∞–º–æ–π –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏...');
      
      const mailsPath = path.join(process.cwd(), 'mails');
      const folders = await fs.readdir(mailsPath);
      
      const campaignFolders = [];
      for (const folder of folders) {
        if (folder === 'shared-assets') continue;
        
        try {
          const folderPath = path.join(mailsPath, folder);
          const stat = await fs.stat(folderPath);
          if (stat.isDirectory()) {
            campaignFolders.push({
              name: folder,
              path: folderPath,
              created: stat.birthtime
            });
          }
        } catch {}
      }
      
      if (campaignFolders.length > 0) {
        campaignFolders.sort((a, b) => b.created - a.created);
        const newestCampaign = campaignFolders[0];
        
        console.log(`üìÅ –°–∞–º–∞—è –Ω–æ–≤–∞—è –∫–∞–º–ø–∞–Ω–∏—è: ${newestCampaign.name}`);
        console.log(`üìÖ –°–æ–∑–¥–∞–Ω–∞: ${newestCampaign.created.toLocaleString()}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ —Å–∞–º–æ–π –Ω–æ–≤–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
        const files = await fs.readdir(newestCampaign.path);
        console.log(`üìÅ –§–∞–π–ª—ã –≤ –∫–∞–º–ø–∞–Ω–∏–∏:`, files);
        
        const htmlPath = path.join(newestCampaign.path, 'email.html');
        const mjmlPath = path.join(newestCampaign.path, 'email.mjml');
        
        let success = true;
        
        try {
          await fs.access(htmlPath);
          const htmlContent = await fs.readFile(htmlPath, 'utf8');
          console.log(`‚úÖ EMAIL.HTML –ù–ê–ô–î–ï–ù!`);
          console.log(`üìÑ –†–∞–∑–º–µ—Ä: ${htmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          
          if (htmlContent.length > 1000) {
            console.log(`‚úÖ HTML —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç (>${htmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
          } else {
            console.log(`‚ö†Ô∏è HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–º (${htmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
          }
        } catch {
          console.log(`‚ùå EMAIL.HTML –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
          success = false;
        }
        
        try {
          await fs.access(mjmlPath);
          const mjmlContent = await fs.readFile(mjmlPath, 'utf8');
          console.log(`‚úÖ EMAIL.MJML –ù–ê–ô–î–ï–ù!`);
          console.log(`üìÑ –†–∞–∑–º–µ—Ä: ${mjmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
          
          if (mjmlContent.includes('<mjml>') && mjmlContent.includes('</mjml>')) {
            console.log(`‚úÖ MJML –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É`);
          } else {
            console.log(`‚ö†Ô∏è MJML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π`);
          }
        } catch {
          console.log(`‚ùå EMAIL.MJML –û–¢–°–£–¢–°–¢–í–£–ï–¢`);
          success = false;
        }
        
        console.log('\n==========================================');
        if (success) {
          console.log('üéâ –£–°–ü–ï–•! –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –°–†–ê–ë–û–¢–ê–õ–û!');
          console.log('‚úÖ –§–∞–π–ª—ã email.html –∏ email.mjml –Ω–∞–π–¥–µ–Ω—ã');
          console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç');
        } else {
          console.log('‚ùå –ù–ï–£–î–ê–ß–ê - —Ñ–∞–π–ª—ã –≤—Å–µ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
          console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
        }
        
      } else {
        console.log('‚ùå –ö–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
    }
  });
});

req.on('error', (e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', e.message);
});

req.write(postData);
req.end(); 