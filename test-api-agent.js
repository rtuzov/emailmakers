#!/usr/bin/env node

/**
 * Comprehensive API Test for /api/agent/run-improved
 * Testing the Email-Makers agent system
 */

// Node.js v18+ has native fetch
if (typeof fetch === 'undefined') {
  global.fetch = require('node-fetch').default || require('node-fetch');
}

// Colors for console output
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
  reset: '\x1b[0m'
};

function colorLog(color, message) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testHealthCheck() {
  colorLog('cyan', '\nüîç === HEALTH CHECK TEST ===');
  
  try {
    const response = await fetch('http://localhost:3000/api/agent/run-improved', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      }
    });
    
    const result = await response.json();
    
    if (response.ok) {
      colorLog('green', '‚úÖ Health Check: PASSED');
      colorLog('white', `üìä Status: ${result.status}`);
      colorLog('white', `ü§ñ Agents: ${Object.keys(result.agents).length} available`);
      colorLog('white', `üîÑ Handoffs: ${Object.keys(result.handoffs).length} configured`);
      
      // Detail view
      colorLog('blue', '\nüìã Agent Details:');
      Object.entries(result.agents).forEach(([agent, status]) => {
        const icon = status === 'available' ? '‚úÖ' : '‚ùå';
        colorLog('white', `   ${icon} ${agent}: ${status}`);
      });
      
      colorLog('blue', '\nüîó Handoff Details:');
      Object.entries(result.handoffs).forEach(([handoff, details]) => {
        const icon = details ? '‚úÖ' : '‚ùå';
        colorLog('white', `   ${icon} ${handoff}: ${details ? 'configured' : 'missing'}`);
      });
      
      return true;
    } else {
      colorLog('red', '‚ùå Health Check: FAILED');
      colorLog('red', `üì± Status: ${response.status}`);
      colorLog('red', `üí• Error: ${result.error || 'Unknown error'}`);
      return false;
    }
  } catch (error) {
    colorLog('red', '‚ùå Health Check: ERROR');
    colorLog('red', `üí• Error: ${error.message}`);
    return false;
  }
}

async function testAgentExecution() {
  colorLog('cyan', '\nüöÄ === AGENT EXECUTION TEST ===');
  
  const testRequest = {
    task_type: 'email-campaign-creation',
    input: `–°–æ–∑–¥–∞—Ç—å email-–∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ "–†—É—Å—Å–∫–∏–π –ü—É—Ç—å" —Å –∞–∫—Ü–∏–µ–π –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –¢—É—Ä—Ü–∏—é:

–ë–†–ò–§:
- –ö–æ–º–ø–∞–Ω–∏—è: "–†—É—Å—Å–∫–∏–π –ü—É—Ç—å" (—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ)
- –ê–∫—Ü–∏—è: –ê–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –¢—É—Ä—Ü–∏—é –Ω–∞ 30% –¥–µ—à–µ–≤–ª–µ
- –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: –î–æ 31 –¥–µ–∫–∞–±—Ä—è 2024
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: 18-35 –ª–µ—Ç, –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–ª–æ–¥—ã–µ –ª—é–¥–∏
- –¢–æ–Ω: –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π
- –Ø–∑—ã–∫: –†—É—Å—Å–∫–∏–π
- –§–æ—Ä–º–∞—Ç: HTML email —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–∑—ã–≤: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å"
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã: –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Ç—É—Ä–µ—Ü–∫–∏—Ö –∫—É—Ä–æ—Ä—Ç–æ–≤, –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–æ–≤, –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ email-–∫–ª–∏–µ–Ω—Ç–∞–º–∏
- –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ <100KB
- –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç CAN-SPAM —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`,
    context: {
      language: 'ru',
      campaign_type: 'promotional',
      industry: 'travel',
      urgency: 'high',
      target_audience: 'young_adults'
    }
  };
  
  try {
    const startTime = Date.now();
    colorLog('yellow', `‚è±Ô∏è  Starting agent execution...`);
    colorLog('white', `üìã Task: ${testRequest.task_type}`);
    colorLog('white', `üìù Input length: ${testRequest.input.length} characters`);
    colorLog('white', `üîß Context: ${JSON.stringify(testRequest.context)}`);
    
    const response = await fetch('http://localhost:3000/api/agent/run-improved', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testRequest)
    });
    
    const result = await response.json();
    const executionTime = Date.now() - startTime;
    
    if (response.ok) {
      colorLog('green', `‚úÖ Agent Execution: PASSED in ${executionTime}ms`);
      colorLog('white', `üéØ Agent: ${result.agent}`);
      colorLog('white', `üìã Task Type: ${result.taskType}`);
      colorLog('white', `‚è±Ô∏è  Execution Time: ${result.executionTime}ms`);
      colorLog('white', `üìä Response Time: ${executionTime}ms`);
      
      // Result analysis
      if (result.result) {
        colorLog('blue', '\nüìà RESULT ANALYSIS:');
        colorLog('white', `üì§ Final Output Type: ${typeof result.result.finalOutput}`);
        colorLog('white', `üîß Available Properties: ${Object.keys(result.result).join(', ')}`);
        
        if (result.result.finalOutput) {
          const output = result.result.finalOutput;
          if (typeof output === 'string') {
            colorLog('white', `üìù Output Preview: ${output.slice(0, 200)}...`);
          } else {
            colorLog('white', `üìù Output Preview: ${JSON.stringify(output).slice(0, 200)}...`);
          }
        }
        
        if (result.result.history) {
          colorLog('white', `üìö History Items: ${result.result.history.length}`);
        }
      }
      
      return true;
    } else {
      colorLog('red', `‚ùå Agent Execution: FAILED (${response.status})`);
      colorLog('red', `üì± HTTP Status: ${response.status}`);
      colorLog('red', `üí• Error: ${result.error || 'Unknown error'}`);
      colorLog('red', `‚è±Ô∏è  Request Time: ${executionTime}ms`);
      
      // Additional error details
      if (result.timestamp) {
        colorLog('red', `‚è∞ Error Time: ${result.timestamp}`);
      }
      
      return false;
    }
  } catch (error) {
    colorLog('red', '‚ùå Agent Execution: ERROR');
    colorLog('red', `üí• Error: ${error.message}`);
    colorLog('red', `üìç Stack: ${error.stack}`);
    return false;
  }
}

async function performanceTest() {
  colorLog('cyan', '\n‚ö° === PERFORMANCE TEST ===');
  
  const results = [];
  const testRuns = 3;
  
  for (let i = 1; i <= testRuns; i++) {
    colorLog('yellow', `üîÑ Performance Test ${i}/${testRuns}`);
    
    const testRequest = {
      task_type: 'email-campaign-creation',
      input: `Test performance run ${i}: Create a simple email campaign for a tech company announcing a new product launch. Keep it brief and professional.`,
      context: {
        test_run: i,
        performance_test: true
      }
    };
    
    try {
      const startTime = Date.now();
      const response = await fetch('http://localhost:3000/api/agent/run-improved', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(testRequest)
      });
      
      const result = await response.json();
      const responseTime = Date.now() - startTime;
      
      results.push({
        run: i,
        success: response.ok,
        responseTime,
        executionTime: result.executionTime || null,
        error: result.error || null
      });
      
      if (response.ok) {
        colorLog('green', `   ‚úÖ Run ${i}: ${responseTime}ms`);
      } else {
        colorLog('red', `   ‚ùå Run ${i}: ${responseTime}ms (${result.error})`);
      }
      
    } catch (error) {
      results.push({
        run: i,
        success: false,
        responseTime: null,
        executionTime: null,
        error: error.message
      });
      
      colorLog('red', `   ‚ùå Run ${i}: ERROR (${error.message})`);
    }
  }
  
  // Performance summary
  colorLog('blue', '\nüìä PERFORMANCE SUMMARY:');
  const successfulRuns = results.filter(r => r.success);
  const failedRuns = results.filter(r => !r.success);
  
  colorLog('white', `üìà Successful runs: ${successfulRuns.length}/${testRuns}`);
  colorLog('white', `üìâ Failed runs: ${failedRuns.length}/${testRuns}`);
  
  if (successfulRuns.length > 0) {
    const responseTimes = successfulRuns.map(r => r.responseTime);
    const avgResponseTime = responseTimes.reduce((a, b) => a + b, 0) / responseTimes.length;
    const minResponseTime = Math.min(...responseTimes);
    const maxResponseTime = Math.max(...responseTimes);
    
    colorLog('white', `‚è±Ô∏è  Average Response Time: ${avgResponseTime.toFixed(2)}ms`);
    colorLog('white', `üèÉ Fastest Response: ${minResponseTime}ms`);
    colorLog('white', `üêå Slowest Response: ${maxResponseTime}ms`);
  }
  
  return successfulRuns.length / testRuns;
}

async function runAllTests() {
  colorLog('magenta', '\nüß™ === COMPREHENSIVE AGENT TESTING ===');
  colorLog('white', `üìÖ Started at: ${new Date().toISOString()}`);
  
  const testResults = {
    health: false,
    execution: false,
    performance: 0
  };
  
  // Test 1: Health Check
  testResults.health = await testHealthCheck();
  
  // Test 2: Agent Execution (only if health check passes)
  if (testResults.health) {
    testResults.execution = await testAgentExecution();
  } else {
    colorLog('yellow', '\n‚ö†Ô∏è  Skipping execution test due to health check failure');
  }
  
  // Test 3: Performance Test (only if execution works)
  if (testResults.execution) {
    testResults.performance = await performanceTest();
  } else {
    colorLog('yellow', '\n‚ö†Ô∏è  Skipping performance test due to execution failure');
  }
  
  // Final Summary
  colorLog('magenta', '\nüìä === FINAL TEST SUMMARY ===');
  colorLog('white', `üìÖ Completed at: ${new Date().toISOString()}`);
  
  const healthIcon = testResults.health ? '‚úÖ' : '‚ùå';
  const executionIcon = testResults.execution ? '‚úÖ' : '‚ùå';
  const performanceIcon = testResults.performance > 0.5 ? '‚úÖ' : '‚ùå';
  
  colorLog('white', `${healthIcon} Health Check: ${testResults.health ? 'PASSED' : 'FAILED'}`);
  colorLog('white', `${executionIcon} Agent Execution: ${testResults.execution ? 'PASSED' : 'FAILED'}`);
  colorLog('white', `${performanceIcon} Performance Test: ${(testResults.performance * 100).toFixed(1)}% success rate`);
  
  const overallSuccess = testResults.health && testResults.execution && testResults.performance > 0.5;
  const overallIcon = overallSuccess ? '‚úÖ' : '‚ùå';
  
  colorLog(overallSuccess ? 'green' : 'red', `\n${overallIcon} OVERALL RESULT: ${overallSuccess ? 'PASSED' : 'FAILED'}`);
  
  return testResults;
}

// Run the tests
if (require.main === module) {
  runAllTests().catch(error => {
    colorLog('red', `\nüí• Test runner error: ${error.message}`);
    process.exit(1);
  });
}

module.exports = { runAllTests, testHealthCheck, testAgentExecution, performanceTest }; 