const http = require('http');

// –¢–µ—Å—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å emailFolder
const testData = {
  task_type: "generate_content",
  input: {
    brief: "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ —Å –ø–æ–¥–∞—Ä–∫–∞–º–∏ –¥–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏",
    tone: "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π –∏ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π",
    target_audience: "—Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏",
    brand_guidelines: {
      style: "–∏–≥—Ä–∏–≤—ã–π –∏ —Å–µ–º–µ–π–Ω—ã–π –ø–æ–¥—Ö–æ–¥",
      language: "ru",
      content_type: "promotional"
    }
  },
  context: {
    figma_url: "https://www.figma.com/design/gJBHVJSHhOJdVLcXQEELpy/Email-Makers?node-id=4-9&t=uPmvpJMJLXPzfNVK-1",
    user_id: "debug_user"
  }
};

const postData = JSON.stringify(testData);
const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/api/agent/run-improved',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

console.log('üîç Debug Test: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ /api/agent/run-improved');
console.log('üìù –¢–µ–º–∞:', testData.input.brief);
console.log('üéØ –ê—É–¥–∏—Ç–æ—Ä–∏—è:', testData.input.target_audience);
console.log('üìÖ –í—Ä–µ–º—è:', new Date().toLocaleString());
console.log('=' * 60);

const req = http.request(options, (res) => {
  console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
  console.log(`üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:`, res.headers);
  
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
    // –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (chunk.includes('emailFolder') || chunk.includes('email_folder')) {
      console.log('üîç EmailFolder –¥–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω—ã:', chunk.toString().substring(0, 200) + '...');
    }
  });
  
  res.on('end', () => {
    console.log('=' * 60);
    console.log('üì¶ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, —Ä–∞–∑–º–µ—Ä:', data.length);
    
    try {
      const result = JSON.parse(data);
      console.log('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω');
      console.log('üèÅ –°—Ç–∞—Ç—É—Å:', result.status);
      console.log('üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç:', result.result ? '–ï—Å—Ç—å' : '–ù–µ—Ç');
      
      if (result.result) {
        console.log('üìä –†–∞–∑–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', JSON.stringify(result.result).length);
        
        // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è emailFolder –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        const resultStr = JSON.stringify(result.result);
        if (resultStr.includes('emailFolder') || resultStr.includes('email_folder')) {
          console.log('üîç EmailFolder —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ');
        }
      }
      
      if (result.error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
      }
      
      if (result.traceId) {
        console.log('üÜî Trace ID:', result.traceId);
      }
      
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
      console.log('üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤ –æ—Ç–≤–µ—Ç–∞:', data.substring(0, 500));
    }
  });
});

req.on('error', (e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', e.message);
});

req.write(postData);
req.end(); 