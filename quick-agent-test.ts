import { EmailGeneratorAgent } from './src/agent/agent';
import { EmailGenerationRequest } from './src/agent/types';

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ workflow –∞–≥–µ–Ω—Ç–∞
 */

async function quickAgentTest() {
  console.log('üöÄ Quick Agent Test - Full Workflow\n');
  
  // –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞ —Å UltraThink –≤ speed —Ä–µ–∂–∏–º–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
  const agent = new EmailGeneratorAgent(true, 'speed');
  
  const testRequest: EmailGenerationRequest = {
    topic: '–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –∞–≥–µ–Ω—Ç–∞ - —Å–∫–∏–¥–∫–∏ –Ω–∞ –±–∏–ª–µ—Ç—ã –≤ –ü–∞—Ä–∏–∂',
    origin: 'MOW',
    destination: 'CDG',
    campaign_type: 'promotional',
    target_audience: '–º–æ–ª–æ–¥—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏',
    tone: 'friendly'
  };
  
  console.log('üìã Test Request:');
  console.log(JSON.stringify(testRequest, null, 2));
  console.log('\nüîÑ Starting email generation...\n');
  
  try {
    const startTime = Date.now();
    const result = await agent.generateEmail(testRequest);
    const duration = Date.now() - startTime;
    
    console.log(`\n‚úÖ Email generation completed in ${duration}ms`);
    console.log('\nüìä Results:');
    console.log(`Status: ${result.status}`);
    
    if (result.status === 'success') {
      console.log(`Quality Score: ${result.quality_score || 'N/A'}`);
      console.log(`Quality Check: ${result.quality_check}`);
      console.log(`Layout Regression: ${result.layout_regression}`);
      console.log(`Render Testing: ${result.render_testing}`);
      console.log(`Generation Time: ${result.generation_time}ms`);
      console.log(`Trace ID: ${result.trace_id}`);
      
      if (result.campaign_metadata) {
        console.log('\nüìà Campaign Metadata:');
        console.log(`Topic: ${result.campaign_metadata.topic}`);
        console.log(`Routes Analyzed: ${result.campaign_metadata.routes_analyzed?.join(', ')}`);
        console.log(`Prices Found: ${result.campaign_metadata.prices_found}`);
        console.log(`Content Variations: ${result.campaign_metadata.content_variations}`);
        
        // Multi-agent specific data
        if (result.campaign_metadata.agents_executed) {
          console.log(`Agents Executed: ${result.campaign_metadata.agents_executed.join(', ')}`);
        }
        if (result.campaign_metadata.workflow_efficiency) {
          console.log(`Workflow Efficiency: ${result.campaign_metadata.workflow_efficiency}%`);
        }
        if (result.campaign_metadata.issues_resolved) {
          console.log(`Issues Resolved: ${result.campaign_metadata.issues_resolved}`);
        }
      }
      
      if (result.html_url) {
        console.log(`\nüåê HTML Output: ${result.html_url}`);
      }
      
      console.log('\nüéâ Test PASSED - Agent workflow completed successfully!');
      
    } else {
      console.log(`‚ùå Error: ${result.error_message}`);
      console.log('\nüö® Test FAILED - Agent workflow failed');
    }
    
  } catch (error) {
    console.error('\n‚ùå Test failed with exception:', error);
    console.log('\nüö® Test FAILED - Exception thrown');
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  quickAgentTest().catch(console.error);
}

export { quickAgentTest }; 