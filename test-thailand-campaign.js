#!/usr/bin/env node

/**
 * üß™ THAILAND AUTUMN CAMPAIGN TEST
 * 
 * Testing Email-Makers agent system with Thailand autumn travel campaign
 * through the api/agent/run-improved endpoint
 */

const http = require('http');

// ANSI color codes for console output
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

const API_BASE = 'http://localhost:3000';

function colorLog(color, prefix, message) {
  console.log(`${colors[color]}${prefix}${colors.reset} ${message}`);
}

function makeRequest(path, method = 'GET', data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    };

    if (data) {
      const jsonData = JSON.stringify(data);
      options.headers['Content-Length'] = Buffer.byteLength(jsonData);
    }

    const req = http.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({
            statusCode: res.statusCode,
            data: parsed,
            raw: responseData
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            data: responseData,
            raw: responseData,
            parseError: error
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

async function testHealthCheck() {
  colorLog('cyan', 'üîç', '=== HEALTH CHECK TEST ===');
  
  try {
    const startTime = Date.now();
    const response = await makeRequest('/api/agent/run-improved');
    const duration = Date.now() - startTime;
    
    if (response.statusCode === 200 && response.data.status === 'healthy') {
      colorLog('green', '‚úÖ', 'Health Check: PASSED');
      colorLog('blue', 'üìä', `Status: ${response.data.status}`);
      colorLog('blue', 'ü§ñ', `Agents: ${response.data.agents ? Object.keys(response.data.agents).length : 0} available`);
      colorLog('blue', 'üîÑ', `Handoffs: ${response.data.handoffs ? Object.keys(response.data.handoffs).length : 0} configured`);
      
      if (response.data.agents) {
        colorLog('blue', 'üìã', 'Agent Details:');
        Object.entries(response.data.agents).forEach(([name, status]) => {
          const icon = status === 'available' ? '‚úÖ' : '‚ùå';
          console.log(`   ${icon} ${name}: ${status}`);
        });
      }
      
      if (response.data.handoffs) {
        colorLog('blue', 'üîó', 'Handoff Details:');
        Object.entries(response.data.handoffs).forEach(([name, statusObj]) => {
          const status = typeof statusObj === 'object' ? 'configured' : statusObj;
          const icon = status === 'configured' ? '‚úÖ' : '‚ùå';
          console.log(`   ${icon} ${name}: ${status}`);
        });
      }
      
      return { success: true, duration };
    } else {
      colorLog('red', '‚ùå', `Health Check: FAILED (${response.statusCode})`);
      console.log('Response:', response.data);
      return { success: false, duration };
    }
  } catch (error) {
    colorLog('red', '‚ùå', `Health Check: ERROR - ${error.message}`);
    return { success: false, duration: 0 };
  }
}

async function testThailandCampaign() {
  colorLog('cyan', 'üöÄ', '=== THAILAND AUTUMN CAMPAIGN TEST ===');
  
  const campaignBrief = `–°–æ–∑–¥–∞–π email-–∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –≤ –¢–∞–π–ª–∞–Ω–¥ –æ—Å–µ–Ω—å—é:

üåè –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∞–π–ª–∞–Ω–¥ (–ë–∞–Ω–≥–∫–æ–∫, –ü—Ö—É–∫–µ—Ç, –ö—Ä–∞–±–∏)
üìÖ –°–ï–ó–û–ù: –û—Å–µ–Ω—å 2025 (–æ–∫—Ç—è–±—Ä—å-–Ω–æ—è–±—Ä—å)  
üéØ –ê–£–î–ò–¢–û–†–ò–Ø: –ü—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ 25-45 –ª–µ—Ç, —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏
üí∞ –ë–Æ–î–ñ–ï–¢: –°—Ä–µ–¥–Ω–∏–π+ —Å–µ–≥–º–µ–Ω—Ç (50,000-120,000 —Ä—É–±)
üé® –°–¢–ò–õ–¨: –¢—ë–ø–ª—ã–π, —ç–∫–∑–æ—Ç–∏—á–µ—Å–∫–∏–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π

–ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –û–°–ï–ù–ò –í –¢–ê–ô–õ–ê–ù–î–ï:
- –ö–æ–Ω–µ—Ü —Å–µ–∑–æ–Ω–∞ –¥–æ–∂–¥–µ–π, –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞
- –ú–µ–Ω—å—à–µ —Ç—É—Ä–∏—Å—Ç–æ–≤, –±–æ–ª—å—à–µ –º–µ—Å—Ç–∞ –Ω–∞ –ø–ª—è–∂–∞—Ö
- –ë–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Ç–µ–ª–∏
- –ò–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Å—Ç—Ä–æ–≤–æ–≤ –∏ –¥–∞–π–≤–∏–Ω–≥–∞
- –§–µ—Å—Ç–∏–≤–∞–ª–∏ –∏ –∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è

–≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´:
- –≠–∫–∑–æ—Ç–∏–∫–∞ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è
- –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —Ä–µ–ª–∞–∫—Å  
- –°–µ–º–µ–π–Ω–æ–µ –≤—Ä–µ–º—è –≤–º–µ—Å—Ç–µ
- –ù–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è

–ü–†–ò–ó–´–í –ö –î–ï–ô–°–¢–í–ò–Æ: "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –¢–∞–π–ª–∞–Ω–¥" 

–°–æ–∑–¥–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π email —Å —è—Ä–∫–∏–º –¥–∏–∑–∞–π–Ω–æ–º, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏ –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.`;

  const requestData = {
    task_type: 'email-campaign-creation',
    input: campaignBrief,
    context: {
      language: 'ru',
      campaign_type: 'promotional', 
      industry: 'travel',
      urgency: 'medium',
      target_audience: 'adults_families',
      destination: 'thailand',
      season: 'autumn',
      budget_segment: 'medium_plus'
    }
  };

  try {
    colorLog('yellow', '‚è±Ô∏è', 'Starting Thailand campaign agent execution...');
    colorLog('blue', 'üìã', `Task Type: ${requestData.task_type}`);
    colorLog('blue', 'üìù', `Input length: ${requestData.input.length} characters`);
    colorLog('blue', 'üîß', `Context: ${JSON.stringify(requestData.context).substring(0, 100)}...`);
    
    const startTime = Date.now();
    const response = await makeRequest('/api/agent/run-improved', 'POST', requestData);
    const executionTime = Date.now() - startTime;
    
    if (response.statusCode === 200) {
      colorLog('green', '‚úÖ', `Agent Execution: PASSED in ${executionTime}ms`);
      
      if (response.data.agent) {
        colorLog('blue', 'üéØ', `Agent: ${response.data.agent}`);
      }
      
      if (response.data.task) {
        colorLog('blue', 'üìã', `Task Type: ${response.data.task}`);
      }
      
      colorLog('blue', '‚è±Ô∏è', `Execution Time: ${executionTime}ms`);
      colorLog('blue', 'üìä', `Response Time: ${executionTime}ms`);
      
      // Analyze response content
      colorLog('cyan', 'üìà', 'RESULT ANALYSIS:');
      if (response.data.result) {
        const resultStr = typeof response.data.result === 'string' 
          ? response.data.result 
          : JSON.stringify(response.data.result);
        colorLog('blue', 'üì§', `Result: ${resultStr.substring(0, 200)}...`);
      }
      
      if (response.data.state) {
        colorLog('blue', 'üîß', `Final State: ${JSON.stringify(response.data.state).substring(0, 100)}...`);
      }
      
      // Look for campaign-specific indicators
      const responseText = JSON.stringify(response.data).toLowerCase();
      const thailandIndicators = [
        '—Ç–∞–π–ª–∞–Ω–¥', 'thailand', '–±–∞–Ω–≥–∫–æ–∫', 'bangkok', 
        '–ø—Ö—É–∫–µ—Ç', 'phuket', '–∫—Ä–∞–±–∏', 'krabi',
        '–æ—Å–µ–Ω—å', 'autumn', '–æ–∫—Ç—è–±—Ä—å', '–Ω–æ—è–±—Ä—å'
      ];
      
      const foundIndicators = thailandIndicators.filter(indicator => 
        responseText.includes(indicator)
      );
      
      if (foundIndicators.length > 0) {
        colorLog('green', 'üéØ', `Thailand Campaign Content Detected: ${foundIndicators.join(', ')}`);
      }
      
      return { 
        success: true, 
        duration: executionTime,
        hasThailandContent: foundIndicators.length > 0,
        response: response.data
      };
      
    } else {
      colorLog('red', '‚ùå', `Agent Execution: FAILED (${response.statusCode})`);
      console.log('Error Response:', response.data);
      return { 
        success: false, 
        duration: executionTime,
        error: response.data
      };
    }
    
  } catch (error) {
    colorLog('red', '‚ùå', `Agent Execution: ERROR - ${error.message}`);
    return { 
      success: false, 
      duration: 0,
      error: error.message 
    };
  }
}

async function runPerformanceTest() {
  colorLog('cyan', '‚ö°', '=== PERFORMANCE TEST ===');
  
  const results = [];
  const testRuns = 2; // Reduced for Thailand campaign focus
  
  for (let i = 1; i <= testRuns; i++) {
    colorLog('yellow', 'üîÑ', `Performance Test ${i}/${testRuns}`);
    
    const result = await testThailandCampaign();
    results.push(result);
    
    if (result.success) {
      colorLog('green', '‚úÖ', `Run ${i}: ${result.duration}ms`);
    } else {
      colorLog('red', '‚ùå', `Run ${i}: FAILED`);
    }
  }
  
  const successfulRuns = results.filter(r => r.success);
  const failedRuns = results.filter(r => !r.success);
  
  colorLog('cyan', 'üìä', 'PERFORMANCE SUMMARY:');
  colorLog('green', 'üìà', `Successful runs: ${successfulRuns.length}/${testRuns}`);
  colorLog('red', 'üìâ', `Failed runs: ${failedRuns.length}/${testRuns}`);
  
  if (successfulRuns.length > 0) {
    const avgTime = successfulRuns.reduce((sum, r) => sum + r.duration, 0) / successfulRuns.length;
    const minTime = Math.min(...successfulRuns.map(r => r.duration));
    const maxTime = Math.max(...successfulRuns.map(r => r.duration));
    
    colorLog('blue', '‚è±Ô∏è', `Average Response Time: ${avgTime.toFixed(2)}ms`);
    colorLog('blue', 'üèÉ', `Fastest Response: ${minTime}ms`);
    colorLog('blue', 'üêå', `Slowest Response: ${maxTime}ms`);
  }
  
  const successRate = (successfulRuns.length / testRuns) * 100;
  return {
    totalRuns: testRuns,
    successfulRuns: successfulRuns.length,
    failedRuns: failedRuns.length,
    successRate,
    results
  };
}

async function main() {
  console.log(`${colors.bright}${colors.cyan}
üß™ === THAILAND AUTUMN CAMPAIGN TESTING ===
üìÖ Started at: ${new Date().toISOString()}
${colors.reset}`);

  // Test 1: Health Check
  const healthResult = await testHealthCheck();
  console.log('');

  if (!healthResult.success) {
    colorLog('red', 'üí•', 'Health check failed. Stopping tests.');
    process.exit(1);
  }

  // Test 2: Single Thailand Campaign Test (NO RETRIES)
  const campaignResult = await testThailandCampaign();
  console.log('');

  // Final Summary
  colorLog('cyan', 'üìä', '=== FINAL TEST SUMMARY ===');
  colorLog('blue', 'üìÖ', `Completed at: ${new Date().toISOString()}`);
  colorLog(healthResult.success ? 'green' : 'red', healthResult.success ? '‚úÖ' : '‚ùå', 
    `Health Check: ${healthResult.success ? 'PASSED' : 'FAILED'}`);
  colorLog(campaignResult.success ? 'green' : 'red', campaignResult.success ? '‚úÖ' : '‚ùå', 
    `Thailand Campaign: ${campaignResult.success ? 'PASSED' : 'FAILED'}`);

  if (campaignResult.hasThailandContent) {
    colorLog('green', 'üåè', 'Thailand-specific content successfully generated!');
  }

  const overallSuccess = healthResult.success && campaignResult.success;
  colorLog('cyan', overallSuccess ? '‚úÖ' : '‚ùå', `OVERALL RESULT: ${overallSuccess ? 'PASSED' : 'FAILED'}`);
  
  console.log('');
}

// Run the test
main().catch(error => {
  colorLog('red', 'üí•', `Test execution failed: ${error.message}`);
  process.exit(1);
}); 