#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Figma –Ω–æ–¥–æ–≤
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node optimize-figma.js
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env.local') });

// –ü–æ—Å–∫–æ–ª—å–∫—É TypeScript –º–æ–¥—É–ª—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ API
async function optimizeFigmaNodes() {
  const figmaToken = process.env.FIGMA_ACCESS_TOKEN || process.env.FIGMA_TOKEN;
  const figmaProjectId = process.env.FIGMA_PROJECT_ID;
  
  if (!figmaToken || !figmaProjectId) {
    throw new Error('Figma credentials not found in environment variables');
  }

  console.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
  
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Figma API
  const response = await fetch(`https://api.figma.com/v1/files/${figmaProjectId}`, {
    headers: { 'X-Figma-Token': figmaToken }
  });

  if (!response.ok) {
    throw new Error(`Figma API error: ${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  const allNodes = [];

  function extractNodes(node) {
    if (node.name && node.type) {
      allNodes.push({
        id: node.id,
        name: node.name,
        type: node.type,
        visible: node.visible !== false
      });
    }
    
    if (node.children) {
      node.children.forEach(extractNodes);
    }
  }

  extractNodes(data.document);
  
  // –ê–Ω–∞–ª–∏–∑ –∑–∞–π—Ü–µ–≤
  const rabbits = allNodes.filter(node => 
    node.name.toLowerCase().includes('–∑–∞—è—Ü') || 
    node.name.toLowerCase().includes('rabbit')
  );
  
  // –ê–Ω–∞–ª–∏–∑ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π
  const airlines = allNodes.filter(node => {
    const name = node.name.toLowerCase();
    return name.includes('–∞—ç—Ä–æ—Ñ–ª–æ—Ç') || name.includes('turkish') || 
           name.includes('utair') || name.includes('nordwind');
  });

  // –ü–æ–∏—Å–∫ –¥—É–±–ª–µ–π
  const duplicates = allNodes.filter(node => 
    node.name.includes('=1') || 
    node.name.includes('=2') || 
    node.name.includes('=3')
  );

  // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç)
  const emotionalKeywords = ['–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '–æ–∑–∞–¥–∞—á–µ–Ω', '–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω', '—Ä–∞–∑–æ–∑–ª–µ–Ω', '—Å—á–∞—Å—Ç–ª–∏–≤', '–≥—Ä—É—Å—Ç–Ω'];
  const emotionalRabbits = rabbits.filter(rabbit => 
    emotionalKeywords.some(keyword => rabbit.name.toLowerCase().includes(keyword))
  );

  return {
    totalNodes: allNodes.length,
    rabbits: rabbits.length,
    emotionalRabbits: emotionalRabbits.length,
    airlines: airlines.length,
    duplicates: duplicates.length,
    duplicatesList: duplicates.map(d => d.name),
    rabbitsList: rabbits.slice(0, 10).map(r => r.name), // –ü–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
    airlinesList: airlines.map(a => a.name)
  };
}

async function main() {
  console.log('üéØ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê –ò –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò FIGMA –ù–û–î–û–í');
  console.log('==========================================');
  
  try {
    // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
    const result = await optimizeFigmaNodes();
    
    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:');
    console.log(`‚úÖ –í—Å–µ–≥–æ –Ω–æ–¥–æ–≤: ${result.totalNodes}`);
    console.log(`üê∞ –ó–∞–π—Ü–µ–≤ –æ–±—â–∏—Ö: ${result.rabbits}`);
    console.log(`üòü –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–π—Ü–µ–≤: ${result.emotionalRabbits} (–ö–†–ò–¢–ò–ß–ù–û: –Ω—É–∂–Ω–æ 6!)`);
    console.log(`‚úàÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π: ${result.airlines}`);
    console.log(`üóëÔ∏è –î—É–±–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ${result.duplicates}`);
    
    console.log('\nüê∞ –ü–†–ò–ú–ï–†–´ –ó–ê–ô–¶–ï–í:');
    result.rabbitsList.forEach(name => console.log(`- ${name}`));
    
    console.log('\n‚úàÔ∏è –ê–í–ò–ê–ö–û–ú–ü–ê–ù–ò–ò:');
    result.airlinesList.forEach(name => console.log(`- ${name}`));
    
    console.log('\nüóëÔ∏è –î–£–ë–õ–ò –î–õ–Ø –£–î–ê–õ–ï–ù–ò–Ø:');
    result.duplicatesList.forEach(name => console.log(`- ${name}`));
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const optimizationPlan = `# üéØ –ü–õ–ê–ù –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò FIGMA

## üìä –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù
- **–í—Å–µ–≥–æ –Ω–æ–¥–æ–≤**: ${result.totalNodes}
- **–ó–∞–π—Ü–µ–≤**: ${result.rabbits} (${result.emotionalRabbits} —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö)
- **–ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π**: ${result.airlines}
- **–î—É–±–ª–µ–π**: ${result.duplicates}

## üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ó–ê–î–ê–ß–ò

### 1. –°–û–ó–î–ê–¢–¨ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø (–ü–†–ò–û–†–ò–¢–ï–¢ 10)
–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤—Å–µ 6 —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π:
- ‚ùå –∑–∞—è—Ü-—ç–º–æ—Ü–∏—è-—Å—á–∞—Å—Ç–ª–∏–≤
- ‚ùå –∑–∞—è—Ü-—ç–º–æ—Ü–∏—è-–Ω–µ–¥–æ–≤–æ–ª–µ–Ω
- ‚ùå –∑–∞—è—Ü-—ç–º–æ—Ü–∏—è-–æ–∑–∞–¥–∞—á–µ–Ω
- ‚ùå –∑–∞—è—Ü-—ç–º–æ—Ü–∏—è-–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω
- ‚ùå –∑–∞—è—Ü-—ç–º–æ—Ü–∏—è-—Ä–∞–∑–æ–∑–ª–µ–Ω
- ‚ùå –∑–∞—è—Ü-—ç–º–æ—Ü–∏—è-–≥—Ä—É—Å—Ç–Ω—ã–π

### 2. –£–î–ê–õ–ò–¢–¨ –î–£–ë–õ–ò
${result.duplicatesList.map(name => `- üóëÔ∏è ${name}`).join('\n')}

### 3. –°–¢–ê–ù–î–ê–†–¢–ò–ó–ò–†–û–í–ê–¢–¨ –ê–í–ò–ê–ö–û–ú–ü–ê–ù–ò–ò
${result.airlinesList.map(name => `- üìù ${name} ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ`).join('\n')}

### 4. –°–û–ó–î–ê–¢–¨ –ö–û–ù–¢–ï–ö–°–¢–£–ê–õ–¨–ù–´–ï –í–ê–†–ò–ê–ù–¢–´
- ‚ùå –∑–∞—è—Ü-–∫–æ–Ω—Ç–µ–∫—Å—Ç-–ø–æ–¥–±–æ—Ä–∫–∞
- ‚ùå –∑–∞—è—Ü-–∫–æ–Ω—Ç–µ–∫—Å—Ç-–Ω–æ–≤–æ—Å—Ç–∏  
- ‚ùå –∑–∞—è—Ü-–∫–æ–Ω—Ç–µ–∫—Å—Ç-faq

## üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò
1. –û—Ç–∫—Ä—ã—Ç—å Figma: https://www.figma.com/design/GBnGxSQlfM1XhjSkLHogk6/
2. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
3. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏
4. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
5. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫

---
*–ê–Ω–∞–ª–∏–∑ —Å–æ–∑–¥–∞–Ω: ${new Date().toLocaleString()}*
`;

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–∞
    const fs = require('fs').promises;
    await fs.writeFile('figma-optimization-plan.md', optimizationPlan);
    
    console.log('\nüìÑ –ü–ª–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ figma-optimization-plan.md');
    console.log('ÔøΩÔøΩ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –û—Ç–∫—Ä—ã—Ç—å Figma –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–ª–∞–Ω');
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}
