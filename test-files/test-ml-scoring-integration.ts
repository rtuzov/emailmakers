/**
 * üîß TEST ML-SCORING INTEGRATION
 * 
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ML scoring tools
 * –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –∏ –≤–∫–ª—é—á–µ–Ω–∏—è –≤ Tool Registry
 */

import { toolRegistry } from './core/tool-registry';
import { workflowQualityAnalyzer } from './tools/ai-consultant/workflow-quality-analyzer';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testEmailData = {
  html_content: `
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN">
    <html>
      <head>
        <title>Test Email - Kupibilet</title>
        <style>
          .header { background-color: #4BFF7E; color: #1DA857; }
          .content { font-family: Arial, sans-serif; }
          .cta { background-color: #FF6240; color: white; padding: 12px 24px; }
        </style>
      </head>
      <body>
        <div class="header">
          <h1>üåü –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç Kupibilet!</h1>
        </div>
        <div class="content">
          <p>–ü—Ä–∏–≤–µ—Ç! –£ –Ω–∞—Å –¥–ª—è –≤–∞—Å –æ—Å–æ–±–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.</p>
          <p>–°–∫–∏–¥–∫–∞ –¥–æ 40% –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —Å—Ç–æ–ª–∏—Ü—ã!</p>
          <p><strong>–¢–æ–ª—å–∫–æ –¥–æ 31 –¥–µ–∫–∞–±—Ä—è 2024!</strong></p>
          <a href="#" class="cta">–ù–∞–π—Ç–∏ –±–∏–ª–µ—Ç—ã ‚Üí</a>
        </div>
      </body>
    </html>
  `,
  mjml_source: `
    <mjml>
      <mj-body>
        <mj-section background-color="#4BFF7E">
          <mj-column>
            <mj-text color="#1DA857">
              <h1>üåü –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç Kupibilet!</h1>
            </mj-text>
          </mj-column>
        </mj-section>
      </mj-body>
    </mjml>
  `,
  topic: "–ù–æ–≤–æ–≥–æ–¥–Ω—è—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤"
};

async function testMLScoringIntegration() {
  console.log('üß™ TESTING ML-SCORING INTEGRATION');
  console.log('=' .repeat(60));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Tool Registry
    console.log('\nüìã Step 1: Tool Registry Status');
    console.log('-'.repeat(40));
    
    const qualityTools = toolRegistry.getToolsForAgent('quality');
    console.log(`‚úÖ Quality tools loaded: ${qualityTools.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º ML-scoring tools
    const mlTools = qualityTools.filter(tool => tool.metadata?.ml_powered === true);
    console.log(`ü§ñ ML-powered tools: ${mlTools.length}`);
    
    mlTools.forEach(tool => {
      console.log(`   - ${tool.name} (v${tool.version}) - ${tool.enabled ? 'ENABLED' : 'DISABLED'}`);
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º workflow_quality_analyzer
    const workflowTool = qualityTools.find(tool => tool.name === 'workflow_quality_analyzer');
    if (workflowTool) {
      console.log(`‚úÖ Workflow Quality Analyzer: ${workflowTool.enabled ? 'ENABLED' : 'DISABLED'} (v${workflowTool.version})`);
      console.log(`   - Agents count: ${workflowTool.metadata?.agents_count}`);
      console.log(`   - OpenAI SDK: ${workflowTool.metadata?.openai_sdk_integrated}`);
    } else {
      console.log('‚ùå Workflow Quality Analyzer: NOT FOUND');
    }
    
    // 2. –¢–µ—Å—Ç ML scoring tools availability
    console.log('\nü§ñ Step 2: ML Scoring Tools Availability');
    console.log('-'.repeat(40));
    
    const mlToolNames = ['analyze_email_quality', 'quick_quality_check', 'compare_email_quality'];
    for (const toolName of mlToolNames) {
      const tool = toolRegistry.getOpenAITool(toolName);
      if (tool) {
        console.log(`‚úÖ ${toolName}: Available`);
      } else {
        console.log(`‚ùå ${toolName}: NOT AVAILABLE`);
      }
    }
    
    // 3. –¢–µ—Å—Ç workflow quality analyzer
    console.log('\nüîç Step 3: Workflow Quality Analyzer Test');
    console.log('-'.repeat(40));
    
    const analysisParams = {
      html_content: testEmailData.html_content,
      mjml_source: testEmailData.mjml_source,
      topic: testEmailData.topic,
      campaign_context: {
        campaign_type: 'promotional' as const,
        target_audience: 'frequent_travelers',
        brand_guidelines: JSON.stringify({
          primary_color: '#4BFF7E',
          secondary_color: '#1DA857',
          accent_color: '#FF6240',
          tone: 'friendly_professional'
        }),
        assets_used: ['kupibilet-logo.png', 'plane-icon.svg']
      },
      analysis_scope: {
        content_quality: true,
        visual_design: true,
        technical_compliance: true,
        emotional_resonance: true,
        brand_alignment: true,
        performance_optimization: true
      },
      quality_requirements: {
        minimum_score: 70,
        require_compliance: true,
        auto_fix_issues: false
      },
      workflow_context: {
        workflow_id: 'test-ml-integration-' + Date.now(),
        trace_id: 'test-trace-' + Date.now(),
        iteration_count: 0,
        previous_scores: []
      }
    };
    
    console.log('‚öôÔ∏è Starting analysis...');
    const startTime = Date.now();
    
    const result = await workflowQualityAnalyzer(analysisParams);
    
    const duration = Date.now() - startTime;
    console.log(`‚è±Ô∏è Analysis completed in ${duration}ms`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    console.log('\nüìä Step 4: Results Analysis');
    console.log('-'.repeat(40));
    
    console.log(`‚ú® Success: ${result.success}`);
    console.log(`üìà Quality Score: ${result.quality_score}/100`);
    console.log(`üö™ Quality Gate: ${result.quality_gate_passed ? 'PASSED' : 'FAILED'}`);
    console.log(`ü§ñ Agents Executed: ${result.analytics.agents_executed}`);
    console.log(`üéØ ML Confidence: ${result.analytics.ml_confidence}%`);
    console.log(`‚è∞ Execution Time: ${result.analytics.execution_time_ms}ms`);
    
    if (result.quality_report) {
      console.log('\nüìã Quality Breakdown:');
      console.log(`   - Content Quality: ${result.agent_analysis.content_quality.score}/20`);
      console.log(`   - Visual Design: ${result.agent_analysis.visual_design.score}/20`);
      console.log(`   - Technical Compliance: ${result.agent_analysis.technical_compliance.score}/20`);
      console.log(`   - Emotional Resonance: ${result.agent_analysis.emotional_resonance.score}/20`);
      console.log(`   - Brand Alignment: ${result.agent_analysis.brand_alignment.score}/20`);
    }
    
    if (result.handoff_recommendations) {
      console.log('\nüîÑ Handoff Recommendations:');
      console.log(`   - Next Agent: ${result.handoff_recommendations.next_agent || 'None'}`);
      console.log(`   - Requires Manual Review: ${result.handoff_recommendations.requires_manual_review}`);
      console.log(`   - Next Actions: ${result.handoff_recommendations.next_actions.length} actions`);
    }
    
    if (result.error) {
      console.log(`‚ùå Error: ${result.error}`);
    }
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º performance metrics
    console.log('\n‚ö° Step 5: Performance Metrics');
    console.log('-'.repeat(40));
    
    const expectedMinScore = 40; // –û–∂–∏–¥–∞–µ–º –∫–∞–∫ –º–∏–Ω–∏–º—É–º 40/100 –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ email'–∞
    const maxExpectedTime = 10000; // –ú–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥
    
    const scoreTest = result.quality_score >= expectedMinScore;
    const timeTest = result.analytics.execution_time_ms <= maxExpectedTime;
    const agentsTest = result.analytics.agents_executed === 5;
    
    console.log(`üìä Score Test (‚â•${expectedMinScore}): ${scoreTest ? '‚úÖ PASS' : '‚ùå FAIL'} (${result.quality_score})`);
    console.log(`‚è∞ Time Test (‚â§${maxExpectedTime}ms): ${timeTest ? '‚úÖ PASS' : '‚ùå FAIL'} (${result.analytics.execution_time_ms}ms)`);
    console.log(`ü§ñ Agents Test (=5): ${agentsTest ? '‚úÖ PASS' : '‚ùå FAIL'} (${result.analytics.agents_executed})`);
    
    const allTestsPassed = scoreTest && timeTest && agentsTest && result.success;
    
    console.log('\nüéØ FINAL RESULT');
    console.log('=' .repeat(60));
    
    if (allTestsPassed) {
      console.log('üéâ ML-SCORING INTEGRATION: SUCCESS!');
      console.log('‚úÖ All tests passed');
      console.log('‚úÖ ML scoring tools properly integrated');
      console.log('‚úÖ Workflow quality analyzer working correctly');
      console.log('‚úÖ Performance metrics within acceptable ranges');
      console.log('‚úÖ Type fixes resolved');
      console.log('\nüöÄ System ready for production!');
    } else {
      console.log('‚ùå ML-SCORING INTEGRATION: PARTIALLY WORKING');
      console.log('‚ö†Ô∏è Some tests failed or performance issues detected');
      console.log('üîß Review integration and type definitions');
    }
    
  } catch (error) {
    console.error('\nüí• INTEGRATION TEST FAILED');
    console.error('=' .repeat(60));
    console.error('‚ùå Error:', error instanceof Error ? error.message : 'Unknown error');
    console.error('üìã Stack trace:', error instanceof Error ? error.stack : 'No stack trace');
    console.error('\nüîß Next steps:');
    console.error('   1. Check type definitions in types.ts');
    console.error('   2. Verify AgentEmailAnalyzer integration');
    console.error('   3. Check ML scoring tools availability');
    console.error('   4. Review OpenAI Agents SDK configuration');
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testMLScoringIntegration().catch(console.error);
}

export { testMLScoringIntegration }; 