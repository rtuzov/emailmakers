/**
 * üîß QUICK ML-SCORING INTEGRATION CHECK
 * 
 * –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ ML scoring tools
 * –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ workflow
 */

import { toolRegistry } from '../src/agent/core/tool-registry';

async function quickMLIntegrationCheck() {
  console.log('üîç QUICK ML-SCORING INTEGRATION CHECK');
  console.log('=' .repeat(50));
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Tool Registry
    console.log('\nüìä Tool Registry Overview:');
    const stats = toolRegistry.getToolStats();
    console.log(`   - Total tools: ${stats.total}`);
    console.log(`   - Enabled tools: ${stats.enabled}`);
    console.log(`   - Quality tools: ${stats.byCategory.quality || 0}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º ML-scoring tools
    console.log('\nü§ñ ML-Scoring Tools Check:');
    const qualityTools = toolRegistry.getToolsForAgent('quality');
    
    // –ü–æ–ª—É—á–∞–µ–º ML tools –Ω–∞–ø—Ä—è–º—É—é –∏–∑ registry (ToolDefinition), –∞ –Ω–µ –∏–∑ OpenAI SDK objects
    const qualityToolNames = ['workflow_quality_analyzer', 'quality_controller', 'html_validator', 'analyze_email_quality', 'quick_quality_check', 'compare_email_quality'];
    const mlTools = qualityToolNames
      .map(name => toolRegistry.getTool(name))
      .filter(tool => tool && tool.metadata?.ml_powered === true);
    
    console.log(`   - Quality tools loaded: ${qualityTools.length}`);
    console.log(`   - ML-powered tools: ${mlTools.length}`);
    
    if (mlTools.length > 0) {
      console.log('\n‚úÖ ML-Powered Tools Found:');
      mlTools.forEach(tool => {
        console.log(`   - ${tool.name} (v${tool.version}) - ${tool.enabled ? 'ENABLED' : 'DISABLED'}`);
        console.log(`     * OpenAI SDK: ${tool.metadata?.openai_sdk_native || false}`);
        console.log(`     * Analysis Type: ${tool.metadata?.analysis_type || 'unknown'}`);
      });
    } else {
      console.log('‚ùå No ML-powered tools found');
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º workflow_quality_analyzer
    console.log('\nüîß Workflow Quality Analyzer:');
    const workflowTool = toolRegistry.getTool('workflow_quality_analyzer');
    if (workflowTool) {
      console.log(`   ‚úÖ Status: ${workflowTool.enabled ? 'ENABLED' : 'DISABLED'} (v${workflowTool.version})`);
      console.log(`   - Agents count: ${workflowTool.metadata?.agents_count || 'unknown'}`);
      console.log(`   - OpenAI SDK: ${workflowTool.metadata?.openai_sdk_integrated || false}`);
      console.log(`   - Tracing: ${workflowTool.metadata?.tracing_enabled || false}`);
      console.log(`   - Parallel execution: ${workflowTool.metadata?.parallel_execution || false}`);
    } else {
      console.log('   ‚ùå Workflow Quality Analyzer: NOT FOUND');
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º individual ML tools –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    console.log('\nüéØ Individual ML Tools Availability:');
    const mlToolNames = ['analyze_email_quality', 'quick_quality_check', 'compare_email_quality'];
    let availableCount = 0;
    
    for (const toolName of mlToolNames) {
      try {
        const tool = toolRegistry.getOpenAITool(toolName);
        if (tool) {
          console.log(`   ‚úÖ ${toolName}: Available`);
          availableCount++;
        } else {
          console.log(`   ‚ùå ${toolName}: NOT AVAILABLE`);
        }
      } catch (error) {
        console.log(`   ‚ùå ${toolName}: ERROR - ${error instanceof Error ? error.message : 'Unknown error'}`);
      }
    }
    
    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
    console.log('\nüéØ INTEGRATION STATUS SUMMARY:');
    console.log('=' .repeat(50));
    
    const totalMLTools = mlTools.length + availableCount;
    const workflowEnabled = workflowTool?.enabled || false;
    const hasMLTools = mlTools.length > 0;
    const hasWorkflow = !!workflowTool;
    
    if (totalMLTools >= 3 && workflowEnabled && hasMLTools && hasWorkflow) {
      console.log('üéâ ML-SCORING INTEGRATION: ‚úÖ FULLY OPERATIONAL');
      console.log('   ‚úÖ ML scoring tools properly registered');
      console.log('   ‚úÖ Workflow quality analyzer enabled');
      console.log('   ‚úÖ OpenAI SDK integration active');
      console.log('   ‚úÖ Type fixes successfully applied');
      console.log('\nüöÄ System ready for production use!');
    } else if (totalMLTools > 0 || hasWorkflow) {
      console.log('‚ö†Ô∏è ML-SCORING INTEGRATION: üü° PARTIALLY WORKING');
      console.log(`   - ML tools registered: ${mlTools.length}/3`);
      console.log(`   - Individual tools: ${availableCount}/3`);
      console.log(`   - Workflow analyzer: ${workflowEnabled ? 'enabled' : 'disabled'}`);
      console.log('\nüîß Some components need attention');
    } else {
      console.log('‚ùå ML-SCORING INTEGRATION: üî¥ NOT WORKING');
      console.log('   ‚ùå No ML tools found');
      console.log('   ‚ùå Workflow analyzer missing or disabled');
      console.log('\nüõ†Ô∏è Integration requires fixes');
    }
    
    // 6. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    if (workflowEnabled) {
      console.log('\nüìñ Usage Example:');
      console.log('```typescript');
      console.log("import { workflowQualityAnalyzer } from './tools/ai-consultant/workflow-quality-analyzer';");
      console.log('const result = await workflowQualityAnalyzer({');
      console.log('  html_content: "...",');
      console.log('  topic: "Campaign analysis",');
      console.log('  // ... other params');
      console.log('});');
      console.log('```');
    }
    
  } catch (error) {
    console.error('\nüí• CHECK FAILED:');
    console.error('‚ùå Error:', error instanceof Error ? error.message : 'Unknown error');
    console.error('üîß This indicates a critical integration issue');
    
    if (error instanceof Error && error.stack) {
      console.error('\nStack trace:', error.stack.split('\n').slice(0, 5).join('\n'));
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
if (require.main === module) {
  quickMLIntegrationCheck().catch(console.error);
}

export { quickMLIntegrationCheck }; 