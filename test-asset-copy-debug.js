const fs = require('fs').promises;
const path = require('path');

// –¢–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–µ—Ç–æ–≤ –≤ email-renderer
async function testAssetCopyProcess() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–µ—Ç–æ–≤ –≤ email-renderer...\n');

  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Design Specialist Agent
    const mockAssets = [
      'src/agent/figma-all-pages-1750993353363/–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏/–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è-–≥—Ä—É—Å—Ç–Ω–æ–≥–æ-–æ—Ä–∞–Ω–∂–µ–≤–æ–≥–æ-–∫—Ä–æ–ª–∏–∫–∞-–≤—ã—Ä–∞–∂–∞—é—â–µ–≥–æ-—ç–º–æ—Ü–∏–∏.png'
    ];
    
    const mockEmailFolder = {
      campaignId: 'test-asset-copy-1751445497597',
      basePath: 'mails/test-asset-copy-1751445497597',
      assetsPath: 'mails/test-asset-copy-1751445497597/assets',
      spritePath: 'mails/test-asset-copy-1751445497597/assets/sprite-slices',
      htmlPath: 'mails/test-asset-copy-1751445497597/email.html',
      mjmlPath: 'mails/test-asset-copy-1751445497597/email.mjml',
      metadataPath: 'mails/test-asset-copy-1751445497597/metadata.json'
    };

    console.log('üìÅ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–∞–ø–∫—É email...');
    await fs.mkdir(mockEmailFolder.basePath, { recursive: true });
    await fs.mkdir(mockEmailFolder.assetsPath, { recursive: true });
    console.log(`‚úÖ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${mockEmailFolder.basePath}`);

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤:');
    for (const assetPath of mockAssets) {
      try {
        const stats = await fs.stat(assetPath);
        console.log(`‚úÖ –ê—Å—Å–µ—Ç –Ω–∞–π–¥–µ–Ω: ${assetPath} (${Math.round(stats.size / 1024)}KB)`);
      } catch (error) {
        console.log(`‚ùå –ê—Å—Å–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${assetPath}`);
        console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
      }
    }

    console.log('\nüíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–µ—Ç–æ–≤:');
    const processedAssets = [];
    
    for (let i = 0; i < mockAssets.length; i++) {
      const assetPath = mockAssets[i];
      try {
        console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Å—Å–µ—Ç ${i + 1}/${mockAssets.length}: ${assetPath}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        await fs.access(assetPath);
        console.log(`  ‚úÖ –§–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        
        // Extract filename from path
        const fileName = assetPath.split('/').pop();
        console.log(`  üìù –ò–º—è —Ñ–∞–π–ª–∞: ${fileName}`);
        
        // –°–∏–º—É–ª–∏—Ä—É–µ–º EmailFolderManager.saveFigmaAsset
        const destinationPath = path.join(mockEmailFolder.assetsPath, fileName);
        await fs.copyFile(assetPath, destinationPath);
        console.log(`  üíæ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤: ${destinationPath}`);
        
        // Generate relative URL for email
        const relativeUrl = `./assets/${fileName}`;
        processedAssets.push(relativeUrl);
        console.log(`  üîó –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL: ${relativeUrl}`);
        
        console.log(`  ‚úÖ –ê—Å—Å–µ—Ç ${i + 1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ`);
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å—Å–µ—Ç–∞ ${i + 1}:`);
        console.log(`     –ö–æ–¥ –æ—à–∏–±–∫–∏: ${error.code}`);
        console.log(`     –°–æ–æ–±—â–µ–Ω–∏–µ: ${error.message}`);
        console.log(`     –ü—É—Ç—å: ${assetPath}`);
      }
    }

    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø:`);
    console.log(`üéØ –ò—Å—Ö–æ–¥–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤: ${mockAssets.length}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: ${processedAssets.length}`);
    console.log(`üîó –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ URLs: ${processedAssets.join(', ')}`);

    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:');
    const copiedFiles = await fs.readdir(mockEmailFolder.assetsPath);
    console.log(`üìÅ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ assets: ${copiedFiles.length}`);
    copiedFiles.forEach(file => {
      console.log(`  üìÑ ${file}`);
    });

    console.log('\nüèóÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π HTML —Å –∞—Å—Å–µ—Ç–∞–º–∏:');
    const testHtml = `
<!DOCTYPE html>
<html>
<head>
    <title>–¢–µ—Å—Ç –∞—Å—Å–µ—Ç–æ–≤</title>
</head>
<body>
    <h1>–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞—Å—Å–µ—Ç–æ–≤</h1>
    ${processedAssets.map((asset, index) => `
    <div>
        <h3>–ê—Å—Å–µ—Ç ${index + 1}:</h3>
        <img src="${asset}" alt="Test asset ${index + 1}" style="max-width: 300px;" />
        <p>–ü—É—Ç—å: ${asset}</p>
    </div>
    `).join('')}
</body>
</html>
    `;

    await fs.writeFile(path.join(mockEmailFolder.basePath, 'test.html'), testHtml);
    console.log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π HTML —Å–æ–∑–¥–∞–Ω: ${mockEmailFolder.basePath}/test.html`);

    console.log('\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
    console.log(`üìÇ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã –≤: ${mockEmailFolder.basePath}`);
    console.log(`üåê –û—Ç–∫—Ä–æ–π—Ç–µ file://${path.resolve(mockEmailFolder.basePath, 'test.html')} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ:', error);
    throw error;
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testAssetCopyProcess()
    .then(() => {
      console.log('\n‚úÖ –¢–µ—Å—Ç –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Å—Å–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', error);
      process.exit(1);
    });
}

module.exports = { testAssetCopyProcess }; 