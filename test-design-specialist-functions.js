/**
 * üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢: Design Specialist Functions
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É MJML rendering, HTML creation –∏ file saving
 * –≤ OpenAI —Ç—Ä–µ–π—Å–∏–Ω–≥–µ –∏ –ª–æ–≥–∞—Ö
 */

async function testDesignSpecialistMJML() {
  console.log('\nüé® –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DESIGN SPECIALIST - MJML RENDERING');
  console.log('=' .repeat(60));
  
  try {
    const mjmlInput = {
      task_type: 'render_email',
      content_package: {
        content: {
          subject: '–ì–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –¢—É—Ä—Ü–∏—é!',
          body: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –¢—É—Ä—Ü–∏—é. –£—Å–ø–µ–π—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å!',
          cta: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å',
          preheader: '–õ—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ –±–∏–ª–µ—Ç—ã'
        },
        metadata: {
          language: 'ru',
          tone: 'urgent',
          word_count: 25
        }
      },
      rendering_requirements: {
        responsive_design: true,
        email_client_optimization: 'all',
        include_dark_mode: true,
        template_type: 'promotional'
      }
    };
    
    console.log('üìä Input –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(mjmlInput, null, 2));
    
    // –í—ã–∑—ã–≤–∞–µ–º API Design Specialist
    const response = await fetch('http://localhost:3000/api/agent/design-specialist', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(mjmlInput)
    });
    
    const result = await response.json();
    
    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ MJML RENDERING:');
    console.log('üìä Success:', result.data?.success);
    console.log('üìä HTML Length:', result.data?.design_artifacts?.html_output?.length || 0);
    console.log('üìä MJML Source:', !!result.data?.design_artifacts?.mjml_source);
    console.log('üìä Tools Used:', result.data?.analytics?.operations_performed || 0);
    console.log('üìä Agent Output:', result.data?.agent_output?.slice(0, 200) + '...');
    
    return result;
    
  } catch (error) {
    console.error('‚ùå MJML Rendering test failed:', error);
    throw error;
  }
}

async function testDesignSpecialistFileSaving() {
  console.log('\nüíæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DESIGN SPECIALIST - FILE SAVING');
  console.log('=' .repeat(60));
  
  try {
    const fileSavingInput = {
      task_type: 'render_email',
      content_package: {
        content: {
          subject: '–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤',
          body: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML –∏ MJML —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫—É –∫–∞–º–ø–∞–Ω–∏–∏',
          cta: '–û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª—ã'
        }
      },
      campaign_context: {
        campaign_id: `test_campaign_${Date.now()}`,
        performance_session: `test_session_${Date.now()}`
      },
      rendering_requirements: {
        save_html: true,
        save_mjml: true,
        save_assets: true
      }
    };
    
    console.log('üìä Input –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(fileSavingInput, null, 2));
    
    const response = await fetch('http://localhost:3000/api/agent/design-specialist', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(fileSavingInput)
    });
    
    const result = await response.json();
    
    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ FILE SAVING:');
    console.log('üìä Success:', result.data?.success);
    console.log('üìä Files Saved:', result.data?.design_artifacts?.assets_used?.length || 0);
    console.log('üìä Campaign ID:', result.data?.campaign_context?.campaign_id);
    console.log('üìä Agent Output:', result.data?.agent_output?.slice(0, 200) + '...');
    
    return result;
    
  } catch (error) {
    console.error('‚ùå File Saving test failed:', error);
    throw error;
  }
}

async function testDesignSpecialistAssetSelection() {
  console.log('\nüñºÔ∏è –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DESIGN SPECIALIST - ASSET SELECTION');
  console.log('=' .repeat(60));
  
  try {
    const assetInput = {
      task_type: 'find_assets',
      content_package: {
        content: {
          subject: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –¢—É—Ä—Ü–∏—é',
          body: '–ö—Ä–∞—Å–∏–≤—ã–µ –ø–ª—è–∂–∏ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –º–µ—Å—Ç–∞'
        }
      },
      asset_requirements: {
        hero_assets: ['—Ç—É—Ä—Ü–∏—è', '–ø–ª—è–∂', '–º–æ—Ä–µ'],
        content_assets: ['—Å–∞–º–æ–ª–µ—Ç', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'],
        footer_assets: ['–ª–æ–≥–æ—Ç–∏–ø', '–∫–æ–Ω—Ç–∞–∫—Ç—ã']
      }
    };
    
    console.log('üìä Input –¥–∞–Ω–Ω—ã–µ:', JSON.stringify(assetInput, null, 2));
    
    const response = await fetch('http://localhost:3000/api/agent/design-specialist', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(assetInput)
    });
    
    const result = await response.json();
    
    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢ ASSET SELECTION:');
    console.log('üìä Success:', result.data?.success);
    console.log('üìä Assets Found:', result.data?.results?.assets ? 'Yes' : 'No');
    console.log('üìä Agent Output:', result.data?.agent_output?.slice(0, 200) + '...');
    
    return result;
    
  } catch (error) {
    console.error('‚ùå Asset Selection test failed:', error);
    throw error;
  }
}

async function runAllDesignTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –¢–ï–°–¢–û–í DESIGN SPECIALIST');
  console.log('=' .repeat(80));
  
  try {
    // 1. –¢–µ—Å—Ç MJML rendering
    await testDesignSpecialistMJML();
    
    // 2. –¢–µ—Å—Ç file saving
    await testDesignSpecialistFileSaving();
    
    // 3. –¢–µ—Å—Ç asset selection
    await testDesignSpecialistAssetSelection();
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ DESIGN SPECIALIST –ó–ê–í–ï–†–®–ï–ù–´ –£–°–ü–ï–®–ù–û!');
    console.log('üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OpenAI Dashboard –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞');
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–• DESIGN SPECIALIST:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllDesignTests().catch(console.error); 