const http = require('http');
const fs = require('fs').promises;
const path = require('path');

// –¢–µ—Å—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const testData = {
  task_type: "generate_content",
  input: {
    brief: "–ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ - —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç",
    tone: "—Ä–µ—à–∏—Ç–µ–ª—å–Ω—ã–π",
    target_audience: "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏",
    brand_guidelines: {
      style: "—á–µ—Ç–∫–∏–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π",
      language: "ru",
      content_type: "promotional"
    }
  },
  context: {
    figma_url: "https://www.figma.com/design/gJBHVJSHhOJdVLcXQEELpy/Email-Makers?node-id=4-9&t=uPmvpJMJLXPzfNVK-1",
    user_id: "forced_save_test"
  }
};

const postData = JSON.stringify(testData);
const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/api/agent/run-improved',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

console.log('üö® FORCED SAVE TEST: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
console.log('üìù Brief:', testData.input.brief);
console.log('üìÖ –í—Ä–µ–º—è:', new Date().toLocaleString());
console.log('==========================================');

const startTime = Date.now();

const req = http.request(options, (res) => {
  console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
  
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', async () => {
    const endTime = Date.now();
    console.log('==========================================');
    console.log(`üì¶ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}ms`);
    
    try {
      const result = JSON.parse(data);
      console.log('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω');
      console.log('üèÅ –°—Ç–∞—Ç—É—Å:', result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
      console.log('üÜî Trace ID:', result.traceId || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      
      if (result.error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
        return;
      }
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
      console.log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π...');
      await new Promise(resolve => setTimeout(resolve, 5000));
      
      // –ò—â–µ–º –∫–∞–º–ø–∞–Ω–∏–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
      console.log('\nüîç –ü–æ–∏—Å–∫ –Ω–µ–¥–∞–≤–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π...');
      
      const mailsPath = path.join(process.cwd(), 'mails');
      const folders = await fs.readdir(mailsPath);
      
      const recentCampaigns = [];
      const now = Date.now();
      
      for (const folder of folders) {
        if (folder === 'shared-assets') continue;
        
        try {
          const folderPath = path.join(mailsPath, folder);
          const stat = await fs.stat(folderPath);
          
          // –ö–∞–º–ø–∞–Ω–∏–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –º–∏–Ω—É—Ç
          if (stat.isDirectory() && (now - stat.birthtime.getTime()) < 600000) {
            recentCampaigns.push({
              name: folder,
              path: folderPath,
              created: stat.birthtime
            });
          }
        } catch {}
      }
      
      if (recentCampaigns.length > 0) {
        recentCampaigns.sort((a, b) => b.created - a.created);
        
        console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${recentCampaigns.length} –Ω–µ–¥–∞–≤–Ω–∏—Ö –∫–∞–º–ø–∞–Ω–∏–π:`);
        
        let foundFiles = false;
        
        for (let i = 0; i < Math.min(3, recentCampaigns.length); i++) {
          const campaign = recentCampaigns[i];
          console.log(`\n${i + 1}. ${campaign.name}`);
          console.log(`üìÖ –°–æ–∑–¥–∞–Ω–∞: ${campaign.created.toLocaleString()}`);
          
          const files = await fs.readdir(campaign.path);
          console.log(`üìÅ –§–∞–π–ª—ã: ${files.join(', ')}`);
          
          const htmlPath = path.join(campaign.path, 'email.html');
          const mjmlPath = path.join(campaign.path, 'email.mjml');
          
          let hasHtml = false, hasMjml = false;
          
          try {
            await fs.access(htmlPath);
            const htmlContent = await fs.readFile(htmlPath, 'utf8');
            console.log(`‚úÖ email.html: ${htmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            hasHtml = true;
            
            if (htmlContent.length > 500) {
              console.log(`‚úÖ HTML –≤—ã–≥–ª—è–¥–∏—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–º`);
            }
          } catch {
            console.log(`‚ùå email.html –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
          }
          
          try {
            await fs.access(mjmlPath);
            const mjmlContent = await fs.readFile(mjmlPath, 'utf8');
            console.log(`‚úÖ email.mjml: ${mjmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            hasMjml = true;
            
            if (mjmlContent.includes('<mjml>')) {
              console.log(`‚úÖ MJML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞`);
            }
          } catch {
            console.log(`‚ùå email.mjml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
          }
          
          if (hasHtml && hasMjml) {
            foundFiles = true;
            console.log(`üéâ –£–°–ü–ï–• –≤ –∫–∞–º–ø–∞–Ω–∏–∏: ${campaign.name}`);
          }
        }
        
        console.log('\n==========================================');
        if (foundFiles) {
          console.log('üéâüéâüéâ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –°–†–ê–ë–û–¢–ê–õ–û! üéâüéâüéâ');
          console.log('‚úÖ –§–∞–π–ª—ã email.html –∏ email.mjml –Ω–∞–π–¥–µ–Ω—ã!');
          console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤ –†–ï–®–ï–ù–ê!');
        } else {
          console.log('‚ùå‚ùå‚ùå –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï –ù–ï –°–†–ê–ë–û–¢–ê–õ–û ‚ùå‚ùå‚ùå');
          console.log('‚ùå –§–∞–π–ª—ã –≤—Å–µ –µ—â–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è');
          console.log('‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–∞–ª—å–Ω–µ–π—à–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ');
        }
        
      } else {
        console.log('‚ùå –ù–µ–¥–∞–≤–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', e.message);
    }
  });
});

req.on('error', (e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', e.message);
});

req.write(postData);
req.end(); 