const { DesignSpecialistAgentV2 } = require('./src/agent/specialists/design-specialist-agent-v2.ts');

async function debugAgentResponse() {
  const agent = new DesignSpecialistAgentV2();
  
  // Simulated input based on our test
  const input = {
    task_type: 'render_email',
    content_package: {
      complete_content: {
        subject: '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –æ—Ç 5279 RUB ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å!',
        preheader: '–õ–µ—Ç–∏—Ç–µ –ø–æ –≤—ã–≥–æ–¥–Ω—ã–º —Ü–µ–Ω–∞–º —ç—Ç–∏–º –ª–µ—Ç–æ–º –∏ –æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã',
        body: '–õ–µ—Ç–æ –≤ —Ä–∞–∑–≥–∞—Ä–µ, –∏ —ç—Ç–æ –∏–¥–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π! –ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞—Ö.',
        cta: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å'
      },
      content_metadata: {
        language: 'ru',
        tone: 'friendly'
      }
    },
    rendering_requirements: {
      output_format: 'html',
      template_type: 'promotional',
      email_client_optimization: 'universal',
      responsive_design: true
    }
  };

  try {
    // Mock the agent run to capture the exact response structure
    const { run } = await import('openai/agents');
    
    const agentResponse = await run(agent.agent, `Find appropriate images for email campaign based on AI-generated tags.
                     Tags: –∞–≤–∏–∞–±–∏–ª–µ—Ç, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ª–µ—Ç–æ, –æ—Ç–¥—ã—Ö, —Å—á–∞—Å—Ç—å–µ
                     Subject: ${input.content_package.complete_content.subject}
                     Find 2-3 relevant images that match the content tone and message.`);
    
    console.log('üîç Full Agent Response Structure:');
    console.log(JSON.stringify(agentResponse, null, 2));
    
    console.log('\nüîç Response Keys:', Object.keys(agentResponse || {}));
    console.log('üîç Response Type:', typeof agentResponse);
    
    if (agentResponse?.state) {
      console.log('\nüîç State Structure:');
      console.log(JSON.stringify(agentResponse.state, null, 2));
    }
    
    if (agentResponse?.messages) {
      console.log('\nüîç Messages Structure:');
      agentResponse.messages.forEach((msg, i) => {
        console.log(`Message ${i}:`, {
          role: msg.role,
          content: typeof msg.content === 'string' ? msg.content.substring(0, 100) + '...' : msg.content,
          tool_calls: msg.tool_calls,
          name: msg.name
        });
      });
    }
    
  } catch (error) {
    console.error('‚ùå Debug failed:', error);
  }
}

debugAgentResponse().catch(console.error); 