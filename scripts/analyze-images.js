#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞ analysis
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
 */

const fs = require('fs').promises;
const path = require('path');
const sharp = require('sharp');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–≤–µ—Ç–æ–≤–æ–π –ø–∞–ª–∏—Ç—Ä—ã
async function analyzeColors(imagePath) {
  try {
    const image = sharp(imagePath);
    const { dominant } = await image.stats();
    
    // –ê–Ω–∞–ª–∏–∑ –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤
    const colors = {
      red: dominant.r,
      green: dominant.g,
      blue: dominant.b
    };
    
    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–≤–µ—Ç–∞
    let primaryColor = 'neutral';
    if (colors.red > 150 && colors.green < 100 && colors.blue < 100) {
      primaryColor = 'red';
    } else if (colors.green > 150 && colors.red < 100 && colors.blue < 100) {
      primaryColor = 'green';
    } else if (colors.blue > 150 && colors.red < 100 && colors.green < 100) {
      primaryColor = 'blue';
    } else if (colors.red > 200 && colors.green > 150 && colors.blue < 100) {
      primaryColor = 'orange';
    } else if (colors.red > 150 && colors.green > 150 && colors.blue < 100) {
      primaryColor = 'yellow';
    } else if (colors.red > 100 && colors.green < 100 && colors.blue > 150) {
      primaryColor = 'purple';
    } else if (colors.red > 200 && colors.green > 200 && colors.blue > 200) {
      primaryColor = 'white';
    } else if (colors.red < 50 && colors.green < 50 && colors.blue < 50) {
      primaryColor = 'black';
    }
    
    return {
      dominant: colors,
      primaryColor,
      brightness: Math.round((colors.red + colors.green + colors.blue) / 3),
      saturation: Math.round(Math.max(colors.red, colors.green, colors.blue) - Math.min(colors.red, colors.green, colors.blue))
    };
  } catch (error) {
    return {
      dominant: { red: 128, green: 128, blue: 128 },
      primaryColor: 'neutral',
      brightness: 128,
      saturation: 0
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
async function analyzeComposition(imagePath, metadata) {
  const aspectRatio = metadata.width / metadata.height;
  
  let composition = 'square';
  if (aspectRatio > 1.5) {
    composition = 'wide_landscape';
  } else if (aspectRatio > 1.1) {
    composition = 'landscape';
  } else if (aspectRatio < 0.7) {
    composition = 'tall_portrait';
  } else if (aspectRatio < 0.9) {
    composition = 'portrait';
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞)
  const complexity = metadata.size > 100000 ? 'complex' : 
                    metadata.size > 50000 ? 'medium' : 'simple';
  
  return {
    aspectRatio: parseFloat(aspectRatio.toFixed(2)),
    composition,
    complexity,
    resolution: `${metadata.width}x${metadata.height}`,
    pixelDensity: Math.round(metadata.width * metadata.height / 1000000 * 100) / 100
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤
function analyzeContent(tags, fileName) {
  const categories = {
    characters: ['–∑–∞—è—Ü', '–∫—Ä–æ–ª–∏–∫', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–∂–∏–≤–æ—Ç–Ω—ã–µ', '–º—É–ª—å—Ç—Ñ–∏–ª—å–º'],
    emotions: ['–≤–µ—Å–µ–ª—å–µ', '—Ä–∞–¥–æ—Å—Ç—å', '–≥—Ä—É—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ', '—ç–º–æ—Ü–∏–∏', '—É–ª—ã–±–∫–∞'],
    travel: ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–∞–≤–∏–∞–±–∏–ª–µ—Ç', '–∞–≤–∏–∞—Ü–∏—è', '–æ—Ç–ø—É—Å–∫', '—Å–æ—á–∏'],
    business: ['–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', 'email', '–±–∏–∑–Ω–µ—Å', '–ª–æ–≥–æ—Ç–∏–ø', '–±—Ä–µ–Ω–¥–∏–Ω–≥'],
    activities: ['—Å–ø–æ—Ä—Ç', '–º—É–∑—ã–∫–∞', '—á—Ç–µ–Ω–∏–µ', '–∏–≥—Ä–∞', '–æ—Ç–¥—ã—Ö'],
    technology: ['–º–æ–±–∏–ª—å–Ω—ã–µ', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏', '–¥–∏–∑–∞–π–Ω', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏'],
    nature: ['—ç–∫–æ–ª–æ–≥–∏—è', '–ø—Ä–∏—Ä–æ–¥–∞', '–ª–µ—Ç–æ', '–∑–∏–º–∞'],
    food: ['–µ–¥–∞', '–∫–æ—Ñ–µ', '–Ω–∞–ø–∏—Ç–∫–∏'],
    abstract: ['–≥—Ä–∞—Ñ–∏–∫–∞', '–¥–∏–∑–∞–π–Ω', '–∫—Ä–µ–∞—Ç–∏–≤', '–∞—Ä—Ç']
  };
  
  const detectedCategories = [];
  const contentElements = [];
  
  for (const [category, keywords] of Object.entries(categories)) {
    const matches = keywords.filter(keyword => 
      tags.some(tag => tag.toLowerCase().includes(keyword))
    );
    if (matches.length > 0) {
      detectedCategories.push(category);
      contentElements.push(...matches);
    }
  }
  
  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–º—ã
  let primaryTheme = 'general';
  if (detectedCategories.includes('characters')) primaryTheme = 'character_based';
  else if (detectedCategories.includes('travel')) primaryTheme = 'travel_related';
  else if (detectedCategories.includes('business')) primaryTheme = 'business_oriented';
  else if (detectedCategories.includes('technology')) primaryTheme = 'tech_focused';
  
  return {
    categories: detectedCategories,
    primaryTheme,
    contentElements: [...new Set(contentElements)],
    complexity: detectedCategories.length > 3 ? 'multi_theme' : 
                detectedCategories.length > 1 ? 'dual_theme' : 'single_theme'
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ email
function analyzeEmailUsage(metadata, colors, content) {
  const usageRecommendations = [];
  const suitability = {};
  
  // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –¥–ª—è email
  if (metadata.width <= 600 && metadata.height <= 400) {
    usageRecommendations.push('header_banner');
    suitability.header = 'excellent';
  } else if (metadata.width <= 300 && metadata.height <= 300) {
    usageRecommendations.push('icon', 'inline_element');
    suitability.icon = 'excellent';
  } else if (metadata.width > 800) {
    usageRecommendations.push('hero_image');
    suitability.hero = 'good';
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Ü–≤–µ—Ç–∞ –¥–ª—è email
  if (colors.brightness > 200) {
    usageRecommendations.push('light_theme_background');
    suitability.lightTheme = 'excellent';
  } else if (colors.brightness < 80) {
    usageRecommendations.push('dark_theme_accent');
    suitability.darkTheme = 'good';
  }
  
  // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è email
  if (content.categories.includes('emotions')) {
    usageRecommendations.push('engagement_element');
    suitability.engagement = 'excellent';
  }
  
  if (content.categories.includes('business')) {
    usageRecommendations.push('professional_communication');
    suitability.professional = 'excellent';
  }
  
  return {
    recommendations: usageRecommendations,
    suitability,
    fileSize: metadata.size < 100000 ? 'optimal' : 
              metadata.size < 500000 ? 'acceptable' : 'too_large',
    loadingSpeed: metadata.size < 50000 ? 'fast' : 
                  metadata.size < 200000 ? 'medium' : 'slow'
  };
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–∞–π–ª–∞
async function analyzeImage(imagePath, tags, fileName) {
  try {
    console.log(`  üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${fileName}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const stats = await fs.stat(imagePath);
    const image = sharp(imagePath);
    const metadata = await image.metadata();
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∏–¥—ã –∞–Ω–∞–ª–∏–∑–∞
    const [colors, composition] = await Promise.all([
      analyzeColors(imagePath),
      analyzeComposition(imagePath, { ...metadata, size: stats.size })
    ]);
    
    const content = analyzeContent(tags, fileName);
    const emailUsage = analyzeEmailUsage(
      { ...metadata, size: stats.size }, 
      colors, 
      content
    );
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
    const analysis = {
      visual: {
        colors,
        composition,
        quality: metadata.width * metadata.height > 1000000 ? 'high' : 
                metadata.width * metadata.height > 100000 ? 'medium' : 'standard'
      },
      content,
      emailUsage,
      technical: {
        fileSize: stats.size,
        dimensions: `${metadata.width}x${metadata.height}`,
        format: metadata.format,
        hasAlpha: metadata.channels === 4,
        colorSpace: metadata.space || 'srgb'
      },
      score: {
        visual: Math.min(100, Math.round((colors.saturation + colors.brightness) / 2.55)),
        content: Math.min(100, content.contentElements.length * 15),
        technical: Math.min(100, 100 - (stats.size / 10000)),
        overall: 0 // –±—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω –Ω–∏–∂–µ
      }
    };
    
    // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–ª
    analysis.score.overall = Math.round(
      (analysis.score.visual + analysis.score.content + analysis.score.technical) / 3
    );
    
    return analysis;
    
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${fileName}: ${error.message}`);
    return {
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
async function processJsonFile(jsonPath, folderName) {
  try {
    console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON: ${jsonPath}`);
    
    const jsonData = JSON.parse(await fs.readFile(jsonPath, 'utf8'));
    
    if (!jsonData.entries || Object.keys(jsonData.entries).length === 0) {
      console.log(`‚ö†Ô∏è  JSON —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: ${jsonPath}`);
      return;
    }
    
    let processedCount = 0;
    const totalEntries = Object.keys(jsonData.entries).length;
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å
    for (const [fileName, entry] of Object.entries(jsonData.entries)) {
      if (!entry.analysis || entry.analysis.error) { // –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞
        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .png –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const imageFileName = fileName.endsWith('.png') ? fileName : `${fileName}.png`;
        const imagePath = path.join(path.dirname(jsonPath), imageFileName);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        try {
          await fs.access(imagePath);
          const analysis = await analyzeImage(imagePath, entry.tags || [], fileName);
          entry.analysis = analysis;
          processedCount++;
        } catch (error) {
          console.log(`  ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${imageFileName}`);
          entry.analysis = {
            error: 'File not found',
            timestamp: new Date().toISOString()
          };
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
    jsonData.analysisMetadata = {
      lastAnalysis: new Date().toISOString(),
      totalFiles: totalEntries,
      analyzedFiles: processedCount,
      version: '1.0.0'
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π JSON
    await fs.writeFile(jsonPath, JSON.stringify(jsonData, null, 2), 'utf8');
    console.log(`‚úÖ –ê–Ω–∞–ª–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è ${processedCount} —Ñ–∞–π–ª–æ–≤ –≤ ${jsonPath}`);
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${jsonPath}: ${error.message}`);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const targetDir = process.argv[2] || 'figma-all-pages-1750993353363';
  
  console.log('üî¨ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
  console.log(`üìÅ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: ${targetDir}`);
  
  try {
    const folders = await fs.readdir(targetDir);
    
    for (const folder of folders) {
      const folderPath = path.join(targetDir, folder);
      const stat = await fs.stat(folderPath);
      
      if (stat.isDirectory()) {
        console.log(`\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: ${folderPath}`);
        
        const jsonPath = path.join(folderPath, 'tag-dictionary.json');
        
        try {
          await fs.access(jsonPath);
          await processJsonFile(jsonPath, folder);
        } catch (error) {
          console.log(`‚ö†Ô∏è  JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${jsonPath}`);
        }
      }
    }
    
    console.log('\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
    console.log('\nüìä –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∞–Ω–∞–ª–∏–∑–∞:');
    console.log('   ‚Ä¢ –í–∏–∑—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ü–≤–µ—Ç–∞, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –∫–∞—á–µ—Å—Ç–≤–æ)');
    console.log('   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ç–µ–º—ã, —ç–ª–µ–º–µ–Ω—Ç—ã)');
    console.log('   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è email (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å)');
    console.log('   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
    console.log('   ‚Ä¢ –û—Ü–µ–Ω–æ—á–Ω—ã–µ –±–∞–ª–ª—ã (–≤–∏–∑—É–∞–ª, –∫–æ–Ω—Ç–µ–Ω—Ç, —Ç–µ—Ö–Ω–∏–∫–∞, –æ–±—â–∏–π)');
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
} 