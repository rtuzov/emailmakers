#!/usr/bin/env node

/**
 * –†—É—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
 */

const fs = require('fs/promises');
const path = require('path');
const sharp = require('sharp');

const TARGET_NODE_ID = '2014:3485';

async function manualExtractVariants() {
  console.log('‚úÇÔ∏è –†–£–ß–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –í–ê–†–ò–ê–ù–¢–û–í');
  console.log('‚ïê'.repeat(40));
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    const imagePath = path.join(process.cwd(), 'temp', `figma-node-${TARGET_NODE_ID}-1750942733695.png`);
    console.log(`üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: ${imagePath}`);
    
    const image = sharp(imagePath);
    const metadata = await image.metadata();
    const { width, height } = metadata;
    
    console.log(`üìä –†–∞–∑–º–µ—Ä—ã: ${width}√ó${height}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const outputDir = path.join(process.cwd(), `manual-variants-${Date.now()}`);
    await fs.mkdir(outputDir, { recursive: true });
    console.log(`üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDir}`);
    
    // –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    const variants = [
      {
        name: 'rabbit-left',
        startX: 790,
        width: 65,
        description: '–õ–µ–≤—ã–π –∑–∞–π—á–∏–∫ (—É–∑–∫–∏–π)'
      },
      {
        name: 'rabbit-center', 
        startX: 920,
        width: 400,
        description: '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –∑–∞–π—á–∏–∫ (—Å—Ä–µ–¥–Ω–∏–π)'
      },
      {
        name: 'rabbit-right',
        startX: 1450,
        width: 400,
        description: '–ü—Ä–∞–≤—ã–π –∑–∞–π—á–∏–∫ (—à–∏—Ä–æ–∫–∏–π)'
      }
    ];
    
    console.log('\nüéØ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –° –ö–û–ù–°–ï–†–í–ê–¢–ò–í–ù–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò');
    console.log('‚îÄ'.repeat(50));
    
    for (const variant of variants) {
      console.log(`\nüìê ${variant.name} (${variant.description}):`);
      console.log(`   –ù–∞—á–∞–ª–æ: x=${variant.startX}`);
      console.log(`   –®–∏—Ä–∏–Ω–∞: ${variant.width}px`);
      console.log(`   –ö–æ–Ω–µ—Ü: x=${variant.startX + variant.width - 1}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
      if (variant.startX + variant.width > width) {
        const adjustedWidth = width - variant.startX - 10; // –û—Ç—Å—Ç—É–ø 10px
        console.log(`   ‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã: ${variant.width} ‚Üí ${adjustedWidth}`);
        variant.width = adjustedWidth;
      }
      
      if (variant.width <= 0) {
        console.log(`   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —à–∏—Ä–∏–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      const outputFile = path.join(outputDir, `${variant.name}.png`);
      
      try {
        console.log(`   üîß –ò–∑–≤–ª–µ–∫–∞–µ–º: left=${variant.startX}, width=${variant.width}, height=${height}`);
        
        await image
          .extract({
            left: variant.startX,
            top: 0,
            width: variant.width,
            height: height
          })
          .png()
          .toFile(outputFile);
        
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFile}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        const stats = await fs.stat(outputFile);
        console.log(`   üìä –†–∞–∑–º–µ—Ä: ${(stats.size / 1024).toFixed(1)} KB`);
        
      } catch (error) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å –µ—â—ë –º–µ–Ω—å—à–µ–π —à–∏—Ä–∏–Ω–æ–π
        const safeWidth = Math.max(50, variant.width - 50);
        console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π: ${safeWidth}px`);
        
        try {
          await image
            .extract({
              left: variant.startX,
              top: 0,
              width: safeWidth,
              height: height
            })
            .png()
            .toFile(outputFile);
          
          console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π): ${outputFile} (${safeWidth}√ó${height})`);
          
        } catch (retryError) {
          console.log(`   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: ${retryError.message}`);
          
          // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
          const minWidth = 30;
          console.log(`   üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ —Å —à–∏—Ä–∏–Ω–æ–π: ${minWidth}px`);
          
          try {
            await image
              .extract({
                left: variant.startX,
                top: 0,
                width: minWidth,
                height: height
              })
              .png()
              .toFile(outputFile);
            
            console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π): ${outputFile} (${minWidth}√ó${height})`);
            
          } catch (finalError) {
            console.log(`   ‚ùå –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: ${finalError.message}`);
          }
        }
      }
    }
    
    // –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–¥–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–≤–ª–µ—á–µ–Ω–∏–π
    console.log('\nüß™ –¢–ï–°–¢–û–í–´–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø');
    console.log('‚îÄ'.repeat(25));
    
    const testExtracts = [
      { name: 'test-small', startX: 800, width: 50 },
      { name: 'test-medium', startX: 1000, width: 200 },
      { name: 'test-large', startX: 1500, width: 300 }
    ];
    
    for (const test of testExtracts) {
      const outputFile = path.join(outputDir, `${test.name}.png`);
      
      try {
        await image
          .extract({
            left: test.startX,
            top: 0,
            width: test.width,
            height: height
          })
          .png()
          .toFile(outputFile);
        
        console.log(`‚úÖ ${test.name}: ${test.startX}-${test.startX + test.width} (${test.width}px)`);
        
      } catch (error) {
        console.log(`‚ùå ${test.name}: ${error.message}`);
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const infoFile = path.join(outputDir, 'extraction-log.json');
    await fs.writeFile(infoFile, JSON.stringify({
      source: 'figma',
      node_id: TARGET_NODE_ID,
      original_size: { width, height },
      extraction_method: 'manual_conservative',
      attempted_variants: variants,
      timestamp: new Date().toISOString()
    }, null, 2));
    
    console.log(`\nüìã –õ–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${infoFile}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const files = await fs.readdir(outputDir);
    const pngFiles = files.filter(f => f.endsWith('.png'));
    
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´');
    console.log('‚îÄ'.repeat(15));
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: ${pngFiles.length}`);
    
    for (const file of pngFiles) {
      const filePath = path.join(outputDir, file);
      const stats = await fs.stat(filePath);
      console.log(`   üìÑ ${file}: ${(stats.size / 1024).toFixed(1)} KB`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
manualExtractVariants()
  .then(() => {
    console.log('\nüéâ –†–£–ß–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  })
  .catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 