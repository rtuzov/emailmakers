#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * Script to fix Zod schema issues: .optional().describe() without .nullable()
 * 
 * OpenAI Agents SDK —Ç—Ä–µ–±—É–µ—Ç, —á—Ç–æ–±—ã –≤—Å–µ optional –ø–æ–ª—è —Ç–∞–∫–∂–µ –±—ã–ª–∏ nullable.
 * –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –Ω–∞—Ö–æ–¥–∏—Ç –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ —Ç–∞–∫–∏–µ —Å–ª—É—á–∞–∏.
 */

console.log('üîß Fixing Zod schema issues: .optional().describe() ‚Üí .optional().nullable().describe()');

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏
const findFiles = () => {
  try {
    const output = execSync('find src -name "*.ts" -type f', { encoding: 'utf8' });
    return output.trim().split('\n').filter(Boolean);
  } catch (error) {
    console.error('Error finding files:', error.message);
    return [];
  }
};

// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
const fixFile = (filePath) => {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let fixed = false;
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const patterns = [
      // –û—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω: .optional().describe(
      {
        regex: /\.optional\(\)\.describe\(/g,
        replacement: '.optional().nullable().describe(',
        description: '.optional().describe() ‚Üí .optional().nullable().describe()'
      },
      // –û–±—ä–µ–∫—Ç—ã: }).optional().describe(
      {
        regex: /\}\)\.optional\(\)\.describe\(/g,
        replacement: '}).optional().nullable().describe(',
        description: '}).optional().describe() ‚Üí }).optional().nullable().describe()'
      },
      // –ú–∞—Å—Å–∏–≤—ã: ])).optional().describe(
      {
        regex: /\]\)\)\.optional\(\)\.describe\(/g,
        replacement: '])).optional().nullable().describe(',
        description: '])).optional().describe() ‚Üí ])).optional().nullable().describe()'
      },
      // –°–ª—É—á–∞–∏ –±–µ–∑ .describe(): .optional(),
      {
        regex: /\.optional\(\),/g,
        replacement: '.optional().nullable(),',
        description: '.optional(), ‚Üí .optional().nullable(),'
      },
      // –°–ª—É—á–∞–∏ –±–µ–∑ .describe() –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏: .optional()
      {
        regex: /\.optional\(\)$/gm,
        replacement: '.optional().nullable()',
        description: '.optional() ‚Üí .optional().nullable()'
      }
    ];
    
    let newContent = content;
    
    patterns.forEach(pattern => {
      const matches = content.match(pattern.regex);
      if (matches) {
        console.log(`  üìù Fixing ${matches.length} instances of ${pattern.description} in ${filePath}`);
        newContent = newContent.replace(pattern.regex, pattern.replacement);
        fixed = true;
      }
    });
    
    if (fixed) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      console.log(`  ‚úÖ Fixed ${filePath}`);
      return true;
    }
    
    return false;
  } catch (error) {
    console.error(`  ‚ùå Error fixing ${filePath}:`, error.message);
    return false;
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = () => {
  const files = findFiles();
  console.log(`üîç Found ${files.length} TypeScript files to check`);
  
  let fixedFiles = 0;
  let totalFixes = 0;
  
  files.forEach(file => {
    const content = fs.readFileSync(file, 'utf8');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
    if (content.includes('.optional().describe(')) {
      console.log(`\nüîß Processing ${file}...`);
      
      if (fixFile(file)) {
        fixedFiles++;
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
        const newContent = fs.readFileSync(file, 'utf8');
        const oldMatches = content.match(/\.optional\(\)\.describe\(/g) || [];
        const newMatches = newContent.match(/\.optional\(\)\.nullable\(\)\.describe\(/g) || [];
        totalFixes += newMatches.length;
      }
    }
  });
  
  console.log(`\nüìä Summary:`);
  console.log(`  üìÅ Files processed: ${files.length}`);
  console.log(`  üîß Files fixed: ${fixedFiles}`);
  console.log(`  ‚ú® Total fixes applied: ${totalFixes}`);
  
  if (fixedFiles > 0) {
    console.log(`\n‚úÖ All Zod schema issues have been fixed!`);
    console.log(`üí° The OpenAI Agents SDK now requires all optional fields to also be nullable.`);
  } else {
    console.log(`\n‚úÖ No Zod schema issues found!`);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 