#!/usr/bin/env node
/**
 * Test Fixes Script
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞
 */

const fetch = require('node-fetch');

const BASE_URL = 'http://localhost:3000';

/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
 */
async function testGenerationAndAutoSave() {
  console.log('üß™ Testing email generation and auto-save...');
  
  try {
    const response = await fetch(`${BASE_URL}/api/agent/paris-campaign`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        topic: '–¢–µ—Å—Ç –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è - –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –±–∏–ª–µ—Ç—ã –≤ –ü–∞—Ä–∏–∂'
      })
    });
    
    const data = await response.json();
    
    if (response.ok && data.status === 'success') {
      console.log('‚úÖ Generation successful');
      console.log('   Generation time:', data.campaign_details?.generation_time + 'ms');
      console.log('   Auto-saved:', data.campaign_details?.auto_saved ? 'Yes' : 'No');
      console.log('   Subject:', data.data?.subject);
      
      return true;
    } else {
      console.log('‚ùå Generation failed');
      console.log('   Error:', data.error || data.message);
      return false;
    }
  } catch (error) {
    console.log('‚ùå Test error:', error.message);
    return false;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ mails
 */
async function checkMailsFolder() {
  console.log('üìÅ Checking mails folder...');
  
  const fs = require('fs');
  const path = require('path');
  
  try {
    const mailsDir = path.join(process.cwd(), 'mails');
    const files = fs.readdirSync(mailsDir);
    
    const htmlFiles = files.filter(f => f.endsWith('.html'));
    const jsonFiles = files.filter(f => f.endsWith('.json'));
    
    console.log(`‚úÖ Found ${htmlFiles.length} HTML files`);
    console.log(`‚úÖ Found ${jsonFiles.length} JSON files`);
    
    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ñ–∞–π–ª—ã
    if (htmlFiles.length > 0) {
      const latest = htmlFiles.sort().pop();
      console.log(`   Latest: ${latest}`);
    }
    
    return htmlFiles.length > 0;
  } catch (error) {
    console.log('‚ùå Error checking mails folder:', error.message);
    return false;
  }
}

/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ API —Ü–µ–Ω
 */
async function testPricesAPI() {
  console.log('üí∞ Testing prices API fix...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ API –∞–≥–µ–Ω—Ç–∞
    const response = await fetch(`${BASE_URL}/api/agent/paris-campaign`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        topic: '–¢–µ—Å—Ç —Ü–µ–Ω MOW-CDG'
      })
    });
    
    const data = await response.json();
    
    if (data.campaign_details?.prices) {
      const prices = data.campaign_details.prices;
      console.log('‚úÖ Prices API working');
      console.log('   Cheapest price:', prices.cheapest + ' ' + prices.currency);
      console.log('   Options found:', prices.options_found);
      
      return prices.cheapest > 0;
    } else {
      console.log('‚ùå No price data in response');
      return false;
    }
  } catch (error) {
    console.log('‚ùå Prices test error:', error.message);
    return false;
  }
}

/**
 * –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */
async function runFullTest() {
  console.log('üîß Running full fixes test...\n');
  
  const results = {
    generation: await testGenerationAndAutoSave(),
    autosave: await checkMailsFolder(),
    prices: await testPricesAPI()
  };
  
  console.log('\nüìä Test Results:');
  Object.entries(results).forEach(([test, passed]) => {
    console.log(`   ${test}: ${passed ? '‚úÖ PASS' : '‚ùå FAIL'}`);
  });
  
  const passed = Object.values(results).filter(Boolean).length;
  const total = Object.values(results).length;
  
  console.log(`\nüéØ Overall: ${passed}/${total} tests passed`);
  
  if (passed === total) {
    console.log('üéâ All fixes working correctly!');
  } else {
    console.log('‚ö†Ô∏è Some issues need attention');
  }
  
  return results;
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
if (require.main === module) {
  const command = process.argv[2];

  switch (command) {
    case 'generation':
      testGenerationAndAutoSave();
      break;
      
    case 'files':
      checkMailsFolder();
      break;
      
    case 'prices':
      testPricesAPI();
      break;
      
    default:
      runFullTest();
      break;
  }
}

module.exports = {
  testGenerationAndAutoSave,
  checkMailsFolder,
  testPricesAPI,
  runFullTest
};
