#!/usr/bin/env node

const path = require('path');
const fs = require('fs').promises;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
 */
class TagDeduplicationService {
  constructor() {
    this.config = {
      maxTagsPerFile: 6,
      maxFileNameLength: 80,
      priorityTags: [
        '–∑–∞—è—Ü',
        '–±–∏–ª–µ—Ç',
        '–∞–≤–∏–∞–±–∏–ª–µ—Ç—ã', 
        '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
        '–Ω–æ–≤–æ—Å—Ç–∏',
        '–∞–∫—Ü–∏—è',
        '—Å–∫–∏–¥–∫–∞'
      ],
      synonymGroups: [
        ['–¥–µ—à–µ–≤—ã–µ', '–¥–µ—à–µ–≤—ã–µ–±–∏–ª–µ—Ç—ã', '–¥–µ—à–µ–≤—ã–µ_–±–∏–ª–µ—Ç—ã', '–¥–µ—à–µ–≤—ã–µ –±–∏–ª–µ—Ç—ã'],
        ['–∞–≤–∏–∞–±–∏–ª–µ—Ç', '–∞–≤–∏–∞–±–∏–ª–µ—Ç—ã', '–±–∏–ª–µ—Ç—ã', '–±–∏–ª–µ—Ç'],
        ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–∞–≤–∏–∞–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'],
        ['–Ω–æ–≤–æ—Å—Ç–∏', '–Ω–æ–≤–æ—Å—Ç–∏_–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π', '–Ω–æ–≤–æ—Å—Ç–∏–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π'],
        ['–∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç', '–∞–≤–∏–∞–ø–µ—Ä–µ–ª–µ—Ç—ã', '–ø–µ—Ä–µ–ª–µ—Ç—ã', '–¥–µ—à–µ–≤—ã–µ –ø–µ—Ä–µ–ª–µ—Ç—ã'],
        ['–º–æ—Å–∫–≤–∞', '–ú–æ—Å–∫–≤–∞'],
        ['–±–∞—Ç—É–º–∏', '–ë–∞—Ç—É–º–∏'],
        ['—Å–æ—á–∏', '–°–æ—á–∏'],
        ['–ø–∏—Ç–µ—Ä', '–ü–∏—Ç–µ—Ä', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥'],
        ['–≤–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑', '–í–ª–∞–¥–∏–∫–∞–≤–∫–∞–∑'],
        ['—è–≥–∞–¥—É–≥—É', '–Ø–≥–∞–¥—É–≥—É', '–Ø–≥–æ–¥—É–≥—É'],
        ['—Ü–µ–Ω–∞', '—Ü–µ–Ω–∞_3000', '3000—Ä—É–±–ª–µ–π', '3000—Ä—É–±']
      ],
      excludePatterns: [
        '—è—Ä–∫–∏–π',
        '–∑–µ–ª–µ–Ω—ã–π', 
        '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
        '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π',
        '–ø–æ–∑–∏—Ç–∏–≤',
        '–≤–µ—Å–µ–ª—ã–π',
        '–∞–Ω–∏–º–∞—Ü–∏—è',
        '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è',
        '–º–∞—Ä—à—Ä—É—Ç',
        '—é–º–æ—Ä',
        '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
        '—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'
      ]
    };
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–≥–∏, —É–¥–∞–ª—è—è –¥—É–±–ª–∏ –∏ –ø—Ä–∏–º–µ–Ω—è—è —Å–∏–Ω–æ–Ω–∏–º—ã
   */
  optimizeTags(tags, hasRabbit = true) {
    const originalTags = [...tags];
    let processedTags = [...tags];
    const removedDuplicates = [];
    const appliedSynonyms = {};

    // 1. –£–¥–∞–ª—è–µ–º —Ç–µ–≥–∏-–∏—Å–∫–ª—é—á–µ–Ω–∏—è
    processedTags = processedTags.filter(tag => {
      const shouldExclude = this.config.excludePatterns.some(pattern => 
        tag.toLowerCase().includes(pattern.toLowerCase())
      );
      if (shouldExclude) {
        removedDuplicates.push(tag);
      }
      return !shouldExclude;
    });

    // 2. –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä—É–ø–ø—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    processedTags = processedTags.map(tag => {
      for (const synonymGroup of this.config.synonymGroups) {
        const matchedSynonym = synonymGroup.find(synonym => 
          tag.toLowerCase() === synonym.toLowerCase()
        );
        if (matchedSynonym && matchedSynonym !== synonymGroup[0]) {
          appliedSynonyms[tag] = synonymGroup[0];
          return synonymGroup[0];
        }
      }
      return tag;
    });

    // 3. –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤
    const uniqueTags = Array.from(new Set(processedTags.map(tag => tag.toLowerCase())))
      .map(lowerTag => processedTags.find(tag => tag.toLowerCase() === lowerTag));

    // 4. –£–¥–∞–ª—è–µ–º "–∑–∞—è—Ü" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    let finalTags = uniqueTags;
    if (!hasRabbit) {
      finalTags = finalTags.filter(tag => tag.toLowerCase() !== '–∑–∞—è—Ü');
    }

    // 5. –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏
    const priorityTags = finalTags.filter(tag => 
      this.config.priorityTags.some(priority => 
        tag.toLowerCase().includes(priority.toLowerCase())
      )
    );
    const otherTags = finalTags.filter(tag => 
      !this.config.priorityTags.some(priority => 
        tag.toLowerCase().includes(priority.toLowerCase())
      )
    );

    // 6. –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
    const optimizedTags = [
      ...priorityTags.slice(0, 4),
      ...otherTags.slice(0, this.config.maxTagsPerFile - priorityTags.length)
    ].slice(0, this.config.maxTagsPerFile);

    // 7. –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const shortFileName = this.createShortFileName(optimizedTags);

    return {
      originalTags,
      optimizedTags,
      shortFileName,
      removedDuplicates,
      appliedSynonyms
    };
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
   */
  createShortFileName(tags) {
    const fileName = tags
      .map(tag => tag.toLowerCase().replace(/\s+/g, ''))
      .join('-');
    
    if (fileName.length <= this.config.maxFileNameLength) {
      return fileName;
    }

    // –ï—Å–ª–∏ –∏–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Ç–µ–≥–∏
    let shortName = '';
    for (const tag of tags) {
      const tagFormatted = tag.toLowerCase().replace(/\s+/g, '');
      if ((shortName + '-' + tagFormatted).length <= this.config.maxFileNameLength) {
        shortName = shortName ? shortName + '-' + tagFormatted : tagFormatted;
      } else {
        break;
      }
    }
    
    return shortName || tags[0].toLowerCase().replace(/\s+/g, '');
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π JSON —Ñ–∞–π–ª —Å–ª–æ–≤–∞—Ä—è
   */
  async optimizeTagDictionary(filePath) {
    try {
      const content = await fs.readFile(filePath, 'utf-8');
      const dictionary = JSON.parse(content);
      
      const optimizedEntries = {};
      const optimizationReport = {
        originalFiles: Object.keys(dictionary.entries || dictionary.assets || {}).length,
        optimizedFiles: 0,
        totalTagsRemoved: 0,
        duplicatesFound: 0,
        synonymsApplied: 0
      };

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö (—Å–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤ –∏–ª–∏ –æ—Ç—á–µ—Ç Figma)
      const entries = dictionary.entries || {};
      const assets = dictionary.assets || [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º entries –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Ç–µ–≥–æ–≤
      if (Object.keys(entries).length > 0) {
        for (const [longName, entry] of Object.entries(entries)) {
          const hasRabbit = (entry.allTags || []).some(tag => 
            tag.toLowerCase().includes('–∑–∞—è—Ü')
          ) || (entry.originalName || '').toLowerCase().includes('–∑–∞—è—Ü');

          const optimization = this.optimizeTags(entry.allTags || [], hasRabbit);
          
          const optimizedEntry = {
            ...entry,
            shortName: optimization.shortFileName,
            allTags: optimization.optimizedTags,
            selectedTags: optimization.optimizedTags,
            optimization: {
              removedTags: optimization.removedDuplicates,
              appliedSynonyms: optimization.appliedSynonyms,
              originalTagCount: optimization.originalTags.length,
              optimizedTagCount: optimization.optimizedTags.length
            }
          };

          optimizedEntries[optimization.shortFileName] = optimizedEntry;
          
          optimizationReport.optimizedFiles++;
          optimizationReport.totalTagsRemoved += optimization.removedDuplicates.length;
          optimizationReport.synonymsApplied += Object.keys(optimization.appliedSynonyms).length;
        }
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º assets –∏–∑ –æ—Ç—á–µ—Ç–∞ Figma
      if (assets.length > 0) {
        for (const asset of assets) {
          if (!asset.tags || asset.tags.length === 0) continue;

          const hasRabbit = asset.tags.some(tag => 
            tag.toLowerCase().includes('–∑–∞—è—Ü')
          ) || (asset.originalName || '').toLowerCase().includes('–∑–∞—è—Ü');

          const optimization = this.optimizeTags(asset.tags, hasRabbit);
          
          asset.optimizedTags = optimization.optimizedTags;
          asset.shortName = optimization.shortFileName;
          asset.optimization = {
            removedTags: optimization.removedDuplicates,
            appliedSynonyms: optimization.appliedSynonyms,
            originalTagCount: optimization.originalTags.length,
            optimizedTagCount: optimization.optimizedTags.length
          };
          
          optimizationReport.optimizedFiles++;
          optimizationReport.totalTagsRemoved += optimization.removedDuplicates.length;
          optimizationReport.synonymsApplied += Object.keys(optimization.appliedSynonyms).length;
        }
      }

      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      const allOptimizedTags = [
        ...Object.values(optimizedEntries).flatMap(entry => entry.allTags || []),
        ...assets.flatMap(asset => asset.optimizedTags || [])
      ];
      const uniqueOptimizedTags = Array.from(new Set(allOptimizedTags));

      const optimizedDictionary = {
        ...dictionary,
        ...(Object.keys(optimizedEntries).length > 0 && { entries: optimizedEntries }),
        ...(assets.length > 0 && { assets }),
        totalTags: allOptimizedTags.length,
        uniqueTags: uniqueOptimizedTags,
        optimizationReport,
        optimizedAt: new Date().toISOString()
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
      const optimizedPath = filePath.replace('.json', '-optimized.json');
      await fs.writeFile(optimizedPath, JSON.stringify(optimizedDictionary, null, 2));
      
      console.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`);
      console.log(`üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${optimizationReport.originalFiles}`);
      console.log(`üè∑Ô∏è  –¢–µ–≥–æ–≤ —É–¥–∞–ª–µ–Ω–æ: ${optimizationReport.totalTagsRemoved}`);
      console.log(`üîÑ –°–∏–Ω–æ–Ω–∏–º–æ–≤ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ: ${optimizationReport.synonymsApplied}`);
      console.log(`üìä –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${(dictionary.uniqueTags || []).length} ‚Üí ${uniqueOptimizedTags.length}`);
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${optimizedPath}`);

      return optimizedPath;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error.message);
      throw error;
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CSV —Ñ–∞–π–ª
   */
  async createOptimizedCSV(jsonPath, csvPath) {
    try {
      const content = await fs.readFile(jsonPath, 'utf-8');
      const dictionary = JSON.parse(content);
      
      const csvHeaders = [
        'Short Name',
        'Original Name', 
        'Optimized Tags',
        'Removed Tags',
        'Applied Synonyms',
        'Content Description',
        'Emotional Tone',
        'Confidence',
        'Original Tag Count',
        'Optimized Tag Count',
        'Optimization Ratio'
      ];

      const csvRows = [csvHeaders.join(',')];

      const entries = dictionary.entries || {};
      const assets = dictionary.assets || [];

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º entries
      for (const [shortName, entry] of Object.entries(entries)) {
        const optimization = entry.optimization || {};
        const optimizationRatio = optimization.originalTagCount > 0 
          ? ((optimization.originalTagCount - optimization.optimizedTagCount) / optimization.originalTagCount * 100).toFixed(1)
          : '0';

        const row = [
          `"${shortName}"`,
          `"${entry.originalName || ''}"`,
          `"${(entry.allTags || []).join(', ')}"`,
          `"${(optimization.removedTags || []).join(', ')}"`,
          `"${Object.entries(optimization.appliedSynonyms || {}).map(([k,v]) => `${k}‚Üí${v}`).join(', ')}"`,
          `"${entry.aiAnalysis?.contentDescription || ''}"`,
          `"${entry.aiAnalysis?.emotionalTone || ''}"`,
          `"${entry.aiAnalysis?.confidence || ''}"`,
          `"${optimization.originalTagCount || 0}"`,
          `"${optimization.optimizedTagCount || 0}"`,
          `"${optimizationRatio}%"`
        ];

        csvRows.push(row.join(','));
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º assets
      for (const asset of assets) {
        if (!asset.optimization) continue;

        const optimization = asset.optimization;
        const optimizationRatio = optimization.originalTagCount > 0 
          ? ((optimization.originalTagCount - optimization.optimizedTagCount) / optimization.originalTagCount * 100).toFixed(1)
          : '0';

        const row = [
          `"${asset.shortName || asset.newName || ''}"`,
          `"${asset.originalName || ''}"`,
          `"${(asset.optimizedTags || []).join(', ')}"`,
          `"${(optimization.removedTags || []).join(', ')}"`,
          `"${Object.entries(optimization.appliedSynonyms || {}).map(([k,v]) => `${k}‚Üí${v}`).join(', ')}"`,
          `"${asset.aiAnalysis?.contentDescription || ''}"`,
          `"${asset.emotionalTone || ''}"`,
          `"${asset.aiConfidence || ''}"`,
          `"${optimization.originalTagCount || 0}"`,
          `"${optimization.optimizedTagCount || 0}"`,
          `"${optimizationRatio}%"`
        ];

        csvRows.push(row.join(','));
      }

      await fs.writeFile(csvPath, csvRows.join('\n'));
      console.log(`üìä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CSV —Å–æ–∑–¥–∞–Ω: ${csvPath}`);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV:', error.message);
      throw error;
    }
  }
}

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è —Ç–µ–≥–æ–≤
 * –£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏, –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Å–∏–Ω–æ–Ω–∏–º—ã, —Å–æ–∫—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
 */
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ª–æ–≤–∞—Ä—è —Ç–µ–≥–æ–≤...\n');
  
  const tagService = new TagDeduplicationService();
  
  // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
  const testImagesDir = path.join(process.cwd(), 'test-images');
  const figmaOutputDir = path.join(process.cwd(), 'figma-output');
  
  const jsonPath = path.join(testImagesDir, 'tag-dictionary.json');
  const csvPath = path.join(testImagesDir, 'tag-dictionary-optimized.csv');
  
  try {
    // 1. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º JSON —Å–ª–æ–≤–∞—Ä—å
    console.log('üìù –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è JSON —Å–ª–æ–≤–∞—Ä—è...');
    const optimizedJsonPath = await tagService.optimizeTagDictionary(jsonPath);
    
    // 2. –°–æ–∑–¥–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CSV
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ CSV...');
    await tagService.createOptimizedCSV(optimizedJsonPath, csvPath);
    
    // 3. –ò—â–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ figma-output
    console.log('\nüîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ Figma –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    const figmaOutputs = await fs.readdir(figmaOutputDir);
    
    for (const outputDir of figmaOutputs) {
      if (outputDir.startsWith('figma-') && outputDir !== '.DS_Store') {
        const reportPath = path.join(figmaOutputDir, outputDir, 'processing-report.json');
        
        try {
          console.log(`\nüìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞: ${outputDir}`);
          await tagService.optimizeTagDictionary(reportPath);
        } catch (error) {
          console.log(`‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º ${outputDir}: ${error.message}`);
        }
      }
    }
    
    console.log('\n‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    console.log(`‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ JSON —Ñ–∞–π–ª—ã: *-optimized.json`);
    console.log(`‚Ä¢ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π CSV: ${csvPath}`);
    console.log('\nüéØ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:');
    console.log('‚Ä¢ –£–¥–∞–ª–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ç–µ–≥–∏');
    console.log('‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –≥—Ä—É–ø–ø—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤');
    console.log('‚Ä¢ –ò—Å–∫–ª—é—á–µ–Ω—ã –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ–≥–∏');
    console.log('‚Ä¢ –°–æ–∫—Ä–∞—â–µ–Ω—ã –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –¥–æ 80 —Å–∏–º–≤–æ–ª–æ–≤');
    console.log('‚Ä¢ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤ –¥–æ 6 –Ω–∞ —Ñ–∞–π–ª');
    console.log('‚Ä¢ –£–±—Ä–∞–Ω —Ç–µ–≥ "–∑–∞—è—Ü" –¥–ª—è —Ñ–∞–π–ª–æ–≤ –±–µ–∑ –∑–∞–π—Ü–∞');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { main, TagDeduplicationService }; 