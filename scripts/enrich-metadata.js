#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–æ–≥–∞—â–µ–Ω–∏—è JSON –∏ CSV —Ñ–∞–π–ª–æ–≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω, —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, —Ñ–æ—Ä–º–∞—Ç –∏ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
 */

const fs = require('fs').promises;
const path = require('path');
const sharp = require('sharp');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async function getImageMetadata(imagePath) {
  try {
    const stats = await fs.stat(imagePath);
    const image = sharp(imagePath);
    const metadata = await image.metadata();
    
    const aspectRatio = metadata.width && metadata.height 
      ? (metadata.width / metadata.height).toFixed(2)
      : null;
    
    const orientation = metadata.width && metadata.height
      ? metadata.width > metadata.height ? 'landscape' : 
        metadata.width < metadata.height ? 'portrait' : 'square'
      : null;

    return {
      technical: {
        width: metadata.width || null,
        height: metadata.height || null,
        format: metadata.format || null,
        fileSize: stats.size,
        fileSizeFormatted: formatFileSize(stats.size),
        aspectRatio: aspectRatio,
        orientation: orientation,
        density: metadata.density || null,
        channels: metadata.channels || null,
        hasAlpha: metadata.hasAlpha || false,
        colorSpace: metadata.space || null,
        compression: metadata.compression || null,
        lastModified: stats.mtime.toISOString(),
        created: stats.birthtime.toISOString()
      },
      analysis: {
        isIcon: metadata.width <= 64 && metadata.height <= 64,
        isLarge: metadata.width > 1000 || metadata.height > 1000,
        isSquare: metadata.width === metadata.height,
        isWide: aspectRatio > 1.5,
        isTall: aspectRatio < 0.67,
        megapixels: metadata.width && metadata.height 
          ? ((metadata.width * metadata.height) / 1000000).toFixed(2)
          : null
      }
    };
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${imagePath}:`, error.message);
    return {
      technical: { error: error.message },
      analysis: { error: error.message }
    };
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
function formatFileSize(bytes) {
  if (bytes === 0) return '0 Bytes';
  const k = 1024;
  const sizes = ['Bytes', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// –û–±–æ–≥–∞—â–µ–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
async function enrichJsonFile(jsonPath, imagesDir) {
  try {
    console.log(`üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JSON: ${jsonPath}`);
    
    const jsonData = JSON.parse(await fs.readFile(jsonPath, 'utf8'));
    
    if (!jsonData.entries || Object.keys(jsonData.entries).length === 0) {
      console.log(`‚ö†Ô∏è  JSON —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: ${jsonPath}`);
      return;
    }

    let enrichedCount = 0;
    
    for (const [key, entry] of Object.entries(jsonData.entries)) {
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π PNG —Ñ–∞–π–ª
      const possibleImageNames = [
        `${entry.shortName}.png`,
        `${key}.png`,
        `${entry.originalName}.png`
      ];
      
      let imagePath = null;
      for (const imageName of possibleImageNames) {
        const testPath = path.join(imagesDir, imageName);
        try {
          await fs.access(testPath);
          imagePath = testPath;
          break;
        } catch (e) {
          // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π
        }
      }
      
      if (imagePath) {
        const metadata = await getImageMetadata(imagePath);
        entry.imageMetadata = metadata;
        enrichedCount++;
        console.log(`  ‚úÖ ${entry.shortName} - ${metadata.technical.width}x${metadata.technical.height} (${metadata.technical.fileSizeFormatted})`);
      } else {
        console.log(`  ‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è: ${entry.shortName}`);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    jsonData.statistics = {
      ...jsonData.statistics,
      enrichedFiles: enrichedCount,
      lastEnriched: new Date().toISOString(),
      enrichmentVersion: "1.0.0"
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π JSON
    await fs.writeFile(jsonPath, JSON.stringify(jsonData, null, 2));
    console.log(`‚úÖ –û–±–æ–≥–∞—â–µ–Ω–æ ${enrichedCount} –∑–∞–ø–∏—Å–µ–π –≤ ${jsonPath}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON ${jsonPath}:`, error.message);
  }
}

// –û–±–æ–≥–∞—â–µ–Ω–∏–µ CSV —Ñ–∞–π–ª–∞
async function enrichCsvFile(csvPath, jsonData) {
  try {
    console.log(`üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSV: ${csvPath}`);
    
    const csvContent = await fs.readFile(csvPath, 'utf8');
    const lines = csvContent.split('\n').filter(line => line.trim());
    
    if (lines.length <= 1) {
      console.log(`‚ö†Ô∏è  CSV —Ñ–∞–π–ª –ø—É—Å—Ç–æ–π: ${csvPath}`);
      return;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ –∑–∞–≥–æ–ª–æ–≤–∫—É
    const header = lines[0];
    const newHeader = header + ',Image Width,Image Height,Image File Size,Image Aspect Ratio,Image Orientation,Image Format,Image Megapixels,Is Icon,Is Large';
    
    const enrichedLines = [newHeader];
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö
    for (let i = 1; i < lines.length; i++) {
      const line = lines[i];
      const columns = line.split(',');
      const shortName = columns[1]?.replace(/"/g, ''); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ shortName –≤–æ –≤—Ç–æ—Ä–æ–º —Å—Ç–æ–ª–±—Ü–µ
      
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ JSON
      const entry = Object.values(jsonData.entries || {}).find(e => e.shortName === shortName);
      
      if (entry && entry.imageMetadata && entry.imageMetadata.technical) {
        const tech = entry.imageMetadata.technical;
        const analysis = entry.imageMetadata.analysis;
        
        const enrichedLine = line + 
          `,"${tech.width || 'N/A'}"` +
          `,"${tech.height || 'N/A'}"` +
          `,"${tech.fileSizeFormatted || 'N/A'}"` +
          `,"${tech.aspectRatio || 'N/A'}"` +
          `,"${tech.orientation || 'N/A'}"` +
          `,"${tech.format || 'N/A'}"` +
          `,"${analysis.megapixels || 'N/A'}"` +
          `,"${analysis.isIcon ? 'Yes' : 'No'}"` +
          `,"${analysis.isLarge ? 'Yes' : 'No'}"`;
        
        enrichedLines.push(enrichedLine);
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        const enrichedLine = line + ',"N/A","N/A","N/A","N/A","N/A","N/A","N/A","No","No"';
        enrichedLines.push(enrichedLine);
      }
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π CSV
    await fs.writeFile(csvPath, enrichedLines.join('\n'));
    console.log(`‚úÖ CSV —Ñ–∞–π–ª –æ–±–æ–≥–∞—â–µ–Ω: ${csvPath}`);
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV ${csvPath}:`, error.message);
  }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–π –ø–∞–ø–∫–∏
async function processDirectory(dirPath) {
  try {
    console.log(`\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–ø–∫—É: ${dirPath}`);
    
    const files = await fs.readdir(dirPath);
    const jsonFile = files.find(f => f === 'tag-dictionary.json');
    const csvFile = files.find(f => f === 'tag-dictionary.csv');
    
    if (!jsonFile) {
      console.log(`‚ö†Ô∏è  JSON —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ ${dirPath}`);
      return;
    }
    
    const jsonPath = path.join(dirPath, jsonFile);
    
    // –û–±–æ–≥–∞—â–∞–µ–º JSON —Ñ–∞–π–ª
    await enrichJsonFile(jsonPath, dirPath);
    
    // –ß–∏—Ç–∞–µ–º –æ–±–æ–≥–∞—â–µ–Ω–Ω—ã–π JSON –¥–ª—è CSV
    const enrichedJsonData = JSON.parse(await fs.readFile(jsonPath, 'utf8'));
    
    // –û–±–æ–≥–∞—â–∞–µ–º CSV —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (csvFile) {
      const csvPath = path.join(dirPath, csvFile);
      await enrichCsvFile(csvPath, enrichedJsonData);
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ ${dirPath}:`, error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  const args = process.argv.slice(2);
  const targetDir = args[0] || './figma-all-pages-test';
  
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –æ–±–æ–≥–∞—â–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏...');
  console.log(`üìÅ –¶–µ–ª–µ–≤–∞—è –ø–∞–ø–∫–∞: ${targetDir}`);
  
  try {
    const items = await fs.readdir(targetDir);
    
    for (const item of items) {
      const itemPath = path.join(targetDir, item);
      const stat = await fs.stat(itemPath);
      
      if (stat.isDirectory()) {
        await processDirectory(itemPath);
      }
    }
    
    console.log('\nüéâ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('\nüìä –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:');
    console.log('   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (—à–∏—Ä–∏–Ω–∞ x –≤—ã—Å–æ—Ç–∞)');
    console.log('   ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞');
    console.log('   ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω');
    console.log('   ‚Ä¢ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (landscape/portrait/square)');
    console.log('   ‚Ä¢ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞');
    console.log('   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–≥–∞–ø–∏–∫—Å–µ–ª–µ–π');
    console.log('   ‚Ä¢ –§–ª–∞–≥–∏: –∏–∫–æ–Ω–∫–∞, –±–æ–ª—å—à–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ');
    console.log('   ‚Ä¢ –¶–≤–µ—Ç–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –∫–∞–Ω–∞–ª—ã');
    console.log('   ‚Ä¢ –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è');
    
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
function showHelp() {
  console.log(`
üîß Image Metadata Enricher

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –¥–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫ JSON –∏ CSV —Ñ–∞–π–ª–∞–º.

üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  node enrich-metadata.js [–ø–∞–ø–∫–∞]

üìÅ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  –ø–∞–ø–∫–∞    –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ Figma (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: ./figma-all-pages-test)

üìä –î–æ–±–∞–≤–ª—è–µ–º—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:
  ‚Ä¢ –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (width, height)
  ‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤ –±–∞–π—Ç–∞—Ö –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
  ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω (aspect ratio)
  ‚Ä¢ –û—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è (landscape/portrait/square)
  ‚Ä¢ –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ (PNG, JPEG, etc.)
  ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–≥–∞–ø–∏–∫—Å–µ–ª–µ–π
  ‚Ä¢ –¶–≤–µ—Ç–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (channels, colorSpace, hasAlpha)
  ‚Ä¢ –§–ª–∞–≥–∏ –∞–Ω–∞–ª–∏–∑–∞ (isIcon, isLarge, isSquare, isWide, isTall)
  ‚Ä¢ –î–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞

‚ú® –ü—Ä–∏–º–µ—Ä—ã:
  node enrich-metadata.js                          # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å ./figma-all-pages-test
  node enrich-metadata.js ./my-figma-results       # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–∞–ø–∫—É
  node enrich-metadata.js help                     # –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
`);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
const command = process.argv[2];
if (command === 'help' || command === '--help' || command === '-h') {
  showHelp();
} else {
  main();
} 