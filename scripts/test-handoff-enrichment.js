/**
 * Test Handoff Enrichment Script
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–æ–≥–∞—â–µ–Ω–∏—è handoff –¥–∞–Ω–Ω—ã—Ö
 */

const fs = require('fs').promises;
const path = require('path');

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é hasValidData
 */
function hasValidData(data) {
  return data && typeof data === 'object' && Object.keys(data).length > 0 && 
         !(Object.keys(data).length === 1 && Object.keys(data)[0] === 'length');
}

/**
 * –°–∏–º—É–ª–∏—Ä—É–µ—Ç loadDataCollectionFiles —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
 */
async function testLoadDataCollectionFiles(campaignPath) {
  const dataPath = path.join(campaignPath, 'data');
  const loadedData = {};

  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ JSON —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ data
    const files = await fs.readdir(dataPath);
    const jsonFiles = files.filter(file => file.endsWith('.json'));
    
    console.log(`üìÇ –ù–∞–π–¥–µ–Ω–æ ${jsonFiles.length} JSON —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ data:`, jsonFiles);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ JSON —Ñ–∞–π–ª—ã
    for (const fileName of jsonFiles) {
      try {
        const filePath = path.join(dataPath, fileName);
        const fileContent = await fs.readFile(filePath, 'utf8');
        const data = JSON.parse(fileContent);
        
        // –°–æ–∑–¥–∞–µ–º –∫–ª—é—á –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        let key = fileName.replace('.json', '');
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
        if (key.includes('_insights_')) {
          // key_insights_insights.json -> key_insights
          key = key.replace('_insights_insights', '_insights');
        } else if (key.endsWith('-insights')) {
          // travel_intelligence-insights.json -> travel_intelligence
          key = key.replace('-insights', '');
        }
        
        // –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        key = key.replace(/-/g, '_');
        
        loadedData[key] = data;
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω ${fileName} –∫–∞–∫ '${key}'`);
        console.log(`   –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö: ${JSON.stringify(data).length} —Å–∏–º–≤–æ–ª–æ–≤`);
        console.log(`   –í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${hasValidData(data) ? '–î–∞' : '–ù–µ—Ç'}`);
      } catch (fileError) {
        console.log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å ${fileName}: ${fileError.message}`);
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    loadedData.collection_metadata = {
      files_created: jsonFiles.map(file => `data/${file}`),
      total_analyses: jsonFiles.length,
      data_quality_score: 100,
      processing_completed_at: new Date().toISOString(),
      data_types: jsonFiles.map(file => {
        let type = file.replace('.json', '');
        if (type.includes('_insights_')) {
          type = type.replace('_insights_insights', '_insights');
        } else if (type.endsWith('-insights')) {
          type = type.replace('-insights', '');
        }
        return type.replace(/-/g, '_');
      })
    };

    console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:`);
    console.log(`   –í—Å–µ–≥–æ –∫–ª—é—á–µ–π: ${Object.keys(loadedData).length}`);
    console.log(`   –í–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${Object.keys(loadedData).filter(key => hasValidData(loadedData[key])).length}`);
    console.log(`   –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${hasValidData(loadedData.collection_metadata) ? '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç'}`);

    return loadedData;
  } catch (error) {
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∞–ø–∫–∏ data: ${error.message}`);
    return {};
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç deliverables
 */
function generateDeliverables(specialistData, specialist) {
  const validKeys = Object.keys(specialistData).filter(key => 
    hasValidData(specialistData[key])
  );

  const metadata = specialistData[`${specialist.replace('-', '_')}_metadata`];
  
  return {
    created_files: metadata?.files_created?.map(file => ({
      file_name: file.split('/').pop() || file,
      file_path: file,
      file_type: 'data',
      description: `Auto-generated data file: ${file}`,
      is_primary: false
    })) || [],
    key_outputs: validKeys.filter(key => !key.includes('metadata')),
    data_quality_metrics: {
      total_analyses: metadata?.total_analyses || metadata?.total_files || validKeys.length,
      completion_rate: Math.round((validKeys.length / 8) * 100), // 8 expected data types for data-collection
      quality_score: metadata?.data_quality_score || metadata?.content_quality_score || metadata?.design_quality_score || metadata?.quality_score || 0
    }
  };
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É –æ–±–æ–≥–∞—â–µ–Ω–∏—è
 */
async function testEnrichmentSystem(campaignPath) {
  console.log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–æ–≥–∞—â–µ–Ω–∏—è –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏:`);
  console.log(`üìÅ –ü—É—Ç—å: ${campaignPath}`);
  
  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const actualData = await testLoadDataCollectionFiles(campaignPath);
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –≤ –ø—Ä–æ–±–ª–µ–º–Ω–æ–º handoff)
    const providedData = {
      consolidated: null,
      destination_analysis: {},
      emotional_profile: {},
      market_intelligence: {},
      travel_intelligence: {},
      trend_analysis: {},
      collection_metadata: {},
      consolidated_insights: {}
    };
    
    console.log(`\nüîÑ –û–±–æ–≥–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...`);
    
    // –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const enrichedData = {};
    const allKeys = [...new Set([
      ...Object.keys(actualData),
      ...Object.keys(providedData)
    ])];
    
    for (const key of allKeys) {
      if (hasValidData(actualData[key])) {
        enrichedData[key] = actualData[key];
      } else if (hasValidData(providedData[key])) {
        enrichedData[key] = providedData[key];
      } else {
        enrichedData[key] = actualData[key] || providedData[key] || null;
      }
    }
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º deliverables
    const enrichedDeliverables = generateDeliverables(enrichedData, 'data-collection');
    
    console.log(`\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–æ–≥–∞—â–µ–Ω–∏—è:`);
    console.log(`üìä –û–±–æ–≥–∞—â–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π: ${Object.keys(enrichedData).length}`);
    console.log(`üü¢ –í–∞–ª–∏–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${Object.keys(enrichedData).filter(key => hasValidData(enrichedData[key])).length}`);
    console.log(`üìÅ –§–∞–π–ª–æ–≤ –≤ deliverables: ${enrichedDeliverables.created_files.length}`);
    console.log(`üéØ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: ${enrichedDeliverables.data_quality_metrics.completion_rate}%`);
    console.log(`üèÜ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: ${enrichedDeliverables.data_quality_metrics.quality_score}%`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –∫–ª—é—á–∏ –±—ã–ª–∏ –æ–±–æ–≥–∞—â–µ–Ω—ã
    console.log(`\nüìã –î–µ—Ç–∞–ª–∏ –æ–±–æ–≥–∞—â–µ–Ω–∏—è:`);
    for (const key of Object.keys(enrichedData)) {
      const wasEmpty = !hasValidData(providedData[key]);
      const nowValid = hasValidData(enrichedData[key]);
      const status = wasEmpty && nowValid ? 'üîÑ –û–ë–û–ì–ê–©–ï–ù' : nowValid ? '‚úÖ –í–ê–õ–ò–î–ï–ù' : '‚ùå –ü–£–°–¢–û–ô';
      console.log(`   ${key}: ${status}`);
    }
    
    return true;
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: ${error.message}`);
    return false;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  const campaignId = process.argv[2] || 'campaign_1753793256478_6zzlb3cp2ze';
  const campaignPath = path.join(__dirname, '..', 'campaigns', campaignId);
  
  try {
    await fs.access(campaignPath);
    const success = await testEnrichmentSystem(campaignPath);
    
    if (success) {
      console.log(`\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!`);
    } else {
      console.log(`\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏`);
    }
  } catch (error) {
    console.error(`‚ùå –ö–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: ${campaignPath}`);
    console.log(`üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: node scripts/test-handoff-enrichment.js campaign_1753793256478_6zzlb3cp2ze`);
  }
}

main().catch(console.error); 