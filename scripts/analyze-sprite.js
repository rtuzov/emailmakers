#!/usr/bin/env node

/**
 * –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–ø—Ä–∞–π—Ç–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
 */

const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

const ASSET_PATH = path.join(process.cwd(), 'figma-assets', '–∑–∞—è—Ü -–û–±—â–∏–µ- 09-x1.png');

async function analyzeSprite() {
    try {
        console.log('üîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –°–ü–†–ê–ô–¢–ê');
        console.log('‚ïê'.repeat(50));
        
        const image = sharp(ASSET_PATH);
        const metadata = await image.metadata();
        
        console.log(`üìä –†–∞–∑–º–µ—Ä—ã: ${metadata.width}√ó${metadata.height}`);
        console.log(`üìã –§–æ—Ä–º–∞—Ç: ${metadata.format}`);
        console.log(`üé® –ö–∞–Ω–∞–ª—ã: ${metadata.channels}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
        const { data, info } = await image.raw().toBuffer({ resolveWithObject: true });
        
        console.log('\nüßÆ –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–ï–ô –ü–†–û–ï–ö–¶–ò–ò:');
        
        // –ê–Ω–∞–ª–∏–∑ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–ø–æ —Å—Ç—Ä–æ–∫–∞–º)
        const horizontalProfile = [];
        for (let y = 0; y < info.height; y++) {
            let nonTransparentPixels = 0;
            for (let x = 0; x < info.width; x++) {
                const pixelIndex = (y * info.width + x) * info.channels;
                const alpha = info.channels === 4 ? data[pixelIndex + 3] : 255;
                if (alpha > 10) {
                    nonTransparentPixels++;
                }
            }
            horizontalProfile.push(nonTransparentPixels);
        }
        
        // –ê–Ω–∞–ª–∏–∑ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–ø–æ —Å—Ç–æ–ª–±—Ü–∞–º)
        const verticalProfile = [];
        for (let x = 0; x < info.width; x++) {
            let nonTransparentPixels = 0;
            for (let y = 0; y < info.height; y++) {
                const pixelIndex = (y * info.width + x) * info.channels;
                const alpha = info.channels === 4 ? data[pixelIndex + 3] : 255;
                if (alpha > 10) {
                    nonTransparentPixels++;
                }
            }
            verticalProfile.push(nonTransparentPixels);
        }
        
        // –ü–æ–∏—Å–∫ –ø—É—Å—Ç—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        const emptyHorizontalLines = [];
        const emptyVerticalLines = [];
        
        for (let i = 0; i < horizontalProfile.length; i++) {
            if (horizontalProfile[i] === 0) {
                emptyHorizontalLines.push(i);
            }
        }
        
        for (let i = 0; i < verticalProfile.length; i++) {
            if (verticalProfile[i] === 0) {
                emptyVerticalLines.push(i);
            }
        }
        
        console.log(`üìè –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ –ª–∏–Ω–∏–∏: ${emptyHorizontalLines.length}`);
        console.log(`üìê –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ø—É—Å—Ç—ã–µ –ª–∏–Ω–∏–∏: ${emptyVerticalLines.length}`);
        
        // –ê–Ω–∞–ª–∏–∑ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã—Ö –ø—É—Å—Ç—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
        const horizontalGaps = findContinuousGaps(emptyHorizontalLines);
        const verticalGaps = findContinuousGaps(emptyVerticalLines);
        
        console.log('\nüî≤ –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–´–ï –†–ê–ó–†–´–í–´:');
        horizontalGaps.forEach((gap, index) => {
            console.log(`   ${index + 1}. –°—Ç—Ä–æ–∫–∏ ${gap.start}-${gap.end} (—Ä–∞–∑–º–µ—Ä: ${gap.size}px)`);
        });
        
        console.log('\nüî≥ –í–ï–†–¢–ò–ö–ê–õ–¨–ù–´–ï –†–ê–ó–†–´–í–´:');
        verticalGaps.forEach((gap, index) => {
            console.log(`   ${index + 1}. –ö–æ–ª–æ–Ω–∫–∏ ${gap.start}-${gap.end} (—Ä–∞–∑–º–µ—Ä: ${gap.size}px)`);
        });
        
        // –ê–Ω–∞–ª–∏–∑ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–≥–º–µ–Ω—Ç–æ–≤
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
        
        if (horizontalGaps.length > 0) {
            const bigGaps = horizontalGaps.filter(gap => gap.size >= 10);
            console.log(`   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ ${bigGaps.length} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤ (‚â•10px)`);
            if (bigGaps.length > 0) {
                console.log('   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ h_gap: 8-12 –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏');
            }
        }
        
        if (verticalGaps.length > 0) {
            const bigGaps = verticalGaps.filter(gap => gap.size >= 10);
            console.log(`   ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ ${bigGaps.length} –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤ (‚â•10px)`);
            if (bigGaps.length > 0) {
                console.log('   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ v_gap: 8-12 –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏');
            }
        }
        
        if (horizontalGaps.length === 0 && verticalGaps.length === 0) {
            console.log('   ‚ö†Ô∏è –ß–µ—Ç–∫–∏—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            console.log('   ‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ');
            console.log('   ‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ h_gap: 2-5 –∏ v_gap: 2-5');
            console.log('   ‚Ä¢ –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥—Ä—É–≥–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è');
        }
        
        // –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏
        console.log('\nüìã –ê–ù–ê–õ–ò–ó –ö–û–ú–ü–û–ù–û–í–ö–ò:');
        
        const aspectRatio = info.width / info.height;
        console.log(`   ‚Ä¢ –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: ${aspectRatio.toFixed(2)}`);
        
        if (aspectRatio > 1.8) {
            console.log('   ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ (—ç–ª–µ–º–µ–Ω—Ç—ã —Ä—è–¥–æ–º)');
        } else if (aspectRatio < 0.6) {
            console.log('   ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ (—ç–ª–µ–º–µ–Ω—Ç—ã –¥—Ä—É–≥ –ø–æ–¥ –¥—Ä—É–≥–æ–º)');
        } else {
            console.log('   ‚Ä¢ –ö–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –∏–ª–∏ –ø–æ—á—Ç–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–∞—è –∫–æ–º–ø–æ–Ω–æ–≤–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–Ω–∞–ª–∏–∑–∞)');
        }
        
        // –ê–Ω–∞–ª–∏–∑ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏ –ø–∏–∫—Å–µ–ª–µ–π
        const totalPixels = info.width * info.height;
        const contentPixels = horizontalProfile.reduce((sum, count) => sum + count, 0);
        const fillRatio = contentPixels / totalPixels;
        
        console.log(`   ‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å: ${(fillRatio * 100).toFixed(1)}%`);
        
        if (fillRatio > 0.8) {
            console.log('   ‚Ä¢ –í—ã—Å–æ–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å - –≤–æ–∑–º–æ–∂–Ω–æ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—Ç—Å—è');
        } else if (fillRatio < 0.3) {
            console.log('   ‚Ä¢ –ù–∏–∑–∫–∞—è –ø–ª–æ—Ç–Ω–æ—Å—Ç—å - –º–Ω–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞');
        }
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:', error.message);
    }
}

function findContinuousGaps(emptyLines) {
    if (emptyLines.length === 0) return [];
    
    const gaps = [];
    let start = emptyLines[0];
    let end = emptyLines[0];
    
    for (let i = 1; i < emptyLines.length; i++) {
        if (emptyLines[i] === end + 1) {
            end = emptyLines[i];
        } else {
            gaps.push({
                start: start,
                end: end,
                size: end - start + 1
            });
            start = emptyLines[i];
            end = emptyLines[i];
        }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑—Ä—ã–≤
    gaps.push({
        start: start,
        end: end,
        size: end - start + 1
    });
    
    return gaps.filter(gap => gap.size >= 3); // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑—Ä—ã–≤—ã
}

analyzeSprite().then(() => {
    console.log('\n‚ú® –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!');
}).catch(console.error); 