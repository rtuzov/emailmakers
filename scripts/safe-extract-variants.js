#!/usr/bin/env node

/**
 * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ 3 –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
 */

const fs = require('fs/promises');
const path = require('path');
const sharp = require('sharp');

const TARGET_NODE_ID = '2014:3485';

// –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
const VARIANTS = [
  { name: 'variant-1', startX: 787, endX: 858, width: 72 },
  { name: 'variant-2', startX: 910, endX: 1443, width: 534 },
  { name: 'variant-3', startX: 1444, endX: 1976, width: 533 }
];

async function safeExtractVariants() {
  console.log('üîß –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –í–ê–†–ò–ê–ù–¢–û–í');
  console.log('‚ïê'.repeat(45));
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    const imagePath = path.join(process.cwd(), 'temp', `figma-node-${TARGET_NODE_ID}-1750942733695.png`);
    console.log(`üìÅ –ò—Å—Ç–æ—á–Ω–∏–∫: ${imagePath}`);
    
    const image = sharp(imagePath);
    const metadata = await image.metadata();
    const { width, height } = metadata;
    
    console.log(`üìä –†–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${width}√ó${height}`);
    
    // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    const outputDir = path.join(process.cwd(), `rabbit-variants-${Date.now()}`);
    await fs.mkdir(outputDir, { recursive: true });
    console.log(`üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDir}`);
    
    console.log('\nüéØ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –í–ê–†–ò–ê–ù–¢–û–í');
    console.log('‚îÄ'.repeat(30));
    
    for (const variant of VARIANTS) {
      console.log(`\nüìê ${variant.name}:`);
      console.log(`   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: x=${variant.startX}-${variant.endX}`);
      console.log(`   –®–∏—Ä–∏–Ω–∞: ${variant.width}px`);
      
      // –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
      const safeStartX = Math.max(0, variant.startX);
      const safeEndX = Math.min(variant.endX, width - 1);
      const safeWidth = safeEndX - safeStartX + 1;
      
      console.log(`   –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ: x=${safeStartX}-${safeEndX}, —à–∏—Ä–∏–Ω–∞=${safeWidth}px`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
      if (safeWidth <= 0 || safeStartX >= width) {
        console.log(`   ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }
      
      const outputFile = path.join(outputDir, `${variant.name}.png`);
      
      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
        await image
          .extract({
            left: safeStartX,
            top: 0,
            width: safeWidth,
            height: height
          })
          .png()
          .toFile(outputFile);
        
        console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω: ${outputFile} (${safeWidth}√ó${height})`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        const stats = await fs.stat(outputFile);
        console.log(`   üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(stats.size / 1024).toFixed(1)} KB`);
        
      } catch (extractError) {
        console.log(`   ‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: ${extractError.message}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–π —à–∏—Ä–∏–Ω–æ–π
        const reducedWidth = Math.max(1, safeWidth - 20);
        console.log(`   üîÑ –ü–æ–≤—Ç–æ—Ä —Å —à–∏—Ä–∏–Ω–æ–π ${reducedWidth}px`);
        
        try {
          await image
            .extract({
              left: safeStartX,
              top: 0,
              width: reducedWidth,
              height: height
            })
            .png()
            .toFile(outputFile);
          
          console.log(`   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω (—É–º–µ–Ω—å—à–µ–Ω–Ω—ã–π): ${outputFile} (${reducedWidth}√ó${height})`);
          
        } catch (retryError) {
          console.log(`   ‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: ${retryError.message}`);
        }
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const fullOutputFile = path.join(outputDir, 'full-original.png');
    await image.png().toFile(fullOutputFile);
    console.log(`\nüìã –ü–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${fullOutputFile}`);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    const metadataFile = path.join(outputDir, 'extraction-info.json');
    await fs.writeFile(metadataFile, JSON.stringify({
      source: 'figma',
      node_id: TARGET_NODE_ID,
      original_size: { width, height },
      extraction_method: 'safe_coordinates',
      variants: VARIANTS,
      timestamp: new Date().toISOString()
    }, null, 2));
    
    console.log(`üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${metadataFile}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
    console.log('\nüìä –ò–¢–û–ì–ò –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø');
    console.log('‚îÄ'.repeat(20));
    
    const files = await fs.readdir(outputDir);
    const pngFiles = files.filter(f => f.endsWith('.png'));
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ PNG —Ñ–∞–π–ª–æ–≤: ${pngFiles.length}`);
    for (const file of pngFiles) {
      const filePath = path.join(outputDir, file);
      const stats = await fs.stat(filePath);
      console.log(`   üìÑ ${file}: ${(stats.size / 1024).toFixed(1)} KB`);
    }
    
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫
safeExtractVariants()
  .then(() => {
    console.log('\nüéâ –ë–ï–ó–û–ü–ê–°–ù–û–ï –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  })
  .catch(error => {
    console.error('üí• –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 