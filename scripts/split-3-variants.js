#!/usr/bin/env node

/**
 * –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ Figma —Å–ø—Ä–∞–π—Ç–∞ –Ω–∞ 3 –≤–∞—Ä–∏–∞–Ω—Ç–∞
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –¥–ª—è "–∑–∞—è—Ü –û–±—â–∏–µ 09"
 */

const fetch = require('node-fetch');
const fs = require('fs/promises');
const path = require('path');
const sharp = require('sharp');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const FIGMA_TOKEN = process.env.FIGMA_ACCESS_TOKEN || 'YOUR_FIGMA_TOKEN_HERE';
const FIGMA_PROJECT_ID = 'GBnGxSQlfM1XhjSkLHogk6';
const TARGET_NODE_ID = '2014:3485';

async function split3Variants() {
  console.log('üéØ –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê 3 –í–ê–†–ò–ê–ù–¢–ê');
  console.log('‚ïê'.repeat(40));
  
  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
    const imagePath = path.join(process.cwd(), 'temp', `figma-node-${TARGET_NODE_ID}-1750942733695.png`);
    console.log(`üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º: ${imagePath}`);
    
    const image = sharp(imagePath);
    const metadata = await image.metadata();
    const { width, height } = metadata;
    
    console.log(`üìä –†–∞–∑–º–µ—Ä—ã: ${width}√ó${height}`);
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏–∫—Å–µ–ª–µ–π
    const { data, info } = await image.raw().toBuffer({ resolveWithObject: true });
    const { channels } = info;
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
    const columnDensity = [];
    
    for (let x = 0; x < width; x++) {
      let contentPixels = 0;
      
      for (let y = 0; y < height; y++) {
        const pixelIndex = (y * width + x) * channels;
        
        if (channels === 4) {
          const alpha = data[pixelIndex + 3];
          if (alpha > 30) { // –ù–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π
            const r = data[pixelIndex];
            const g = data[pixelIndex + 1];
            const b = data[pixelIndex + 2];
            const brightness = (r + g + b) / 3;
            
            if (brightness < 220) { // –ù–µ –±–µ–ª—ã–π —Ñ–æ–Ω
              contentPixels++;
            }
          }
        }
      }
      
      columnDensity.push({
        x: x,
        density: contentPixels / height,
        contentPixels: contentPixels
      });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –æ–±–ª–∞—Å—Ç–∏ —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
    const minDensity = 0.05; // 5% –º–∏–Ω–∏–º—É–º –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentAreas = [];
    let currentArea = null;
    
    for (let i = 0; i < columnDensity.length; i++) {
      const col = columnDensity[i];
      
      if (col.density > minDensity) {
        if (!currentArea) {
          currentArea = {
            startX: col.x,
            endX: col.x,
            maxDensity: col.density,
            totalContent: col.contentPixels
          };
        } else {
          currentArea.endX = col.x;
          currentArea.maxDensity = Math.max(currentArea.maxDensity, col.density);
          currentArea.totalContent += col.contentPixels;
        }
      } else {
        if (currentArea) {
          currentArea.width = currentArea.endX - currentArea.startX + 1;
          if (currentArea.width > 30) { // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞
            contentAreas.push(currentArea);
          }
          currentArea = null;
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –æ–±–ª–∞—Å—Ç—å
    if (currentArea) {
      currentArea.width = currentArea.endX - currentArea.startX + 1;
      if (currentArea.width > 30) {
        contentAreas.push(currentArea);
      }
    }
    
    console.log(`\nüîç –ù–ê–ô–î–ï–ù–û –û–ë–õ–ê–°–¢–ï–ô: ${contentAreas.length}`);
    contentAreas.forEach((area, index) => {
      console.log(`üìç –û–±–ª–∞—Å—Ç—å ${index + 1}: x=${area.startX}-${area.endX}, —à–∏—Ä–∏–Ω–∞=${area.width}, –ø–ª–æ—Ç–Ω–æ—Å—Ç—å=${(area.maxDensity * 100).toFixed(1)}%`);
    });
    
    // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –±–æ–ª—å—à–∞—è –æ–±–ª–∞—Å—Ç—å, —Ä–∞–∑–¥–µ–ª–∏–º –µ—ë –Ω–∞ 3 —á–∞—Å—Ç–∏
    if (contentAreas.length === 1) {
      console.log('\nüîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê 3 –ß–ê–°–¢–ò');
      await forceSplit3Parts(image, contentAreas[0], width, height, columnDensity);
    } else if (contentAreas.length >= 3) {
      console.log('\n‚úÖ –ò–ó–í–õ–ï–ö–ê–ï–ú –ù–ê–ô–î–ï–ù–ù–´–ï –û–ë–õ–ê–°–¢–ò');
      await extractAreas(image, contentAreas.slice(0, 3), width, height);
    } else {
      console.log('\nüîß –£–ú–ù–û–ï –†–ê–ó–î–ï–õ–ï–ù–ò–ï');
      await smartSplit(image, contentAreas, width, height, columnDensity);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

async function forceSplit3Parts(image, area, width, height, columnDensity) {
  console.log(`üìè –†–∞–∑–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å ${area.startX}-${area.endX} (${area.width}px) –Ω–∞ 3 —á–∞—Å—Ç–∏`);
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–æ—Ç–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏ –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–π
  const areaData = columnDensity.slice(area.startX, area.endX + 1);
  
  // –ò—â–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
  const localMinima = [];
  for (let i = 1; i < areaData.length - 1; i++) {
    const prev = areaData[i - 1].density;
    const curr = areaData[i].density;
    const next = areaData[i + 1].density;
    
    if (curr < prev && curr < next && curr < 0.3) {
      localMinima.push({
        x: area.startX + i,
        density: curr,
        relativeX: i
      });
    }
  }
  
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–∏–Ω–∏–º—É–º–æ–≤: ${localMinima.length}`);
  
  let variants = [];
  
  if (localMinima.length >= 2) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–≤–∞ –ª—É—á—à–∏—Ö –º–∏–Ω–∏–º—É–º–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –Ω–∞ 3 —á–∞—Å—Ç–∏
    localMinima.sort((a, b) => a.density - b.density); // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏
    const split1 = Math.min(localMinima[0].x, localMinima[1].x);
    const split2 = Math.max(localMinima[0].x, localMinima[1].x);
    
    variants = [
      { startX: area.startX, endX: split1, name: 'variant-1' },
      { startX: split1 + 1, endX: split2, name: 'variant-2' },
      { startX: split2 + 1, endX: area.endX, name: 'variant-3' }
    ];
    
    console.log(`‚úÇÔ∏è –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ –º–∏–Ω–∏–º—É–º–∞–º: ${split1}, ${split2}`);
  } else {
    // –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ 3 —á–∞—Å—Ç–∏
    const partWidth = Math.floor(area.width / 3);
    
    variants = [
      { startX: area.startX, endX: area.startX + partWidth - 1, name: 'variant-1' },
      { startX: area.startX + partWidth, endX: area.startX + partWidth * 2 - 1, name: 'variant-2' },
      { startX: area.startX + partWidth * 2, endX: area.endX, name: 'variant-3' }
    ];
    
    console.log(`‚úÇÔ∏è –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ ${partWidth}px`);
  }
  
  await extractVariants(image, variants, width, height);
}

async function smartSplit(image, areas, width, height, columnDensity) {
  console.log('üß† –£–º–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –ø–ª–æ—Ç–Ω–æ—Å—Ç–∏');
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å 2 –æ–±–ª–∞—Å—Ç–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ–¥–Ω—É –∏–∑ –Ω–∏—Ö
  if (areas.length === 2) {
    const largerArea = areas[0].width > areas[1].width ? areas[0] : areas[1];
    const smallerArea = areas[0].width > areas[1].width ? areas[1] : areas[0];
    
    console.log(`üìä –ë–æ–ª—å—à–∞—è –æ–±–ª–∞—Å—Ç—å: ${largerArea.width}px, –º–∞–ª–∞—è: ${smallerArea.width}px`);
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –±–æ–ª—å—à—É—é –æ–±–ª–∞—Å—Ç—å –ø–æ–ø–æ–ª–∞–º
    const midPoint = Math.floor((largerArea.startX + largerArea.endX) / 2);
    
    const variants = [
      { startX: smallerArea.startX, endX: smallerArea.endX, name: 'variant-1' },
      { startX: largerArea.startX, endX: midPoint, name: 'variant-2' },
      { startX: midPoint + 1, endX: largerArea.endX, name: 'variant-3' }
    ];
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ startX
    variants.sort((a, b) => a.startX - b.startX);
    variants.forEach((v, i) => v.name = `variant-${i + 1}`);
    
    await extractVariants(image, variants, width, height);
  }
}

async function extractAreas(image, areas, width, height) {
  const variants = areas.map((area, index) => ({
    startX: area.startX,
    endX: area.endX,
    name: `variant-${index + 1}`
  }));
  
  await extractVariants(image, variants, width, height);
}

async function extractVariants(image, variants, width, height) {
  const outputDir = path.join(process.cwd(), `figma-3-variants-${Date.now()}`);
  await fs.mkdir(outputDir, { recursive: true });
  
  console.log(`\nüìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${outputDir}`);
  
  for (const variant of variants) {
    const outputFile = path.join(outputDir, `${variant.name}.png`);
    const variantWidth = variant.endX - variant.startX + 1;
    
    console.log(`üìê ${variant.name}: x=${variant.startX}-${variant.endX}, —à–∏—Ä–∏–Ω–∞=${variantWidth}px`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –æ—Ç—Å—Ç—É–ø—ã
    const padding = 5;
    const extractLeft = Math.max(0, variant.startX - padding);
    const extractWidth = Math.min(variantWidth + padding * 2, width - extractLeft);
    
    try {
      await image
        .extract({
          left: extractLeft,
          top: 0,
          width: extractWidth,
          height: height
        })
        .png()
        .toFile(outputFile);
      
      console.log(`‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω ${variant.name}: ${outputFile} (${extractWidth}√ó${height})`);
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ${variant.name}: ${error.message}`);
    }
  }
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  const metadataFile = path.join(outputDir, 'variants.json');
  await fs.writeFile(metadataFile, JSON.stringify({
    source: 'figma',
    node_id: TARGET_NODE_ID,
    original_size: { width, height },
    variants: variants.map((variant, index) => ({
      name: variant.name,
      startX: variant.startX,
      endX: variant.endX,
      width: variant.endX - variant.startX + 1
    })),
    timestamp: new Date().toISOString()
  }, null, 2));
  
  console.log(`üìã –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${metadataFile}`);
}

// –ó–∞–ø—É—Å–∫
split3Variants()
  .then(() => {
    console.log('\nüéâ –†–ê–ó–î–ï–õ–ï–ù–ò–ï –ù–ê 3 –í–ê–†–ò–ê–ù–¢–ê –ó–ê–í–ï–†–®–ï–ù–û');
  })
  .catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  }); 