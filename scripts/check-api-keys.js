#!/usr/bin/env node

/**
 * Email-Makers API Keys Checker
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–µ–π
 */

const fs = require('fs');
const path = require('path');

console.log('üîë Email-Makers API Keys Checker\n');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' });

const checks = [
  {
    name: 'OpenAI API Key',
    env: 'OPENAI_API_KEY',
    required: true,
    pattern: /^sk-(proj-)?[a-zA-Z0-9-_]{48,}$/,
    description: '–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
  },
  {
    name: 'Anthropic API Key',
    env: 'ANTHROPIC_API_KEY',
    required: false,
    pattern: /^sk-ant-[a-zA-Z0-9-_]{95,}$/,
    description: '–†–µ–∑–µ—Ä–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ò–ò'
  },
  {
    name: 'JWT Secret',
    env: 'JWT_SECRET',
    required: true,
    pattern: /.{32,}/,
    description: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤'
  }
];

let hasErrors = false;
let warnings = 0;

console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:\n');

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env.local —Ñ–∞–π–ª–∞
if (!fs.existsSync('.env.local')) {
  console.log('‚ùå –§–∞–π–ª .env.local –Ω–µ –Ω–∞–π–¥–µ–Ω');
  console.log('üí° –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª: cp env.example .env.local\n');
  hasErrors = true;
} else {
  console.log('‚úÖ –§–∞–π–ª .env.local –Ω–∞–π–¥–µ–Ω');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π API –∫–ª—é—á
checks.forEach(check => {
  const value = process.env[check.env];
  const status = check.required ? '–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û' : '–û–ü–¶–ò–û–ù–ê–õ–¨–ù–û';
  
  console.log(`\nüîç ${check.name} (${status})`);
  console.log(`   –û–ø–∏—Å–∞–Ω–∏–µ: ${check.description}`);
  
  if (!value) {
    if (check.required) {
      console.log(`   ‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è ${check.env} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      hasErrors = true;
    } else {
      console.log(`   ‚ö†Ô∏è  –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
      warnings++;
    }
  } else if (!check.pattern.test(value)) {
    console.log(`   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞`);
    if (check.required) {
      hasErrors = true;
    } else {
      warnings++;
    }
  } else {
    console.log(`   ‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`);
  }
});

// –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
console.log('\n' + '='.repeat(50));
console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–í–ï–†–ö–ò:');

if (hasErrors) {
  console.log('‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ');
  console.log('üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
  process.exit(1);
} else {
  console.log('‚úÖ –í—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
  if (warnings > 0) {
    console.log(`‚ö†Ô∏è  ${warnings} –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ –∑–∞–¥–∞–Ω—ã`);
  }
  console.log('üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ –∫ –∑–∞–ø—É—Å–∫—É!');
}

console.log('\nüìö –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:');
console.log('   –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ./API_KEYS_SETUP.md');
console.log('   –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: ./env.example');
console.log('   –¢–µ—Å—Ç API: curl http://localhost:3000/api/health');
