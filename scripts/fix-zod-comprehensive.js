#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

/**
 * Comprehensive Zod Schema Fixer
 * 
 * –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å OpenAI Agents SDK:
 * - .optional() –±–µ–∑ .nullable()
 * - –í–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –∏ –º–∞—Å—Å–∏–≤—ã
 * - –°–ª–æ–∂–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã anyOf/oneOf
 */

console.log('üîß Comprehensive Zod Schema Fixer - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –í–°–ï –ø—Ä–æ–±–ª–µ–º—ã OpenAI Agents SDK');

// –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
const findFiles = () => {
  try {
    const output = execSync('find src -name "*.ts" -type f', { encoding: 'utf8' });
    return output.trim().split('\n').filter(Boolean);
  } catch (error) {
    console.error('Error finding files:', error.message);
    return [];
  }
};

// –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
const fixFileComprehensively = (filePath) => {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    let newContent = content;
    let totalFixes = 0;
    
    // –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
    const patterns = [
      // 1. –ü—Ä–æ—Å—Ç—ã–µ —Å–ª—É—á–∞–∏: .optional().describe(
      {
        regex: /\.optional\(\)\.describe\(/g,
        replacement: '.optional().nullable().describe(',
        description: '.optional().describe() ‚Üí .optional().nullable().describe()'
      },
      
      // 2. –û–±—ä–µ–∫—Ç—ã: }).optional().describe(
      {
        regex: /\}\)\.optional\(\)\.describe\(/g,
        replacement: '}).optional().nullable().describe(',
        description: '}).optional().describe() ‚Üí }).optional().nullable().describe()'
      },
      
      // 3. –ú–∞—Å—Å–∏–≤—ã: ])).optional().describe(
      {
        regex: /\]\)\)\.optional\(\)\.describe\(/g,
        replacement: '])).optional().nullable().describe(',
        description: '])).optional().describe() ‚Üí ])).optional().nullable().describe()'
      },
      
      // 4. Enum –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏: .optional().describe(
      {
        regex: /\]\)\.optional\(\)\.describe\(/g,
        replacement: ']).optional().nullable().describe(',
        description: ']).optional().describe() ‚Üí ]).optional().nullable().describe()'
      },
      
      // 5. –°–ª—É—á–∞–∏ –±–µ–∑ .describe(): .optional(),
      {
        regex: /\.optional\(\),/g,
        replacement: '.optional().nullable(),',
        description: '.optional(), ‚Üí .optional().nullable(),'
      },
      
      // 6. –°–ª—É—á–∞–∏ –≤ –∫–æ–Ω—Ü–µ —Å—Ç—Ä–æ–∫–∏: .optional()
      {
        regex: /\.optional\(\)$/gm,
        replacement: '.optional().nullable()',
        description: '.optional() ‚Üí .optional().nullable()'
      },
      
      // 7. –°–ª—É—á–∞–∏ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π: .optional()
      {
        regex: /\.optional\(\)(\s*\})/g,
        replacement: '.optional().nullable()$1',
        description: '.optional() –ø–µ—Ä–µ–¥ } ‚Üí .optional().nullable()'
      },
      
      // 8. Enum –º–∞—Å—Å–∏–≤—ã: ['value']).optional()
      {
        regex: /\]\)\.optional\(\)([,\s])/g,
        replacement: ']).optional().nullable()$1',
        description: ']).optional() ‚Üí ]).optional().nullable()'
      }
    ];
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–∂–¥—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
    patterns.forEach(pattern => {
      const matches = newContent.match(pattern.regex);
      if (matches) {
        console.log(`  üìù ${filePath}: ${matches.length} √ó ${pattern.description}`);
        newContent = newContent.replace(pattern.regex, pattern.replacement);
        totalFixes += matches.length;
      }
    });
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ .nullable()
    const duplicateNullable = /\.optional\(\)\.nullable\(\)\.nullable\(\)/g;
    const duplicateMatches = newContent.match(duplicateNullable);
    if (duplicateMatches) {
      console.log(`  üîß ${filePath}: –ò—Å–ø—Ä–∞–≤–ª—è–µ–º ${duplicateMatches.length} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö .nullable()`);
      newContent = newContent.replace(duplicateNullable, '.optional().nullable()');
    }
    
    if (totalFixes > 0) {
      fs.writeFileSync(filePath, newContent, 'utf8');
      return totalFixes;
    }
    
    return 0;
  } catch (error) {
    console.error(`  ‚ùå Error fixing ${filePath}:`, error.message);
    return 0;
  }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –ø—Ä–æ–±–ª–µ–º—ã
const checkForRemainingIssues = (filePath) => {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    
    // –ò—â–µ–º –≤—Å–µ .optional() –±–µ–∑ .nullable()
    const problematicPatterns = [
      /\.optional\(\)\.describe\(/g,
      /\.optional\(\),/g,
      /\.optional\(\)$/gm,
      /\.optional\(\)\s*\}/g
    ];
    
    let issues = [];
    problematicPatterns.forEach((pattern, index) => {
      const matches = content.match(pattern);
      if (matches) {
        issues.push({
          pattern: index,
          count: matches.length,
          matches: matches.slice(0, 3) // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø—Ä–∏–º–µ—Ä–∞
        });
      }
    });
    
    return issues;
  } catch (error) {
    return [];
  }
};

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
const main = () => {
  const files = findFiles();
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${files.length} TypeScript —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏\n`);
  
  let fixedFiles = 0;
  let totalFixes = 0;
  let remainingIssues = 0;
  
  // –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
  console.log('üìã –ü–ï–†–í–´–ô –ü–†–û–•–û–î: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤\n');
  files.forEach(file => {
    const fixes = fixFileComprehensively(file);
    if (fixes > 0) {
      fixedFiles++;
      totalFixes += fixes;
    }
  });
  
  console.log(`\n‚úÖ –ü–µ—Ä–≤—ã–π –ø—Ä–æ—Ö–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω: ${fixedFiles} —Ñ–∞–π–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ, ${totalFixes} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π\n`);
  
  // –í—Ç–æ—Ä–æ–π –ø—Ä–æ—Ö–æ–¥ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã
  console.log('üîç –í–¢–û–†–û–ô –ü–†–û–•–û–î: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø—Ä–æ–±–ª–µ–º\n');
  files.forEach(file => {
    const issues = checkForRemainingIssues(file);
    if (issues.length > 0) {
      console.log(`‚ö†Ô∏è  ${file}:`);
      issues.forEach(issue => {
        console.log(`    - –ü–∞—Ç—Ç–µ—Ä–Ω ${issue.pattern}: ${issue.count} –ø—Ä–æ–±–ª–µ–º`);
        issue.matches.forEach(match => {
          console.log(`      "${match}"`);
        });
      });
      remainingIssues += issues.reduce((sum, issue) => sum + issue.count, 0);
    }
  });
  
  // –¢—Ä–µ—Ç–∏–π –ø—Ä–æ—Ö–æ–¥ - –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ–±–ª–µ–º—ã, –¥–µ–ª–∞–µ–º –µ—â–µ –æ–¥–∏–Ω —Ä–∞—É–Ω–¥ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  if (remainingIssues > 0) {
    console.log(`\nüîÑ –¢–†–ï–¢–ò–ô –ü–†–û–•–û–î: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è ${remainingIssues} –ø—Ä–æ–±–ª–µ–º\n`);
    
    files.forEach(file => {
      const fixes = fixFileComprehensively(file);
      if (fixes > 0) {
        totalFixes += fixes;
        console.log(`  ‚úÖ ${file}: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${fixes} –ø—Ä–æ–±–ª–µ–º`);
      }
    });
  }
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  console.log(`\nüìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
  console.log(`  üìÅ –§–∞–π–ª–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${files.length}`);
  console.log(`  üîß –§–∞–π–ª–æ–≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${fixedFiles}`);
  console.log(`  ‚ú® –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${totalFixes}`);
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  let finalIssues = 0;
  files.forEach(file => {
    const issues = checkForRemainingIssues(file);
    finalIssues += issues.reduce((sum, issue) => sum + issue.count, 0);
  });
  
  if (finalIssues === 0) {
    console.log(`\nüéâ –í–°–ï –ü–†–û–ë–õ–ï–ú–´ –ò–°–ü–†–ê–í–õ–ï–ù–´! OpenAI Agents SDK —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
  } else {
    console.log(`\n‚ö†Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å ${finalIssues} –ø—Ä–æ–±–ª–µ–º. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.`);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 