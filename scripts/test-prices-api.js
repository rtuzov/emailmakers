#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ API –ö—É–ø–∏–±–∏–ª–µ—Ç
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É endpoint https://lpc.kupibilet.ru/api/v2/one_way
 */

const fetch = require('node-fetch');

// –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è prices.ts –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –ú–æ—Å–∫–≤–∞-–ü–∞—Ä–∏–∂
import { getPrices } from '../src/agent/tools/prices.js';

async function testKupibiletAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ API –ö—É–ø–∏–±–∏–ª–µ—Ç...\n');

  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
  const testRoutes = [
    {
      name: '–ú–æ—Å–∫–≤–∞ -> –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥',
      departure: 'MOW',
      arrival: 'LED',
      dateFrom: '2025-06-25',
      dateTo: '2026-06-20'
    },
    {
      name: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ -> –ú–æ—Å–∫–≤–∞',
      departure: 'LED', 
      arrival: 'MOW',
      dateFrom: '2025-03-01',
      dateTo: '2025-06-01'
    },
    {
      name: '–ú–æ—Å–∫–≤–∞ -> –°–æ—á–∏',
      departure: 'MOW',
      arrival: 'AER',
      dateFrom: '2025-05-01',
      dateTo: '2025-08-31'
    }
  ];

  const results = [];

  for (const route of testRoutes) {
    try {
      console.log(`üìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞: ${route.name}`);
      console.log(`   ${route.departure} -> ${route.arrival}`);
      console.log(`   –ü–µ—Ä–∏–æ–¥: ${route.dateFrom} - ${route.dateTo}`);
      
      const requestBody = {
        arrival: route.arrival,
        cabin_class: "economy",
        currency: "RUB", 
        departure: route.departure,
        departure_date: {
          from: route.dateFrom,
          to: route.dateTo
        },
        filters: {
          airplane_only: null,
          is_direct: null,
          with_baggage: null
        }
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å:', JSON.stringify(requestBody, null, 2));

      const startTime = Date.now();
      
      const response = await fetch('https://lpc.kupibilet.ru/api/v2/one_way', {
        method: 'POST',
        headers: {
          'accept': '*/*',
          'accept-language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
          'cache-control': 'no-cache',
          'content-type': 'application/json',
          'origin': 'https://www.kupibilet.ru',
          'pragma': 'no-cache',
          'priority': 'u=1, i',
          'referer': 'https://www.kupibilet.ru/',
          'sec-ch-ua': '"Google Chrome";v="137", "Chromium";v="137", "Not/A)Brand";v="24"',
          'sec-ch-ua-mobile': '?0',
          'sec-ch-ua-platform': '"macOS"',
          'sec-fetch-dest': 'empty',
          'sec-fetch-mode': 'cors',
          'sec-fetch-site': 'same-site',
          'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36'
        },
        body: JSON.stringify(requestBody)
      });

      const responseTime = Date.now() - startTime;
      
      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${response.status} ${response.statusText}`);
      console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${responseTime}ms`);

      if (response.ok) {
        const data = await response.json();
        
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!');
        console.log('üìà –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:');
        console.log(`   - –ü–æ–ª—è: ${Object.keys(data).join(', ')}`);
        
        if (data.flights && Array.isArray(data.flights)) {
          console.log(`   - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–π—Å–æ–≤: ${data.flights.length}`);
          if (data.flights.length > 0) {
            const firstFlight = data.flights[0];
            console.log(`   - –ü—Ä–∏–º–µ—Ä —Ä–µ–π—Å–∞:`, JSON.stringify(firstFlight, null, 4));
          }
        }
        
        if (data.min_price) {
          console.log(`   - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${data.min_price} ${data.currency || 'RUB'}`);
        }

        results.push({
          route: route.name,
          status: 'success',
          responseTime,
          flightCount: data.flights?.length || 0,
          minPrice: data.min_price,
          currency: data.currency,
          data: data
        });

      } else {
        const errorText = await response.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ API:');
        console.log(`   Status: ${response.status}`);
        console.log(`   Response: ${errorText}`);
        
        results.push({
          route: route.name,
          status: 'error',
          responseTime,
          error: `${response.status}: ${errorText}`
        });
      }

    } catch (error) {
      console.log('üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ:');
      console.log(`   –û—à–∏–±–∫–∞: ${error.message}`);
      
      results.push({
        route: route.name,
        status: 'exception',
        error: error.message
      });
    }

    console.log('\n' + '‚îÄ'.repeat(60) + '\n');
    
    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø\n');
  
  const successful = results.filter(r => r.status === 'success');
  const failed = results.filter(r => r.status !== 'success');
  
  console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${successful.length}/${results.length}`);
  console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: ${failed.length}/${results.length}`);
  
  if (successful.length > 0) {
    console.log('\nüéØ –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    successful.forEach(result => {
      console.log(`   ${result.route}: ${result.flightCount} —Ä–µ–π—Å–æ–≤, –æ—Ç ${result.minPrice} ${result.currency}`);
    });
  }
  
  if (failed.length > 0) {
    console.log('\n‚ö†Ô∏è –ù–µ—É–¥–∞—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
    failed.forEach(result => {
      console.log(`   ${result.route}: ${result.error}`);
    });
  }

  // –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
  if (successful.length > 0) {
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•:');
    const sampleData = successful[0].data;
    
    console.log('–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –æ—Ç–≤–µ—Ç–∞:');
    Object.keys(sampleData).forEach(key => {
      const value = sampleData[key];
      const type = Array.isArray(value) ? 'array' : typeof value;
      console.log(`   - ${key}: ${type}`);
    });
    
    if (sampleData.flights && sampleData.flights.length > 0) {
      console.log('\n–ü–æ–ª—è –æ–±—ä–µ–∫—Ç–∞ —Ä–µ–π—Å–∞:');
      Object.keys(sampleData.flights[0]).forEach(key => {
        const value = sampleData.flights[0][key];
        const type = typeof value;
        console.log(`   - ${key}: ${type}`);
      });
    }
  }

  return results;
}

async function testPricesAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è prices.ts');
  console.log('üìç –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ú–æ—Å–∫–≤–∞ (MOW) ‚Üí –ü–∞—Ä–∏–∂ (CDG)');
  console.log('üìÖ –î–∞—Ç—ã: 30.06.2025 - 05.07.2025');
  console.log('-------------------------------------------');

  try {
    const result = await getPrices({
      origin: 'MOW',
      destination: 'CDG', 
      date_range: '2025-06-30,2025-07-05',
      cabin_class: 'economy',
      filters: {
        is_direct: false,
        with_baggage: false,
        airplane_only: true
      }
    });

    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω:');
    console.log('üìä Success:', result.success);
    
    if (result.success && result.data) {
      const data = result.data;
      console.log('üí∞ –í–∞–ª—é—Ç–∞:', data.currency);
      console.log('üèÜ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞:', data.cheapest);
      console.log('üìà –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω:', data.search_metadata.total_found);
      console.log('üõ£Ô∏è –ú–∞—Ä—à—Ä—É—Ç:', data.search_metadata.route);
      console.log('üìÖ –ü–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞:', data.search_metadata.date_range);
      
      console.log('\nüìã –°–ø–∏—Å–æ–∫ —Ü–µ–Ω:');
      data.prices.forEach((price, index) => {
        console.log(`${index + 1}. ${price.date}: ${price.price} ${price.currency}`);
        if (price.metadata?.airline) {
          console.log(`   ‚úàÔ∏è –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è: ${price.metadata.airline}`);
        }
        if (price.metadata?.duration) {
          console.log(`   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${price.metadata.duration} –º–∏–Ω`);
        }
        if (price.metadata?.stops !== undefined) {
          console.log(`   üîÑ –ü–µ—Ä–µ—Å–∞–¥–∫–∏: ${price.metadata.stops}`);
        }
      });
    }

    if (result.metadata) {
      console.log('\nüîß –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ:');
      console.log('üì° –ò—Å—Ç–æ—á–Ω–∏–∫:', result.metadata.source);
      if (result.metadata.reason) {
        console.log('‚ÑπÔ∏è –ü—Ä–∏—á–∏–Ω–∞:', result.metadata.reason);
      }
      console.log('‚è∞ –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞:', result.metadata.timestamp);
    }

    if (!result.success) {
      console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
    }

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
    console.error('üìç Stack trace:', error.stack);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
  testKupibiletAPI()
    .then(results => {
      console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
      process.exit(0);
    })
    .catch(error => {
      console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
      process.exit(1);
    });
}

module.exports = { testKupibiletAPI }; 