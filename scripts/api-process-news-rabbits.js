#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–ó–∞–π—Ü—ã –ù–æ–≤–æ—Å—Ç–∏"
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π API endpoint –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞–≥–µ–Ω—Ç–∞
 */

const fetch = require('node-fetch');

const API_BASE = 'http://localhost:3000/api/figma/process-news-rabbits';

async function main() {
  console.log('üê∞ API –û–ë–†–ê–ë–û–¢–ö–ê "–ó–ê–ô–¶–´ –ù–û–í–û–°–¢–ò"');
  console.log('‚ïê'.repeat(50));

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
  const requestData = {
    figmaUrl: 'https://www.figma.com/design/GBnGxSQlfM1XhjSkLHogk6/%F0%9F%8C%88-%D0%91%D0%B8%D0%B1%D0%BB%D0%B8%D0%BE%D1%82%D0%B5%D0%BA%D0%B0-%D0%BC%D0%B0%D1%80%D0%BA%D0%B5%D1%82%D0%B8%D0%BD%D0%B3%D0%B0--Copy-?t=z7QX9Qp6s7y2dhFi-0',
    context: {
      campaign_type: 'newsletter',
      content_theme: '–Ω–æ–≤–æ—Å—Ç–∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π',
      target_audience: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ—Ä–≤–∏—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–ª–µ—Ç–æ–≤',
      brand_guidelines: [
        '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω',
        '–ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è',
        '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç—å',
        '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º'
      ]
    },
    options: {
      includeVariants: true,
      generateReport: true,
      aiAnalysis: true,
      maxAssets: 20
    }
  };

  try {
    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
    console.log(`   Figma URL: ${requestData.figmaUrl}`);
    console.log(`   –¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏: ${requestData.context.campaign_type}`);
    console.log(`   –¢–µ–º–∞: ${requestData.context.content_theme}`);
    console.log('');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É...');
    const startResponse = await fetch(API_BASE, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestData),
    });

    const startResult = await startResponse.json();

    if (!startResult.success) {
      throw new Error(startResult.error || '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! Job ID: ${startResult.jobId}`);
    console.log(`üìç –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ: ${startResult.trackingUrl}`);
    console.log('');

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    await trackProgress(startResult.jobId);

  } catch (error) {
    console.error('‚ùå –û–®–ò–ë–ö–ê:', error.message);
    process.exit(1);
  }
}

/**
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
 */
async function trackProgress(jobId) {
  console.log('üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å...');
  console.log('‚îÄ'.repeat(40));

  let lastStatus = '';
  let lastProgress = 0;

  while (true) {
    try {
      const response = await fetch(`${API_BASE}/${jobId}`);
      const data = await response.json();

      if (!data.success) {
        throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
      }

      const job = data.job;

      // –í—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      if (job.status !== lastStatus || job.progress !== lastProgress) {
        const timestamp = new Date().toLocaleTimeString('ru-RU');
        console.log(`[${timestamp}] ${getStatusEmoji(job.status)} ${job.status.toUpperCase()} - ${job.progress}%`);
        
        if (job.estimatedTimeRemaining) {
          console.log(`   ‚è±Ô∏è –û—Å—Ç–∞–ª–æ—Å—å ~${job.estimatedTimeRemaining}—Å`);
        }

        lastStatus = job.status;
        lastProgress = job.progress;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
      if (job.status === 'completed') {
        console.log('');
        console.log('üéâ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û!');
        console.log('‚ïê'.repeat(50));
        
        if (job.result) {
          console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
          console.log(`   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—Å—Å–µ—Ç–æ–≤: ${job.result.assetCount}`);
          console.log(`   –í—ã—Ö–æ–¥–Ω–∞—è –ø–∞–ø–∫–∞: ${job.result.outputDirectory}`);
          console.log(`   –û—Ç—á–µ—Ç: ${job.result.reportPath}`);
          
          if (job.result.summary?.uniqueTags) {
            console.log(`   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤: ${job.result.summary.uniqueTags.length}`);
            console.log('   –¢–µ–≥–∏:', job.result.summary.uniqueTags.join(', '));
          }
        }
        break;
      }

      if (job.status === 'failed') {
        console.log('');
        console.log('‚ùå –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–í–ê–õ–ò–õ–ê–°–¨!');
        console.log('‚ïê'.repeat(50));
        if (job.error) {
          console.log(`–û—à–∏–±–∫–∞: ${job.error}`);
        }
        process.exit(1);
      }

      // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await sleep(2000);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:', error.message);
      await sleep(5000); // –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    }
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
 */
function getStatusEmoji(status) {
  const emojis = {
    pending: '‚è≥',
    processing: 'üîÑ',
    completed: '‚úÖ',
    failed: '‚ùå'
  };
  return emojis[status] || '‚ùì';
}

/**
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á
 */
async function listJobs() {
  console.log('üìã –°–ü–ò–°–û–ö –ó–ê–î–ê–ß');
  console.log('‚ïê'.repeat(50));

  try {
    const response = await fetch(API_BASE);
    const data = await response.json();

    if (!data.success) {
      throw new Error(data.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á');
    }

    if (data.jobs.length === 0) {
      console.log('–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç');
      return;
    }

    data.jobs.forEach((job, index) => {
      const duration = job.endTime 
        ? Math.round((new Date(job.endTime) - new Date(job.startTime)) / 1000)
        : Math.round((new Date() - new Date(job.startTime)) / 1000);

      console.log(`${index + 1}. ${job.id}`);
      console.log(`   ${getStatusEmoji(job.status)} ${job.status} (${job.progress}%)`);
      console.log(`   –í—Ä–µ–º—è: ${new Date(job.startTime).toLocaleString('ru-RU')}`);
      console.log(`   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${formatDuration(duration)}`);
      if (job.metadata.totalAssets) {
        console.log(`   –ê—Å—Å–µ—Ç–æ–≤: ${job.metadata.totalAssets}`);
      }
      console.log('');
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
 */
function formatDuration(seconds) {
  if (seconds < 60) return `${seconds}—Å`;
  if (seconds < 3600) return `${Math.round(seconds / 60)}–º`;
  return `${Math.round(seconds / 3600)}—á`;
}

/**
 * –ü—Ä–æ—Å—Ç–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–Ω–∞
 */
function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);
const command = args[0];

if (command === 'list') {
  listJobs().catch(error => {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
} else if (command === 'help') {
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node scripts/api-process-news-rabbits.js        # –ó–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É');
  console.log('  node scripts/api-process-news-rabbits.js list   # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á');
  console.log('  node scripts/api-process-news-rabbits.js help   # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É');
} else {
  // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
  main().catch(error => {
    console.error('‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
} 