const fs = require('fs');
const path = require('path');
const OpenAI = require('openai');
const sharp = require('sharp');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env.local' });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const IDENTICA_FOLDER = 'figma-all-pages-1750993353363/–∞–π–¥–µ–Ω—Ç–∏–∫–∞';
const TAG_DICTIONARY_PATH = path.join(IDENTICA_FOLDER, 'tag-dictionary.json');

class IdenticalFolderValidator {
  constructor() {
    this.errors = [];
    this.corrections = [];
    this.tagDictionary = null;
  }

  async validateFolder() {
    console.log('üîç –ù–∞—á–∏–Ω–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –ø–∞–ø–∫–∏ –∞–π–¥–µ–Ω—Ç–∏–∫–∞...');
    
    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π tag-dictionary
      await this.loadTagDictionary();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
      const imageFiles = await this.getImageFiles();
      console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${imageFiles.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      for (const imageFile of imageFiles) {
        await this.validateImageEntry(imageFile);
      }
      
      // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
      await this.correctErrors();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π tag-dictionary
      await this.saveCorrections();
      
      console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      this.printSummary();
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', error);
    }
  }

  async loadTagDictionary() {
    try {
      const data = fs.readFileSync(TAG_DICTIONARY_PATH, 'utf8');
      this.tagDictionary = JSON.parse(data);
      console.log(`üìñ –ó–∞–≥—Ä—É–∂–µ–Ω tag-dictionary —Å ${Object.keys(this.tagDictionary.entries).length} –∑–∞–ø–∏—Å—è–º–∏`);
    } catch (error) {
      throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å tag-dictionary: ${error.message}`);
    }
  }

  async getImageFiles() {
    const files = fs.readdirSync(IDENTICA_FOLDER);
    return files.filter(file => file.endsWith('.png'));
  }

  async validateImageEntry(imageFile) {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è—é: ${imageFile}`);
    
    const fileName = path.parse(imageFile).name;
    const imagePath = path.join(IDENTICA_FOLDER, imageFile);
    
    // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ tag-dictionary
    const entry = this.findEntryByFileName(fileName);
    
    if (!entry) {
      this.errors.push({
        type: 'missing_entry',
        file: imageFile,
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–ø–∏—Å—å –≤ tag-dictionary –¥–ª—è —Ñ–∞–π–ª–∞ ${imageFile}`
      });
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ OpenAI
    const aiAnalysis = await this.analyzeImageWithAI(imagePath, fileName);
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await this.compareWithExisting(entry, aiAnalysis, imageFile);
  }

  findEntryByFileName(fileName) {
    const entries = this.tagDictionary.entries;
    
    // –ò—â–µ–º –ø–æ shortName –∏–ª–∏ originalName
    for (const [key, entry] of Object.entries(entries)) {
      if (entry.shortName === fileName || 
          entry.originalName === fileName ||
          key === fileName) {
        return { key, ...entry };
      }
    }
    
    return null;
  }

  async analyzeImageWithAI(imagePath, fileName) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const imageBuffer = fs.readFileSync(imagePath);
      const metadata = await sharp(imageBuffer).metadata();
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64 –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ OpenAI
      const base64Image = imageBuffer.toString('base64');
      
      const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–∞–ø–∫–∏ "–∞–π–¥–µ–Ω—Ç–∏–∫–∞" –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:

1. –¢–ï–ì–ò (3-5 –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ç–µ–≥–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):
   - –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞
   - –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   - –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ/–∫–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

2. –û–ü–ò–°–ê–ù–ò–ï –ö–û–ù–¢–ï–ù–¢–ê:
   - –ß—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–æ
   - –°—Ç–∏–ª—å –∏ –¥–∏–∑–∞–π–Ω
   - –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞

3. –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ô –¢–û–ù:
   - –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π
   - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π/—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π/–∏–≥—Ä–∏–≤—ã–π

4. –ö–û–ù–¢–ï–ö–°–¢ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:
   - –ì–¥–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
   - –î–ª—è –∫–∞–∫–∏—Ö —Ü–µ–ª–µ–π –ø–æ–¥—Ö–æ–¥–∏—Ç

5. –ö–ê–ß–ï–°–¢–í–û –ò –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –û–¶–ï–ù–ö–ê:
   - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏ —á–µ—Ç–∫–æ—Å—Ç—å
   - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è email
   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é

–§–∞–π–ª: ${fileName}
–†–∞–∑–º–µ—Ä: ${metadata.width}x${metadata.height}

–û—Ç–≤–µ—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏: tags, contentDescription, emotionalTone, usageContext, technicalAssessment, recommendations.
`;

      const response = await openai.chat.completions.create({
        model: process.env.USAGE_MODEL || "gpt-4o-mini",
        messages: [
          {
            role: "user",
            content: [
              { type: "text", text: prompt },
              {
                type: "image_url",
                image_url: {
                  url: `data:image/png;base64,${base64Image}`
                }
              }
            ]
          }
        ],
        max_tokens: 1000,
        temperature: 0.3
      });

      let responseContent = response.choices[0].message.content;
      
      // –£–¥–∞–ª—è–µ–º markdown –±–ª–æ–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
      if (responseContent.includes('```json')) {
        responseContent = responseContent.replace(/```json\s*/g, '').replace(/```\s*/g, '');
      }
      
      let aiResult;
      try {
        aiResult = JSON.parse(responseContent);
      } catch (parseError) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è ${fileName}:`, parseError.message);
        console.error('–û—Ç–≤–µ—Ç OpenAI:', responseContent.substring(0, 200) + '...');
        return null;
      }
      
      return {
        ...aiResult,
        metadata: {
          width: metadata.width,
          height: metadata.height,
          format: metadata.format,
          fileSize: fs.statSync(imagePath).size
        }
      };
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ${fileName}:`, error.message);
      return null;
    }
  }

  async compareWithExisting(entry, aiAnalysis, imageFile) {
    if (!aiAnalysis) return;

    const issues = [];
    
    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–µ–≥–∏
    const currentTags = entry.selectedTags || entry.allTags || [];
    const aiTags = aiAnalysis.tags || [];
    
    const tagsSimilarity = this.calculateTagsSimilarity(currentTags, aiTags);
    if (tagsSimilarity < 0.5) {
      issues.push({
        type: 'tags_mismatch',
        current: currentTags,
        suggested: aiTags,
        similarity: tagsSimilarity
      });
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    const currentDescription = entry.aiAnalysis?.contentDescription || '';
    const aiDescription = aiAnalysis.contentDescription || '';
    
    if (currentDescription && aiDescription && this.calculateTextSimilarity(currentDescription, aiDescription) < 0.6) {
      issues.push({
        type: 'description_mismatch',
        current: currentDescription,
        suggested: aiDescription
      });
    }

    // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
    const currentTone = entry.aiAnalysis?.emotionalTone || '';
    const aiTone = aiAnalysis.emotionalTone || '';
    
    if (currentTone !== aiTone) {
      issues.push({
        type: 'tone_mismatch',
        current: currentTone,
        suggested: aiTone
      });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    const currentMetadata = entry.imageMetadata?.technical;
    const aiMetadata = aiAnalysis.metadata;
    
    if (currentMetadata && aiMetadata) {
      if (currentMetadata.width !== aiMetadata.width || 
          currentMetadata.height !== aiMetadata.height) {
        issues.push({
          type: 'metadata_mismatch',
          current: `${currentMetadata.width}x${currentMetadata.height}`,
          suggested: `${aiMetadata.width}x${aiMetadata.height}`
        });
      }
    }

    if (issues.length > 0) {
      this.errors.push({
        type: 'content_mismatch',
        file: imageFile,
        entryKey: entry.key,
        issues: issues,
        aiAnalysis: aiAnalysis
      });
    }
  }

  calculateTagsSimilarity(tags1, tags2) {
    if (!tags1.length && !tags2.length) return 1;
    if (!tags1.length || !tags2.length) return 0;
    
    const set1 = new Set(tags1.map(tag => tag.toLowerCase()));
    const set2 = new Set(tags2.map(tag => tag.toLowerCase()));
    
    const intersection = new Set([...set1].filter(x => set2.has(x)));
    const union = new Set([...set1, ...set2]);
    
    return intersection.size / union.size;
  }

  calculateTextSimilarity(text1, text2) {
    if (!text1 && !text2) return 1;
    if (!text1 || !text2) return 0;
    
    // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–æ–∫–∞
    const str1 = String(text1 || '');
    const str2 = String(text2 || '');
    
    const words1 = str1.toLowerCase().split(/\s+/);
    const words2 = str2.toLowerCase().split(/\s+/);
    
    const set1 = new Set(words1);
    const set2 = new Set(words2);
    
    const intersection = new Set([...set1].filter(x => set2.has(x)));
    const union = new Set([...set1, ...set2]);
    
    return intersection.size / union.size;
  }

  async correctErrors() {
    console.log(`üîß –ò—Å–ø—Ä–∞–≤–ª—è—é ${this.errors.length} –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫...`);
    
    for (const error of this.errors) {
      if (error.type === 'content_mismatch') {
        const correction = await this.createCorrection(error);
        if (correction) {
          this.corrections.push(correction);
        }
      }
    }
  }

  async createCorrection(error) {
    const { entryKey, aiAnalysis, issues } = error;
    const currentEntry = this.tagDictionary.entries[entryKey];
    
    if (!currentEntry) return null;

    // –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    const correctedEntry = { ...currentEntry };
    
    for (const issue of issues) {
      switch (issue.type) {
        case 'tags_mismatch':
          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–≥–∏, –µ—Å–ª–∏ AI —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–º –∞–Ω–∞–ª–∏–∑–µ
          if (issue.similarity < 0.3) {
            correctedEntry.selectedTags = issue.suggested;
            correctedEntry.allTags = [...new Set([...correctedEntry.allTags, ...issue.suggested])];
          }
          break;
          
        case 'description_mismatch':
          // –û–±–Ω–æ–≤–ª—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
          if (!correctedEntry.aiAnalysis) correctedEntry.aiAnalysis = {};
          correctedEntry.aiAnalysis.contentDescription = issue.suggested;
          break;
          
        case 'tone_mismatch':
          // –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
          if (!correctedEntry.aiAnalysis) correctedEntry.aiAnalysis = {};
          correctedEntry.aiAnalysis.emotionalTone = issue.suggested;
          break;
          
        case 'metadata_mismatch':
          // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è)
          console.log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${entryKey}: ${issue.current} vs ${issue.suggested}`);
          break;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
    correctedEntry.correctionInfo = {
      correctedAt: new Date().toISOString(),
      correctedBy: 'AI_Validator_GPT4o-mini',
      originalIssues: issues.map(i => i.type),
      confidence: this.calculateCorrectionConfidence(issues)
    };

    return {
      entryKey,
      originalEntry: currentEntry,
      correctedEntry,
      issues
    };
  }

  calculateCorrectionConfidence(issues) {
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–æ–≤ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–æ–±–ª–µ–º
    let confidence = 1.0;
    
    for (const issue of issues) {
      switch (issue.type) {
        case 'tags_mismatch':
          confidence -= (1 - issue.similarity) * 0.3;
          break;
        case 'description_mismatch':
          confidence -= 0.2;
          break;
        case 'tone_mismatch':
          confidence -= 0.1;
          break;
        case 'metadata_mismatch':
          confidence -= 0.1;
          break;
      }
    }
    
    return Math.max(0.1, confidence);
  }

  async saveCorrections() {
    if (this.corrections.length === 0) {
      console.log('‚úÖ –û—à–∏–±–æ–∫ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –∫ tag-dictionary
    for (const correction of this.corrections) {
      this.tagDictionary.entries[correction.entryKey] = correction.correctedEntry;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    this.tagDictionary.updatedAt = new Date().toISOString();
    this.tagDictionary.correctionInfo = {
      lastCorrectionAt: new Date().toISOString(),
      correctionsTotalCount: this.corrections.length,
      validationVersion: '2.0.0',
      validatedBy: 'AI_Validator_GPT4o-mini'
    };

    // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
    const backupPath = TAG_DICTIONARY_PATH.replace('.json', '_backup_before_correction.json');
    fs.writeFileSync(backupPath, JSON.stringify(this.tagDictionary, null, 2));
    console.log(`üíæ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: ${backupPath}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    fs.writeFileSync(TAG_DICTIONARY_PATH, JSON.stringify(this.tagDictionary, null, 2));
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π tag-dictionary: ${TAG_DICTIONARY_PATH}`);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –æ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è—Ö
    const reportPath = path.join(IDENTICA_FOLDER, 'correction-report.json');
    const report = {
      timestamp: new Date().toISOString(),
      totalErrors: this.errors.length,
      totalCorrections: this.corrections.length,
      corrections: this.corrections,
      errors: this.errors
    };
    
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç—á–µ—Ç –æ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è—Ö: ${reportPath}`);
  }

  printSummary() {
    console.log('\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
    console.log('==================');
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${Object.keys(this.tagDictionary.entries).length}`);
    console.log(`‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: ${this.errors.length}`);
    console.log(`üîß –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: ${this.corrections.length}`);
    
    if (this.errors.length > 0) {
      console.log('\nüìù –¢–∏–ø—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫:');
      const errorTypes = {};
      this.errors.forEach(error => {
        errorTypes[error.type] = (errorTypes[error.type] || 0) + 1;
      });
      
      Object.entries(errorTypes).forEach(([type, count]) => {
        console.log(`   ‚Ä¢ ${type}: ${count}`);
      });
    }
    
    if (this.corrections.length > 0) {
      console.log('\nüîß –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:');
      this.corrections.forEach((correction, index) => {
        console.log(`   ${index + 1}. ${correction.entryKey}`);
        correction.issues.forEach(issue => {
          console.log(`      - ${issue.type}`);
        });
      });
    }
    
    console.log('\n‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
  }
}

// –ó–∞–ø—É—Å–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
async function main() {
  if (!process.env.OPENAI_API_KEY) {
    console.error('‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω OPENAI_API_KEY');
    process.exit(1);
  }

  const validator = new IdenticalFolderValidator();
  await validator.validateFolder();
}

if (require.main === module) {
  main().catch(console.error);
}

module.exports = IdenticalFolderValidator; 