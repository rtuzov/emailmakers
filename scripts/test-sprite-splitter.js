#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø—Ä–∞–π—Ç–∞ Figma
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç figma-sprite-splitter
 */

const path = require('path');
const fs = require('fs/promises');

// –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É –∞—Å—Å–µ—Ç—É
const ASSET_PATH = path.join(process.cwd(), 'figma-assets', '–∑–∞—è—Ü -–û–±—â–∏–µ- 09-x1.png');
const OUTPUT_DIR = path.join(process.cwd(), 'mails', 'sprite-test-' + Date.now());

async function testSpriteSpitter() {
    try {
        console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Å–ø—Ä–∞–π—Ç–∞...');
        console.log(`üìÅ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª: ${ASSET_PATH}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
        try {
            await fs.access(ASSET_PATH);
            console.log('‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω');
        } catch (error) {
            console.error('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', ASSET_PATH);
            console.log('üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã –≤ figma-assets:');
            try {
                const files = await fs.readdir(path.join(process.cwd(), 'figma-assets'));
                files.filter(f => f.includes('–∑–∞—è—Ü')).forEach(file => console.log(`   - ${file}`));
            } catch (e) {
                console.log('   –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é figma-assets');
            }
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        await fs.mkdir(OUTPUT_DIR, { recursive: true });
        console.log(`üìÅ –í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: ${OUTPUT_DIR}`);
        
        // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        const { splitFigmaSprite } = await import('../src/agent/tools/figma-sprite-splitter.ts');
        
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        const params = {
            path: ASSET_PATH,
            h_gap: 15,     // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
            v_gap: 15,     // –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∑–∞–∑–æ—Ä –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏  
            confidence_threshold: 0.7  // –ø–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
        };
        
        console.log('‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ...');
        const startTime = Date.now();
        
        const result = await splitFigmaSprite(params);
        
        const endTime = Date.now();
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${endTime - startTime}ms`);
        
        if (result.success && result.manifest) {
            console.log('\nüéâ –£–°–ü–ï–®–ù–û –†–ê–ó–î–ï–õ–ï–ù–û!');
            console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Å–µ–≥–º–µ–Ω—Ç–æ–≤: ${result.slices_generated}`);
            console.log(`üéØ –¢–æ—á–Ω–æ—Å—Ç—å: ${result.manifest.accuracy_score}%`);
            console.log(`‚è±Ô∏è –í—Ä–µ–º—è: ${result.processing_time}s`);
            
            console.log('\nüìã –°–ï–ì–ú–ï–ù–¢–´:');
            result.manifest.slices.forEach((slice, index) => {
                console.log(`${index + 1}. ${slice.filename}`);
                console.log(`   –¢–∏–ø: ${slice.type}`);
                console.log(`   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${slice.confidence}`);
                console.log(`   –†–∞–∑–º–µ—Ä: ${slice.bounds.width}x${slice.bounds.height}`);
                console.log(`   –§–∞–π–ª: ${slice.size_kb}KB`);
                console.log('');
            });
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –≤—ã—Ö–æ–¥–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            if (result.manifest.metadata.processing_config.tempDir) {
                try {
                    // –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã
                    console.log('üì¶ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');
                    
                    // –°–æ–∑–¥–∞–µ–º manifest.json
                    await fs.writeFile(
                        path.join(OUTPUT_DIR, 'manifest.json'),
                        JSON.stringify(result.manifest, null, 2),
                        'utf8'
                    );
                    
                    console.log(`‚úÖ –ú–∞–Ω–∏—Ñ–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${OUTPUT_DIR}/manifest.json`);
                    
                } catch (copyError) {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã:', copyError.message);
                }
            }
            
        } else {
            console.error('‚ùå –û–®–ò–ë–ö–ê –†–ê–ó–î–ï–õ–ï–ù–ò–Ø:');
            console.error(result.error);
        }
        
    } catch (error) {
        console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
        console.error(error.stack);
    }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
async function analyzeImage() {
    try {
        const sharp = (await import('sharp')).default;
        const image = sharp(ASSET_PATH);
        const metadata = await image.metadata();
        
        console.log('\nüì∏ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ò:');
        console.log(`   –†–∞–∑–º–µ—Ä: ${metadata.width}x${metadata.height}`);
        console.log(`   –§–æ—Ä–º–∞—Ç: ${metadata.format}`);
        console.log(`   –ö–∞–Ω–∞–ª—ã: ${metadata.channels}`);
        console.log(`   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${(await fs.stat(ASSET_PATH)).size} –±–∞–π—Ç`);
        
    } catch (error) {
        console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:', error.message);
    }
}

async function main() {
    console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–î–ï–õ–ï–ù–ò–Ø –°–ü–†–ê–ô–¢–ê FIGMA');
    console.log('‚ïê'.repeat(50));
    
    await analyzeImage();
    await testSpriteSpitter();
    
    console.log('\n‚ú® –ì–æ—Ç–æ–≤–æ!');
}

if (require.main === module) {
    main().catch(console.error);
} 