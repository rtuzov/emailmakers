/**
 * ü§ñ NATIVE ML-SCORING DEMO
 * 
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö OpenAI Agent SDK ML-scoring –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Tool Registry –∏ Quality Specialist
 */

import { toolRegistry } from '../core/tool-registry';
import { mlScoringTools } from '../tools/ml-scoring-tools';

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const testEmailData = {
  high_quality: {
    subject: "üåü –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: –ë–∏–ª–µ—Ç—ã –≤ –ü–∞—Ä–∏–∂ –æ—Ç 15,000‚ÇΩ",
    preheader: "–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è! –°–∫–∏–¥–∫–∞ –¥–æ 40% –Ω–∞ —Ä–µ–π—Å—ã –≤ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ —Å—Ç–æ–ª–∏—Ü—ã",
    content: `
      <html>
        <head>
          <title>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ</title>
          <style>
            body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }
            .content { padding: 30px; max-width: 600px; margin: 0 auto; }
            .cta-button { background: #ff6b6b; color: white; padding: 15px 30px; border: none; border-radius: 5px; font-size: 18px; cursor: pointer; }
            .footer { background: #f8f9fa; padding: 20px; text-align: center; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>–ü—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ —Å –Ω–∞–º–∏!</h1>
          </div>
          <div class="content">
            <h2>–ù–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã</h2>
            <p>–î–æ—Ä–æ–≥–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏! –ú—ã —Ä–∞–¥—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.</p>
            <ul>
              <li>–ü–∞—Ä–∏–∂ - –æ—Ç 15,000‚ÇΩ</li>
              <li>–õ–æ–Ω–¥–æ–Ω - –æ—Ç 18,000‚ÇΩ</li>
              <li>–†–∏–º - –æ—Ç 16,500‚ÇΩ</li>
            </ul>
            <p>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è. –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å!</p>
            <center>
              <button class="cta-button">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å</button>
            </center>
          </div>
          <div class="footer">
            <p>¬© 2024 Travel Agency. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã.</p>
            <p>–û—Ç–ø–∏—Å–∞—Ç—å—Å—è | –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</p>
          </div>
        </body>
      </html>
    `,
    design_tokens: {
      colors: {
        primary: "#667eea",
        secondary: "#764ba2",
        accent: "#ff6b6b"
      },
      fonts: {
        primary: "Arial, sans-serif"
      }
    },
    brand_guidelines: {
      tone: "friendly",
      style: "modern",
      colors: ["#667eea", "#764ba2", "#ff6b6b"],
      fonts: ["Arial"]
    },
    images: [
      {
        url: "https://example.com/paris.jpg",
        alt: "–≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è –≤ –ü–∞—Ä–∏–∂–µ",
        size: 45000
      }
    ]
  },

  low_quality: {
    subject: "—Å–∫–∏–¥–∫–∏",
    content: `
      <html>
        <body style="font-family:arial">
          <div style="color:red;font-size:24px">–°–ö–ò–î–ö–ò!!!</div>
          <p>–∫—É–ø–∏ –±–∏–ª–µ—Ç—ã –¥–µ—à–µ–≤–æ</p>
          <a href="#">–∂–º–∏ —Ç—É—Ç</a>
          <img src="broken-link.jpg">
        </body>
      </html>
    `
  }
};

async function demonstrateNativeMLScoringIntegration(): Promise<void> {
  console.log('ü§ñ NATIVE ML-SCORING DEMO: Starting...\n');

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞—Ç–∏–≤–Ω—ã—Ö tools –≤ Tool Registry
    console.log('üìã Step 1: Checking Tool Registry Integration');
    console.log('='.repeat(50));
    
    const qualityTools = toolRegistry.getToolsForAgent('quality');
    console.log(`‚úÖ Quality tools loaded: ${qualityTools.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ML-scoring tools
    const mlToolNames = ['analyze_email_quality', 'quick_quality_check', 'compare_email_quality'];
    mlToolNames.forEach(toolName => {
      const tool = toolRegistry.getOpenAITool(toolName);
      if (tool) {
        console.log(`‚úÖ Native ML tool found: ${toolName}`);
        console.log(`   - Description: ${tool.description.substring(0, 60)}...`);
      } else {
        console.log(`‚ùå Native ML tool missing: ${toolName}`);
      }
    });

    // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—Ç–∏–≤–Ω—ã—Ö tools
    console.log('\nüìä Step 2: Testing Native Tools Directly');
    console.log('='.repeat(50));

    // –¢–µ—Å—Ç analyze_email_quality
    console.log('üîç Testing analyze_email_quality...');
    const analyzeEmailTool = mlScoringTools.find(tool => (tool as any).name === 'analyze_email_quality');
    if (analyzeEmailTool) {
      const analysisResult = await (analyzeEmailTool as any).execute(testEmailData.high_quality);
      const parsed = JSON.parse(analysisResult);
      console.log(`‚úÖ Analysis complete - Overall score: ${parsed.overall_score}/100`);
      console.log(`   - Content: ${parsed.category_scores.content}/100`);
      console.log(`   - Design: ${parsed.category_scores.design}/100`);
      console.log(`   - Technical: ${parsed.category_scores.technical}/100`);
      console.log(`   - Performance: ${parsed.category_scores.performance}/100`);
      console.log(`   - Recommendations: ${parsed.recommendations.length}`);
    }

    // –¢–µ—Å—Ç quick_quality_check
    console.log('\nüöÄ Testing quick_quality_check...');
    const quickCheckTool = mlScoringTools.find(tool => (tool as any).name === 'quick_quality_check');
    if (quickCheckTool) {
      const quickResult = await (quickCheckTool as any).execute({
        content: testEmailData.high_quality.content,
        focus_areas: ['content', 'technical']
      });
      const parsed = JSON.parse(quickResult);
      console.log(`‚úÖ Quick check complete - Score: ${parsed.quick_score}/100`);
      console.log(`   - Top issues: ${parsed.top_issues.length}`);
      console.log(`   - Top recommendations: ${parsed.top_recommendations.length}`);
    }

    // –¢–µ—Å—Ç compare_email_quality
    console.log('\n‚öñÔ∏è Testing compare_email_quality...');
    const compareTool = mlScoringTools.find(tool => (tool as any).name === 'compare_email_quality');
    if (compareTool) {
      const compareResult = await (compareTool as any).execute({
        emails: [testEmailData.high_quality, testEmailData.low_quality],
        comparison_focus: 'overall'
      });
      const parsed = JSON.parse(compareResult);
      console.log(`‚úÖ Comparison complete - ${parsed.total_variants} variants analyzed`);
      console.log(`   - Winner: ${parsed.winner.variant_id} (${parsed.winner.subject})`);
      console.log(`   - Best score: ${parsed.rankings[0].score}/100`);
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Tool Registry
    console.log('\nüîß Step 3: Testing Through Tool Registry');
    console.log('='.repeat(50));

    const registryAnalyzeTool = toolRegistry.getOpenAITool('analyze_email_quality');
    if (registryAnalyzeTool) {
      console.log('‚úÖ Tool retrieved from registry successfully');
      console.log(`   - Name: ${registryAnalyzeTool.name}`);
      console.log(`   - Type: Native OpenAI SDK tool`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      const toolDefinition = toolRegistry.getTool('analyze_email_quality');
      if (toolDefinition?.metadata?.type === 'native_openai_sdk') {
        console.log('‚úÖ Tool correctly identified as native OpenAI SDK');
        console.log(`   - ML powered: ${toolDefinition.metadata.ml_powered}`);
        console.log(`   - Performance optimized: ${toolDefinition.metadata.performance_optimized}`);
      }
    }

    // 4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìà Step 4: Performance Testing');
    console.log('='.repeat(50));

    const startTime = Date.now();
    const iterations = 10;
    
    console.log(`üèÉ‚Äç‚ôÇÔ∏è Running ${iterations} quick quality checks...`);
    
    let successCount = 0;
    for (let i = 0; i < iterations; i++) {
      try {
        if (quickCheckTool) {
          await (quickCheckTool as any).execute({
            content: testEmailData.high_quality.content
          });
          successCount++;
        }
      } catch (error) {
        console.error(`‚ùå Iteration ${i + 1} failed:`, error);
      }
    }
    
    const endTime = Date.now();
    const duration = endTime - startTime;
    const avgTime = duration / iterations;
    const throughput = Math.round((iterations / (duration / 1000)) * 100) / 100;
    
    console.log(`‚úÖ Performance Results:`);
    console.log(`   - Total time: ${duration}ms`);
    console.log(`   - Average per analysis: ${Math.round(avgTime)}ms`);
    console.log(`   - Throughput: ${throughput} analyses/sec`);
    console.log(`   - Success rate: ${Math.round((successCount / iterations) * 100)}%`);

    // 5. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log('\nüìä Step 5: Final Statistics');
    console.log('='.repeat(50));

    const stats = toolRegistry.getToolStats();
    console.log(`‚úÖ Tool Registry Statistics:`);
    console.log(`   - Total tools: ${stats.total}`);
    console.log(`   - Enabled tools: ${stats.enabled}`);
    console.log(`   - Quality tools: ${stats.byCategory.quality}`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º ML-powered tools
    const mlToolsCount = Array.from(toolRegistry['tools'].values())
      .filter(tool => tool.metadata?.ml_powered === true).length;
    console.log(`   - ML-powered tools: ${mlToolsCount}`);

    console.log('\nüéâ NATIVE ML-SCORING DEMO: Completed successfully!');
    console.log('\n‚ú® Key achievements:');
    console.log('   ‚úÖ Native OpenAI Agent SDK tools integrated');
    console.log('   ‚úÖ Tool Registry compatibility maintained');
    console.log('   ‚úÖ High-performance ML analysis available');
    console.log('   ‚úÖ Comprehensive quality scoring operational');
    console.log('   ‚úÖ Email comparison functionality working');

  } catch (error) {
    console.error('‚ùå Demo failed:', error);
    if (error instanceof Error) {
      console.error('Stack trace:', error.stack);
    }
  }
}

// –ó–∞–ø—É—Å–∫ –¥–µ–º–æ
if (require.main === module) {
  demonstrateNativeMLScoringIntegration()
    .then(() => {
      console.log('\nüèÅ Demo completed');
      process.exit(0);
    })
    .catch((error) => {
      console.error('üí• Demo crashed:', error);
      process.exit(1);
    });
}

export { demonstrateNativeMLScoringIntegration }; 