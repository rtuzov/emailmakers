import { ContextEnrichment, ValidationResult, ValidationIssue } from './types';
import { EmailGenerationRequest } from '../agent';
import { RouteValidator } from './route-validator';
import { DateValidator } from './date-validator';
import { SimpleDataProvider } from './simple-data-provider';

export class ContextEnricher {

  /**
   * Enrich request with contextual intelligence
   */
  static async enrichContext(request: EmailGenerationRequest): Promise<ContextEnrichment> {
    console.log('üß† ContextEnricher: Enriching context for request');

    // Initialize enrichment object
    const enrichment: ContextEnrichment = {
      seasonal: { season: 'unknown', priceFactor: 1.0, months: [] },
      holidays: false,
      routePopularity: 'medium',
      timezoneDiff: 0,
      suggestions: [],
      warnings: []
    };

    try {
      // Enrich route context
      if (request.origin && request.destination) {
        await this.enrichRouteContext(request.origin, request.destination, enrichment);
      }

      // Enrich date context
      if (request.date_range) {
        await this.enrichDateContext(request.date_range, request.destination, enrichment);
      }

      // Add general travel context
      await this.enrichTravelContext(request, enrichment);

      // Generate smart suggestions
      this.generateSmartSuggestions(request, enrichment);

      console.log('‚úÖ ContextEnricher: Context enriched successfully');
      return enrichment;

    } catch (error) {
      console.error('‚ùå ContextEnricher: Error enriching context:', error);
      
      // Return basic enrichment on error
      return {
        seasonal: SimpleDataProvider.getSeasonalContext(new Date()),
        holidays: false,
        routePopularity: 'medium',
        timezoneDiff: 0,
        suggestions: ['–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–¥—ã –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∏ –¥–∞—Ç—ã'],
        warnings: ['–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–æ–≥–∞—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç - –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏']
      };
    }
  }

  /**
   * Validate and correct request parameters
   */
  static async validateAndCorrect(request: EmailGenerationRequest): Promise<ValidationResult> {
    console.log('üîç ContextEnricher: Validating request parameters');

    const issues: ValidationIssue[] = [];
    const suggestions: string[] = [];
    let correctedRequest = { ...request };

    // Validate route
    if (request.origin && request.destination) {
      const routeValidation = RouteValidator.validateRoute(request.origin, request.destination);
      
      if (!routeValidation.valid) {
        issues.push({
          type: 'route',
          severity: 'error',
          message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
          suggestion: routeValidation.suggestion,
          autofix: true
        });

        // Apply corrections
        if (routeValidation.correctedOrigin) {
          correctedRequest.origin = routeValidation.correctedOrigin;
        }
        if (routeValidation.correctedDestination) {
          correctedRequest.destination = routeValidation.correctedDestination;
        }
      } else if (routeValidation.popularity === 'low') {
        issues.push({
          type: 'route',
          severity: 'warning',
          message: '–†–µ–¥–∫–∏–π –º–∞—Ä—à—Ä—É—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤',
          suggestion: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∞—ç—Ä–æ–ø–æ—Ä—Ç—ã'
        });
      }

      if (routeValidation.suggestion) {
        suggestions.push(routeValidation.suggestion);
      }
    }

    // Validate dates
    if (request.date_range) {
      const dateValidation = DateValidator.validateDateRange(request.date_range, request.destination);
      
      if (!dateValidation.valid) {
        issues.push({
          type: 'date',
          severity: 'error',
          message: dateValidation.issue || '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞',
          suggestion: dateValidation.suggestion,
          autofix: dateValidation.issue === 'too_soon'
        });

        // Auto-fix date issues if possible
        if (dateValidation.issue === 'too_soon') {
          const tomorrow = new Date();
          tomorrow.setDate(tomorrow.getDate() + 3);
          const endDate = new Date(tomorrow);
          endDate.setDate(endDate.getDate() + 7);
          
          correctedRequest.date_range = `${tomorrow.toISOString().split('T')[0]},${endDate.toISOString().split('T')[0]}`;
        }
      } else if (dateValidation.warning) {
        issues.push({
          type: 'date',
          severity: 'warning',
          message: dateValidation.warning,
          suggestion: dateValidation.suggestion
        });
      }

      if (dateValidation.suggestion) {
        suggestions.push(dateValidation.suggestion);
      }
    }

    // Validate other parameters
    this.validateOtherParameters(request, issues, suggestions);

    const isValid = issues.every(issue => issue.severity !== 'error');

    return {
      valid: isValid,
      correctedRequest: isValid ? undefined : correctedRequest,
      issues,
      suggestions
    };
  }

  /**
   * Enrich route-specific context
   */
  private static async enrichRouteContext(
    origin: string, 
    destination: string, 
    enrichment: ContextEnrichment
  ): Promise<void> {
    const routeValidation = RouteValidator.validateRoute(origin, destination);
    
    enrichment.routePopularity = routeValidation.popularity || 'medium';
    enrichment.timezoneDiff = routeValidation.timezoneDiff || 0;

    // Get route-specific insights
    const popularity = SimpleDataProvider.getRoutePopularity(origin, destination);
    
    if (popularity >= 8) {
      enrichment.suggestions.push('–ü–æ–ø—É–ª—è—Ä–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–Ω–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
    } else if (popularity <= 4) {
      enrichment.suggestions.push('–†–µ–¥–∫–∏–π –º–∞—Ä—à—Ä—É—Ç - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö —Ä–µ–π—Å–æ–≤');
    }

    // Timezone suggestions
    if (Math.abs(enrichment.timezoneDiff) >= 6) {
      enrichment.suggestions.push('–ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤–æ –≤—Ä–µ–º–µ–Ω–∏ - —É—á—Ç–∏—Ç–µ –¥–∂–µ—Ç–ª–∞–≥');
    }

    // City-specific context
    const originInfo = RouteValidator.getCityInfo(origin);
    const destinationInfo = RouteValidator.getCityInfo(destination);

    if (destinationInfo) {
      // Add destination tips
      const tips = SimpleDataProvider.getDestinationTips(destinationInfo.country);
      enrichment.suggestions.push(...tips.slice(0, 2)); // Add first 2 tips

      // Travel advisory
      const advisory = SimpleDataProvider.getTravelAdvisory(destinationInfo.country);
      if (advisory.level !== 'green') {
        enrichment.warnings.push(`–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: ${advisory.level} - ${advisory.description}`);
      }
    }
  }

  /**
   * Enrich date-specific context
   */
  private static async enrichDateContext(
    dateRange: string, 
    destination: string | undefined, 
    enrichment: ContextEnrichment
  ): Promise<void> {
    try {
      const [startDateStr] = dateRange.split(',');
      const startDate = new Date(startDateStr);

      // Get seasonal context
      enrichment.seasonal = SimpleDataProvider.getSeasonalContext(startDate);

      // Check holidays
      const dateStr = startDate.toISOString().split('T')[0];
      enrichment.holidays = SimpleDataProvider.isHoliday(dateStr, 'RU');

      // Add destination country holidays
      if (destination) {
        const cityInfo = RouteValidator.getCityInfo(destination);
        if (cityInfo && SimpleDataProvider.isHoliday(dateStr, cityInfo.country)) {
          enrichment.holidays = true;
          enrichment.suggestions.push(`${dateStr} - –ø—Ä–∞–∑–¥–Ω–∏–∫ –≤ ${cityInfo.name}`);
        }
      }

      // School holidays check
      const schoolHoliday = SimpleDataProvider.isSchoolHoliday(startDate);
      if (schoolHoliday.isHoliday) {
        enrichment.suggestions.push(`–®–∫–æ–ª—å–Ω—ã–µ –∫–∞–Ω–∏–∫—É–ª—ã: ${schoolHoliday.holidayName}`);
      }

      // Weekend check
      if (SimpleDataProvider.isWeekend(startDate)) {
        enrichment.suggestions.push('–í—ã–ª–µ—Ç –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –¥–µ–Ω—å - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω');
      }

      // Booking recommendations
      const bookingRec = SimpleDataProvider.getBookingRecommendations(startDate);
      if (bookingRec.urgency === 'high') {
        enrichment.warnings.push(bookingRec.reason);
      } else {
        enrichment.suggestions.push(bookingRec.recommendation + ': ' + bookingRec.reason);
      }

      // Price multiplier context
      if (destination) {
        const cityInfo = RouteValidator.getCityInfo(destination);
        const priceContext = SimpleDataProvider.getPriceMultiplier(
          startDate, 
          'MOW', // Default origin for calculation
          destination, 
          cityInfo?.country
        );

        if (priceContext.multiplier > 1.15) {
          enrichment.warnings.push(`–û–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω: ${priceContext.factors.join(', ')}`);
        } else if (priceContext.multiplier < 0.9) {
          enrichment.suggestions.push(`–í—ã–≥–æ–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥: ${priceContext.factors.join(', ')}`);
        }
      }

    } catch (error) {
      enrichment.warnings.push('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—ã');
    }
  }

  /**
   * Enrich general travel context
   */
  private static async enrichTravelContext(
    request: EmailGenerationRequest, 
    enrichment: ContextEnrichment
  ): Promise<void> {
    // Campaign type specific suggestions
    switch (request.campaign_type) {
      case 'promotional':
        enrichment.suggestions.push('–ê–∫—Ü–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –≤—ã–≥–æ–¥–µ –∏ —Å–∫–∏–¥–∫–∞—Ö');
        break;
      case 'seasonal':
        enrichment.suggestions.push('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –º–æ—Ç–∏–≤—ã –≤ –¥–∏–∑–∞–π–Ω–µ');
        break;
      case 'informational':
        enrichment.suggestions.push('–§–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç–∞—Ö');
        break;
    }

    // Cabin class suggestions
    if (request.cabin_class === 'business' || request.cabin_class === 'first') {
      enrichment.suggestions.push('–ü—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª—é–∫—Å–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã');
    }

    // Target audience insights
    if (request.target_audience) {
      if (request.target_audience.includes('—Å–µ–º—å') || request.target_audience.includes('–¥–µ—Ç–∏')) {
        enrichment.suggestions.push('–°–µ–º–µ–π–Ω–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è - –¥–æ–±–∞–≤—å—Ç–µ –¥–µ—Ç—Å–∫–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
      }
      if (request.target_audience.includes('–±–∏–∑–Ω–µ—Å')) {
        enrichment.suggestions.push('–ë–∏–∑–Ω–µ—Å-–∞—É–¥–∏—Ç–æ—Ä–∏—è - —Ñ–æ–∫—É—Å –Ω–∞ –∫–æ–º—Ñ–æ—Ä—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏');
      }
    }
  }

  /**
   * Generate smart contextual suggestions
   */
  private static generateSmartSuggestions(
    request: EmailGenerationRequest, 
    enrichment: ContextEnrichment
  ): void {
    // Seasonal marketing suggestions
    switch (enrichment.seasonal.season) {
      case 'spring':
        enrichment.suggestions.push('–í–µ—Å–µ–Ω–Ω—è—è —Ç–µ–º–∞—Ç–∏–∫–∞ - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ, –ø–µ—Ä–≤—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≥–æ–¥–∞');
        break;
      case 'summer':
        enrichment.suggestions.push('–õ–µ—Ç–Ω–∏–µ –º–æ—Ç–∏–≤—ã - –æ—Ç–ø—É—Å–∫, –º–æ—Ä–µ, —Å–æ–ª–Ω—Ü–µ');
        break;
      case 'autumn':
        enrichment.suggestions.push('–û—Å–µ–Ω–Ω–∏–µ –∫—Ä–∞—Å–∫–∏ - —É—é—Ç–Ω—ã–µ –≥–æ—Ä–æ–¥–∞, –º—É–∑–µ–∏');
        break;
      case 'winter':
        enrichment.suggestions.push('–ó–∏–º–Ω—è—è –º–∞–≥–∏—è - –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã, –≥–æ—Ä—ã');
        break;
    }

    // Route-specific marketing angles
    if (enrichment.routePopularity === 'high') {
      enrichment.suggestions.push('–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–π—Ç–µ –æ—â—É—â–µ–Ω–∏–µ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ—Å—Ç–∏');
    } else if (enrichment.routePopularity === 'low') {
      enrichment.suggestions.push('–ù–µ–æ–±—ã—á–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –ø–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å');
    }

    // Price-focused suggestions based on seasonal factor
    if (enrichment.seasonal.priceFactor > 1.2) {
      enrichment.suggestions.push('–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω - —Ñ–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ, –∞ –Ω–µ –Ω–∞ —Ü–µ–Ω–µ');
    } else if (enrichment.seasonal.priceFactor < 0.9) {
      enrichment.suggestions.push('–í—ã–≥–æ–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –∞–∫—Ü–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç–∫–æ–Ω–æ–º–∏—é');
    }

    // Holiday-specific suggestions
    if (enrichment.holidays) {
      enrichment.suggestions.push('–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–∞—Ç—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–∑–¥–Ω–∏—á–Ω—É—é —Ç–µ–º–∞—Ç–∏–∫—É');
    }
  }

  /**
   * Validate other request parameters
   */
  private static validateOtherParameters(
    request: EmailGenerationRequest, 
    issues: ValidationIssue[], 
    suggestions: string[]
  ): void {
    // Topic validation
    if (!request.topic || request.topic.trim().length < 3) {
      issues.push({
        type: 'parameter',
        severity: 'error',
        message: '–¢–µ–º–∞ –ø–∏—Å—å–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è',
        suggestion: '–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—É—é —Ç–µ–º—É (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)'
      });
    } else if (request.topic.length > 100) {
      issues.push({
        type: 'parameter',
        severity: 'warning',
        message: '–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è —Ç–µ–º–∞',
        suggestion: '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ —Ç–µ–º—É –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏'
      });
    }

    // Check for common topic issues
    if (request.topic.toLowerCase().includes('test') || request.topic.toLowerCase().includes('—Ç–µ—Å—Ç')) {
      issues.push({
        type: 'parameter',
        severity: 'warning',
        message: '–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞',
        suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –Ω–µ —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç'
      });
    }

    // Cabin class validation
    if (request.cabin_class && !['economy', 'business', 'first'].includes(request.cabin_class)) {
      issues.push({
        type: 'parameter',
        severity: 'error',
        message: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è',
        suggestion: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: economy, business, –∏–ª–∏ first'
      });
    }

    // Target audience suggestions
    if (!request.target_audience) {
      suggestions.push('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
    }
  }

  /**
   * Get enrichment summary for logging
   */
  static getEnrichmentSummary(enrichment: ContextEnrichment): string {
    const summary = [
      `–°–µ–∑–æ–Ω: ${enrichment.seasonal.season} (—Ñ–∞–∫—Ç–æ—Ä: ${enrichment.seasonal.priceFactor})`,
      `–ü–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞: ${enrichment.routePopularity}`,
      `–†–∞–∑–Ω–∏—Ü–∞ –≤ —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö: ${enrichment.timezoneDiff}—á`,
      `–ü—Ä–∞–∑–¥–Ω–∏–∫–∏: ${enrichment.holidays ? '–¥–∞' : '–Ω–µ—Ç'}`,
      `–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${enrichment.suggestions.length}`,
      `–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${enrichment.warnings.length}`
    ];

    return summary.join(', ');
  }

  /**
   * Format enrichment for prompt injection
   */
  static formatForPrompt(enrichment: ContextEnrichment): string {
    const sections: string[] = [];

    // Seasonal context
    sections.push(`–°–ï–ó–û–ù–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢: ${enrichment.seasonal.description}`);

    // Route context
    if (enrichment.routePopularity !== 'medium') {
      sections.push(`–ú–ê–†–®–†–£–¢: ${enrichment.routePopularity === 'high' ? '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' : '–†–µ–¥–∫–∏–π –º–∞—Ä—à—Ä—É—Ç'}`);
    }

    // Holiday context
    if (enrichment.holidays) {
      sections.push('–ü–†–ê–ó–î–ù–ò–ö–ò: –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - —É—á—Ç–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —Å–ø—Ä–æ—Å');
    }

    // Key suggestions
    if (enrichment.suggestions.length > 0) {
      sections.push(`–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò: ${enrichment.suggestions.slice(0, 3).join('; ')}`);
    }

    // Important warnings
    if (enrichment.warnings.length > 0) {
      sections.push(`–í–ê–ñ–ù–û: ${enrichment.warnings.join('; ')}`);
    }

    return sections.join('\n');
  }
}