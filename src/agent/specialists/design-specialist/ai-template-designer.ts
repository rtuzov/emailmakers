/**
 * AI Template Designer
 * AI-powered template design generation before MJML coding
 */

import { tool, Agent, run } from '@openai/agents';
import { z } from 'zod';
import { promises as fs } from 'fs';
import path from 'path';
import { buildDesignContext } from './design-context';
import { TemplateDesign } from './types';

/**
 * AI Template Design Sub-Agent
 * Uses OpenAI Agents SDK patterns for AI generation
 */
const templateDesignAgent = new Agent({
  name: 'Template Design AI',
  instructions: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ email –¥–∏–∑–∞–π–Ω—É –∏ –≤–µ—Ä—Å—Ç–∫–µ. –°–æ–∑–¥–∞–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ email —à–∞–±–ª–æ–Ω—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω email —à–∞–±–ª–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
- template_id, template_name, description
- target_audience, visual_concept
- layout (type, max_width, sections_count, visual_hierarchy, spacing_system)
- sections (–º–∞—Å—Å–∏–≤ —Å header, hero, content, cta, footer)
- components (–∫–Ω–æ–ø–∫–∏, –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç.–¥.)
- responsive (breakpoints —Å adjustments)
- accessibility (alt_texts, color_contrast, font_sizes)
- email_client_optimizations (outlook, gmail, apple_mail)
- performance (size targets, optimization)

–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞.`,
  model: 'gpt-4o-mini'
});

/**
 * Generate AI-powered template design using sub-agent
 */
async function generateAITemplateDesign(params: {
  contentContext: any;
  designBrief: any;
  assetManifest: any;
  techSpec: any;
  designRequirements: any;
}): Promise<TemplateDesign> {
  const { contentContext, designBrief, assetManifest, techSpec, designRequirements } = params;
  
  // Extract content for AI analysis - use proper paths for all data
  const subject = contentContext.generated_content?.subject || contentContext.subject;
  const body = contentContext.generated_content?.body || contentContext.body;
  const preheader = contentContext.generated_content?.preheader;
  
  // Extract pricing information from multiple possible sources
  const pricingData = contentContext.pricing_analysis || contentContext.pricing || contentContext.generated_content?.pricing;
  const bestPrice = pricingData?.best_price || pricingData?.min_price;
  const currency = pricingData?.currency || 'RUB';
  const formattedPrice = bestPrice ? `${bestPrice} ${currency}` : '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É';
  
  // Extract CTA from content
  const ctaData = contentContext.generated_content?.cta;
  const primaryCTA = ctaData?.primary || '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å';
  const secondaryCTA = ctaData?.secondary || '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ';
  
  // Extract dates
  const dateAnalysis = contentContext.date_analysis;
  const optimalDates = dateAnalysis?.optimal_dates || [];
  const formattedDates = optimalDates.slice(0, 3).join(', ');
  
  // Extract destination info
  const destination = contentContext.context_analysis?.destination || dateAnalysis?.destination || '–º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è';
  
  // Extract brand colors with fallbacks
  const primaryColor = designBrief.design_requirements?.primary_color || 
                      designBrief.brand_colors?.primary || 
                      '#4BFF7E';
  const accentColor = designBrief.design_requirements?.accent_color || 
                     designBrief.brand_colors?.accent || 
                     '#FF6240';
  const backgroundColor = designBrief.design_requirements?.background_color || 
                         designBrief.brand_colors?.background || 
                         '#EDEFFF';
  
  // Extract assets information - handle both local and external assets properly
  const images = Array.isArray(assetManifest?.images) ? assetManifest.images : [];
  const icons = Array.isArray(assetManifest?.icons) ? assetManifest.icons : [];
  const allAssets = [...images, ...icons];
  
  console.log(`üîç Processing assets: ${images.length} images, ${icons.length} icons`);
  
  // Separate local and external images
  const localImages = images.filter((img: any) => !img.isExternal);
  const externalImages = images.filter((img: any) => img.isExternal);
  const totalImages = images.length;
  
  console.log(`üìä Asset breakdown: ${localImages.length} local, ${externalImages.length} external images`);
  
  // Find specific assets for template - prioritize external images for hero
  const heroAsset = externalImages[0] || localImages[0] || images[0];
  
  // Use remaining images for content sections
  const contentAssets = [
    ...externalImages.slice(1),  // Use external images first
    ...localImages.slice(heroAsset === localImages[0] ? 1 : 0)  // Then local images
  ].slice(0, 3);
  
  console.log(`üéØ Selected hero asset: ${heroAsset?.filename || 'none'} (external: ${heroAsset?.isExternal})`);
  console.log(`üì∑ Content assets: ${contentAssets.length} selected`);

  const templateDesignPrompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Å–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω email —à–∞–±–ª–æ–Ω–∞, –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –∫–∞–º–ø–∞–Ω–∏–∏.

üß† –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê:

üìß –ö–û–ù–¢–ï–ö–°–¢ –ö–ê–ú–ü–ê–ù–ò–ò:
–¢–µ–º–∞: ${subject}
Preheader: ${preheader}
–ö–æ–Ω—Ç–µ–Ω—Ç: ${body?.substring(0, 500)}...
–¶–µ–Ω–∞: ${formattedPrice}
–î–∞—Ç—ã: ${formattedDates}
–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${destination}
–û—Å–Ω–æ–≤–Ω–æ–π CTA: ${primaryCTA}
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π CTA: ${secondaryCTA}

üé® –ë–ê–ó–û–í–´–ï –¶–í–ï–¢–ê –ë–†–ï–ù–î–ê (–º–æ–∂–µ—à—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å):
–û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç: ${primaryColor}
–ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç: ${accentColor}
–§–æ–Ω: ${backgroundColor}
–°—Ç–∏–ª—å: ${designBrief.visual_style || 'modern'}

üñºÔ∏è –î–û–°–¢–£–ü–ù–´–ï –†–ï–°–£–†–°–´:
–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalImages}
–õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${localImages.length}
–í–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: ${externalImages.length}
–ò–∫–æ–Ω–∫–∏: ${icons.length}

Hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${heroAsset?.filename || '–Ω–µ –Ω–∞–π–¥–µ–Ω–æ'} 
- –ü—É—Ç—å: ${heroAsset?.path || heroAsset?.url || 'placeholder.jpg'}
- –û–ø–∏—Å–∞–Ω–∏–µ: ${heroAsset?.alt_text || heroAsset?.description || 'Hero image'}
- –í–Ω–µ—à–Ω–µ–µ: ${heroAsset?.isExternal ? '–¥–∞' : '–Ω–µ—Ç'}

–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (${contentAssets.length}):
${contentAssets.map((asset, i) => 
  `${i+1}. ${asset.filename} - ${asset.alt_text || asset.description} (–≤–Ω–µ—à–Ω–µ–µ: ${asset.isExternal ? '–¥–∞' : '–Ω–µ—Ç'})`
).join('\n')}

üì± –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞: ${techSpec.specification?.design?.constraints?.layout?.maxWidth || 600}px
Email –∫–ª–∏–µ–Ω—Ç—ã: ${techSpec.specification?.delivery?.emailClients?.map((c: any) => c.client).join(', ') || 'gmail, outlook, apple-mail'}

üéØ –ó–ê–î–ê–ß–ê: –°–û–ó–î–ê–ô –ê–î–ê–ü–¢–ò–í–ù–´–ô –î–ò–ó–ê–ô–ù

1. –ê–ù–ê–õ–ò–ó–ò–†–£–ô –ö–û–ù–¢–ï–ù–¢:
   - –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º–∞—Ç–∏–∫—É (–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –±–∏–∑–Ω–µ—Å, –∞–∫—Ü–∏–∏, –ø—Ä–µ–º–∏—É–º)
   - –û—Ü–µ–Ω–∏ —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å—Ä–æ—á–Ω—ã–π)
   - –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
   - –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –ø–æ —Å—Ç–∏–ª—é —Ç–µ–∫—Å—Ç–∞

2. –ü–û–î–ë–ï–†–ò –¶–í–ï–¢–û–í–£–Æ –°–•–ï–ú–£:
   - –î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π: —Ç–µ–ø–ª—ã–µ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ —Ö–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ç–æ–Ω–∞
   - –î–ª—è –±–∏–∑–Ω–µ—Å–∞: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–Ω–∏–µ, —Å–µ—Ä—ã–µ, –±–µ–ª—ã–µ
   - –î–ª—è –∞–∫—Ü–∏–π: —è—Ä–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
   - –î–ª—è –ø—Ä–µ–º–∏—É–º: —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º–Ω—ã–µ —Å –∑–æ–ª–æ—Ç—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏
   - –ê–¥–∞–ø—Ç–∏—Ä—É–π –±–∞–∑–æ–≤—ã–µ —Ü–≤–µ—Ç–∞ –±—Ä–µ–Ω–¥–∞ –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç

3. –û–ü–†–ï–î–ï–õ–ò –°–¢–†–£–ö–¢–£–†–£:
   - –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (5-6 —Å–µ–∫—Ü–∏–π)
   - –î–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (8-10 —Å–µ–∫—Ü–∏–π)
   - –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏ (–ø—Ä–æ–º–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è, —Å–µ–∑–æ–Ω–Ω–∞—è)

4. –í–´–ë–ï–†–ò –¢–ò–ü–û–ì–†–ê–§–ò–ö–£:
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏: —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏
   - –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏
   - –≠–º–æ–¥–∑–∏: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ–º–∞—Ç–∏–∫–µ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏

–í–ê–ñ–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏–∑ —Å–ø–∏—Å–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ –≤—ã—à–µ
2. –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π URL (–ø–æ–ª–µ path/url)
3. –î–ª—è –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
4. –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–£–Æ —Ü–µ–Ω—É: ${formattedPrice}
5. –ò—Å–ø–æ–ª—å–∑—É–π –†–ï–ê–õ–¨–ù–´–ï CTA –∫–Ω–æ–ø–∫–∏: "${primaryCTA}" –∏ "${secondaryCTA}"
6. –í–∫–ª—é—á–∏ —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã: ${formattedDates}
7. –ê–î–ê–ü–¢–ò–†–£–ô –¥–∏–∑–∞–π–Ω –ø–æ–¥ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞

{
  "template_id": "autumn_${destination.toLowerCase()}_campaign",
  "template_name": "${subject}",
  "description": "Email —à–∞–±–ª–æ–Ω –¥–ª—è ${destination} –∫–∞–º–ø–∞–Ω–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞—Å—Å–µ—Ç–∞–º–∏ –∏ —Ü–µ–Ω–∞–º–∏",
  "target_audience": "${contentContext.campaign?.target_audience || '–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏'}",
  "visual_concept": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ ${destination} –∏ –æ—Å–µ–Ω–Ω–∏–π –æ—Ç–¥—ã—Ö",
  
  "layout": {
    "type": "single-column",
    "max_width": 600,
    "sections_count": 5,
    "visual_hierarchy": "Hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –∫–æ–Ω—Ç–µ–Ω—Ç ‚Üí —Ü–µ–Ω—ã ‚Üí CTA ‚Üí footer",
    "spacing_system": {
      "section_padding": "20px",
      "content_padding": "15px",
      "element_margin": "10px"
    }
  },
  
  "sections": [
    {
      "id": "header",
      "type": "header",
      "position": 1,
      "content": {
        "logo": {
          "required": true,
          "position": "center",
          "size": "medium"
        }
      },
      "styling": {
        "background_color": "#ffffff",
        "padding": "20px"
      }
    },
    {
      "id": "hero",
      "type": "hero", 
      "position": 2,
      "content": {
        "headline": "${subject}",
        "subheadline": "${preheader}",
        "hero_image": {
          "required": true,
          "source": "${heroAsset?.isExternal ? 'external' : 'local'}",
          "position": "background",
          "size": "full-width",
          "asset_file": "${heroAsset?.path || heroAsset?.url || 'placeholder.jpg'}",
          "alt_text": "${heroAsset?.alt_text || heroAsset?.description || 'Hero image'}"
        },
        "cta_button": {
          "text": "${primaryCTA}",
          "style": "primary",
          "position": "center"
        }
      },
      "styling": {
        "background_color": "${backgroundColor}",
        "text_color": "#333333",
        "padding": "40px 20px",
        "text_align": "center"
      }
    },
    {
      "id": "content",
      "type": "content",
      "position": 3,
      "content": {
        "text_blocks": [
          {
            "type": "paragraph",
            "content": "${body?.substring(0, 200)}...",
            "styling": "body-text"
          }
        ],
        "images": {
          "count": ${contentAssets.length},
          "layout": "grid",
          "sources": [${contentAssets.map(a => `"${a.isExternal ? 'external' : 'local'}"`).join(', ')}],
          "asset_files": [
            ${contentAssets.map(asset => 
              `{
                "file": "${asset.path || asset.url}",
                "alt_text": "${asset.alt_text || asset.description}",
                "usage": "${asset.usage || 'content'}",
                "isExternal": ${asset.isExternal || false}
              }`
            ).join(',\n            ')}
          ]
        },
        "pricing": {
          "display": true,
          "price": "${formattedPrice}",
          "dates": "${formattedDates}",
          "style": "highlight",
          "position": "center"
        }
      },
      "styling": {
        "background_color": "#ffffff",
        "padding": "30px 20px"
      }
    },
    {
      "id": "cta",
      "type": "call-to-action",
      "position": 4,
      "content": {
        "headline": "–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å!",
        "button": {
          "text": "${primaryCTA} –æ—Ç ${formattedPrice}",
          "style": "large-primary",
          "background_color": "${accentColor}",
          "text_color": "#ffffff"
        },
        "supporting_text": "–õ—É—á—à–∏–µ –¥–∞—Ç—ã: ${formattedDates}"
      },
      "styling": {
        "background_color": "${primaryColor}",
        "text_color": "#ffffff",
        "padding": "40px 20px",
        "text_align": "center"
      }
    },
    {
      "id": "footer",
      "type": "footer",
      "position": 5,
      "content": {
        "social_links": {
          "required": true,
          "platforms": ["facebook", "instagram", "twitter"]
        },
        "contact_info": {
          "required": true,
          "elements": ["address", "phone", "email"]
        },
        "unsubscribe": {
          "required": true,
          "text": "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
        }
      },
      "styling": {
        "background_color": "#f8f9fa",
        "text_color": "#666666",
        "padding": "30px 20px",
        "text_align": "center"
      }
    }
  ],
  
  "components": [
    {
      "id": "primary_button",
      "type": "button",
      "styling": {
        "background_color": "${accentColor}",
        "text_color": "#ffffff",
        "border_radius": "6px",
        "padding": "12px 24px",
        "font_weight": "600",
        "font_size": "16px"
      },
      "hover_effects": {
        "background_color": "${accentColor}dd"
      }
    },
    {
      "id": "price_card",
      "type": "card",
      "styling": {
        "background_color": "#ffffff",
        "border": "1px solid #e5e5e5",
        "border_radius": "8px",
        "padding": "20px",
        "box_shadow": "0 2px 8px rgba(0,0,0,0.1)"
      }
    }
  ],
  
  "responsive": {
    "breakpoints": [
      {
        "name": "mobile",
        "max_width": "480px",
        "adjustments": {
          "font_sizes": "—É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 2px",
          "padding": "—É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 25%",
          "images": "full-width",
          "columns": "stack vertically"
        }
      },
      {
        "name": "tablet",
        "max_width": "768px",
        "adjustments": {
          "font_sizes": "—É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 1px",
          "padding": "—É–º–µ–Ω—å—à–∏—Ç—å –Ω–∞ 15%"
        }
      }
    ]
  },
  
  "accessibility": {
    "alt_texts": "–í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω—ã–µ alt-—Ç–µ–∫—Å—Ç—ã",
    "color_contrast": "–ú–∏–Ω–∏–º—É–º 4.5:1 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
    "font_sizes": "–ú–∏–Ω–∏–º—É–º 14px –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞",
    "link_styling": "–ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫"
  },
  
  "email_client_optimizations": {
    "outlook": {
      "table_based_layout": true,
      "conditional_comments": true,
      "fallback_fonts": true
    },
    "gmail": {
      "embedded_css": true,
      "image_blocking": "—É—á—Ç–µ–Ω–æ",
      "clipping_prevention": true
    },
    "apple_mail": {
      "dark_mode_support": true,
      "retina_images": true
    }
  },
  
  "performance": {
    "total_size_target": "–ø–æ–¥ 100KB",
    "image_optimization": "WebP —Å JPEG fallback",
    "css_inlining": "–∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏–Ω–ª–∞–π–Ω",
    "loading_strategy": "–ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞"
  }
}

–í–ê–ñ–ù–û:
- –°–æ–∑–¥–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏ –ø—Ä–æ–¥—É–º–∞–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω
- –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ
- –£—á—Ç–∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ email –∫–ª–∏–µ–Ω—Ç–æ–≤
- –û–±–µ—Å–ø–µ—á—å –æ—Ç–ª–∏—á–Ω—É—é —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
- –°–¥–µ–ª–∞–π –¥–∏–∑–∞–π–Ω –∫–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω—ã–º JSON –ë–ï–ó markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
`;

  try {
    // Use OpenAI Agents SDK sub-agent for AI generation
    const result = await run(templateDesignAgent, templateDesignPrompt);
    
    // Parse JSON response
    let jsonString = result.finalOutput.trim();
    
    // Remove markdown code blocks if present
    if (jsonString.startsWith('```json')) {
      jsonString = jsonString.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    } else if (jsonString.startsWith('```')) {
      jsonString = jsonString.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }
    
    const templateDesign = JSON.parse(jsonString.trim());
    
    // Add metadata
    templateDesign.metadata = {
      generated_at: new Date().toISOString(),
      generated_by: 'AI Template Designer (OpenAI Agents SDK)',
      campaign_id: contentContext.campaign?.id,
      assets_used: {
        total_images: totalImages,
        local_images: localImages.length,
        external_images: externalImages.length,
        icons: assetManifest.icons.length
      },
      brand_colors: {
        primary: primaryColor,
        accent: accentColor,
        background: backgroundColor
      }
    };
    
    return templateDesign;

  } catch (error) {
    console.error('AI Template Design generation failed:', error);
    throw new Error(`Failed to generate AI template design: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * AI-powered template design generation tool
 */
export const generateTemplateDesign = tool({
  name: 'generateTemplateDesign',
  description: 'AI-powered template design generation - creates detailed template structure, layout, and visual hierarchy before MJML coding',
  parameters: z.object({
    content_context: z.object({}).strict().describe('Content context from Content Specialist'),
    design_requirements: z.object({}).strict().nullable().describe('Design requirements and brand guidelines'),
    trace_id: z.string().nullable().describe('Trace ID for debugging')
  }),
  execute: async (params, context) => {
    console.log('\nüé® === AI TEMPLATE DESIGNER (OpenAI Agents SDK) ===');
    
    // Load content context from OpenAI SDK context parameter - prioritize loaded context
    let contentContext;
    
    // Try to get content context from design context first (loaded by loadDesignContext)
    if (context?.designContext?.content_context) {
      contentContext = context.designContext.content_context;
      console.log('‚úÖ Using content context from design context (loaded by loadDesignContext)');
    } else if (params.content_context && Object.keys(params.content_context).length > 0) {
      contentContext = params.content_context;
      console.log('‚ö†Ô∏è Using content context from parameters (fallback)');
    } else if (context?.content_context) {
      contentContext = context.content_context;
      console.log('‚ö†Ô∏è Using content context from SDK context (fallback)');
          } else if (context?.content_context) {
        contentContext = context.content_context;
      console.log('‚ö†Ô∏è Using contentContext from SDK context (fallback)');
    } else {
      throw new Error('Content context not found in parameters or context. loadDesignContext must be called first to load campaign context.');
    }
    
    // Extract campaign path from content context or design context
    let campaignPath;
    if (contentContext.campaign?.campaignPath) {
      campaignPath = contentContext.campaign.campaignPath;
    } else if (context?.designContext?.campaign_path) {
      campaignPath = context.designContext.campaign_path;
    } else {
      throw new Error('Campaign path is missing from content context. loadDesignContext must provide valid campaign path.');
    }
    
    console.log(`üìã Campaign: ${contentContext.campaign?.id || 'unknown'}`);
    console.log(`üìÅ Campaign Path: ${campaignPath}`);
    console.log(`üéØ AI Template Design Generation using OpenAI Agents SDK`);
    console.log(`üîç Trace ID: ${params.trace_id || 'none'}`);

    try {
      // Get asset manifest from design context - REQUIRED
      const assetManifest = context?.designContext?.asset_manifest;
      
      if (!assetManifest) {
        throw new Error('Asset manifest not found in design context. processContentAssets must be completed before template design.');
      }
      
      // Load design brief and technical specification
      const designBriefPath = path.join(campaignPath, 'content', 'design-brief-from-context.json');
      const techSpecPath = path.join(campaignPath, 'docs', 'specifications', 'technical-specification.json');
      
      console.log(`üîç Looking for design brief at: ${designBriefPath}`);
      console.log(`üîç Looking for tech spec at: ${techSpecPath}`);
      
      // Check if design brief exists
      let designBrief;
      try {
        const designBriefExists = await fs.access(designBriefPath).then(() => true).catch(() => false);
        console.log(`üìã Design brief exists: ${designBriefExists}`);
        
        if (designBriefExists) {
          const designBriefContent = await fs.readFile(designBriefPath, 'utf8');
          designBrief = JSON.parse(designBriefContent);
          console.log('‚úÖ Loaded design brief from file');
        } else {
          console.log('‚ö†Ô∏è Design brief not found, creating fallback design brief');
          // Create fallback design brief
          designBrief = {
            destination_context: {
              name: contentContext.campaign?.destination || 'Thailand',
              seasonal_advantages: '–û—Å–µ–Ω–Ω–∏–π —Å–µ–∑–æ–Ω —Å –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ–π –ø–æ–≥–æ–¥–æ–π',
              emotional_appeal: '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è –∏ –æ—Ç–¥—ã—Ö',
              market_position: '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
            },
            design_requirements: {
              visual_style: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
              color_palette: '–Ø—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞ Kupibilet',
              primary_color: '#4BFF7E',
              accent_color: '#1DA857', 
              background_color: '#FFFFFF',
              text_color: '#2C3959',
              imagery_direction: '–¢—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ –ø–µ–π–∑–∞–∂–∏ –∏ –∫—É–ª—å—Ç—É—Ä–∞',
              typography_mood: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π'
            },
            content_priorities: {
              key_messages: ['–û—Ç–ª–∏—á–Ω—ã–µ —Ü–µ–Ω—ã', '–£–¥–æ–±–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'],
              emotional_triggers: ['–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '–û—Ç–¥—ã—Ö'],
              actionable_insights: ['–ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å–µ–π—á–∞—Å', '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']
            }
          };
        }
      } catch (error) {
        console.error('‚ùå Error loading design brief:', error.message);
        throw new Error(`Failed to load design brief: ${error.message}`);
      }
      
      // Check if technical specification exists
      let techSpec;
      try {
        const techSpecExists = await fs.access(techSpecPath).then(() => true).catch(() => false);
        console.log(`üìã Tech spec exists: ${techSpecExists}`);
        
        if (techSpecExists) {
          const techSpecContent = await fs.readFile(techSpecPath, 'utf8');
          techSpec = JSON.parse(techSpecContent);
          console.log('‚úÖ Loaded technical specification from file');
        } else {
          console.log('‚ö†Ô∏è Technical specification not found, creating fallback tech spec');
          // Create fallback technical specification
          techSpec = {
            email_specifications: {
              max_width: '600px',
              responsive_breakpoints: ['600px', '480px'],
              supported_clients: ['Gmail', 'Outlook', 'Apple Mail'],
              dark_mode_support: true
            },
            content_structure: {
              header: '–õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è',
              hero_section: '–ì–ª–∞–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
              content_blocks: '–î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
              cta_section: '–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é',
              footer: '–ö–æ–Ω—Ç–∞–∫—Ç—ã –∏ –æ—Ç–ø–∏—Å–∫–∞'
            },
            performance_requirements: {
              load_time: '<3 seconds',
              file_size: '<100KB',
              image_optimization: 'WebP with JPEG fallback'
            }
          };
        }
      } catch (error) {
        console.error('‚ùå Error loading technical specification:', error.message);
        throw new Error(`Failed to load technical specification: ${error.message}`);
      }
      
      console.log('‚úÖ Design brief and technical specification loaded (with fallbacks if needed)');

      // ü§ñ GENERATE TEMPLATE DESIGN WITH AI using OpenAI Agents SDK
      const templateDesign = await generateAITemplateDesign({
        contentContext,
        designBrief,
        assetManifest,
        techSpec,
        designRequirements: params.design_requirements
      });

      // Save template design to campaign
      const templateDesignPath = path.join(campaignPath, 'design', 'template-design.json');
      await fs.mkdir(path.dirname(templateDesignPath), { recursive: true });
      await fs.writeFile(templateDesignPath, JSON.stringify(templateDesign, null, 2));
      
      console.log('‚úÖ Template design saved to campaign');

      // Update design context
      const updatedDesignContext = buildDesignContext(context, {
        template_design: templateDesign,
        trace_id: params.trace_id
      });

      // Save context to context parameter (OpenAI SDK pattern)
      if (context) {
        context.designContext = updatedDesignContext;
      }

      console.log('‚úÖ AI Template Design completed successfully (OpenAI Agents SDK)');
      console.log(`üìä Sections: ${templateDesign.sections.length}`);
      console.log(`üé® Layout: ${templateDesign.layout.type}`);
      console.log(`üì± Responsive: ${templateDesign.responsive.breakpoints.length} breakpoints`);
      console.log(`üéØ Components: ${templateDesign.components.length} custom components`);

      return `AI Template Design completed successfully using OpenAI Agents SDK! Generated ${templateDesign.sections.length} sections with ${templateDesign.layout.type} layout. Responsive design with ${templateDesign.responsive.breakpoints.length} breakpoints. Created ${templateDesign.components.length} custom components. Visual hierarchy optimized for ${templateDesign.target_audience}. Design saved to: ${templateDesignPath}. Ready for MJML template generation.`;

    } catch (error) {
      console.error('‚ùå AI Template Design failed:', error);
      throw error;
    }
  }
}); 