/**
 * AI Template Designer
 * AI-powered template design generation before MJML coding
 */

import { tool, Agent, run } from '@openai/agents';
import { z } from 'zod';
import { promises as fs } from 'fs';
import * as path from 'path';
import { buildDesignContext as _buildDesignContext } from './design-context';
import { TemplateDesign } from './types';

/**
 * AI Template Design Sub-Agent
 * Uses OpenAI Agents SDK patterns for AI generation
 */
const templateDesignAgent = new Agent({
  name: 'Template Design AI',
  instructions: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ email –¥–∏–∑–∞–π–Ω—É –∏ –≤–µ—Ä—Å—Ç–∫–µ. –°–æ–∑–¥–∞–≤–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ email —à–∞–±–ª–æ–Ω—ã —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω email —à–∞–±–ª–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.

–í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å:
- template_id, template_name, description
- target_audience, visual_concept
- layout (type, max_width, sections_count, visual_hierarchy, spacing_system)
- sections (–º–∞—Å—Å–∏–≤ —Å header, hero, content, cta, footer)
- components (–∫–Ω–æ–ø–∫–∏, –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ —Ç.–¥.)
- responsive (breakpoints —Å adjustments)
- accessibility (alt_texts, color_contrast, font_sizes)
- email_client_optimizations (outlook, gmail, apple_mail)
- performance (size targets, optimization)

–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏ –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞.`,
  model: 'gpt-4o-mini'
});

/**
 * Generate AI-powered template design using sub-agent
 */
async function generateAITemplateDesign(params: {
  contentContext: any;
  designBrief: any;
  assetManifest: any;
  techSpec: any;
  emailContent: any;      // ‚úÖ Rich email content
  pricingAnalysis: any;   // ‚úÖ Real pricing data
  assetStrategy: any;     // ‚úÖ Visual direction
  dateAnalysis: any;      // ‚úÖ Timing context
  designRequirements: any;
  traceId: string;
}): Promise<TemplateDesign> {
  const { 
    contentContext, 
    designBrief, 
    assetManifest, 
    techSpec: _techSpec, 
    emailContent,
    pricingAnalysis,
    assetStrategy,
    dateAnalysis,
    designRequirements: _designRequirements,
    traceId 
  } = params;
  
  // ‚úÖ EXTRACT RICH CONTENT FROM LOADED FILES - PRIORITIZE REAL DATA
  
  // Subject and preheader from email content (rich source)
  const subject = emailContent?.subject_line?.primary || 
                 contentContext.generated_content?.subject || 
                 contentContext.subject || 
                 'Email –∫–∞–º–ø–∞–Ω–∏—è';
  
  const subjectAlternative = emailContent?.subject_line?.alternative;
  const preheader = emailContent?.preheader || contentContext.generated_content?.preheader;
  
  // Body content - use structured email content
  const headline = emailContent?.headline?.main || '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞–º–ø–∞–Ω–∏–∏';
  const subheadline = emailContent?.headline?.subheadline;
  const openingText = emailContent?.body?.opening;
  const mainContent = emailContent?.body?.main_content;
  const benefits = emailContent?.body?.benefits || [];
  const socialProof = emailContent?.body?.social_proof;
  const urgencyElements = emailContent?.body?.urgency_elements;
  const closingText = emailContent?.body?.closing;
  
  // ‚úÖ EXTRACT REAL PRICING DATA
  const bestOfferPrice = pricingAnalysis?.overall_analysis?.best_offer?.price;
  const cheapestPrice = pricingAnalysis?.overall_analysis?.price_range?.min;
  const currency = pricingAnalysis?.overall_analysis?.currency || 'RUB';
  const realPrice = bestOfferPrice || cheapestPrice || pricingAnalysis?.optimal_dates_pricing?.cheapest_on_optimal;
  const formattedPrice = realPrice ? `${realPrice.toLocaleString('ru-RU')} ${currency}` : '–¶–µ–Ω–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É';
  
  // ‚úÖ EXTRACT CTA FROM EMAIL CONTENT
  const primaryCTA = emailContent?.call_to_action?.primary?.text || '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å';
  const secondaryCTA = emailContent?.call_to_action?.secondary?.text || '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ';
  
  // ‚úÖ EXTRACT DATES AND TIMING
  const optimalDates = dateAnalysis?.optimal_dates || pricingAnalysis?.date_analysis_source?.optimal_dates || [];
  const formattedDates = optimalDates.slice(0, 3).join(', ');
  const seasonalInfo = dateAnalysis?.seasonal_factors || pricingAnalysis?.date_analysis_source?.seasonal_factors;
  
  // ‚úÖ EXTRACT DESTINATION INFO
  const destination = dateAnalysis?.destination || 
                     pricingAnalysis?.destination || 
                     contentContext.context_analysis?.destination || 
                     '–º–µ—Å—Ç–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è';
  
  // ‚úÖ EXTRACT EMOTIONAL HOOKS AND TRIGGERS
  const emotionalHooks = emailContent?.emotional_hooks || {};
  // Reconstruct body for backward compatibility
  
  // ‚úÖ EXTRACT BRAND COLORS FROM ASSET STRATEGY (RICH SOURCE)
  const primaryColor = assetStrategy?.visual_direction?.color_palette?.primary ||
                      designBrief.design_requirements?.primary_color || 
                      designBrief.brand_colors?.primary || 
                      '#4BFF7E';
  const accentColor = assetStrategy?.visual_direction?.color_palette?.secondary ||
                     assetStrategy?.visual_direction?.color_palette?.accent ||
                     designBrief.design_requirements?.accent_color || 
                     designBrief.brand_colors?.accent || 
                     '#FF6240';
  const backgroundColor = assetStrategy?.visual_direction?.color_palette?.background ||
                         designBrief.design_requirements?.background_color || 
                         designBrief.brand_colors?.background || 
                         '#EDEFFF';
                         
  // ‚úÖ EXTRACT VISUAL STYLE FROM ASSET STRATEGY
  const visualStyle = assetStrategy?.visual_direction?.primary_style || 
                     assetStrategy?.visual_direction?.mood ||
                     designBrief.visual_style || 
                     'modern';
  
  // Extract assets information - handle both local and external assets properly
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã assetManifest
  const images = Array.isArray(assetManifest?.assetManifest?.images) ? assetManifest.assetManifest.images : [];
  const icons = Array.isArray(assetManifest?.assetManifest?.icons) ? assetManifest.assetManifest.icons : [];
  // const _allAssets = [...images, ...icons];
  
  console.log(`üîç Processing assets: ${images.length} images, ${icons.length} icons`);
  console.log(`üìä Asset manifest structure:`, {
    hasAssetManifest: !!assetManifest,
    hasNestedManifest: !!assetManifest?.assetManifest,
    manifestKeys: assetManifest ? Object.keys(assetManifest) : [],
    nestedKeys: assetManifest?.assetManifest ? Object.keys(assetManifest.assetManifest) : []
  });
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤
  // Separate local and external images with safe array operations
  const localImages = Array.isArray(images) ? images.filter((img: any) => !img.isExternal) : [];
  const externalImages = Array.isArray(images) ? images.filter((img: any) => img.isExternal) : [];
  const totalImages = images.length;
  
  console.log(`üìä Asset breakdown: ${localImages.length} local, ${externalImages.length} external images`);
  
  // Find specific assets for template - prioritize external images for hero
  const heroAsset = externalImages[0] || localImages[0] || images[0];
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ contentAssets —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
  // Use remaining images for content sections
  const contentAssets = [
    ...(Array.isArray(externalImages) ? externalImages.slice(1) : []),  // Use external images first
    ...(Array.isArray(localImages) ? localImages.slice(heroAsset === localImages[0] ? 1 : 0) : [])  // Then local images
  ].slice(0, 3);
  
  // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ contentAssets —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º
  const safeContentAssets = Array.isArray(contentAssets) ? contentAssets : [];
  
  console.log(`üéØ Selected hero asset: ${heroAsset?.filename || 'REQUIRED'} (external: ${heroAsset?.isExternal})`);
  console.log(`üì∑ Content assets: ${safeContentAssets.length} selected`);

  const templateDesignPrompt = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏–∑–∞–π–Ω—É email-–∫–∞–º–ø–∞–Ω–∏–π. –°–æ–∑–¥–∞–π –î–ï–¢–ê–õ–¨–ù–´–ô –∏ –ö–û–ù–ö–†–ï–¢–ù–´–ô –¥–∏–∑–∞–π–Ω-–ø–ª–∞–Ω email —à–∞–±–ª–æ–Ω–∞ –∫–∞–∫ –ò–ù–°–¢–†–£–ö–¶–ò–Ø –î–õ–Ø JUNIOR –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê.

üîç === –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ú–ü–ê–ù–ò–ò ===

üìß –û–°–ù–û–í–ù–´–ï –î–ê–ù–ù–´–ï –ö–ê–ú–ü–ê–ù–ò–ò:
‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞: "${subject}"
‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ç–µ–º–∞: "${subjectAlternative || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}"
‚Ä¢ Preheader: "${preheader || '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
‚Ä¢ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${destination}
‚Ä¢ –†–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: ${formattedPrice}
‚Ä¢ –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã: ${formattedDates || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}

üéØ –°–¢–†–£–ö–¢–£–†–ò–†–û–í–ê–ù–ù–´–ô –ö–û–ù–¢–ï–ù–¢:
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${headline}"
‚Ä¢ –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: "${subheadline || '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
‚Ä¢ –¢–µ–∫—Å—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è: "${openingText || '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç: "${mainContent || '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ (${benefits.length}): ${benefits.map((b: string) => `"${b}"`).join(', ')}
‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω–æ–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ: "${socialProof || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}"
‚Ä¢ –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ä–æ—á–Ω–æ—Å—Ç–∏: "${urgencyElements || '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}"
‚Ä¢ –¢–µ–∫—Å—Ç –∑–∞–∫—Ä—ã—Ç–∏—è: "${closingText || '–Ω–µ —É–∫–∞–∑–∞–Ω'}"

üé® –í–ò–ó–£–ê–õ–¨–ù–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø:
‚Ä¢ –°—Ç–∏–ª—å: "${visualStyle}"
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: "${assetStrategy?.visual_direction?.mood || 'REQUIRED'}"
‚Ä¢ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç: ${primaryColor}
‚Ä¢ –ê–∫—Ü–µ–Ω—Ç–Ω—ã–π —Ü–≤–µ—Ç: ${accentColor}  
‚Ä¢ –§–æ–Ω: ${backgroundColor}
‚Ä¢ –¢–∏–ø—ã –∞—Å—Å–µ—Ç–æ–≤: ${assetStrategy?.asset_types?.map((a: any) => a.type).join(', ') || 'REQUIRED'}

üñºÔ∏è –î–û–°–¢–£–ü–ù–´–ï –ê–°–°–ï–¢–´ (–¢–û–ß–ù–´–ï –ü–£–¢–ò):
–í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${totalImages} | –õ–æ–∫–∞–ª—å–Ω—ã—Ö: ${localImages.length} | –í–Ω–µ—à–Ω–∏—Ö: ${externalImages.length} | –ò–∫–æ–Ω–æ–∫: ${icons.length}

HERO –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ï:
- –§–∞–π–ª: ${heroAsset?.filename || 'REQUIRED'}
- –ü—É—Ç—å: ${heroAsset?.path || heroAsset?.url || 'REQUIRED'}
- –û–ø–∏—Å–∞–Ω–∏–µ: "${heroAsset?.alt_text || heroAsset?.description || 'REQUIRED'}"
- –¢–∏–ø: ${heroAsset?.isExternal ? '–í–Ω–µ—à–Ω–µ–µ (–∏—Å–ø–æ–ª—å–∑—É–π URL)' : '–õ–æ–∫–∞–ª—å–Ω–æ–µ (–∏—Å–ø–æ–ª—å–∑—É–π –ø—É—Ç—å)'}

–ö–û–ù–¢–ï–ù–¢–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø:
${safeContentAssets.map((asset, i) => 
  `${i+1}. ${asset.filename || 'unnamed'}
     –ü—É—Ç—å: ${asset.path || asset.url || 'REQUIRED'}
     –û–ø–∏—Å–∞–Ω–∏–µ: "${asset.alt_text || asset.description || 'REQUIRED'}"
     –¢–∏–ø: ${asset.isExternal ? '–í–Ω–µ—à–Ω–µ–µ' : '–õ–æ–∫–∞–ª—å–Ω–æ–µ'}`
).join('\n')}

‚ö° –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´:
${Object.keys(emotionalHooks).length > 0 ? 
  Object.entries(emotionalHooks).map(([key, value]) => `‚Ä¢ ${key}: ${value}`).join('\n') : 
  '‚Ä¢ REQUIRED EMOTIONAL TRIGGERS'}

üìÖ –°–ï–ó–û–ù–ù–´–ô –ö–û–ù–¢–ï–ö–°–¢:
${seasonalInfo || 'REQUIRED SEASONAL INFO'}

üéØ –ó–ê–î–ê–ß–ê: –°–û–ó–î–ê–ô –î–ï–¢–ê–õ–¨–ù–£–Æ –ò–ù–°–¢–†–£–ö–¶–ò–Æ –î–õ–Ø JUNIOR –†–ê–ó–†–ê–ë–û–¢–ß–ò–ö–ê

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–ò:
1. **–¢–û–ß–ù–´–ï –†–ê–ó–ú–ï–†–´**: –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –≤ –ø–∏–∫—Å–µ–ª—è—Ö –¥–ª—è –ö–ê–ñ–î–û–ì–û —ç–ª–µ–º–µ–Ω—Ç–∞
2. **–¢–û–ß–ù–´–ï –ü–û–ó–ò–¶–ò–ò**: –û–ø–∏—à–∏ –≥–¥–µ –ò–ú–ï–ù–ù–û —Ä–∞—Å–ø–æ–ª–∞–≥–∞—Ç—å –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç
3. **–¢–û–ß–ù–´–ï –¶–í–ï–¢–ê**: –ò—Å–ø–æ–ª—å–∑—É–π HEX –∫–æ–¥—ã –¥–ª—è –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤
4. **–¢–û–ß–ù–´–ï –®–†–ò–§–¢–´**: –£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã —à—Ä–∏—Ñ—Ç–æ–≤ –∏ –≤–µ—Å–∞
5. **–¢–û–ß–ù–´–ï –ê–°–°–ï–¢–´**: –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï –ø—É—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ
6. **–¢–û–ß–ù–´–ï –û–¢–°–¢–£–ü–´**: –£–∫–∞–∂–∏ padding –∏ margin –≤ –ø–∏–∫—Å–µ–ª—è—Ö
7. **–¢–û–ß–ù–´–ô –ö–û–ù–¢–ï–ù–¢**: –ò—Å–ø–æ–ª—å–∑—É–π –í–ï–°–¨ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π

–°–¢–†–£–ö–¢–£–†–ê –û–¢–í–ï–¢–ê:
1. –û–ü–†–ï–î–ï–õ–ò —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏ (–ø—Ä–æ–º–æ/–∏–Ω—Ñ–æ/–ø—Ä–µ–º–∏—É–º/—Å—Ä–æ—á–Ω–æ—Å—Ç—å)
2. –í–´–ë–ï–†–ò —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É –ø–æ–¥ —Ç–µ–º–∞—Ç–∏–∫—É
3. –°–û–ó–î–ê–ô –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–µ–∫—Ü–∏–π (7-10 —Å–µ–∫—Ü–∏–π)
4. –î–õ–Ø –ö–ê–ñ–î–û–ô –°–ï–ö–¶–ò–ò —É–∫–∞–∂–∏:
   - –¢–û–ß–ù–û–ï –ø–æ–ª–æ–∂–µ–Ω–∏–µ (header/hero/content1/content2/cta/footer/etc.)
   - –¢–û–ß–ù–´–ï —Ä–∞–∑–º–µ—Ä—ã –±–ª–æ–∫–∞ (width, height, padding)
   - –¢–û–ß–ù–´–ô —Ñ–æ–Ω (—Ü–≤–µ—Ç –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—É—Ç–µ–º)
   - –¢–û–ß–ù–û–ï —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ (–∫–∞–∫–æ–π —Ç–µ–∫—Å—Ç, –∫–∞–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
   - –¢–û–ß–ù–£–Æ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫—É (—Ä–∞–∑–º–µ—Ä, –≤–µ—Å, —Ü–≤–µ—Ç —à—Ä–∏—Ñ—Ç–∞)
   - –¢–û–ß–ù–´–ï –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
   - –¢–û–ß–ù–´–ï –ø—É—Ç–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ

–ö–†–ò–¢–ò–ß–ù–û –í–ê–ñ–ù–û:
- –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï benefits –∏–∑ —Å–ø–∏—Å–∫–∞
- –í–∫–ª—é—á–∏ social proof –∏ urgency elements  
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—É—é —Ü–µ–Ω—É ${formattedPrice}
- –†–∞–∑–º–µ—Å—Ç–∏ –í–°–ï –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –°–æ–∑–¥–∞–π –ö–û–ù–ö–†–ï–¢–ù–´–ï –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏, –Ω–µ –æ–±—â–∏–µ —Ñ—Ä–∞–∑—ã
- –£–∫–∞–∂–∏ –¢–û–ß–ù–´–ï HEX —Ü–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
- –°–æ–∑–¥–∞–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤

üìù –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ CTA –∫–Ω–æ–ø–∫–∏: "${primaryCTA}" –∏ "${secondaryCTA}"
- –í–∫–ª—é—á–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã: ${formattedDates}
- –ê–¥–∞–ø—Ç–∏—Ä—É–π –¥–∏–∑–∞–π–Ω –ø–æ–¥ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å
- –°–æ–∑–¥–∞–≤–∞–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è junior —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞: –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ, –ø–æ–¥—Ä–æ–±–Ω–æ, —Å —Ç–æ—á–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏

–í–ï–†–ù–ò –î–ï–¢–ê–õ–¨–ù–´–ô JSON —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π template design —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É TemplateDesign.
`;

  // ü§ñ CALL AI AGENT TO GENERATE TEMPLATE DESIGN
  console.log('üé® Calling AI to generate detailed template design...');
  
  const result = await run(templateDesignAgent, templateDesignPrompt);
  
  let templateDesign;
  try {
    // Parse AI response as JSON
    const aiResponse = result.finalOutput?.trim() || '{}';
    const cleanResponse = aiResponse.replace(/^```json\s*/, '').replace(/\s*```$/, '');
        templateDesign = JSON.parse(cleanResponse);
    
    console.log('‚úÖ AI generated template design successfully');
  } catch (parseError) {
    console.error('‚ùå AI Template Design generation failed:', parseError);
    throw new Error(`Failed to generate template design: AI response could not be parsed. ${parseError instanceof Error ? parseError.message : 'Unknown parsing error'}`);
  }

  // Add metadata to AI generated design
    templateDesign.metadata = {
      generated_at: new Date().toISOString(),
    generated_by: 'AI Template Designer (No Fallbacks)',
      campaign_id: contentContext.campaign?.id,
    trace_id: traceId || 'NO_TRACE'
    };
    
    return templateDesign;

}

/**
 * AI-powered template design generation tool
 */
export const generateTemplateDesign = tool({
  name: 'generateTemplateDesign',
  description: 'AI-powered template design generation - creates detailed template structure, layout, and visual hierarchy before MJML coding',
  parameters: z.object({
    content_context: z.object({}).strict().describe('Content context from Content Specialist'),
    design_requirements: z.object({}).strict().nullable().describe('Design requirements and brand guidelines'),
    trace_id: z.string().nullable().describe('Trace ID for debugging')
  }),
  execute: async (params, context) => {
    console.log('\nüé® === AI TEMPLATE DESIGNER (OpenAI Agents SDK) ===');
    
    // Load content context from OpenAI SDK context parameter
    let contentContext;
    
    if ((context as any)?.designContext?.content_context) {
      contentContext = (context as any).designContext.content_context;
      console.log('‚úÖ Using content context from design context (loaded by loadDesignContext)');
    } else {
      throw new Error('Content context not found in design context. loadDesignContext must be called first to load campaign context.');
    }
    
    // Get campaign path from design context (set by loadDesignContext)
    const campaignPath = (context as any).designContext.campaign_path;
    if (!campaignPath) {
      throw new Error('Campaign path is missing from design context. loadDesignContext must provide valid campaign path.');
    }
    
    console.log(`üìã Campaign: ${contentContext.campaign?.id || 'REQUIRED_ID'}`);
    console.log(`üìÅ Campaign Path: ${campaignPath}`);
    console.log(`üéØ AI Template Design Generation using OpenAI Agents SDK`);
    console.log(`üîç Trace ID: ${params.trace_id || 'NO_TRACE'}`);

    try {
      // Load asset manifest
      const assetManifest = (context as any)?.designContext?.asset_manifest;
      if (!assetManifest) {
        throw new Error('Asset manifest not found in design context. processContentAssets must be completed before template design.');
      }
      
      // Load comprehensive content files
      const designBriefPath = path.join(campaignPath, 'content', 'design-brief-from-context.json');
      const emailContentPath = path.join(campaignPath, 'content', 'email-content.json');
      const pricingAnalysisPath = path.join(campaignPath, 'content', 'pricing-analysis.json');
      const assetStrategyPath = path.join(campaignPath, 'content', 'asset-strategy.json');
      const dateAnalysisPath = path.join(campaignPath, 'content', 'date-analysis.json');
      const techSpecPath = path.join(campaignPath, 'docs', 'specifications', 'technical-specification.json');
      
      console.log('üìã Loading comprehensive campaign content for AI enrichment...');
      
      // Load design brief
      let designBrief;
      try {
        if (await fs.access(designBriefPath).then(() => true).catch(() => false)) {
          const designBriefContent = await fs.readFile(designBriefPath, 'utf8');
          designBrief = JSON.parse(designBriefContent);
          console.log('‚úÖ Loaded design brief from file');
        } else {
          throw new Error('Design brief file not found. All content files must be loaded before template design generation.');
        }
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error';
        console.error('‚ùå Error loading design brief:', errorMessage);
        throw new Error(`Design brief loading failed: ${errorMessage}`);
      }
      
      // Load email content
      let emailContent;
      try {
        if (await fs.access(emailContentPath).then(() => true).catch(() => false)) {
          const emailContentData = await fs.readFile(emailContentPath, 'utf8');
          emailContent = JSON.parse(emailContentData);
          console.log('‚úÖ Loaded email content with rich details');
        } else {
          console.log('‚ö†Ô∏è Email content not found');
        }
      } catch (error) {
        console.error('‚ö†Ô∏è Error loading email content:', error);
      }

      // Load pricing analysis
      let pricingAnalysis;
      try {
        if (await fs.access(pricingAnalysisPath).then(() => true).catch(() => false)) {
          const pricingData = await fs.readFile(pricingAnalysisPath, 'utf8');
          pricingAnalysis = JSON.parse(pricingData);
          console.log('‚úÖ Loaded pricing analysis with cost details');
        } else {
          console.log('‚ö†Ô∏è Pricing analysis not found');
        }
      } catch (error) {
        console.error('‚ö†Ô∏è Error loading pricing analysis:', error);
      }

      // Load asset strategy
      let assetStrategy;
      try {
        if (await fs.access(assetStrategyPath).then(() => true).catch(() => false)) {
          const assetStrategyData = await fs.readFile(assetStrategyPath, 'utf8');
          assetStrategy = JSON.parse(assetStrategyData);
          console.log('‚úÖ Loaded asset strategy with visual direction');
        } else {
          console.log('‚ö†Ô∏è Asset strategy not found');
        }
      } catch (error) {
        console.error('‚ö†Ô∏è Error loading asset strategy:', error);
      }

      // Load date analysis
      let dateAnalysis;
      try {
        if (await fs.access(dateAnalysisPath).then(() => true).catch(() => false)) {
          const dateAnalysisData = await fs.readFile(dateAnalysisPath, 'utf8');
          dateAnalysis = JSON.parse(dateAnalysisData);
          console.log('‚úÖ Loaded date analysis with seasonal insights');
        } else {
          console.log('‚ö†Ô∏è Date analysis not found');
        }
      } catch (error) {
        console.error('‚ö†Ô∏è Error loading date analysis:', error);
      }

      // Load technical specification
      let techSpec;
      try {
        if (await fs.access(techSpecPath).then(() => true).catch(() => false)) {
          const techSpecData = await fs.readFile(techSpecPath, 'utf8');
          techSpec = JSON.parse(techSpecData);
          console.log('‚úÖ Loaded technical specification');
        } else {
          console.log('‚ö†Ô∏è Technical specification not found');
      }
      } catch (error) {
        console.error('‚ö†Ô∏è Error loading technical specification:', error);
      }

      // Call AI generation with full context
      const templateDesign = await generateAITemplateDesign({
        contentContext,
        designBrief,
        assetManifest,
        techSpec,
        emailContent,
        pricingAnalysis,
        assetStrategy,
        dateAnalysis,
        designRequirements: params.design_requirements,
        traceId: params.trace_id || 'NO_TRACE'
      });

      // Save template design to file
      const designDir = path.join(campaignPath, 'design');
      await fs.mkdir(designDir, { recursive: true });
      const templateDesignPath = path.join(designDir, 'template-design.json');
      await fs.writeFile(templateDesignPath, JSON.stringify(templateDesign, null, 2));
      console.log(`‚úÖ Template design saved to: ${templateDesignPath}`);

      // Update design context with template design
      const updatedDesignContext = {
        ...(context as any).designContext,
        template_design: templateDesign,
        template_design_path: templateDesignPath
      };

      if (context) {
        (context as any).designContext = updatedDesignContext;
      }

      console.log('‚úÖ AI Template Design completed successfully (OpenAI Agents SDK)');
      console.log(`üìä Sections: ${templateDesign.sections?.length || 0}`);
      console.log(`üé® Layout: ${templateDesign.layout?.type || 'undefined'}`);
      console.log(`üì± Responsive: ${templateDesign.responsive?.breakpoints?.length || 0} breakpoints`);
      console.log(`üéØ Components: ${templateDesign.components?.length || 0} custom components`);

      return `AI Template Design completed successfully using OpenAI Agents SDK! Generated ${templateDesign.sections?.length || 0} sections with ${templateDesign.layout?.type || 'custom'} layout. Responsive design with ${templateDesign.responsive?.breakpoints?.length || 0} breakpoints. Created ${templateDesign.components?.length || 0} custom components. Visual hierarchy optimized for ${templateDesign.target_audience || 'target users'}. Design saved to: ${templateDesignPath}. Ready for MJML template generation.`;

    } catch (error) {
      console.error('‚ùå AI Template Design failed:', error);
      throw error;
    }
  }
}); 