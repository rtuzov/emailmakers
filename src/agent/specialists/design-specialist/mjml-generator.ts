/**
 * MJML Template Generator
 * Handles MJML template generation with AI-powered dynamic creation
 */

import { tool, Agent, run } from '@openai/agents';
import { z } from 'zod';
import { promises as fs } from 'fs';
import path from 'path';
import { buildDesignContext } from './design-context';
import { MjmlTemplate } from './types';

/**
 * MJML Generation Sub-Agent
 * Uses OpenAI Agents SDK patterns for MJML code generation
 */
const mjmlGenerationAgent = new Agent({
  name: 'MJML Generator AI',
  instructions: `–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é MJML email —à–∞–±–ª–æ–Ω–æ–≤. –°–æ–∑–¥–∞–≤–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–π MJML –∫–æ–¥ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π.

–¢–í–û–Ø –ó–ê–î–ê–ß–ê: –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π MJML email —à–∞–±–ª–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–∏–∑–∞–π–Ω–∞.

–í–°–ï–ì–î–ê –≤–æ–∑–≤—Ä–∞—â–∞–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–π MJML –∫–æ–¥ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

üé® –ü–†–ê–í–ò–õ–ê –ê–î–ê–ü–¢–ò–í–ù–û–ô –í–ï–†–°–¢–ö–ò EMAIL:

1. –ê–ù–ê–õ–ò–ó –ë–†–ï–ù–î–ê –ò –ö–û–ù–¢–ï–ù–¢–ê:
   - –ò–∑—É—á–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–æ–Ω –∏ —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∏
   - –û–ø—Ä–µ–¥–µ–ª–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏
   - –£—á–∏—Ç—ã–≤–∞–π —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∏–ª—è

2. –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –¶–í–ï–¢–û–í–ê–Ø –°–•–ï–ú–ê:
   - –î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π: —Ç–µ–ø–ª—ã–µ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ —Ç–æ–Ω–∞ –∏–ª–∏ —Ö–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ
   - –î–ª—è –±–∏–∑–Ω–µ—Å–∞: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–Ω–∏–µ, —Å–µ—Ä—ã–µ, –±–µ–ª—ã–µ
   - –î–ª—è –∞–∫—Ü–∏–π: —è—Ä–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞ (–∫—Ä–∞—Å–Ω—ã–π, –æ—Ä–∞–Ω–∂–µ–≤—ã–π)
   - –î–ª—è –ø—Ä–µ–º–∏—É–º: —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º–Ω—ã–µ —Ç–æ–Ω–∞ —Å –∑–æ–ª–æ—Ç—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏
   - –ü—Ä–∏–º–µ–Ω—è–π –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ–º–∞—Ç–∏–∫–µ

3. –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –°–¢–†–£–ö–¢–£–†–ê:
   - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–ª–∏–Ω—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ–∫—Ü–∏–π
   - –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
   - –î–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –±–ª–æ–∫–∞–º–∏
   - –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏ (–ø—Ä–æ–º–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è, —Å–µ–∑–æ–Ω–Ω–∞—è)

4. –£–ú–ù–ê–Ø –¢–ò–ü–û–ì–†–ê–§–ò–ö–ê:
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏: —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
   - –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
   - –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ–º–∞—Ç–∏–∫–µ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
   - –í—ã–¥–µ–ª—è–π –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ

5. –ö–û–ù–¢–ï–ö–°–¢–ù–´–ï –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:
   - CTA –∫–Ω–æ–ø–∫–∏: —Å—Ç–∏–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è
   - –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–≤–µ—Ä–∏—è: –ø–æ–¥–±–∏—Ä–∞–π –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –±—Ä–µ–Ω–¥–∞
   - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –∞–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç

6. RESPONSIVE DESIGN:
   - –í—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–π –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
   - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö email –∫–ª–∏–µ–Ω—Ç–æ–≤
   - –£—á–∏—Ç—ã–≤–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Outlook –∏ Gmail

–¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö MJML:
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ MJML —Ç–µ–≥–∏
- –ù–ï –≤–∫–ª–∞–¥—ã–≤–∞–π <mj-section> –≤–Ω—É—Ç—Ä—å <mj-section>
- –ö–∞–∂–¥–∞—è —Å–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å <mj-column>
- –°–æ–±–ª—é–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä—É: <mjml><mj-head>...</mj-head><mj-body>...</mj-body></mjml>
- –ò—Å–ø–æ–ª—å–∑—É–π –≤—Å–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –°–æ–∑–¥–∞–≤–∞–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏ —á–∏—Ç–∞–µ–º—ã–π –¥–∏–∑–∞–π–Ω
- –£—á–∏—Ç—ã–≤–∞–π email –∫–ª–∏–µ–Ω—Ç—ã (Outlook, Gmail, Apple Mail)

–í–ê–ñ–ù–û: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –∏ —Å–æ–∑–¥–∞–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω!`,
  model: 'gpt-4o-mini'
});

/**
 * Generate dynamic MJML template using AI - NO PREDEFINED TEMPLATES
 */
async function generateDynamicMjmlTemplate(params: {
  contentContext: any;
  designBrief: any;
  assetManifest: any;
  techSpec: any;
  templateDesign?: any;
  colors: {
    primary: string;
    accent: string;
    background: string;
    text: string;
  };
  layout: {
    maxWidth: number;
    headingFont: string;
    bodyFont: string;
    typography: any;
  };
}): Promise<any> {
  const { contentContext, designBrief, assetManifest, templateDesign, colors, layout } = params;
  
  // Extract content for template generation with fallback values
  const subject = contentContext.subject || contentContext.generated_content?.subject;
  const preheader = contentContext.preheader || contentContext.generated_content?.preheader;
  const body = contentContext.body || contentContext.generated_content?.body;
  const pricing = contentContext.pricing || contentContext.pricing_analysis || contentContext.generated_content?.pricing;
  const cta = contentContext.cta || contentContext.generated_content?.cta;
  
  if (!subject || !preheader || !body || !pricing || !cta) {
    console.error('Missing content fields diagnostic:', {
      subject: !!subject,
      preheader: !!preheader,
      body: !!body,
      pricing: !!pricing,
      cta: !!cta,
      contentContextKeys: Object.keys(contentContext),
      generated_content: !!contentContext.generated_content
    });
    throw new Error('Required content fields missing: subject, preheader, body, pricing, or cta');
  }
  
  // Extract images from asset manifest - NO FALLBACK
  const images = assetManifest.images;
  if (!images || !Array.isArray(images) || images.length === 0) {
    throw new Error('Asset manifest must contain at least one image');
  }
  
  // üåê PROCESS IMAGES WITH EXTERNAL URL SUPPORT
  const processedImages = images.map((image: any, index: number) => {
    const imageUrl = image.isExternal ? image.url : image.path;
    const altText = image.alt_text || `Image ${index + 1}`;
    
    console.log(`üì∏ Processing image ${index + 1}: ${image.isExternal ? 'EXTERNAL' : 'LOCAL'} - ${imageUrl}`);
    
    return {
      url: imageUrl,
      alt_text: altText,
      isExternal: image.isExternal || false,
      usage: image.usage || 'general'
    };
  });
  
  const heroImage = processedImages[0];
  const galleryImages = processedImages.slice(1, 4); // Next 3 images for gallery
  
  // Extract fonts from asset manifest - check both direct and nested structure
  const fonts = assetManifest?.fonts || assetManifest?.assetManifest?.fonts;
  let fontConfiguration = {
    headingFont: 'Arial, sans-serif',
    bodyFont: 'Arial, sans-serif',
    fontWeights: ['normal', 'bold']
  };
  
  if (fonts && fonts.length > 0) {
    // Use first font as primary, or find heading/body specific fonts
    const headingFont = fonts.find((font: any) => font.usage === 'heading') || fonts[0];
    const bodyFont = fonts.find((font: any) => font.usage === 'body') || fonts[0];
    
    fontConfiguration = {
      headingFont: `${headingFont.family}, ${headingFont.fallbacks?.join(', ') || 'Arial, sans-serif'}`,
      bodyFont: `${bodyFont.family}, ${bodyFont.fallbacks?.join(', ') || 'Arial, sans-serif'}`,
      fontWeights: headingFont.weights || ['normal', 'bold']
    };
    
    console.log(`üî§ Using fonts from asset manifest:`);
    console.log(`   Heading: ${fontConfiguration.headingFont}`);
    console.log(`   Body: ${fontConfiguration.bodyFont}`);
  } else {
    console.log('‚ö†Ô∏è No fonts in asset manifest, using default Arial');
  }
  
  // üé® USE AI TEMPLATE DESIGN IF AVAILABLE
  let templateStructure = '';
  let designGuidance = '';
  
  if (templateDesign) {
    console.log('üéØ Using AI Template Design for enhanced MJML generation');
    
    if (!templateDesign.template_name) {
      throw new Error('Template design must have a template_name');
    }
    
    if (!templateDesign.layout || !templateDesign.layout.type) {
      throw new Error('Template design must have layout with type');
    }
    
    if (!templateDesign.sections || templateDesign.sections.length === 0) {
      throw new Error('Template design must have at least one section');
    }
    
    if (!templateDesign.components || templateDesign.components.length === 0) {
      throw new Error('Template design must have at least one component');
    }
    
    templateStructure = `
–°–¢–†–£–ö–¢–£–†–ê –ò–ó AI TEMPLATE DESIGN:
- Template: ${templateDesign.template_name}
- Layout: ${templateDesign.layout.type}
- Sections: ${templateDesign.sections.length}
- Components: ${templateDesign.components.length}

–°–ï–ö–¶–ò–ò:
${templateDesign.sections.map((section: any, index: number) => 
  `${index + 1}. ${section.type}: ${section.content ? Object.keys(section.content).join(', ') : '–±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'}`
).join('\n')}

–ö–û–ú–ü–û–ù–ï–ù–¢–´:
${templateDesign.components.map((comp: any) => 
  `- ${comp.id}: ${comp.type} (${comp.styling ? Object.keys(comp.styling).join(', ') : '–±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏'})`
).join('\n')}
`;

    if (!templateDesign.visual_concept) {
      throw new Error('Template design must have visual_concept');
    }
    
    if (!templateDesign.target_audience) {
      throw new Error('Template design must have target_audience');
    }
    
    if (!templateDesign.layout.max_width) {
      throw new Error('Template design layout must have max_width');
    }
    
    if (!templateDesign.layout.spacing_system) {
      throw new Error('Template design layout must have spacing_system');
    }

    designGuidance = `
–°–õ–ï–î–£–ô –¢–û–ß–ù–û –≠–¢–û–ú–£ –î–ò–ó–ê–ô–ù–£:
- Visual Concept: ${templateDesign.visual_concept}
- Target Audience: ${templateDesign.target_audience}
- Layout Type: ${templateDesign.layout.type}
- Max Width: ${templateDesign.layout.max_width}px
- Spacing System: ${JSON.stringify(templateDesign.layout.spacing_system)}

RESPONSIVE BREAKPOINTS:
${templateDesign.responsive?.breakpoints?.map((bp: any) => 
  `- ${bp.name}: ${bp.max_width} (${bp.adjustments ? Object.keys(bp.adjustments).join(', ') : '–±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'})`
).join('\n')}

ACCESSIBILITY REQUIREMENTS:
- ${templateDesign.accessibility?.alt_texts}
- ${templateDesign.accessibility?.color_contrast}
- ${templateDesign.accessibility?.font_sizes}
`;
  } else {
    throw new Error('Template design is required for MJML generation - run generateTemplateDesign first');
  }
  
  // Create AI prompt for MJML generation
  let templatePrompt = `
–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ MJML (Mailjet Markup Language). –°–æ–∑–¥–∞–π –í–ê–õ–ò–î–ù–´–ô MJML email —à–∞–±–ª–æ–Ω, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—è –∫–æ–Ω—Ç–µ–Ω—Ç –∏ –ø–æ–¥–±–∏—Ä–∞—è –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω.

üß† –ê–ù–ê–õ–ò–ó –ö–û–ù–¢–ï–ù–¢–ê –ò –ë–†–ï–ù–î–ê:

–ö–û–ù–¢–ï–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê:
- –ó–∞–≥–æ–ª–æ–≤–æ–∫: "${subject}"
- –ü—Ä–µ–≤—å—é: "${preheader}"  
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: "${body}"
- –¶–µ–Ω–∞: ${pricing.best_price} ${pricing.currency}
- CTA –∫–Ω–æ–ø–∫–∞: "${cta.primary}"
- –ë—Ä–µ–Ω–¥: ${colors.primary ? 'Kupibilet' : '–ù–µ —É–∫–∞–∑–∞–Ω'}

–î–û–°–¢–£–ü–ù–´–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø (${processedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π):
${processedImages.map((img: any, index: number) => 
  `${index + 1}. ${img.url} - ${img.alt_text}`
).join('\n')}

–ë–ê–ó–û–í–´–ï –¶–í–ï–¢–ê –ë–†–ï–ù–î–ê (–º–æ–∂–µ—à—å –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å):
- –û—Å–Ω–æ–≤–Ω–æ–π: ${colors.primary}
- –ê–∫—Ü–µ–Ω—Ç: ${colors.accent}  
- –§–æ–Ω: ${colors.background}
- –¢–µ–∫—Å—Ç: ${colors.text}

–®–†–ò–§–¢–´:
- –ó–∞–≥–æ–ª–æ–≤–∫–∏: ${fontConfiguration.headingFont}
- –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: ${fontConfiguration.bodyFont}

üé® –ó–ê–î–ê–ß–ê: –°–û–ó–î–ê–ô –£–ù–ò–ö–ê–õ–¨–ù–´–ô –î–ò–ó–ê–ô–ù

1. –ê–ù–ê–õ–ò–ó–ò–†–£–ô –ö–û–ù–¢–ï–ù–¢:
   - –û–ø—Ä–µ–¥–µ–ª–∏ —Ç–µ–º–∞—Ç–∏–∫—É (–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –±–∏–∑–Ω–µ—Å, –∞–∫—Ü–∏–∏, –ø—Ä–µ–º–∏—É–º)
   - –û—Ü–µ–Ω–∏ —Ç–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π, –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —Å—Ä–æ—á–Ω—ã–π)
   - –í—ã—è–≤–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
   - –û–ø—Ä–µ–¥–µ–ª–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –ø–æ —Å—Ç–∏–ª—é —Ç–µ–∫—Å—Ç–∞

2. –ü–û–î–ë–ï–†–ò –¶–í–ï–¢–û–í–£–Æ –°–•–ï–ú–£:
   - –î–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π: —Ç–µ–ø–ª—ã–µ —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ –∏–ª–∏ —Ö–æ–ª–æ–¥–Ω—ã–µ –≥–æ—Ä–Ω—ã–µ —Ç–æ–Ω–∞
   - –î–ª—è –±–∏–∑–Ω–µ—Å–∞: –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–∏–Ω–∏–µ, —Å–µ—Ä—ã–µ, –±–µ–ª—ã–µ
   - –î–ª—è –∞–∫—Ü–∏–π: —è—Ä–∫–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω—ã–µ —Ü–≤–µ—Ç–∞
   - –î–ª—è –ø—Ä–µ–º–∏—É–º: —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ —Ç–µ–º–Ω—ã–µ —Å –∑–æ–ª–æ—Ç—ã–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏
   - –°–æ–∑–¥–∞–≤–∞–π –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é

3. –û–ü–†–ï–î–ï–õ–ò –°–¢–†–£–ö–¢–£–†–£:
   - –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (5-6 —Å–µ–∫—Ü–∏–π)
   - –î–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ (8-10 —Å–µ–∫—Ü–∏–π)
   - –ê–¥–∞–ø—Ç–∏—Ä—É–π –ø–æ–¥ —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏ (–ø—Ä–æ–º–æ, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è, —Å–µ–∑–æ–Ω–Ω–∞—è)

4. –í–´–ë–ï–†–ò –¢–ò–ü–û–ì–†–ê–§–ò–ö–£:
   - –ó–∞–≥–æ–ª–æ–≤–∫–∏: —Ä–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–∞–∂–Ω–æ—Å—Ç–∏ (24px-36px)
   - –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –¥–ª—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ (14px-18px)
   - –≠–º–æ–¥–∑–∏: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Ç–µ–º–∞—Ç–∏–∫–µ –∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
   - –í—ã–¥–µ–ª–µ–Ω–∏—è: –∞–¥–∞–ø—Ç–∏–≤–Ω–æ –ø–æ–¥ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã

5. –°–û–ó–î–ê–ô –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –≠–õ–ï–ú–ï–ù–¢–´:
   - CTA –∫–Ω–æ–ø–∫–∏: —Å—Ç–∏–ª—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
   - –≠–ª–µ–º–µ–Ω—Ç—ã –¥–æ–≤–µ—Ä–∏—è: –ø–æ–¥ —Å–ø–µ—Ü–∏—Ñ–∏–∫—É –±—Ä–µ–Ω–¥–∞
   - –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞: –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç

–°–¢–†–£–ö–¢–£–†–ê MJML:
<mjml>
  <mj-head>
    <mj-title>[–ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–´–ô –ó–ê–ì–û–õ–û–í–û–ö]</mj-title>
    <mj-preview>[–ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–û–ï –ü–†–ï–í–¨–Æ]</mj-preview>
    <mj-attributes>
      <mj-all font-family="[–í–´–ë–†–ê–ù–ù–´–ô –®–†–ò–§–¢]" />
      <mj-text font-size="[–û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô –†–ê–ó–ú–ï–†]" line-height="[–ß–ò–¢–ê–ï–ú–û–°–¢–¨]" />
    </mj-attributes>
    <mj-style>
      [–ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–´–ï CSS –°–¢–ò–õ–ò –ü–û–î –ö–û–ù–¢–ï–ù–¢]
    </mj-style>
  </mj-head>
  <mj-body>
    [–°–ï–ö–¶–ò–ò –ê–î–ê–ü–¢–ò–†–û–í–ê–ù–ù–´–ï –ü–û–î –ö–û–ù–¢–ï–ù–¢]
  </mj-body>
</mjml>

–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø:
1. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π <mjml> –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π </mjml>
2. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π <mj-head> —Å <mj-title> –∏ <mj-preview>
3. –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–π <mj-body> —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ <mj-section>
4. –ö–ê–ñ–î–ê–Ø <mj-section> –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å <mj-column>
5. –ò—Å–ø–æ–ª—å–∑—É–π –í–°–ï ${processedImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ <mj-image>
6. –í–∫–ª—é—á–∏ –í–ï–°–¨ —Ç–µ–∫—Å—Ç –∏–∑ body (–Ω–µ —Å–æ–∫—Ä–∞—â–∞–π!)
7. –°–æ–∑–¥–∞–π –∫–Ω–æ–ø–∫—É CTA —á–µ—Ä–µ–∑ <mj-button>
8. –î–æ–±–∞–≤—å —Ñ—É—Ç–µ—Ä —Å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π

–í–ê–ñ–ù–û: 
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–∞–∂–¥—ã–π —Å–ª—É—á–∞–π –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ
- –°–æ–∑–¥–∞–≤–∞–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω –ø–æ–¥ –∫–æ–Ω—Ç–µ–Ω—Ç
- –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–õ–¨–ö–û –≤–∞–ª–∏–¥–Ω—ã–µ MJML —Ç–µ–≥–∏
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π HTML —Ç–µ–≥–∏ –≤–Ω—É—Ç—Ä–∏ MJML
- –ù–ï –≤–∫–ª–∞–¥—ã–≤–∞–π <mj-section> –≤–Ω—É—Ç—Ä—å <mj-section>
- –ö–∞–∂–¥–∞—è —Å–µ–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å <mj-column>
- –í–∫–ª—é—á–∏ –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- –ù–µ —Å–æ–∫—Ä–∞—â–∞–π —Ç–µ–∫—Å—Ç!

–í–ï–†–ù–ò –¢–û–õ–¨–ö–û MJML –ö–û–î –ë–ï–ó –û–ë–™–Ø–°–ù–ï–ù–ò–ô –ò –ë–ï–ó MARKDOWN –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø:
`;

  // üéØ GENERATE MJML TEMPLATE USING AI WITH RETRY MECHANISM
  console.log('üé® Generating MJML template using AI with retry mechanism...');
  
  let mjmlCode = '';
  let attempts = 0;
  const maxAttempts = 3;
  
  while (attempts < maxAttempts) {
    attempts++;
    console.log(`üîÑ AI generation attempt ${attempts}/${maxAttempts}`);
    
    try {
      const result = await run(mjmlGenerationAgent, templatePrompt);
      
      // Clean up the response - remove any markdown formatting
      mjmlCode = result.finalOutput.trim();
      
      // Remove markdown code blocks if present
      if (mjmlCode.startsWith('```mjml')) {
        mjmlCode = mjmlCode.replace(/^```mjml\s*/, '').replace(/\s*```$/, '');
      } else if (mjmlCode.startsWith('```xml')) {
        mjmlCode = mjmlCode.replace(/^```xml\s*/, '').replace(/\s*```$/, '');
      } else if (mjmlCode.startsWith('```')) {
        mjmlCode = mjmlCode.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      // Validate MJML structure
      const validationErrors = [];
      
      if (!mjmlCode.includes('<mjml>') || !mjmlCode.includes('</mjml>')) {
        validationErrors.push('Missing required <mjml> tags');
      }
      
      if (!mjmlCode.includes('<mj-head>') || !mjmlCode.includes('<mj-body>')) {
        validationErrors.push('Missing required <mj-head> or <mj-body> sections');
      }
      
      if (!mjmlCode.includes('<mj-section>')) {
        validationErrors.push('Missing required <mj-section> tags');
      }
      
      if (!mjmlCode.includes('<mj-column>')) {
        validationErrors.push('Missing required <mj-column> tags');
      }
      
      // Check for basic content
      if (!mjmlCode.includes(subject.substring(0, 10))) {
        validationErrors.push('Subject not found in generated MJML');
      }
      
      if (validationErrors.length === 0) {
        console.log('‚úÖ MJML template generated successfully using AI');
        break;
      } else {
        console.log(`‚ùå Validation failed (attempt ${attempts}): ${validationErrors.join(', ')}`);
        
        if (attempts < maxAttempts) {
          console.log('üîÑ Retrying with improved prompt...');
          
          // Improve prompt for next attempt
          templatePrompt += `

–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í –ü–†–ï–î–´–î–£–©–ï–ô –ü–û–ü–´–¢–ö–ï:
${validationErrors.join('\n')}

–ò–°–ü–†–ê–í–¨ –≠–¢–ò –û–®–ò–ë–ö–ò! –£–±–µ–¥–∏—Å—å —á—Ç–æ:
1. –ï—Å—Ç—å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π <mjml> –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π </mjml>
2. –ï—Å—Ç—å <mj-head> —Å <mj-title> –∏ <mj-preview>
3. –ï—Å—Ç—å <mj-body> —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ <mj-section>
4. –ö–∞–∂–¥–∞—è <mj-section> —Å–æ–¥–µ—Ä–∂–∏—Ç <mj-column>
5. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫: "${subject}"
6. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–≤—å—é: "${preheader}"
7. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç: "${body.substring(0, 100)}..."

–ì–ï–ù–ï–†–ò–†–£–ô –¢–û–õ–¨–ö–û –í–ê–õ–ò–î–ù–´–ô MJML –ö–û–î!`;
        }
      }
      
    } catch (error) {
      console.error(`‚ùå AI generation failed (attempt ${attempts}):`, error);
      
      if (attempts < maxAttempts) {
        console.log('üîÑ Retrying AI generation...');
        
        // Add error context to prompt
        templatePrompt += `

–û–®–ò–ë–ö–ê –í –ü–†–ï–î–´–î–£–©–ï–ô –ü–û–ü–´–¢–ö–ï: ${error instanceof Error ? error.message : 'Unknown error'}

–ò–°–ü–†–ê–í–¨ –û–®–ò–ë–ö–£ –ò –ì–ï–ù–ï–†–ò–†–£–ô –ö–û–†–†–ï–ö–¢–ù–´–ô MJML!`;
      }
    }
  }
  
  if (!mjmlCode || mjmlCode.length < 100) {
    throw new Error(`Failed to generate valid MJML after ${maxAttempts} attempts. Last attempt produced: ${mjmlCode.substring(0, 200)}...`);
  }

  try {
    
    // Create MJML template object with metadata
    const mjmlTemplateObject = {
      mjml_code: mjmlCode,
      sections_count: (mjmlCode.match(/<mj-section/g) || []).length,
      responsive_optimized: mjmlCode.includes('@media') || mjmlCode.includes('mj-breakpoint'),
      email_clients: ['gmail', 'outlook', 'apple-mail', 'yahoo-mail'], // Standard email clients
      specifications_used: {
        layout: templateDesign?.layout?.type || 'single-column',
        typography: `${layout.headingFont}, ${layout.bodyFont}`,
        colors: `Primary: ${colors.primary}, Accent: ${colors.accent}`,
        components: templateDesign?.components?.map((c: any) => c.type).join(', ') || 'standard'
      },
      validation_status: 'generated',
      file_path: '' // Will be set when saved
    };
    
    return mjmlTemplateObject;
    
  } catch (error) {
    console.error('‚ùå AI MJML generation failed:', error);
    throw new Error(`Failed to generate MJML template: ${error instanceof Error ? error.message : 'Unknown error'}`);
  }
}

/**
 * MJML template generation tool
 */
export const generateMjmlTemplate = tool({
  name: 'generateMjmlTemplate',
  description: 'Generate MJML email template with AI-powered dynamic creation and technical optimization',
  parameters: z.object({
    content_context: z.object({}).strict().describe('Content context from Content Specialist'),
    design_requirements: z.object({}).strict().nullable().describe('Design requirements and brand guidelines'),
    trace_id: z.string().nullable().describe('Trace ID for debugging')
  }),
  execute: async (params, context) => {
    console.log('\nüìß === MJML TEMPLATE GENERATOR (OpenAI Agents SDK) ===');
    
    // Load content context from OpenAI SDK context parameter - NO FALLBACK ALLOWED
    let contentContext;
    
    // Get content context from design context (loaded by loadDesignContext)
    if (context?.designContext?.content_context) {
      contentContext = context.designContext.content_context;
      console.log('‚úÖ Using content context from design context (loaded by loadDesignContext)');
    } else {
      throw new Error('Content context not found in design context. loadDesignContext must be called first to load campaign context.');
    }
    
    // Extract campaign path from content context or design context
    let campaignPath;
    if (contentContext.campaign?.campaignPath) {
      campaignPath = contentContext.campaign.campaignPath;
    } else if (context?.designContext?.campaign_path) {
      campaignPath = context.designContext.campaign_path;
    } else {
      throw new Error('Campaign path is missing from content context. loadDesignContext must provide valid campaign path.');
    }
    
    console.log(`üìã Campaign: ${contentContext.campaign?.id || 'unknown'}`);
    console.log(`üìÅ Campaign Path: ${campaignPath}`);
    console.log(`üîç Trace ID: ${params.trace_id || 'none'}`);

    try {
      // Get required data from design context
      const assetManifest = context?.designContext?.asset_manifest;
      let templateDesign = context?.designContext?.template_design;
      const technicalSpec = context?.designContext?.technical_specification;
      
      if (!assetManifest) {
        throw new Error('Asset manifest not found in design context. processContentAssets must be completed first.');
      }
      
      // üéØ CRITICAL: Load template design from file if not in context
      if (!templateDesign) {
        console.log('üîç Template design not found in context, loading from file...');
        const templateDesignPath = path.join(campaignPath, 'design', 'template-design.json');
        try {
          const templateDesignContent = await fs.readFile(templateDesignPath, 'utf8');
          templateDesign = JSON.parse(templateDesignContent);
          console.log('‚úÖ Template design loaded from file');
        } catch (error) {
          throw new Error(`Template design file not found: ${templateDesignPath}. generateTemplateDesign must be completed first.`);
        }
      }

      // Use technical specification from design context (loaded by readTechnicalSpecification)
      let techSpec = context?.designContext?.technical_specification;
      
      if (!techSpec) {
        // Try to load from handoff file as fallback
        console.log('üîç Technical specification not found in context, loading from handoff...');
        try {
          const handoffPath = path.join(campaignPath, 'handoffs', 'content-specialist-to-design-specialist.json');
          const handoffContent = await fs.readFile(handoffPath, 'utf8');
          const handoffData = JSON.parse(handoffContent);
          techSpec = handoffData.technical_specification;
          console.log('‚úÖ Technical specification loaded from handoff');
        } catch (error) {
          throw new Error('Technical specification not found in context or handoff files. readTechnicalSpecification must be completed first.');
        }
      }

      console.log('‚úÖ Loaded technical specification and asset manifest');
      console.log(`üìä Assets: ${Array.isArray(assetManifest.images) ? assetManifest.images.length : 0} images, ${Array.isArray(assetManifest.icons) ? assetManifest.icons.length : 0} icons`);

      // Generate MJML template - NO FALLBACK ALLOWED
      console.log('üé® Using AI template design for enhanced MJML generation');
      
      // Extract colors from technical specification - REQUIRED
      let colors: {
        primary: string;
        accent: string;
        background: string;
        text: string;
      };
      
      if (!techSpec || !techSpec.design?.constraints?.colorScheme) {
        // Use default Kupibilet colors if technical specification is missing
        console.log('‚ö†Ô∏è Technical specification missing color scheme, using default Kupibilet colors');
        colors = {
          primary: '#4BFF7E',
          accent: '#FF6240',
          background: '#FFFFFF',
          text: '#2C3959'
        };
      } else {
        colors = {
          primary: techSpec.design.constraints.colorScheme.primary || '#4BFF7E',
          accent: techSpec.design.constraints.colorScheme.accent || '#FF6240',
          background: techSpec.design.constraints.colorScheme.background?.primary || '#FFFFFF',
          text: techSpec.design.constraints.colorScheme.text?.primary || '#2C3959'
        };
      }
      
      // Extract layout from technical specification - REQUIRED
      let layout: {
        maxWidth: number;
        headingFont: string;
        bodyFont: string;
        typography: any;
      };
      
      if (!techSpec || !techSpec.design?.constraints?.layout || !techSpec.design?.constraints?.typography) {
        // Use default layout and typography if technical specification is missing
        console.log('‚ö†Ô∏è Technical specification missing layout/typography, using defaults');
        layout = {
          maxWidth: 600,
          headingFont: 'Inter',
          bodyFont: 'Inter',
          typography: {
            headingFont: { family: 'Inter', size: '24px' },
            bodyFont: { family: 'Inter', size: '16px' }
          }
        };
      } else {
        layout = {
          maxWidth: techSpec.design.constraints.layout.maxWidth || 600,
          headingFont: techSpec.design.constraints.typography.headingFont?.family || 'Inter',
          bodyFont: techSpec.design.constraints.typography.bodyFont?.family || 'Inter',
          typography: techSpec.design.constraints.typography
        };
      }
      
      const mjmlTemplate = await generateDynamicMjmlTemplate({
        contentContext,
        designBrief: null, // Not used in current implementation
        templateDesign,
        assetManifest,
        techSpec,
        colors,
        layout
      });

      // Save MJML template to campaign
      const mjmlTemplatePath = path.join(campaignPath, 'templates', 'email-template.mjml');
      await fs.mkdir(path.dirname(mjmlTemplatePath), { recursive: true });
      await fs.writeFile(mjmlTemplatePath, mjmlTemplate.mjml_code);
      
      console.log('‚úÖ MJML template saved to campaign');

      // üîß COMPILE MJML TO HTML
      console.log('üîß Compiling MJML to HTML...');
      try {
        const mjml = require('mjml');
        const htmlResult = mjml(mjmlTemplate.mjml_code, {
          validationLevel: 'soft',
          keepComments: false,
          beautify: true
        });
        
        if (htmlResult.errors && htmlResult.errors.length > 0) {
          console.warn('‚ö†Ô∏è MJML compilation warnings:', htmlResult.errors);
        }
        
        // Save HTML template
        const htmlTemplatePath = path.join(campaignPath, 'templates', 'email-template.html');
        await fs.writeFile(htmlTemplatePath, htmlResult.html);
        
        // Update mjmlTemplate object with HTML
        mjmlTemplate.html_content = htmlResult.html;
        mjmlTemplate.html_file_path = htmlTemplatePath;
        mjmlTemplate.file_size = Buffer.byteLength(htmlResult.html, 'utf8');
        
        console.log('‚úÖ HTML template compiled and saved');
        console.log(`üìÑ HTML size: ${(mjmlTemplate.file_size / 1024).toFixed(2)} KB`);
        
      } catch (error) {
        console.error('‚ùå MJML to HTML compilation failed:', error);
        // Don't fail the whole process, just log the error
        mjmlTemplate.html_content = null;
        mjmlTemplate.compilation_error = error.message;
      }

      // Update design context
      const updatedDesignContext = buildDesignContext(context, {
        mjml_template: mjmlTemplate,
        trace_id: params.trace_id
      });

      // Save context to context parameter (OpenAI SDK pattern)
      if (context) {
        context.designContext = updatedDesignContext;
      }

      console.log('‚úÖ MJML Template generation completed successfully');
      console.log(`üìè Template size: ${mjmlTemplate.mjml_code.length} characters`);
      console.log(`üé® Sections: ${mjmlTemplate.sections_count}`);
      console.log(`üì± Responsive: ${mjmlTemplate.responsive_optimized ? 'Yes' : 'No'}`);

      return `MJML Template generated successfully using OpenAI Agents SDK! Template size: ${mjmlTemplate.mjml_code.length} characters with ${mjmlTemplate.sections_count} sections. Responsive optimization: ${mjmlTemplate.responsive_optimized ? 'enabled' : 'disabled'}. Email client compatibility: ${mjmlTemplate.email_clients.join(', ')}. Template saved to: ${mjmlTemplatePath}. Ready for preview generation.`;

    } catch (error) {
      console.error('‚ùå MJML Template generation failed:', error);
      throw error;
    }
  }
}); 