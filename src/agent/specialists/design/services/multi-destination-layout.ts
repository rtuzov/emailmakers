/**
 * üé® MULTI-DESTINATION LAYOUT SERVICE
 * 
 * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—ã–±–æ—Ä–∞ MJML —à–∞–±–ª–æ–Ω–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –¥–ª—è multi-destination email –∫–∞–º–ø–∞–Ω–∏–π. –°–æ–≤–º–µ—Å—Ç–∏–º —Å OpenAI Agents SDK v2.
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ MJML —à–∞–±–ª–æ–Ω–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 * - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ layout —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
 * - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Figma API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è assets
 */

import {
  MultiDestinationPlan,
  DestinationPlan,
  LayoutType,
  // LAYOUT_TYPES, // Currently unused
  MULTI_DESTINATION_LIMITS
} from '../../../../shared/types/multi-destination-types';

export interface TemplateSelectionCriteria {
  destinationCount: number;
  layoutPreference?: LayoutType;
  deviceTargets: ('mobile' | 'tablet' | 'desktop')[];
  brandingRequirements?: {
    mustIncludeLogo: boolean;
    colorSchemeCompliance: boolean;
    fontConsistency: boolean;
  };
  contentComplexity: 'simple' | 'detailed' | 'rich';
  performancePriority: 'speed' | 'visual_quality' | 'balanced';
}

export interface SelectedTemplate {
  templateName: string;
  templatePath: string;
  layoutType: LayoutType;
  estimatedFileSize: number;
  optimizedFor: ('mobile' | 'tablet' | 'desktop')[];
  renderingComplexity: 'low' | 'medium' | 'high';
  mjmlVersion: string;
  compatibilityScore: number;
}

export interface ImagePlan {
  destinationId: string;
  images: {
    primary: {
      figmaUrl?: string;
      dimensions: { width: number; height: number };
      format: 'jpg' | 'png' | 'webp';
      quality: number;
      alt: string;
      loading: 'eager' | 'lazy';
    };
    gallery?: Array<{
      figmaUrl?: string;
      dimensions: { width: number; height: number };
      format: 'jpg' | 'png' | 'webp';
      category: 'landmark' | 'food' | 'culture' | 'nature' | 'activity';
      alt: string;
    }>;
    thumbnails?: {
      small: { width: number; height: number };
      medium: { width: number; height: number };
    };
  };
  totalEstimatedSize: number;
  compressionStrategy: 'aggressive' | 'balanced' | 'quality_first';
}

export interface LayoutOptimization {
  templateSelection: SelectedTemplate;
  imagePlans: ImagePlan[];
  responsiveBreakpoints: {
    mobile: number;
    tablet: number;
    desktop: number;
  };
  performanceMetrics: {
    estimatedLoadTime: number;
    totalFileSize: number;
    imageOptimizationSavings: number;
  };
  recommendations: string[];
}

export interface MultiDestinationLayoutConfig {
  templateBaseDirectory?: string;
  defaultImageDimensions?: {
    primary: { width: number; height: number };
    thumbnail: { width: number; height: number };
  };
  compressionSettings?: {
    jpegQuality: number;
    pngOptimization: boolean;
    webpFallback: boolean;
  };
  performanceTargets?: {
    maxTotalFileSize: number;
    maxLoadTime: number;
    minCompatibilityScore: number;
  };
}

export class MultiDestinationLayoutService {
  private config: Required<MultiDestinationLayoutConfig>;
  private readonly templateMappings: Record<LayoutType, string[]>;

  constructor(config: MultiDestinationLayoutConfig = {}) {
    this.config = {
      templateBaseDirectory: config.templateBaseDirectory || '/src/domains/template-processing/templates',
      defaultImageDimensions: config.defaultImageDimensions || {
        primary: { width: 600, height: 400 },
        thumbnail: { width: 150, height: 100 }
      },
      compressionSettings: config.compressionSettings || {
        jpegQuality: 85,
        pngOptimization: true,
        webpFallback: true
      },
      performanceTargets: config.performanceTargets || {
        maxTotalFileSize: 100000, // 100KB
        maxLoadTime: 3000, // 3 seconds
        minCompatibilityScore: 85
      },
      ...config
    };

    this.templateMappings = {
      compact: ['multi-destination-compact.mjml'],
      grid: ['multi-destination-grid.mjml'],
      carousel: ['multi-destination-carousel.mjml'],
      list: ['multi-destination-grid.mjml'], // Alternative grid layout
      featured: ['multi-destination-compact.mjml'] // Alternative compact layout
    };
  }

  /**
   * –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ MJML —à–∞–±–ª–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
   */
  async selectOptimalTemplate(
    plan: MultiDestinationPlan,
    criteria: TemplateSelectionCriteria
  ): Promise<SelectedTemplate> {
    console.log(`üéØ Selecting optimal template for ${criteria.destinationCount} destinations`);

    try {
      // –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ layout —Ç–∏–ø–∞
      const layoutType = this.determineLayoutType(criteria);
      
      // –®–∞–≥ 2: –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
      const templateName = this.selectTemplateByLayout(layoutType, criteria);
      
      // –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —à–∞–±–ª–æ–Ω–∞
      const templateAnalysis = await this.analyzeTemplate(templateName, plan, criteria);
      
      // –®–∞–≥ 4: –û—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const compatibilityScore = this.calculateCompatibilityScore(templateAnalysis, criteria);

      const selectedTemplate: SelectedTemplate = {
        templateName,
        templatePath: `${this.config.templateBaseDirectory}/${templateName}`,
        layoutType,
        estimatedFileSize: templateAnalysis.estimatedSize,
        optimizedFor: this.getOptimizedDevices(layoutType, criteria),
        renderingComplexity: this.assessRenderingComplexity(layoutType, criteria),
        mjmlVersion: '4.15.0',
        compatibilityScore
      };

      console.log(`‚úÖ Selected template: ${templateName} (${layoutType}, score: ${compatibilityScore})`);
      return selectedTemplate;

    } catch (error) {
      console.error('‚ùå Template selection error:', error);
      throw error instanceof Error ? error : new Error(String(error));
    }
  }

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  async planDestinationImages(
    destinations: DestinationPlan[],
    layoutType: LayoutType,
    performancePriority: 'speed' | 'visual_quality' | 'balanced' = 'balanced'
  ): Promise<ImagePlan[]> {
    console.log(`üñºÔ∏è Planning images for ${destinations.length} destinations (${layoutType} layout)`);

    try {
      const imagePlans: ImagePlan[] = [];

      for (const destination of destinations) {
        const plan = await this.createImagePlanForDestination(
          destination,
          layoutType,
          performancePriority
        );
        imagePlans.push(plan);
      }

      // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
      const optimizedPlans = this.optimizeImagePlansForPerformance(imagePlans, performancePriority);

      console.log(`‚úÖ Created image plans for ${optimizedPlans.length} destinations`);
      return optimizedPlans;

    } catch (error) {
      console.error('‚ùå Image planning error:', error);
      throw error instanceof Error ? error : new Error(String(error));
    }
  }

  /**
   * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è layout –¥–ª—è multi-destination –∫–∞–º–ø–∞–Ω–∏–∏
   */
  async optimizeLayoutForCampaign(
    plan: MultiDestinationPlan,
    criteria: TemplateSelectionCriteria
  ): Promise<LayoutOptimization> {
    console.log(`üöÄ Optimizing layout for campaign: ${plan.name}`);

    try {
      // –®–∞–≥ 1: –í—ã–±–æ—Ä —à–∞–±–ª–æ–Ω–∞
      const templateSelection = await this.selectOptimalTemplate(plan, criteria);
      
      // –®–∞–≥ 2: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imagePlans = await this.planDestinationImages(
        plan.destinations,
        templateSelection.layoutType,
        criteria.performancePriority
      );
      
      // –®–∞–≥ 3: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ responsive breakpoints
      const responsiveBreakpoints = this.calculateResponsiveBreakpoints(
        templateSelection.layoutType,
        criteria.deviceTargets
      );
      
      // –®–∞–≥ 4: –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const performanceMetrics = this.calculatePerformanceMetrics(
        templateSelection,
        imagePlans
      );
      
      // –®–∞–≥ 5: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      const recommendations = this.generateOptimizationRecommendations(
        templateSelection,
        imagePlans,
        performanceMetrics,
        criteria
      );

      const optimization: LayoutOptimization = {
        templateSelection,
        imagePlans,
        responsiveBreakpoints,
        performanceMetrics,
        recommendations
      };

      console.log(`‚úÖ Layout optimization completed: ${performanceMetrics.estimatedLoadTime}ms load time`);
      return optimization;

    } catch (error) {
      console.error('‚ùå Layout optimization error:', error);
      throw error instanceof Error ? error : new Error(String(error));
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ layout
   */
  validateLayoutCompatibility(
    optimization: LayoutOptimization,
    requirements: {
      maxFileSize?: number;
      maxLoadTime?: number;
      requiredDeviceSupport?: ('mobile' | 'tablet' | 'desktop')[];
      minQualityScore?: number;
    }
  ): {
    isValid: boolean;
    issues: Array<{
      type: 'performance' | 'compatibility' | 'quality';
      message: string;
      severity: 'error' | 'warning' | 'info';
      suggestion?: string;
    }>;
  } {
    const issues: any[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤
    if (requirements.maxFileSize && optimization.performanceMetrics.totalFileSize > requirements.maxFileSize) {
      issues.push({
        type: 'performance',
        message: `Total file size (${optimization.performanceMetrics.totalFileSize}B) exceeds limit (${requirements.maxFileSize}B)`,
        severity: 'error',
        suggestion: 'Consider using more aggressive image compression or smaller image dimensions'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏
    if (requirements.maxLoadTime && optimization.performanceMetrics.estimatedLoadTime > requirements.maxLoadTime) {
      issues.push({
        type: 'performance',
        message: `Estimated load time (${optimization.performanceMetrics.estimatedLoadTime}ms) exceeds limit (${requirements.maxLoadTime}ms)`,
        severity: 'warning',
        suggestion: 'Optimize images or consider lazy loading for gallery images'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    if (requirements.requiredDeviceSupport) {
      const supportedDevices = optimization.templateSelection.optimizedFor;
      const missingSupport = requirements.requiredDeviceSupport.filter(
        device => !supportedDevices.includes(device)
      );
      
      if (missingSupport.length > 0) {
        issues.push({
          type: 'compatibility',
          message: `Template lacks optimization for: ${missingSupport.join(', ')}`,
          severity: 'warning',
          suggestion: 'Consider selecting a different template or adding responsive breakpoints'
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    if (requirements.minQualityScore && optimization.templateSelection.compatibilityScore < requirements.minQualityScore) {
      issues.push({
        type: 'quality',
        message: `Template compatibility score (${optimization.templateSelection.compatibilityScore}) below minimum (${requirements.minQualityScore})`,
        severity: 'warning',
        suggestion: 'Consider adjusting criteria or selecting a different template'
      });
    }

    return {
      isValid: issues.filter(issue => issue.severity === 'error').length === 0,
      issues
    };
  }

  // ============ –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ============

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ layout —Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
   */
  private determineLayoutType(criteria: TemplateSelectionCriteria): LayoutType {
    const { destinationCount, layoutPreference } = criteria;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —è–≤–Ω–æ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∏ –æ–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    if (layoutPreference && this.isLayoutSuitableForCount(layoutPreference, destinationCount)) {
      return layoutPreference;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (destinationCount <= 3) return 'compact';
    if (destinationCount <= 6) return 'grid';
    return 'carousel';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ö–æ–¥—è—â–Ω–æ—Å—Ç–∏ layout –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  private isLayoutSuitableForCount(layout: LayoutType, count: number): boolean {
    const limits = MULTI_DESTINATION_LIMITS.OPTIMAL_DESTINATIONS[layout];
    if (!limits) return false;
    
    return count >= limits.min && count <= limits.max;
  }

  /**
   * –í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø–æ layout —Ç–∏–ø—É
   */
  private selectTemplateByLayout(layoutType: LayoutType, _criteria: TemplateSelectionCriteria): string {
    const templates = this.templateMappings[layoutType];
    if (!templates || templates.length === 0) {
      throw new Error(`No templates available for layout type: ${layoutType}`);
    }
    
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —à–∞–±–ª–æ–Ω
    // –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
    const selectedTemplate = templates[0];
    if (!selectedTemplate) {
      throw new Error(`Template selection failed for layout type: ${layoutType}`);
    }
    return selectedTemplate;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —à–∞–±–ª–æ–Ω–∞
   */
  private async analyzeTemplate(
    templateName: string,
    _plan: MultiDestinationPlan,
    _criteria: TemplateSelectionCriteria
  ): Promise<{ estimatedSize: number; complexity: 'low' | 'medium' | 'high' }> {
    // –ë–∞–∑–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ)
    const templateSizes: Record<string, number> = {
      'multi-destination-compact.mjml': 15000,
      'multi-destination-grid.mjml': 20000,
      'multi-destination-carousel.mjml': 25000
    };
    
    const baseSize = templateSizes[templateName] || 18000;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const contentMultiplier = this.getContentSizeMultiplier(_criteria);
    const estimatedSize = Math.round(baseSize * contentMultiplier);
    
    return {
      estimatedSize,
      complexity: this.assessTemplateComplexity(templateName, _criteria)
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–Ω–æ–∂–∏—Ç–µ–ª—è —Ä–∞–∑–º–µ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private getContentSizeMultiplier(criteria: TemplateSelectionCriteria): number {
    let multiplier = 1;
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    multiplier += (criteria.destinationCount - 2) * 0.1;
    
    // –ú–Ω–æ–∂–∏—Ç–µ–ª—å –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    switch (criteria.contentComplexity) {
      case 'simple': multiplier *= 0.8; break;
      case 'detailed': multiplier *= 1.2; break;
      case 'rich': multiplier *= 1.5; break;
    }
    
    return Math.max(0.5, Math.min(3, multiplier));
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —à–∞–±–ª–æ–Ω–∞
   */
  private assessTemplateComplexity(templateName: string, _criteria: TemplateSelectionCriteria): 'low' | 'medium' | 'high' {
    if (templateName.includes('compact')) return 'low';
    if (templateName.includes('grid')) return 'medium';
    if (templateName.includes('carousel')) return 'high';
    return 'medium';
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ layout –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
   */
  private assessRenderingComplexity(layoutType: LayoutType, criteria: TemplateSelectionCriteria): 'low' | 'medium' | 'high' {
    if (layoutType === 'compact') return 'low';
    if (layoutType === 'grid' && criteria.destinationCount <= 4) return 'medium';
    if (layoutType === 'carousel' || criteria.destinationCount > 8) return 'high';
    return 'medium';
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞
   */
  private calculateCompatibilityScore(
    templateAnalysis: { estimatedSize: number; complexity: 'low' | 'medium' | 'high' },
    criteria: TemplateSelectionCriteria
  ): number {
    let score = 90; // –ë–∞–∑–æ–≤—ã–π –≤—ã—Å–æ–∫–∏–π –±–∞–ª–ª
    
    // –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
    const targetSize = this.config.performanceTargets.maxTotalFileSize;
    if (templateAnalysis.estimatedSize > targetSize) {
      const overageRatio = templateAnalysis.estimatedSize / targetSize;
      score -= Math.min(20, (overageRatio - 1) * 30);
    }
    
    // –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞ –≤—ã—Å–æ–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
    if (criteria.performancePriority === 'speed' && templateAnalysis.complexity === 'high') {
      score -= 15;
    }
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ device targets
    if (criteria.deviceTargets.includes('mobile') && templateAnalysis.complexity === 'low') {
      score += 5;
    }
    
    return Math.max(50, Math.min(100, Math.round(score)));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω layout
   */
  private getOptimizedDevices(
    layoutType: LayoutType, 
    criteria: TemplateSelectionCriteria
  ): ('mobile' | 'tablet' | 'desktop')[] {
    const devices: ('mobile' | 'tablet' | 'desktop')[] = [];
    
    // –í—Å–µ layout –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç mobile —á–µ—Ä–µ–∑ responsive design
    devices.push('mobile');
    
    if (layoutType !== 'carousel') {
      devices.push('tablet');
    }
    
    devices.push('desktop');
    
    return devices.filter(device => criteria.deviceTargets.includes(device));
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  private async createImagePlanForDestination(
    destination: DestinationPlan,
    layoutType: LayoutType,
    performancePriority: 'speed' | 'visual_quality' | 'balanced'
  ): Promise<ImagePlan> {
    const dimensions = this.getImageDimensionsForLayout(layoutType);
    const compressionStrategy = this.getCompressionStrategy(performancePriority);
    
    const primaryImage = {
      ...(destination.assets.primary_image.url ? { figmaUrl: destination.assets.primary_image.url } : {}),
      dimensions: dimensions.primary,
      format: this.selectOptimalFormat(performancePriority),
      quality: this.getImageQuality(performancePriority),
      alt: destination.assets.primary_image.alt_text,
      loading: destination.priority === 'primary' ? 'eager' as const : 'lazy' as const
    };
    
    const estimatedPrimarySize = this.estimateImageSize(primaryImage.dimensions, primaryImage.format, primaryImage.quality);
    
    return {
      destinationId: destination.id,
      images: {
        primary: primaryImage,
        thumbnails: {
          small: { width: 150, height: 100 },
          medium: { width: 300, height: 200 }
        }
      },
      totalEstimatedSize: estimatedPrimarySize,
      compressionStrategy
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è layout
   */
  private getImageDimensionsForLayout(layoutType: LayoutType): {
    primary: { width: number; height: number };
  } {
    switch (layoutType) {
      case 'compact':
        return { primary: { width: 600, height: 400 } };
      case 'grid':
        return { primary: { width: 400, height: 300 } };
      case 'carousel':
        return { primary: { width: 350, height: 250 } };
      default:
        return this.config.defaultImageDimensions;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ —Å–∂–∞—Ç–∏—è
   */
  private getCompressionStrategy(performancePriority: 'speed' | 'visual_quality' | 'balanced'): 'aggressive' | 'balanced' | 'quality_first' {
    switch (performancePriority) {
      case 'speed': return 'aggressive';
      case 'visual_quality': return 'quality_first';
      case 'balanced': return 'balanced';
    }
  }

  /**
   * –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private selectOptimalFormat(performancePriority: 'speed' | 'visual_quality' | 'balanced'): 'jpg' | 'png' | 'webp' {
    if (performancePriority === 'speed') return 'jpg';
    if (performancePriority === 'visual_quality') return 'png';
    return 'jpg'; // Balanced default
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private getImageQuality(performancePriority: 'speed' | 'visual_quality' | 'balanced'): number {
    switch (performancePriority) {
      case 'speed': return 70;
      case 'visual_quality': return 95;
      case 'balanced': return 85;
    }
  }

  /**
   * –û—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   */
  private estimateImageSize(
    dimensions: { width: number; height: number },
    format: 'jpg' | 'png' | 'webp',
    quality: number
  ): number {
    const pixels = dimensions.width * dimensions.height;
    
    // –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–∂–∞—Ç–∏—è
    const compressionRatios = {
      jpg: 0.05, // ~20:1 compression
      webp: 0.04, // ~25:1 compression  
      png: 0.2    // ~5:1 compression
    };
    
    const baseSize = pixels * 3; // RGB
    const compressionRatio = compressionRatios[format];
    const qualityMultiplier = quality / 100;
    
    return Math.round(baseSize * compressionRatio * qualityMultiplier);
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private optimizeImagePlansForPerformance(
    plans: ImagePlan[],
    performancePriority: 'speed' | 'visual_quality' | 'balanced'
  ): ImagePlan[] {
    if (performancePriority !== 'speed') return plans;
    
    // –î–ª—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ —Å–∫–æ—Ä–æ—Å—Ç–∏ - –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    return plans.map(plan => ({
      ...plan,
      images: {
        ...plan.images,
        primary: {
          ...plan.images.primary,
          quality: Math.min(plan.images.primary.quality, 75),
          format: 'jpg' as const
        }
      },
      compressionStrategy: 'aggressive' as const,
      totalEstimatedSize: Math.round(plan.totalEstimatedSize * 0.7)
    }));
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
   */
  /*
  private __createMinimalImagePlans(_: DestinationPlan[]): never { // Currently unused
    throw new Error('createMinimalImagePlans is disabled by project policy.');
  }
  */

  /**
   * –†–∞—Å—á–µ—Ç responsive breakpoints
   */
  private calculateResponsiveBreakpoints(
    layoutType: LayoutType,
    _deviceTargets: ('mobile' | 'tablet' | 'desktop')[]
  ): { mobile: number; tablet: number; desktop: number } {
    // –ë–∞–∑–æ–≤—ã–µ breakpoints
    const base = { mobile: 768, tablet: 1024, desktop: 1200 };
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è carousel layout (—Ç—Ä–µ–±—É–µ—Ç –±–æ–ª—å—à–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞)
    if (layoutType === 'carousel') {
      return {
        mobile: base.mobile,
        tablet: base.tablet + 100,
        desktop: base.desktop + 200
      };
    }
    
    return base;
  }

  /**
   * –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  private calculatePerformanceMetrics(
    templateSelection: SelectedTemplate,
    imagePlans: ImagePlan[]
  ): {
    estimatedLoadTime: number;
    totalFileSize: number;
    imageOptimizationSavings: number;
  } {
    const totalImageSize = imagePlans.reduce((sum, plan) => sum + plan.totalEstimatedSize, 0);
    const totalFileSize = templateSelection.estimatedFileSize + totalImageSize;
    
    // –ü—Ä–æ—Å—Ç–∞—è –º–æ–¥–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≥—Ä—É–∑–∫–∏ (–æ—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–∞–∑–º–µ—Ä–µ —Ñ–∞–π–ª–∞)
    const estimatedLoadTime = Math.round((totalFileSize / 1000) * 50); // ~50ms per KB
    
    // –†–∞—Å—á–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∏ –æ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –Ω–µ–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏)
    const unoptimizedImageSize = imagePlans.length * 50000; // 50KB per unoptimized image
    const imageOptimizationSavings = Math.max(0, unoptimizedImageSize - totalImageSize);
    
    return {
      estimatedLoadTime,
      totalFileSize,
      imageOptimizationSavings
    };
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private generateOptimizationRecommendations(
    templateSelection: SelectedTemplate,
    imagePlans: ImagePlan[],
    performanceMetrics: { estimatedLoadTime: number; totalFileSize: number; imageOptimizationSavings: number },
    criteria: TemplateSelectionCriteria
  ): string[] {
    const recommendations: string[] = [];
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (performanceMetrics.totalFileSize > this.config.performanceTargets.maxTotalFileSize) {
      recommendations.push(`–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä ${performanceMetrics.totalFileSize}B –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª—å ${this.config.performanceTargets.maxTotalFileSize}B`);
    }
    
    if (performanceMetrics.estimatedLoadTime > this.config.performanceTargets.maxLoadTime) {
      recommendations.push(`–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∫—É: —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è ${performanceMetrics.estimatedLoadTime}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª—å ${this.config.performanceTargets.maxLoadTime}ms`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ template
    if (templateSelection.compatibilityScore < this.config.performanceTargets.minCompatibilityScore) {
      recommendations.push(`–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —à–∞–±–ª–æ–Ω: —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ ${templateSelection.compatibilityScore} –Ω–∏–∂–µ —Ü–µ–ª–µ–≤–æ–≥–æ ${this.config.performanceTargets.minCompatibilityScore}`);
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    const highQualityImages = imagePlans.filter(plan => plan.images.primary.quality > 90);
    if (highQualityImages.length > 0 && criteria.performancePriority === 'speed') {
      recommendations.push(`–°–Ω–∏–∑—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ ${highQualityImages.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏`);
    }
    
    // –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (performanceMetrics.imageOptimizationSavings > 10000) {
      recommendations.push(`–û—Ç–ª–∏—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: —ç–∫–æ–Ω–æ–º–∏—è ${Math.round(performanceMetrics.imageOptimizationSavings / 1000)}KB`);
    }
    
    return recommendations;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ fallback —à–∞–±–ª–æ–Ω–∞
   */
  /*
  private _getFallbackTemplate(_destinationCount: number): never { // Currently unused
    throw new Error('getFallbackTemplate is disabled by project policy.');
  }
  */
}