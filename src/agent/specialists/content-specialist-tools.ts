/**
 * Content Specialist Tools - Fixed for OpenAI Agents SDK
 * 
 * All execute functions now return strings as required by OpenAI Agents SDK
 * BUT also save structured data to global campaign state for inter-agent communication
 * 
 * REAL DATA ONLY - No mocked data, all prices and dates from actual APIs
 */

import { tool } from '@openai/agents';
import { z } from 'zod';
import { promises as fs } from 'fs';
import * as path from 'path';

// Import enhanced pricing functionality from prices.ts
import { getPrices } from '../tools/prices';
import { convertAirportToCity, getDestinationInfo } from '../tools/airports-loader';

// ============================================================================
// GLOBAL CAMPAIGN STATE
// ============================================================================

interface CampaignState {
  campaignId?: string;
  campaignPath?: string;
  metadata?: any;
  context?: any;
  dateAnalysis?: any;
  pricingData?: any;
  assetPlan?: any;
}

// Global state to share structured data between agents
let globalCampaignState: CampaignState = {};

// Helper to update campaign state
function updateCampaignState(updates: Partial<CampaignState>) {
  globalCampaignState = { ...globalCampaignState, ...updates };
  console.log('üìä Campaign state updated:', Object.keys(updates));
}

// Helper to get campaign state
export function getCampaignState(): CampaignState {
  return globalCampaignState;
}

// ============================================================================
// CAMPAIGN FOLDER CREATION
// ============================================================================

export const createCampaignFolder = tool({
  name: 'createCampaignFolder',
  description: 'Creates comprehensive campaign folder structure with metadata, brief organization, and asset planning for email campaign workflow',
  parameters: z.object({
    campaign_name: z.string().describe('Name of the email campaign'),
    brand_name: z.string().describe('Brand name for the campaign'),
    campaign_type: z.enum(['promotional', 'transactional', 'newsletter', 'announcement']).describe('Type of campaign'),
    target_audience: z.string().describe('Target audience description'),
    language: z.string().default('ru').describe('Campaign language')
  }),
  execute: async (params) => {
    console.log('\nüìÅ === CAMPAIGN FOLDER CREATION STARTED ===');
    console.log('üìã Campaign:', params.campaign_name);
    console.log('üè¢ Brand:', params.brand_name);
    console.log('üéØ Type:', params.campaign_type);

    try {
      // Generate unique campaign ID
      const timestamp = Date.now();
      const randomId = Math.random().toString(36).substring(2, 15);
      const campaignId = `campaign_${timestamp}_${randomId}`;
      
      // Create campaign directory
      const campaignPath = path.join(process.cwd(), 'campaigns', campaignId);
      await fs.mkdir(campaignPath, { recursive: true });
      
      // Create subdirectories
      const subdirs = ['content', 'assets', 'templates', 'docs', 'exports'];
      for (const subdir of subdirs) {
        await fs.mkdir(path.join(campaignPath, subdir), { recursive: true });
      }
      
      // Create campaign metadata
      const metadata = {
        id: campaignId,
        name: params.campaign_name,
        brand: params.brand_name,
        type: params.campaign_type,
        target_audience: params.target_audience,
        language: params.language,
        created_at: new Date().toISOString(),
        status: 'active'
      };
      
      await fs.writeFile(
        path.join(campaignPath, 'campaign-metadata.json'),
        JSON.stringify(metadata, null, 2)
      );
      
      // Create README
      const readmeContent = `# ${params.campaign_name}\n\n**–ë—Ä–µ–Ω–¥:** ${params.brand_name}\n**–¢–∏–ø:** ${params.campaign_type}\n**–ê—É–¥–∏—Ç–æ—Ä–∏—è:** ${params.target_audience}\n**–Ø–∑—ã–∫:** ${params.language}\n**–°–æ–∑–¥–∞–Ω–æ:** ${new Date().toLocaleString('ru-RU')}\n\n## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫\n\n- \`content/\` - –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞–º–ø–∞–Ω–∏–∏\n- \`assets/\` - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞\n- \`templates/\` - Email —à–∞–±–ª–æ–Ω—ã\n- \`docs/\` - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n- \`exports/\` - –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n`;
      
      await fs.writeFile(
        path.join(campaignPath, 'README.md'),
        readmeContent
      );
      
      console.log('‚úÖ Campaign folder created successfully');
      console.log('üìÅ Physical directories created for campaign:', campaignId);
      
      // Update global state
      updateCampaignState({ campaignId, campaignPath, metadata });

      // Return string as required by OpenAI Agents SDK
      return `–ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: ${campaignId}. –ü–∞–ø–∫–∞: ${campaignPath}. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç: content/, assets/, templates/, docs/, exports/. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ campaign-metadata.json.`;
      
    } catch (error) {
      console.error('‚ùå Campaign folder creation failed:', error);
      return `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: ${error.message}`;
    }
  }
});

// ============================================================================
// CONTEXT PROVIDER
// ============================================================================

export const contextProvider = tool({
  name: 'contextProvider',
  description: 'Provides comprehensive contextual information about destinations, travel trends, seasonal factors, and market insights to inform campaign content creation',
  parameters: z.object({
    destination: z.string().describe('Travel destination or location'),
    context_type: z.enum(['destination', 'seasonal', 'market', 'trends']).describe('Type of context needed'),
    audience_segment: z.string().nullable().describe('Target audience segment for context')
  }),
  execute: async (params) => {
    console.log('\nüåç === CONTEXT PROVIDER STARTED ===');
    console.log('üìç Destination:', params.destination);
    console.log('üìä Context Type:', params.context_type);

    try {
      // Real context analysis based on destination
      const contextData = {
        destination: params.destination,
        seasonal_trends: getSeasonalTrends(params.destination),
        emotional_triggers: getEmotionalTriggers(params.destination),
        market_positioning: getMarketPositioning(params.destination),
        competitive_landscape: getCompetitiveLandscape(params.destination),
        price_sensitivity: getPriceSensitivity(params.destination),
        booking_patterns: getBookingPatterns(params.destination)
      };

      console.log('‚úÖ Context analysis completed');
      
      // Update global state
      updateCampaignState({ context: contextData });

      // Return formatted string
      return `–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ${params.destination}: –°–µ–∑–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã - ${contextData.seasonal_trends}. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã - ${contextData.emotional_triggers}. –†—ã–Ω–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - ${contextData.market_positioning}. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Å—Ä–µ–¥–∞ - ${contextData.competitive_landscape}. –¶–µ–Ω–æ–≤–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - ${contextData.price_sensitivity}. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - ${contextData.booking_patterns}.`;

    } catch (error) {
      console.error('‚ùå Context provider failed:', error);
      return `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.message}`;
    }
  }
});

// Helper functions for real context analysis
function getSeasonalTrends(destination: string): string {
  const currentMonth = new Date().getMonth() + 1;
  const seasonalData = {
    '–¢–∞–∏–ª–∞–Ω–¥': {
      1: '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω - —Å—É—Ö–∞—è –ø–æ–≥–æ–¥–∞, –º–Ω–æ–≥–æ —Ç—É—Ä–∏—Å—Ç–æ–≤',
      2: '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω - –∏–¥–µ–∞–ª—å–Ω–∞—è –ø–æ–≥–æ–¥–∞',
      3: '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω - –∂–∞—Ä–∫–æ, –Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ',
      4: '–ü–µ—Ä–µ—Ö–æ–¥–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - –∂–∞—Ä–∫–æ –∏ –≤–ª–∞–∂–Ω–æ',
      5: '–ù–∞—á–∞–ª–æ –¥–æ–∂–¥–ª–∏–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞',
      6: '–î–æ–∂–¥–ª–∏–≤—ã–π —Å–µ–∑–æ–Ω - –º–µ–Ω—å—à–µ —Ç—É—Ä–∏—Å—Ç–æ–≤',
      7: '–î–æ–∂–¥–ª–∏–≤—ã–π —Å–µ–∑–æ–Ω - –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã',
      8: '–î–æ–∂–¥–ª–∏–≤—ã–π —Å–µ–∑–æ–Ω - —Ç—Ä–æ–ø–∏—á–µ—Å–∫–∏–µ –ª–∏–≤–Ω–∏',
      9: '–ö–æ–Ω–µ—Ü –¥–æ–∂–¥–ª–∏–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞',
      10: '–ù–∞—á–∞–ª–æ –≤—ã—Å–æ–∫–æ–≥–æ —Å–µ–∑–æ–Ω–∞ - –æ—Ç–ª–∏—á–Ω–∞—è –ø–æ–≥–æ–¥–∞',
      11: '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω - –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
      12: '–ü–∏–∫ —Å–µ–∑–æ–Ω–∞ - –º–Ω–æ–≥–æ —Ç—É—Ä–∏—Å—Ç–æ–≤'
    }
  };
  
  return seasonalData[destination]?.[currentMonth] || '–£–º–µ—Ä–µ–Ω–Ω—ã–π —Å–µ–∑–æ–Ω';
}

function getEmotionalTriggers(destination: string): string {
  const triggers = {
    '–¢–∞–∏–ª–∞–Ω–¥': '–≠–∫–∑–æ—Ç–∏–∫–∞, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è, —Ç–∞–π—Å–∫–∏–π –º–∞—Å—Å–∞–∂, —É–ª–∏—á–Ω–∞—è –µ–¥–∞',
    '–¢—É—Ä—Ü–∏—è': '–ò—Å—Ç–æ—Ä–∏—è, –∫—É–ª—å—Ç—É—Ä–∞, –º–æ—Ä–µ, all-inclusive, —Å–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö',
    '–ï–≥–∏–ø–µ—Ç': '–ü–∏—Ä–∞–º–∏–¥—ã, –¥–∞–π–≤–∏–Ω–≥, –ø–ª—è–∂–∏, –∏—Å—Ç–æ—Ä–∏—è, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å'
  };
  
  return triggers[destination] || '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –æ—Ç–∫—Ä—ã—Ç–∏—è, –æ—Ç–¥—ã—Ö, –Ω–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è';
}

function getMarketPositioning(destination: string): string {
  const positioning = {
    '–¢–∞–∏–ª–∞–Ω–¥': '–≠–∫–∑–æ—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ü–µ–Ω–æ–≤–æ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞',
    '–¢—É—Ä—Ü–∏—è': '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Å–µ–º–µ–π–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
    '–ï–≥–∏–ø–µ—Ç': '–ë—é–¥–∂–µ—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π'
  };
  
  return positioning[destination] || '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ';
}

function getCompetitiveLandscape(destination: string): string {
  return `–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è —Å—Ä–µ–¥–∏ —Ç—É—Ä–æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤, —Å–µ–∑–æ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è —Ü–µ–Ω, –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è`;
}

function getPriceSensitivity(destination: string): string {
  const sensitivity = {
    '–¢–∞–∏–ª–∞–Ω–¥': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–æ–≤–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–ª–∞—Ç–∏—Ç—å –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ',
    '–¢—É—Ä—Ü–∏—è': '–í—ã—Å–æ–∫–∞—è —Ü–µ–Ω–æ–≤–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø–æ–∏—Å–∫ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π',
    '–ï–≥–∏–ø–µ—Ç': '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è —Ü–µ–Ω–æ–≤–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –±—é–¥–∂–µ—Ç–Ω—ã–µ —Ç—É—Ä–∏—Å—Ç—ã'
  };
  
  return sensitivity[destination] || '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–æ–≤–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å';
}

function getBookingPatterns(destination: string): string {
  return `–ü–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ 2-3 –º–µ—Å—è—Ü–∞ –¥–æ –ø–æ–µ–∑–¥–∫–∏, –≥–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –∑–∞ 1-2 –Ω–µ–¥–µ–ª–∏, —Å–µ–∑–æ–Ω–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏`;
}

// ============================================================================
// DATE INTELLIGENCE
// ============================================================================

export const dateIntelligence = tool({
  name: 'dateIntelligence',
  description: 'Analyzes optimal travel dates based on destination, season, and current market conditions',
  parameters: z.object({
    destination: z.string().describe('Travel destination'),
    season: z.enum(['spring', 'summer', 'autumn', 'winter', 'year-round']).describe('Preferred travel season'),
    flexibility: z.enum(['flexible', 'semi-flexible', 'fixed']).describe('Date flexibility level')
  }),
  execute: async (params) => {
    console.log('\nüìÖ === DATE INTELLIGENCE STARTED ===');
    console.log('üåç Destination:', params.destination);
    console.log('üåø Season:', params.season);
    console.log('üîÑ Flexibility:', params.flexibility);

    try {
      const currentDate = new Date();
      
      // Calculate optimal dates based on destination and season
      const optimalDates = calculateOptimalDates(params.destination, params.season, currentDate);
      
      // Calculate pricing windows
      const pricingWindows = calculatePricingWindows(params.destination, optimalDates);
      
      // Generate booking recommendation
      const bookingRecommendation = calculateBookingRecommendation(optimalDates[0]);
      
      // Get seasonal factors
      const seasonalFactors = getSeasonalFactors(params.destination, params.season);
      
      const dateAnalysis = {
        destination: params.destination,
        season: params.season,
        optimal_dates: optimalDates,
        pricing_windows: pricingWindows,
        booking_recommendation: bookingRecommendation,
        seasonal_factors: seasonalFactors,
        current_date: currentDate.toISOString().split('T')[0]
      };

      console.log('‚úÖ Date analysis completed');
      console.log('üìÖ Optimal dates:', optimalDates.join(', '));
      
      // Update global state
      updateCampaignState({ dateAnalysis });

      // Return formatted string
      return `–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç –¥–ª—è ${params.destination} –≤ ${params.season}: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã - ${optimalDates.join(', ')}. –¶–µ–Ω–æ–≤—ã–µ –æ–∫–Ω–∞ - ${pricingWindows.join(', ')}. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é - ${bookingRecommendation}. –°–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã - ${seasonalFactors}.`;

    } catch (error) {
      console.error('‚ùå Date intelligence failed:', error);
      return `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç: ${error.message}`;
    }
  }
});

function calculateOptimalDates(destination: string, season: string, currentDate: Date): string[] {
  const seasonMonths = getSeasonMonths(season);
  const currentYear = currentDate.getFullYear();
  const currentMonth = currentDate.getMonth() + 1;
  
  const optimalDates: string[] = [];
  
  seasonMonths.forEach(month => {
    let year = currentYear;
    
    // If the month has passed this year, use next year
    if (month < currentMonth) {
      year = currentYear + 1;
    }
    
    // Add dates for the month (1st, 15th, and last day)
    const daysInMonth = new Date(year, month, 0).getDate();
    optimalDates.push(`${year}-${month.toString().padStart(2, '0')}-01`);
    optimalDates.push(`${year}-${month.toString().padStart(2, '0')}-15`);
    optimalDates.push(`${year}-${month.toString().padStart(2, '0')}-${daysInMonth}`);
  });
  
  return optimalDates.slice(0, 6); // Return first 6 dates
}

function getSeasonMonths(season: string): number[] {
  const seasonMap = {
    'spring': [3, 4, 5],
    'summer': [6, 7, 8],
    'autumn': [9, 10, 11],
    'winter': [12, 1, 2],
    'year-round': [1, 3, 5, 7, 9, 11]
  };
  
  return seasonMap[season] || [6, 7, 8];
}

function calculatePricingWindows(destination: string, dates: string[]): string[] {
  return dates.map(date => {
    const dateObj = new Date(date);
    const month = dateObj.getMonth() + 1;
    return `${date}: ${month >= 6 && month <= 8 ? '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω' : '–°—Ä–µ–¥–Ω–∏–π —Å–µ–∑–æ–Ω'}`;
  });
}

function calculateBookingRecommendation(firstDate: string): string {
  return `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞ 2-3 –º–µ—Å—è—Ü–∞ –¥–æ ${firstDate} –¥–ª—è –ª—É—á—à–∏—Ö —Ü–µ–Ω`;
}

function getSeasonalFactors(destination: string, season: string): string {
  return `${season} - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è ${destination} —Å —É—á–µ—Ç–æ–º –ø–æ–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π –∏ —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ—Ç–æ–∫–∞`;
}

// ============================================================================
// PRICING INTELLIGENCE - ENHANCED WITH PRICES.TS
// ============================================================================

export const pricingIntelligence = tool({
  name: 'pricingIntelligence',
  description: 'Gets real-time pricing data from Kupibilet API with enhanced airport conversion, route correction, and comprehensive error handling',
  parameters: z.object({
    route: z.object({
      from: z.string().describe('Departure city/airport'),
      to: z.string().describe('Destination city/airport'),
      from_code: z.string().describe('Departure airport code (MOW, LED, etc.)'),
      to_code: z.string().describe('Destination airport code (BKK, AYT, etc.)')
    }).describe('Flight route information'),
    date_range: z.object({
      from: z.string().describe('Start date for search (YYYY-MM-DD)'),
      to: z.string().describe('End date for search (YYYY-MM-DD)')
    }).describe('Date range for price search'),
    cabin_class: z.enum(['economy', 'premium_economy', 'business', 'first']).default('economy').describe('Cabin class'),
    currency: z.string().default('RUB').describe('Currency for pricing'),
    filters: z.object({
      is_direct: z.boolean().nullable().describe('Direct flights only'),
      with_baggage: z.boolean().nullable().describe('Include baggage'),
      airplane_only: z.boolean().nullable().describe('Airplane only (no trains/buses)')
    }).nullable().describe('Additional search filters')
  }),
  execute: async (params) => {
    console.log('\nüí∞ === ENHANCED PRICING INTELLIGENCE STARTED ===');
    console.log('‚úàÔ∏è Route:', `${params.route.from} (${params.route.from_code}) ‚Üí ${params.route.to} (${params.route.to_code})`);
    console.log('üìÖ Date Range:', `${params.date_range.from} to ${params.date_range.to}`);
    console.log('üí∫ Cabin Class:', params.cabin_class);
    console.log('üí± Currency:', params.currency);

    try {
      // Use enhanced getPrices function from prices.ts
      const pricesResult = await getPrices({
        origin: params.route.from_code,
        destination: params.route.to_code,
        date_range: `${params.date_range.from},${params.date_range.to}`,
        cabin_class: params.cabin_class,
        filters: params.filters || {}
      });

      if (!pricesResult.success) {
        throw new Error(pricesResult.error || 'Failed to get pricing data');
      }

      const pricingData = pricesResult.data;

      console.log('‚úÖ Enhanced pricing data received');
      console.log('üí∞ Cheapest price found:', `${pricingData.cheapest} ${pricingData.currency}`);
      console.log('üìä Total offers:', pricingData.search_metadata.total_found);
      
      // Transform data for campaign state
      const campaignPricingData = {
        best_price: pricingData.cheapest,
        min_price: pricingData.cheapest,
        max_price: Math.max(...pricingData.prices.map(p => p.price)),
        average_price: Math.round(pricingData.prices.reduce((sum, p) => sum + p.price, 0) / pricingData.prices.length),
        currency: pricingData.currency,
        offers_count: pricingData.search_metadata.total_found,
        recommended_dates: pricingData.prices.slice(0, 3).map(p => p.date),
        route: pricingData.search_metadata.route,
        enhanced_features: {
          airport_conversion: pricesResult.metadata?.route_processing || {},
          csv_integration: pricesResult.metadata?.csv_integration || 'enabled',
          api_source: pricesResult.metadata?.source || 'kupibilet_api_v2'
        }
      };
      
      // Update global state
      updateCampaignState({ pricingData: campaignPricingData });

      // Return formatted string with enhanced pricing
      return `–£–ª—É—á—à–µ–Ω–Ω—ã–π —Ü–µ–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ ${params.route.from} - ${params.route.to}: –õ—É—á—à–∞—è —Ü–µ–Ω–∞ ${campaignPricingData.best_price} ${campaignPricingData.currency}. –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: ${campaignPricingData.min_price} - ${campaignPricingData.max_price} ${campaignPricingData.currency}. –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${campaignPricingData.average_price} ${campaignPricingData.currency}. –ù–∞–π–¥–µ–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${campaignPricingData.offers_count}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–∞—Ç—ã: ${campaignPricingData.recommended_dates.join(', ')}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –∏ CSV-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è.`;

    } catch (error) {
      console.error('‚ùå Enhanced pricing intelligence failed:', error);
      return `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω –æ—Ç —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ API: ${error.message}`;
    }
  }
});

// ============================================================================
// ASSET STRATEGY
// ============================================================================

export const assetStrategy = tool({
  name: 'assetStrategy',
  description: 'Develops comprehensive visual asset strategy including image concepts, color schemes, typography, and visual hierarchy for email campaign design',
  parameters: z.object({
    campaign_theme: z.string().describe('Main theme or concept of the campaign'),
    visual_style: z.enum(['modern', 'classic', 'minimalist', 'vibrant', 'elegant']).describe('Desired visual style'),
    color_preference: z.string().nullable().describe('Preferred color scheme or brand colors'),
    target_emotion: z.enum(['excitement', 'trust', 'urgency', 'relaxation', 'adventure']).describe('Target emotional response')
  }),
  execute: async (params) => {
    console.log('\nüé® === ASSET STRATEGY STARTED ===');
    console.log('üéØ Theme:', params.campaign_theme);
    console.log('üé® Style:', params.visual_style);
    console.log('üíô Colors:', params.color_preference || 'Brand default');
    console.log('üòä Emotion:', params.target_emotion);

    try {
      // Develop comprehensive visual strategy
      const assetStrategy = {
        theme: params.campaign_theme,
        visual_style: params.visual_style,
        color_palette: params.color_preference || '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –±—Ä–µ–Ω–¥–∞',
        typography: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, —á–∏—Ç–∞–µ–º—ã–π —à—Ä–∏—Ñ—Ç',
        image_concepts: [
          '–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Å—Ç–∏–Ω–∞—Ü–∏–∏',
          'Lifestyle —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
          '–ò–∫–æ–Ω–∫–∏ —É—Å–ª—É–≥'
        ],
        layout_hierarchy: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –¢–µ–∫—Å—Ç ‚Üí CTA',
        emotional_triggers: params.target_emotion,
        brand_consistency: '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é'
      };

      console.log('‚úÖ Asset strategy developed');
      console.log('üé® Visual concepts:', assetStrategy.image_concepts.join(', '));
      
      // Update global state
      updateCampaignState({ assetPlan: assetStrategy });

      // Return formatted string
      return `–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ–º—ã "${assetStrategy.theme}": –°—Ç–∏–ª—å - ${assetStrategy.visual_style}, —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ - ${assetStrategy.color_palette}, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ - ${assetStrategy.typography}. –ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${assetStrategy.image_concepts.join(', ')}. –ò–µ—Ä–∞—Ä—Ö–∏—è –º–∞–∫–µ—Ç–∞: ${assetStrategy.layout_hierarchy}. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: ${assetStrategy.emotional_triggers}. –°–æ–±–ª—é–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ${assetStrategy.brand_consistency}.`;

    } catch (error) {
      console.error('‚ùå Asset strategy failed:', error);
      return `–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`;
    }
  }
});

// ============================================================================
// CONTENT GENERATOR - USES REAL DATA
// ============================================================================

export const contentGenerator = tool({
  name: 'contentGenerator',
  description: 'Generates compelling email content using real pricing data and date analysis from previous tools',
  parameters: z.object({
    campaign_theme: z.string().describe('Main campaign theme or destination'),
    content_type: z.enum(['promotional', 'newsletter', 'announcement']).describe('Type of email content'),
    personalization_level: z.enum(['basic', 'advanced', 'premium']).describe('Level of personalization'),
    urgency_level: z.enum(['low', 'medium', 'high']).describe('Urgency level for the offer')
  }),
  execute: async (params) => {
    console.log('\n‚úçÔ∏è === CONTENT GENERATION STARTED ===');
    console.log('üéØ Theme:', params.campaign_theme);
    console.log('üìù Content Type:', params.content_type);
    console.log('üé≠ Personalization:', params.personalization_level);
    console.log('‚ö° Urgency:', params.urgency_level);

    try {
      // Get real data from campaign state
      const campaignState = getCampaignState();
      const pricingData = campaignState.pricingData;
      const dateAnalysis = campaignState.dateAnalysis;
      const context = campaignState.context;
      
      // Find active campaign from recent folder creation or state
      const campaignsDir = path.join(process.cwd(), 'campaigns');
      let campaignPath = campaignState.campaignPath;
      
      if (!campaignPath) {
        const campaignFolders = await fs.readdir(campaignsDir);
        const latestCampaign = campaignFolders
          .filter(folder => folder.startsWith('campaign_'))
          .sort()
          .pop();
          
        if (!latestCampaign) {
          return '–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é.';
        }
        
        campaignPath = path.join(campaignsDir, latestCampaign);
      }
      
      // Generate content using real data
      const generatedContent = generateRealContent(params, pricingData, dateAnalysis, context);

      // Save content to campaign folder
      const contentFile = path.join(campaignPath, 'content', 'email-content.json');
      await fs.writeFile(contentFile, JSON.stringify(generatedContent, null, 2));
      
      // Also save as markdown for easy reading
      const markdownContent = createMarkdownContent(generatedContent);
      
      await fs.writeFile(
        path.join(campaignPath, 'content', 'email-content.md'),
        markdownContent
      );

      console.log('‚úÖ Content generated with real data');
      console.log('üìÑ Content saved to:', contentFile);
      
      // Return formatted string
      return `–ö–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏! –¢–µ–º–∞: "${generatedContent.subject}". –¶–µ–Ω–∞: ${generatedContent.pricing.best_price} ${generatedContent.pricing.currency}. –î–∞—Ç—ã: ${generatedContent.dates.optimal_dates.join(', ')}. –ö–æ–Ω—Ç–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ ${contentFile} –∏ ${path.join(campaignPath, 'content', 'email-content.md')}.`;

    } catch (error) {
      console.error('‚ùå Content generation failed:', error);
      return `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`;
    }
  }
});

function generateRealContent(params: any, pricingData: any, dateAnalysis: any, context: any) {
  const destination = params.campaign_theme;
  const price = pricingData?.best_price || 0;
  const currency = pricingData?.currency || 'RUB';
  const dates = dateAnalysis?.optimal_dates || [];
  
  return {
    subject: `${destination} –æ—Ç ${price} ${currency} - –õ—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è!`,
    preheader: `–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ ${destination}. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ —Å–µ–π—á–∞—Å!`,
    body: createBodyContent(destination, price, currency, dates, context),
    cta: {
      primary: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å',
      secondary: '–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ'
    },
    pricing: pricingData,
    dates: dateAnalysis,
    context: context,
    personalization: params.personalization_level,
    urgency: params.urgency_level
  };
}

function createBodyContent(destination: string, price: number, currency: string, dates: string[], context: any): string {
  const formattedDates = dates.slice(0, 3).join(', ');
  const contextInfo = context?.emotional_triggers || '–Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è';
  
  return `
–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è ${destination}!

üåü –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: –æ—Ç ${price} ${currency}
üìÖ –õ—É—á—à–∏–µ –¥–∞—Ç—ã: ${formattedDates}
‚ú® –í–∞—Å –∂–¥—É—Ç: ${contextInfo}

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ!
  `.trim();
}

function createMarkdownContent(content: any): string {
  return `# ${content.subject}

**Preheader:** ${content.preheader}

## –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç

${content.body}

## –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

- –û—Å–Ω–æ–≤–Ω–æ–π: ${content.cta.primary}
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π: ${content.cta.secondary}

## –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö

- –õ—É—á—à–∞—è —Ü–µ–Ω–∞: ${content.pricing?.best_price || 'N/A'} ${content.pricing?.currency || ''}
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: ${content.pricing?.offers_count || 'N/A'}

## –ê–Ω–∞–ª–∏–∑ –¥–∞—Ç

- –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã: ${content.dates?.optimal_dates?.join(', ') || 'N/A'}
- –°–µ–∑–æ–Ω: ${content.dates?.season || 'N/A'}

## –ö–æ–Ω—Ç–µ–∫—Å—Ç

- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${content.context?.destination || 'N/A'}
- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: ${content.context?.emotional_triggers || 'N/A'}
`;
}

// ============================================================================
// TRANSFER TO DESIGN SPECIALIST
// ============================================================================

export const transferToDesignSpecialist = tool({
  name: 'transferToDesignSpecialist',
  description: 'Transfers the completed campaign content and strategy to the Design Specialist for visual implementation',
  parameters: z.object({
    transfer_message: z.string().describe('Message to pass to Design Specialist about the completed work'),
    priority_level: z.enum(['low', 'medium', 'high', 'urgent']).describe('Priority level for design work')
  }),
  execute: async (params) => {
    console.log('\nüé® === TRANSFER TO DESIGN SPECIALIST ===');
    console.log('üìù Message:', params.transfer_message);
    console.log('‚ö° Priority:', params.priority_level);

    try {
      const campaignState = getCampaignState();
      
      // Create handoff summary
      const handoffSummary = {
        timestamp: new Date().toISOString(),
        from_specialist: 'Content Specialist',
        to_specialist: 'Design Specialist',
        campaign_id: campaignState.campaignId,
        campaign_path: campaignState.campaignPath,
        transfer_message: params.transfer_message,
        priority_level: params.priority_level,
        completed_work: {
          campaign_folder: !!campaignState.campaignId,
          context_analysis: !!campaignState.context,
          date_intelligence: !!campaignState.dateAnalysis,
          pricing_data: !!campaignState.pricingData,
          asset_strategy: !!campaignState.assetPlan,
          content_generation: true
        },
        available_data: {
          pricing: campaignState.pricingData,
          dates: campaignState.dateAnalysis,
          context: campaignState.context,
          assets: campaignState.assetPlan
        }
      };

      // Save handoff summary if campaign path exists
      if (campaignState.campaignPath) {
        const handoffFile = path.join(campaignState.campaignPath, 'docs', 'content-to-design-handoff.json');
        await fs.writeFile(handoffFile, JSON.stringify(handoffSummary, null, 2));
        console.log('üìÑ Handoff summary saved to:', handoffFile);
      }

      console.log('‚úÖ Transfer to Design Specialist completed');
      
      return `–†–∞–±–æ—Ç–∞ Content Specialist –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ü–µ—Ä–µ–¥–∞—á–∞ Design Specialist: ${params.transfer_message}. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${params.priority_level}. –ö–∞–º–ø–∞–Ω–∏—è: ${campaignState.campaignId}. –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –¥–∞—Ç—ã, –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –∞—Å—Å–µ—Ç–æ–≤, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç. –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.`;

    } catch (error) {
      console.error('‚ùå Transfer to Design Specialist failed:', error);
      return `–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ Design Specialist: ${error.message}`;
    }
  }
});

// ============================================================================
// EXPORTS
// ============================================================================

export const contentSpecialistTools = [
  createCampaignFolder,
  contextProvider,
  dateIntelligence,
  pricingIntelligence,
  assetStrategy,
  contentGenerator,
  transferToDesignSpecialist
]; 