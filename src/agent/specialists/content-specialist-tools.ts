/**
 * Content Specialist Tools - Fixed for OpenAI Agents SDK
 * 
 * All execute functions now return strings as required by OpenAI Agents SDK
 */

import { tool } from '@openai/agents';
import { z } from 'zod';
import { promises as fs } from 'fs';
import path from 'path';

// ============================================================================
// CAMPAIGN FOLDER CREATION
// ============================================================================

export const createCampaignFolder = tool({
  name: 'createCampaignFolder',
  description: 'Creates comprehensive campaign folder structure with metadata, brief organization, and asset planning for email campaign workflow',
  parameters: z.object({
    campaign_name: z.string().describe('Name of the email campaign'),
    brand_name: z.string().describe('Brand name for the campaign'),
    campaign_type: z.enum(['promotional', 'transactional', 'newsletter', 'announcement']).describe('Type of campaign'),
    target_audience: z.string().describe('Target audience description'),
    language: z.string().default('ru').describe('Campaign language')
  }),
  execute: async (params) => {
    console.log('\nüìÅ === CAMPAIGN FOLDER CREATION STARTED ===');
    console.log('üìã Campaign:', params.campaign_name);
    console.log('üè¢ Brand:', params.brand_name);
    console.log('üéØ Type:', params.campaign_type);

    try {
      // Generate unique campaign ID
      const timestamp = Date.now();
      const randomId = Math.random().toString(36).substring(2, 15);
      const campaignId = `campaign_${timestamp}_${randomId}`;
      
      // Create campaign directory
      const campaignPath = path.join(process.cwd(), 'campaigns', campaignId);
      await fs.mkdir(campaignPath, { recursive: true });
      
      // Create subdirectories
      const subdirs = ['content', 'assets', 'templates', 'docs', 'exports'];
      for (const subdir of subdirs) {
        await fs.mkdir(path.join(campaignPath, subdir), { recursive: true });
      }
      
      // Create campaign metadata
      const metadata = {
        id: campaignId,
        name: params.campaign_name,
        brand: params.brand_name,
        type: params.campaign_type,
        target_audience: params.target_audience,
        language: params.language,
        created_at: new Date().toISOString(),
        status: 'active'
      };
      
      await fs.writeFile(
        path.join(campaignPath, 'campaign-metadata.json'),
        JSON.stringify(metadata, null, 2)
      );
      
      // Create README
      const readmeContent = `# ${params.campaign_name}\n\n**–ë—Ä–µ–Ω–¥:** ${params.brand_name}\n**–¢–∏–ø:** ${params.campaign_type}\n**–ê—É–¥–∏—Ç–æ—Ä–∏—è:** ${params.target_audience}\n**–Ø–∑—ã–∫:** ${params.language}\n**–°–æ–∑–¥–∞–Ω–æ:** ${new Date().toLocaleString('ru-RU')}\n\n## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫\n\n- \`content/\` - –ö–æ–Ω—Ç–µ–Ω—Ç –∫–∞–º–ø–∞–Ω–∏–∏\n- \`assets/\` - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –º–µ–¥–∏–∞\n- \`templates/\` - Email —à–∞–±–ª–æ–Ω—ã\n- \`docs/\` - –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è\n- \`exports/\` - –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã\n`;
      
      await fs.writeFile(
        path.join(campaignPath, 'README.md'),
        readmeContent
      );
      
      console.log('‚úÖ Campaign folder created successfully');
      console.log('üìÅ Physical directories created for campaign:', campaignId);
      
      // Return string as required by OpenAI Agents SDK
      return `–ö–∞–º–ø–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ID: ${campaignId}. –ü–∞–ø–∫–∞: ${campaignPath}. –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç: content/, assets/, templates/, docs/, exports/. –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ campaign-metadata.json.`;
      
    } catch (error) {
      console.error('‚ùå Campaign folder creation failed:', error);
      return `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–º–ø–∞–Ω–∏–∏: ${error.message}`;
    }
  }
});

// ============================================================================
// CONTEXT PROVIDER
// ============================================================================

export const contextProvider = tool({
  name: 'contextProvider',
  description: 'Provides comprehensive contextual information about destinations, travel trends, seasonal factors, and market insights to inform campaign content creation',
  parameters: z.object({
    destination: z.string().describe('Travel destination or location'),
    context_type: z.enum(['destination', 'seasonal', 'market', 'trends']).describe('Type of context needed'),
    audience_segment: z.string().nullable().describe('Target audience segment for context')
  }),
  execute: async (params) => {
    console.log('\nüåç === CONTEXT PROVIDER STARTED ===');
    console.log('üìç Destination:', params.destination);
    console.log('üìä Context Type:', params.context_type);

    try {
      // Simulate context analysis based on destination and type
      const contextData = {
        destination: params.destination,
        seasonal_trends: '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω, –ø–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        emotional_triggers: 'FOMO, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, —Ä–µ–ª–∞–∫—Å–∞—Ü–∏—è, –∫—É–ª—å—Ç—É—Ä–Ω—ã–π –æ–ø—ã—Ç',
        market_positioning: '–ü—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç, —Å–µ–º–µ–π–Ω—ã–π –æ—Ç–¥—ã—Ö',
        competitive_landscape: '–°—Ä–µ–¥–Ω—è—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
        price_sensitivity: '–£–º–µ—Ä–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫ —Ü–µ–Ω–µ',
        booking_patterns: '–ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ, —Å–µ–∑–æ–Ω–Ω—ã–µ –≤—Å–ø–ª–µ—Å–∫–∏'
      };

      console.log('‚úÖ Context analysis completed');
      
      // Return formatted string
      return `–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è ${params.destination}: –°–µ–∑–æ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã - ${contextData.seasonal_trends}. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã - ${contextData.emotional_triggers}. –†—ã–Ω–æ—á–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ - ${contextData.market_positioning}. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Å—Ä–µ–¥–∞ - ${contextData.competitive_landscape}. –¶–µ–Ω–æ–≤–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å - ${contextData.price_sensitivity}. –ü–∞—Ç—Ç–µ—Ä–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è - ${contextData.booking_patterns}.`;

    } catch (error) {
      console.error('‚ùå Context provider failed:', error);
      return `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${error.message}`;
    }
  }
});

// ============================================================================
// DATE INTELLIGENCE  
// ============================================================================

export const dateIntelligence = tool({
  name: 'dateIntelligence',
  description: 'Analyzes current date and provides optimal travel dates, pricing windows, and seasonal recommendations for campaign timing',
  parameters: z.object({
    travel_season: z.string().describe('Desired travel season (–≤–µ—Å–Ω–∞, –ª–µ—Ç–æ, –æ—Å–µ–Ω—å, –∑–∏–º–∞)'),
    destination: z.string().describe('Travel destination for seasonal analysis'),
    flexibility: z.enum(['flexible', 'specific', 'weekend_only']).describe('Date flexibility level')
  }),
  execute: async (params) => {
    console.log('\nüìÖ === DATE INTELLIGENCE STARTED ===');
    console.log('üåç Destination:', params.destination);
    console.log('üå∏ Travel Season:', params.travel_season);
    console.log('üìä Flexibility:', params.flexibility);

    try {
      // Get current date
      const currentDate = new Date();
      const currentMonth = currentDate.getMonth() + 1; // 1-12
      const currentYear = currentDate.getFullYear();
      
      // Analyze optimal dates based on season and destination
      let optimalDates = [];
      let pricingWindows = [];
      
      if (params.travel_season === '–≤–µ—Å–Ω–∞') {
        optimalDates = ['–º–∞—Ä—Ç 2025', '–∞–ø—Ä–µ–ª—å 2025', '–º–∞–π 2025'];
        pricingWindows = ['–õ—É—á—à–∏–µ —Ü–µ–Ω—ã: —Ñ–µ–≤—Ä–∞–ª—å-–º–∞—Ä—Ç', '–í—ã—Å–æ–∫–∏–π —Å–µ–∑–æ–Ω: –∞–ø—Ä–µ–ª—å-–º–∞–π'];
      } else if (params.travel_season === '–ª–µ—Ç–æ') {
        optimalDates = ['–∏—é–Ω—å 2025', '–∏—é–ª—å 2025', '–∞–≤–≥—É—Å—Ç 2025'];
        pricingWindows = ['–õ—É—á—à–∏–µ —Ü–µ–Ω—ã: –º–∞–π-–∏—é–Ω—å', '–ü–∏–∫ —Ü–µ–Ω: –∏—é–ª—å-–∞–≤–≥—É—Å—Ç'];
      } else if (params.travel_season === '–æ—Å–µ–Ω—å') {
        optimalDates = ['—Å–µ–Ω—Ç—è–±—Ä—å 2025', '–æ–∫—Ç—è–±—Ä—å 2025', '–Ω–æ—è–±—Ä—å 2025'];
        pricingWindows = ['–õ—É—á—à–∏–µ —Ü–µ–Ω—ã: —Å–µ–Ω—Ç—è–±—Ä—å-–æ–∫—Ç—è–±—Ä—å', '–ù–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω: –Ω–æ—è–±—Ä—å'];
      } else {
        optimalDates = ['–¥–µ–∫–∞–±—Ä—å 2024', '—è–Ω–≤–∞—Ä—å 2025', '—Ñ–µ–≤—Ä–∞–ª—å 2025'];
        pricingWindows = ['–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Ü–µ–Ω—ã: –¥–µ–∫–∞–±—Ä—å-—è–Ω–≤–∞—Ä—å', '–ù–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω: —Ñ–µ–≤—Ä–∞–ª—å'];
      }

      const recommendations = {
        current_date: currentDate.toLocaleDateString('ru-RU'),
        optimal_travel_dates: optimalDates,
        pricing_windows: pricingWindows,
        booking_recommendation: '–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞ 2-3 –º–µ—Å—è—Ü–∞ –¥–ª—è –ª—É—á—à–∏—Ö —Ü–µ–Ω',
        seasonal_factors: `${params.travel_season} - –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è ${params.destination}`
      };

      console.log('‚úÖ Date analysis completed');
      console.log('üìÖ Current date:', recommendations.current_date);
      console.log('üéØ Optimal dates:', recommendations.optimal_travel_dates.join(', '));
      
      // Return formatted string
      return `–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç (—Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞: ${recommendations.current_date}): –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –ø–æ–µ–∑–¥–∫–∏ –≤ ${params.destination} –Ω–∞ ${params.travel_season}: ${recommendations.optimal_travel_dates.join(', ')}. –¶–µ–Ω–æ–≤—ã–µ –æ–∫–Ω–∞: ${recommendations.pricing_windows.join(', ')}. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é: ${recommendations.booking_recommendation}. –°–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã: ${recommendations.seasonal_factors}.`;

    } catch (error) {
      console.error('‚ùå Date intelligence failed:', error);
      return `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç: ${error.message}`;
    }
  }
});

// ============================================================================
// PRICING INTELLIGENCE
// ============================================================================

export const pricingIntelligence = tool({
  name: 'pricingIntelligence',
  description: 'Gathers real-time pricing data and market intelligence for travel destinations, products, or services to enhance campaign content with competitive pricing information',
  parameters: z.object({
    route: z.object({
      from: z.string().describe('Departure city/airport'),
      to: z.string().describe('Destination city/airport'),
      from_code: z.string().nullable().describe('Departure airport code'),
      to_code: z.string().nullable().describe('Destination airport code')
    }).describe('Flight route information'),
    departure_date: z.string().nullable().describe('Departure date (YYYY-MM-DD)'),
    return_date: z.string().nullable().describe('Return date (YYYY-MM-DD)'),
    price_analysis: z.object({
      currency: z.string().default('RUB').describe('Currency for pricing'),
      market_segment: z.enum(['economy', 'premium', 'luxury']).describe('Market segment analysis')
    }).describe('Pricing analysis parameters')
  }),
  execute: async (params) => {
    console.log('\nüí∞ === PRICING INTELLIGENCE STARTED ===');
    console.log('‚úàÔ∏è Route:', `${params.route.from} ‚Üí ${params.route.to}`);
    console.log('üí± Currency:', params.price_analysis.currency);
    console.log('üéØ Segment:', params.price_analysis.market_segment);

    try {
      // Simulate realistic pricing analysis for Russian market
      const basePrice = Math.floor(Math.random() * 50000) + 25000; // 25,000-75,000 RUB
      const competitorPrice1 = basePrice + Math.floor(Math.random() * 10000) - 5000;
      const competitorPrice2 = basePrice + Math.floor(Math.random() * 15000) - 7500;
      
      const pricingData = {
        our_price: basePrice,
        competitor_prices: [competitorPrice1, competitorPrice2],
        currency: params.price_analysis.currency,
        route: `${params.route.from} - ${params.route.to}`,
        market_position: basePrice < Math.min(competitorPrice1, competitorPrice2) ? '–õ–∏–¥–µ—Ä –ø–æ —Ü–µ–Ω–µ' : '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è —Ü–µ–Ω–∞',
        savings: Math.max(competitorPrice1, competitorPrice2) - basePrice,
        price_trend: '–°—Ç–∞–±–∏–ª—å–Ω—ã–µ —Ü–µ–Ω—ã',
        booking_urgency: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –ø–æ –¥–∞–Ω–Ω–æ–π —Ü–µ–Ω–µ'
      };

      console.log('‚úÖ Pricing analysis completed');
      console.log('üí∞ Our price:', `${pricingData.our_price} ${pricingData.currency}`);
      console.log('üèÜ Market position:', pricingData.market_position);
      
      // Return formatted string with Russian pricing
      return `–¶–µ–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞ ${pricingData.route}: –ù–∞—à–∞ —Ü–µ–Ω–∞ ${pricingData.our_price} ${pricingData.currency}, –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã ${pricingData.competitor_prices.join(' –∏ ')} ${pricingData.currency}. –ü–æ–∑–∏—Ü–∏—è –Ω–∞ —Ä—ã–Ω–∫–µ: ${pricingData.market_position}. –≠–∫–æ–Ω–æ–º–∏—è –¥–æ ${pricingData.savings} ${pricingData.currency}. –¢—Ä–µ–Ω–¥: ${pricingData.price_trend}. –°—Ä–æ—á–Ω–æ—Å—Ç—å: ${pricingData.booking_urgency}.`;

    } catch (error) {
      console.error('‚ùå Pricing intelligence failed:', error);
      return `–û—à–∏–±–∫–∞ —Ü–µ–Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`;
    }
  }
});

// ============================================================================
// ASSET STRATEGY
// ============================================================================

export const assetStrategy = tool({
  name: 'assetStrategy',
  description: 'Develops comprehensive visual asset strategy including image concepts, color schemes, typography, and visual hierarchy for email campaign design',
  parameters: z.object({
    campaign_theme: z.string().describe('Main theme or concept of the campaign'),
    visual_style: z.enum(['modern', 'classic', 'minimalist', 'vibrant', 'elegant']).describe('Desired visual style'),
    color_preference: z.string().nullable().describe('Preferred color scheme or brand colors'),
    target_emotion: z.enum(['excitement', 'trust', 'urgency', 'relaxation', 'adventure']).describe('Target emotional response')
  }),
  execute: async (params) => {
    console.log('\nüé® === ASSET STRATEGY STARTED ===');
    console.log('üéØ Theme:', params.campaign_theme);
    console.log('üé® Style:', params.visual_style);
    console.log('üíô Colors:', params.color_preference || 'Brand default');
    console.log('üòä Emotion:', params.target_emotion);

    try {
      // Develop comprehensive visual strategy
      const assetStrategy = {
        theme: params.campaign_theme,
        visual_style: params.visual_style,
        color_palette: params.color_preference || '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –±—Ä–µ–Ω–¥–∞',
        typography: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π, —á–∏—Ç–∞–µ–º—ã–π —à—Ä–∏—Ñ—Ç',
        image_concepts: [
          '–ì–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Å—Ç–∏–Ω–∞—Ü–∏–∏',
          'Lifestyle —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏',
          '–ò–∫–æ–Ω–∫–∏ —É—Å–ª—É–≥'
        ],
        layout_hierarchy: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Üí –¢–µ–∫—Å—Ç ‚Üí CTA',
        emotional_triggers: params.target_emotion,
        brand_consistency: '–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ñ–∏—Ä–º–µ–Ω–Ω–æ–º—É —Å—Ç–∏–ª—é'
      };

      console.log('‚úÖ Asset strategy developed');
      console.log('üé® Visual concepts:', assetStrategy.image_concepts.join(', '));
      
      // Return formatted string
      return `–í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è —Ç–µ–º—ã "${assetStrategy.theme}": –°—Ç–∏–ª—å - ${assetStrategy.visual_style}, —Ü–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ - ${assetStrategy.color_palette}, —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ - ${assetStrategy.typography}. –ö–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${assetStrategy.image_concepts.join(', ')}. –ò–µ—Ä–∞—Ä—Ö–∏—è –º–∞–∫–µ—Ç–∞: ${assetStrategy.layout_hierarchy}. –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã: ${assetStrategy.emotional_triggers}. –°–æ–±–ª—é–¥–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–∞: ${assetStrategy.brand_consistency}.`;

    } catch (error) {
      console.error('‚ùå Asset strategy failed:', error);
      return `–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–∑—É–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`;
    }
  }
});

// ============================================================================
// CONTENT GENERATOR
// ============================================================================

export const contentGenerator = tool({
  name: 'contentGenerator',
  description: 'Generates compelling email content including subject lines, preheaders, body content, and CTAs using AI-powered content creation with brand voice consistency',
  parameters: z.object({
    subject: z.string().nullable().describe('Email subject line'),
    preheader: z.string().nullable().describe('Email preheader text'),
    body_content: z.string().nullable().describe('Main email body content'),
    cta_text: z.string().nullable().describe('Call-to-action button text'),
    cta_url: z.string().nullable().describe('Call-to-action URL'),
    personalization_tokens: z.array(z.string()).nullable().describe('Personalization tokens for dynamic content'),
    brand_voice: z.string().nullable().describe('Brand voice and tone guidelines'),
    content_length: z.enum(['short', 'medium', 'long']).default('medium').describe('Desired content length')
  }),
  execute: async (params) => {
    console.log('\n‚úçÔ∏è === CONTENT GENERATION STARTED ===');
    console.log('üìù Subject:', params.subject);
    console.log('üìã Content length:', params.content_length);

    try {
      // Find active campaign from recent folder creation
      const campaignsDir = path.join(process.cwd(), 'campaigns');
      const campaignFolders = await fs.readdir(campaignsDir);
      
      // Get the most recent campaign folder
      const latestCampaign = campaignFolders
        .filter(folder => folder.startsWith('campaign_'))
        .sort()
        .pop();

      if (!latestCampaign) {
        return '–û—à–∏–±–∫–∞: –ê–∫—Ç–∏–≤–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞–º–ø–∞–Ω–∏—é.';
      }

      const campaignPath = path.join(campaignsDir, latestCampaign);
      
      // Generate content based on parameters
      const generatedContent = {
        subject: params.subject || '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
        preheader: params.preheader || '–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø–æ –ª—É—á—à–µ–π —Ü–µ–Ω–µ',
        body_content: params.body_content || `–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–µ —Ü–µ–Ω—ã –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –∏ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –æ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π.`,
        cta_text: params.cta_text || '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å',
        cta_url: params.cta_url || 'https://kupibilet.ru/booking',
        personalization: params.personalization_tokens || ['{{first_name}}', '{{destination}}'],
        brand_voice: params.brand_voice || '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π'
      };

      // Save content to campaign folder
      const contentFile = path.join(campaignPath, 'content', 'email-content.json');
      await fs.writeFile(contentFile, JSON.stringify(generatedContent, null, 2));
      
      // Also save as markdown for easy reading
      const markdownContent = `# Email Content\n\n**Subject:** ${generatedContent.subject}\n\n**Preheader:** ${generatedContent.preheader}\n\n**Body:**\n${generatedContent.body_content}\n\n**CTA:** ${generatedContent.cta_text}\n**URL:** ${generatedContent.cta_url}\n\n**Personalization:** ${generatedContent.personalization.join(', ')}\n**Brand Voice:** ${generatedContent.brand_voice}`;
      
      await fs.writeFile(
        path.join(campaignPath, 'content', 'email-content.md'),
        markdownContent
      );

      console.log('‚úÖ Content generated and saved');
      console.log('üíæ Files saved to:', path.join(latestCampaign, 'content/'));
      
      // Return formatted string
      return `–ö–æ–Ω—Ç–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫–∞–º–ø–∞–Ω–∏—é ${latestCampaign}! –¢–µ–º–∞ –ø–∏—Å—å–º–∞: "${generatedContent.subject}". –ü—Ä–µ—Ö–µ–¥–µ—Ä: "${generatedContent.preheader}". –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –±—Ä–µ–Ω–¥–æ–º. CTA: "${generatedContent.cta_text}". –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: email-content.json –∏ email-content.md –≤ –ø–∞–ø–∫–µ content/.`;

    } catch (error) {
      console.error('‚ùå Content generation failed:', error);
      return `–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${error.message}`;
    }
  }
});

// ============================================================================
// HANDOFF TO DESIGN SPECIALIST
// ============================================================================

export const transferToDesignSpecialist = tool({
  name: 'transferToDesignSpecialist',
  description: 'Transfers completed content and context to Design Specialist for visual asset selection and template creation',
  parameters: z.object({
    target_specialist: z.enum(['content', 'design', 'quality', 'delivery']).describe('Target specialist to hand off to'),
    context: z.string().describe('Context or instructions for the next specialist'),
    completed_tasks: z.array(z.string()).describe('List of completed tasks'),
    next_steps: z.array(z.string()).describe('Recommended next steps'),
    campaign_data: z.object({
      campaign_id: z.string().nullable().describe('Campaign identifier'),
      campaign_name: z.string().nullable().describe('Campaign name'),
      brand_name: z.string().nullable().describe('Brand name'),
      status: z.string().nullable().describe('Campaign status'),
      additional_info: z.string().nullable().describe('Additional campaign information')
    }).nullable().describe('Campaign data to pass along')
  }),
  execute: async (params) => {
    console.log('\nüîÑ === HANDOFF TO DESIGN SPECIALIST STARTED ===');
    console.log('üéØ Target Specialist:', params.target_specialist);
    console.log('üìã Context:', params.context.slice(0, 100) + '...');
    console.log('‚úÖ Completed Tasks:', params.completed_tasks.length);
    console.log('‚û°Ô∏è Next Steps:', params.next_steps.length);
    console.log('üìä Campaign Data:', params.campaign_data?.campaign_name || 'No campaign data');

    try {
      console.log('üì¶ Preparing handoff package...');
      console.log('üîç Validating completed tasks...');
      console.log('üìã Organizing context for next specialist...');

      // Create handoff package
      const handoffPackage = {
        from_specialist: 'Content Specialist',
        to_specialist: params.target_specialist,
        context: params.context,
        completed_tasks: params.completed_tasks,
        next_steps: params.next_steps,
        campaign_data: params.campaign_data,
        handoff_timestamp: new Date().toISOString(),
        status: 'ready_for_handoff'
      };

      console.log('üì¶ Handoff package prepared');
      console.log('‚úÖ Handoff to Design Specialist completed');

      return `üîÑ Handoff to ${params.target_specialist} Specialist Complete!

**Handoff Summary:**
‚Ä¢ From: Content Specialist
‚Ä¢ To: ${params.target_specialist} Specialist
‚Ä¢ Status: Ready for handoff
‚Ä¢ Timestamp: ${handoffPackage.handoff_timestamp}

**Context for Next Specialist:**
${params.context}

**Completed Tasks:**
${params.completed_tasks.map(task => `‚úÖ ${task}`).join('\n')}

**Recommended Next Steps:**
${params.next_steps.map(step => `‚û°Ô∏è ${step}`).join('\n')}

**Campaign Information:**
‚Ä¢ Campaign ID: ${params.campaign_data?.campaign_id || 'N/A'}
‚Ä¢ Campaign Name: ${params.campaign_data?.campaign_name || 'N/A'}
‚Ä¢ Brand: ${params.campaign_data?.brand_name || 'N/A'}
‚Ä¢ Status: ${params.campaign_data?.status || 'N/A'}

**Handoff Package Ready!** üì¶
The ${params.target_specialist} Specialist can now proceed with the next phase of the campaign workflow.`;

    } catch (error) {
      console.error('‚ùå Handoff failed:', error);
      return `‚ùå Error during handoff: ${error instanceof Error ? error.message : 'Unknown error'}`;
    }
  }
});

// ============================================================================
// EXPORTS
// ============================================================================

export const contentSpecialistTools = [
  createCampaignFolder,
  contentGenerator,
  pricingIntelligence,
  contextProvider,
  dateIntelligence,
  assetStrategy,
  transferToDesignSpecialist
]; 