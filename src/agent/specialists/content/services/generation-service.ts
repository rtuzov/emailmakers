/**
 * üéØ GENERATION SERVICE
 * 
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏, –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * –í—ã–¥–µ–ª–µ–Ω –∏–∑ content-generator.ts –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å OpenAI Agents SDK v2
 */

import {
  ContentGeneratorParams,
  GenerationContext,
  GenerationResult,
  OptimizationResult,
  ContentResult,
  ContentVariant,
  ContentAnalysis,
  ContentInsights,
  // MarketingIntelligence, // unused import
  // ContentGeneratorResult, // unused import
  ValidationResult,
  PerformanceMetrics,
  BaseContentService
} from '../common/content-types';
import { ContentUtils } from '../common/content-utils';
import { PricingService } from './pricing-service';

export class GenerationService implements BaseContentService {
  private performanceStart: number = 0;
  private metricsData: Record<string, number> = {};
  private pricingService: PricingService;

  constructor() {
    this.pricingService = new PricingService();
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (enhanced version of generate_copy)
   */
  async handleGenerate(params: ContentGeneratorParams): Promise<GenerationResult> {
    this.performanceStart = Date.now();

    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validation = this.validateInput(params);
      if (!validation.valid) {
        throw new Error(`Generation validation failed: ${validation.errors.join(', ')}`);
      }

      console.log(`üéØ Generating ${params.content_type || 'email'} content with ${params.generation_strategy || 'default'} strategy`);

      // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ PricingService
      let pricingContext;
      if (params.pricing_data) {
        const pricingResult = await this.pricingService.analyzePricingData(params);
        pricingContext = pricingResult.success ? pricingResult.pricing_context : undefined;
      }

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const generationContext = this.createGenerationContext(params, pricingContext);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const baseContent = await this.generateContentWithAI(params.topic, params.pricing_data, params);

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π
      const enhancedContent = this.enhanceGeneratedContent(baseContent.data, params, generationContext);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
      this.metricsData.ai_model_used = baseContent.model_used || 'gpt-4o-mini';
      this.metricsData.content_length = enhancedContent.body.length;
      this.metricsData.tokens_used = baseContent.tokens_used || 0;

      console.log(`‚úÖ Generated ${params.content_type || 'email'} content (${enhancedContent.body.length} chars)`);

      return {
        success: true,
        content: enhancedContent,
        generation_metadata: {
          strategy_used: params.generation_strategy || 'quality',
          ai_model: String(this.metricsData.ai_model_used || 'gpt-4o-mini'),
          processing_time: Date.now() - this.performanceStart,
          confidence_score: this.calculateConfidenceScore(enhancedContent, params)
        },
        enhancement_applied: {
          pricing_integration: !!params.pricing_data,
          audience_optimization: !!params.target_audience,
          brand_alignment: !!params.assets_context,
          accessibility_compliance: params.content_specs?.accessibility_compliance || true
        }
      };

    } catch (error) {
      console.error('‚ùå Generation service error:', error);
      this.metricsData.success_rate = 0;

      return {
        success: false,
        content: this.getDefaultContent(params),
        generation_metadata: {
          strategy_used: params.generation_strategy || 'quality',
          ai_model: 'error',
          processing_time: Date.now() - this.performanceStart,
          confidence_score: 0
        },
        enhancement_applied: {
          pricing_integration: false,
          audience_optimization: false,
          brand_alignment: false,
          accessibility_compliance: false
        }
      };
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async handleOptimize(params: ContentGeneratorParams): Promise<OptimizationResult> {
    this.performanceStart = Date.now();

    try {
      if (!params.existing_content) {
        throw new Error('Existing content is required for optimization');
      }

      console.log(`üîß Optimizing existing content (${params.existing_content.length} chars)`);

      // –ê–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const analysis = await this.analyzeExistingContent(params.existing_content, params);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const optimizedContent = await this.generateOptimizedContent(params.existing_content, analysis, params);

      // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–π
      const comparison = this.compareContentVersions(params.existing_content, optimizedContent, params);

      console.log(`‚úÖ Content optimized with ${comparison.improvement_score}% improvement`);

      return {
        success: true,
        optimized_content: optimizedContent,
        improvement_analysis: {
          improvement_score: comparison.improvement_score,
          key_changes: comparison.key_changes,
          performance_prediction: {
            expected_lift: comparison.improvement_score,
            confidence_level: comparison.improvement_score > 15 ? 'high' : 
                              comparison.improvement_score > 5 ? 'medium' : 'low'
          }
        },
        comparison_metrics: {
          readability_improvement: comparison.readability_delta,
          engagement_improvement: comparison.engagement_delta,
          conversion_improvement: comparison.conversion_delta
        }
      };

    } catch (error) {
      console.error('‚ùå Optimization service error:', error);

      return {
        success: false,
        optimized_content: this.getDefaultContent(params),
        improvement_analysis: {
          improvement_score: 0,
          key_changes: [],
          performance_prediction: {
            expected_lift: 0,
            confidence_level: 'low'
          }
        },
        comparison_metrics: {
          readability_improvement: 0,
          engagement_improvement: 0,
          conversion_improvement: 0
        }
      };
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è A/B –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async handleVariants(params: ContentGeneratorParams): Promise<{ success: boolean; variants: ContentVariant[] }> {
    this.performanceStart = Date.now();

    try {
      const variantCount = params.variant_options?.variant_count || 2;
      console.log(`üé≤ Generating ${variantCount} content variants`);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–Ω–∞—á–∞–ª–∞
      const baseResult = await this.handleGenerate(params);
      if (!baseResult.success) {
        throw new Error('Failed to generate base content for variants');
      }

      const variants: ContentVariant[] = [];

      // –°–æ–∑–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
      for (let i = 0; i < variantCount; i++) {
        const variantParams = this.createVariantParameters(params, i, variantCount);
        const variantContent = await this.generateContentVariant(baseResult.content, variantParams, params);
        
        variants.push({
          id: ContentUtils.generateId('variant'),
          content: variantContent,
          focus: variantParams.focus,
          score: this.calculateVariantScore(variantContent, params)
        });
      }

      console.log(`‚úÖ Generated ${variants.length} content variants`);

      return {
        success: true,
        variants
      };

    } catch (error) {
      console.error('‚ùå Variants generation error:', error);
      return {
        success: false,
        variants: []
      };
    }
  }

  /**
   * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é
   */
  async handlePersonalize(params: ContentGeneratorParams): Promise<{ success: boolean; personalized_content: ContentResult }> {
    this.performanceStart = Date.now();

    try {
      if (!params.target_audience) {
        throw new Error('Target audience is required for personalization');
      }

      console.log(`üë• Personalizing content for ${typeof params.target_audience === 'string' ? params.target_audience : params.target_audience} audience`);

      // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
      const personalizationContext = ContentUtils.createPersonalizationContext(params.target_audience, params);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏
      const baseResult = await this.handleGenerate(params);
      if (!baseResult.success) {
        throw new Error('Failed to generate base content for personalization');
      }

      // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ª–æ–µ–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
      const personalizedContent = this.applyPersonalizationLayers(baseResult.content, personalizationContext, params);

      console.log(`‚úÖ Content personalized for ${typeof params.target_audience === 'string' ? params.target_audience : params.target_audience}`);

      return {
        success: true,
        personalized_content: personalizedContent
      };

    } catch (error) {
      console.error('‚ùå Personalization error:', error);
      return {
        success: false,
        personalized_content: this.getDefaultContent(params)
      };
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  async handleAnalyze(params: ContentGeneratorParams): Promise<{ success: boolean; analysis: ContentAnalysis; insights: ContentInsights }> {
    this.performanceStart = Date.now();

    try {
      const contentToAnalyze = params.existing_content || params.benchmark_content;
      if (!contentToAnalyze) {
        throw new Error('Content is required for analysis');
      }

      console.log(`üîç Analyzing content quality (${contentToAnalyze.length} chars)`);

      // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      const analysis = await this.performComprehensiveAnalysis(contentToAnalyze, params);
      const insights = await this.generateContentInsights(contentToAnalyze, params);

      console.log(`‚úÖ Content analysis completed with ${analysis.engagement_potential}% engagement potential`);

      return {
        success: true,
        analysis,
        insights
      };

    } catch (error) {
      console.error('‚ùå Analysis error:', error);
      return {
        success: false,
        analysis: this.getDefaultAnalysis(),
        insights: this.getDefaultInsights()
      };
    }
  }

  // ============ –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ –ì–ï–ù–ï–†–ê–¶–ò–ò ============

  private createGenerationContext(params: ContentGeneratorParams, pricingContext?: any): GenerationContext {
    const audienceInsights = {
      messaging_priorities: ContentUtils.getMessagingPriorities(params.target_audience),
      content_preferences: ContentUtils.getContentPreferences(params.target_audience),
      psychological_triggers: ContentUtils.mapAudienceToTriggers(typeof params.target_audience === 'string' ? params.target_audience : 'families')
    };

    const campaignIntelligence = {
      seasonality_factors: this.getSeasonalityFactors(params.campaign_context),
      urgency_context: this.getUrgencyContext(params.campaign_context),
      personalization_layers: ContentUtils.createPersonalizationContext(params.target_audience, params)
    };

    return {
      enhanced_pricing: pricingContext,
      audience_insights: audienceInsights,
      campaign_intelligence: campaignIntelligence
    };
  }

  private async generateContentWithAI(_topic: string, _pricingData: any, _params: ContentGeneratorParams): Promise<any> {
    throw new Error('GenerationService.generateContentWithAI: placeholder implementation disabled. Integrate real LLM.');
  }

  private enhanceGeneratedContent(baseContent: any, params: ContentGeneratorParams, context: GenerationContext): ContentResult {
    return {
      subject: this.enhanceSubjectLine(baseContent.subject, context, params),
      preheader: this.enhancePreheader(baseContent.preheader, context, params),
      body: this.enhanceBodyContent(baseContent.body, context, params),
      cta: this.enhanceCallToAction(baseContent.cta, context, params),
      language: baseContent.language,
      tone: baseContent.tone
    };
  }

  private enhanceSubjectLine(subject: string, context: GenerationContext, params: ContentGeneratorParams): string {
    let enhanced = subject;

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è –º–æ–ª–æ–¥–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    const audienceType = typeof params.target_audience === 'string' ? params.target_audience : undefined;
    if (audienceType === 'young_adults') {
      enhanced = `‚úàÔ∏è ${enhanced}`;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —ç–∫–æ–Ω–æ–º–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ä–æ—à–∞—è —Ü–µ–Ω–∞
    if (context.enhanced_pricing?.savings_potential && context.enhanced_pricing.savings_potential > 15) {
      enhanced += ` - —ç–∫–æ–Ω–æ–º–∏—è ${context.enhanced_pricing.savings_potential}%`;
    }

    return enhanced;
  }

  private enhancePreheader(preheader: string, context: GenerationContext, _params: ContentGeneratorParams): string {
    // –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º preheader –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é
    const preferences = context.audience_insights.content_preferences;
    
    if (preferences.urgency === 'high') {
      return preheader.replace('–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å', '—Å—Ä–æ—á–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å');
    }
    
    return preheader;
  }

  private enhanceBodyContent(body: string, context: GenerationContext, params: ContentGeneratorParams): string {
    let enhanced = body;

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã
    const triggers = context.audience_insights.psychological_triggers;
    const audienceType = typeof params.target_audience === 'string' ? params.target_audience : undefined;
    if (triggers.includes('safety') && audienceType === 'families') {
      enhanced += ' –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–º—Ñ–æ—Ä—Ç –≤–∞—à–µ–π —Å–µ–º—å–∏ - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.';
    }

    return enhanced;
  }

  private enhanceCallToAction(cta: string, context: GenerationContext, _params: ContentGeneratorParams): string {
    // –£—Å–∏–ª–∏–≤–∞–µ–º CTA –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
    if (context.campaign_intelligence.urgency_context === 'high') {
      return `${cta} –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;
    }

    return cta;
  }

  private calculateConfidenceScore(_content: ContentResult, params: ContentGeneratorParams): number {
    let score = 70; // –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (params.pricing_data) score += 10;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ —á–µ—Ç–∫—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é
    if (params.target_audience) score += 10;
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–æ–≤
    if (params.assets_context) score += 10;

    return Math.min(score, 100);
  }

  // ============ UTILITY METHODS ============

  private async analyzeExistingContent(content: string, params: ContentGeneratorParams): Promise<any> {
    return {
      readability_score: this.calculateReadabilityScore(content),
      engagement_potential: this.calculateEngagementPotential(content),
      improvement_opportunities: this.identifyImprovementOpportunities(content, params)
    };
  }

  private async generateOptimizedContent(existingContent: string, analysis: any, params: ContentGeneratorParams): Promise<ContentResult> {
    // Content optimization is now handled by OpenAI Agents SDK
    // This method returns a simple structure for compatibility
    
    const optimizedBody = this.applyOptimizations(existingContent, analysis.improvement_opportunities);
    
    return {
      subject: `Optimized: ${params.topic}`,
      preheader: 'Ready for Agent optimization',
      body: optimizedBody,
      cta: 'Learn More',
      language: params.language || 'ru',
      tone: params.tone || 'friendly'
    };
  }

  private compareContentVersions(original: string, optimized: ContentResult, _params: ContentGeneratorParams): any {
    const originalScore = this.calculateContentScore(original);
    const optimizedScore = this.calculateContentScore(optimized.body);
    
    return {
      improvement_score: Math.max(0, optimizedScore - originalScore),
      key_changes: ['–£–ª—É—á—à–µ–Ω–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å', '–î–æ–±–∞–≤–ª–µ–Ω—ã —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã', '–£—Å–∏–ª–µ–Ω –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é'],
      readability_delta: 15,
      engagement_delta: 20,
      conversion_delta: 10
    };
  }

  private createVariantParameters(params: ContentGeneratorParams, index: number, _total: number): any {
    const focuses = ['tone', 'structure', 'pricing_emphasis', 'emotional_appeal'];
    const focus = focuses[index % focuses.length];
    
    return {
      focus,
      tone_shift: this.getVariantTone(params.tone ?? 'friendly', index),
      emphasis: this.getVariantEmphasis(focus ?? 'balanced')
    };
  }

  private async generateContentVariant(baseContent: ContentResult, variantParams: any, _originalParams: ContentGeneratorParams): Promise<ContentResult> {
    // –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    return {
      ...baseContent,
      subject: this.adaptSubjectForVariant(baseContent.subject, variantParams),
      body: this.adaptBodyForVariant(baseContent.body, variantParams),
      tone: variantParams.tone_shift
    };
  }

  private calculateVariantScore(content: ContentResult, _params: ContentGeneratorParams): number {
    return this.calculateContentScore(content.body) + ContentUtils.calculateComplexityScore(content);
  }

  private applyPersonalizationLayers(content: ContentResult, context: any, _params: ContentGeneratorParams): ContentResult {
    return {
      ...content,
      subject: this.personalizeSubject(content.subject, context),
      body: this.personalizeBody(content.body, context)
    };
  }

  private async performComprehensiveAnalysis(content: string, params: ContentGeneratorParams): Promise<ContentAnalysis> {
    return {
      readability_score: this.calculateReadabilityScore(content),
      sentiment_score: this.calculateSentimentScore(content),
      engagement_potential: this.calculateEngagementPotential(content),
      brand_alignment: this.calculateBrandAlignment(content, params)
    };
  }

  private async generateContentInsights(_content: string, params: ContentGeneratorParams): Promise<ContentInsights> {
    return {
      tone_analysis: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π',
      audience_alignment: 85,
      emotional_appeal: '—Å—Ä–µ–¥–Ω–∏–π',
      call_to_action_strength: 75,
      pricing_integration: params.pricing_data ? '—Ö–æ—Ä–æ—à–∞—è' : '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
      predicted_performance: {
        open_rate_estimate: 22,
        click_rate_estimate: 4.5,
        conversion_potential: 'medium'
      }
    };
  }

  // ============ HELPER METHODS ============

  private getSeasonalityFactors(campaignContext: any): string[] {
    if (!campaignContext?.seasonality) return [];
    
    const seasonal: Record<string, string[]> = {
      'winter': ['–∑–∏–º–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å–∫–∏–¥–∫–∏'],
      'summer': ['–ª–µ—Ç–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–æ—Ç–ø—É—Å–∫–Ω—ã–µ —Ü–µ–Ω—ã'],
      'spring': ['–≤–µ—Å–µ–Ω–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏'],
      'autumn': ['–æ—Å–µ–Ω–Ω–∏–µ —Ä–µ–π—Å—ã', '–±–∞—Ä—Ö–∞—Ç–Ω—ã–π —Å–µ–∑–æ–Ω']
    };

    return seasonal[campaignContext.seasonality] || [];
  }

  private getUrgencyContext(campaignContext: any): string {
    if (!campaignContext?.urgency_level) return 'normal';
    return campaignContext.urgency_level;
  }

  private calculateReadabilityScore(content: string): number {
    const words = content.split(/\s+/).length;
    const sentences = content.split(/[.!?]+/).length;
    const avgWordsPerSentence = words / Math.max(sentences, 1);
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
    return Math.max(0, Math.min(100, 100 - (avgWordsPerSentence - 15) * 2));
  }

  private calculateEngagementPotential(content: string): number {
    let score = 50;
    
    if (content.includes('!')) score += 10;
    if (content.includes('—ç–∫–æ–Ω–æ–º–∏—è') || content.includes('—Å–∫–∏–¥–∫–∞')) score += 15;
    if (content.includes('—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ')) score += 10;
    
    return Math.min(score, 100);
  }

  private calculateSentimentScore(content: string): number {
    const positiveWords = ['–æ—Ç–ª–∏—á–Ω—ã–π', '–ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π', '–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π', '–≤—ã–≥–æ–¥–Ω—ã–π'];
    const foundPositive = positiveWords.filter(word => content.toLowerCase().includes(word)).length;
    
    return Math.min(foundPositive * 20 + 40, 100);
  }

  private calculateBrandAlignment(content: string, params: ContentGeneratorParams): number {
    let score = 70;
    
    if ((params.assets_context as any)?.brand_elements) score += 15;
          if (content.includes('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ') || content.includes('–∞–≤–∏–∞–±–∏–ª–µ—Ç')) score += 15;
    
    return Math.min(score, 100);
  }

  private calculateContentScore(content: string): number {
    return (this.calculateReadabilityScore(content) + this.calculateEngagementPotential(content)) / 2;
  }

  private identifyImprovementOpportunities(content: string, params: ContentGeneratorParams): string[] {
    const opportunities = [];
    
    if (!content.includes('!')) opportunities.push('–î–æ–±–∞–≤–∏—Ç—å –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏');
    if (content.length < 200) opportunities.push('–†–∞—Å—à–∏—Ä–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤');
    if (!content.includes('—Å–∫–∏–¥–∫–∞') && params.pricing_data) opportunities.push('–í—ã–¥–µ–ª–∏—Ç—å —Ü–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞');
    
    return opportunities;
  }

  private applyOptimizations(content: string, opportunities: string[]): string {
    let optimized = content;
    
    opportunities.forEach(opportunity => {
      if (opportunity.includes('–≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏')) {
        optimized = optimized.replace(/\.$/, '!');
      }
    });
    
    return optimized;
  }

  private getVariantTone(baseTone: string, index: number): string {
    const tones = ['friendly', 'urgent', 'professional', 'casual'];
    return tones[(tones.indexOf(baseTone) + index) % tones.length] ?? 'friendly';
  }

  private getVariantEmphasis(focus: string): string {
    const emphases: Record<string, string> = {
      'tone': 'emotional',
      'structure': 'logical', 
      'pricing_emphasis': 'value',
      'emotional_appeal': 'experiential'
    };
    
    return emphases[focus] || 'balanced';
  }

  private adaptSubjectForVariant(subject: string, variantParams: any): string {
    switch (variantParams.focus) {
      case 'urgent':
        return `‚ö° ${subject} - –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!`;
      case 'emotional_appeal':
        return `üíù ${subject} - –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è`;
      default:
        return subject;
    }
  }

  private adaptBodyForVariant(body: string, variantParams: any): string {
    if (variantParams.focus === 'pricing_emphasis') {
      return body + ' –õ—É—á—à–∞—è —Ü–µ–Ω–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞!';
    }
    return body;
  }

  private personalizeSubject(subject: string, context: any): string {
    if (context.audience_type === 'families') {
      return subject.replace('–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫', '—Å–µ–º—å—è');
    }
    return subject;
  }

  private personalizeBody(body: string, context: any): string {
    if (context.psychological_triggers.includes('safety')) {
      return body + ' –í–∞—à–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å - –Ω–∞—à –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç.';
    }
    return body;
  }

  private getDefaultContent(_: ContentGeneratorParams): never {
    throw new Error('GenerationService.getDefaultContent: default content disabled by policy.');
  }

  private getDefaultAnalysis(): never {
    throw new Error('GenerationService.getDefaultAnalysis: default analysis disabled by policy.');
  }

  private getDefaultInsights(): never {
    throw new Error('GenerationService.getDefaultInsights: default insights disabled by policy.');
  }

  // ============ –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ============

  validateInput(params: ContentGeneratorParams): ValidationResult {
    return ContentUtils.validateContentInput(params);
  }

  getPerformanceMetrics(): PerformanceMetrics {
    return ContentUtils.calculatePerformance(
      'content_generation',
      this.performanceStart,
      this.metricsData
    );
  }
}