/**
 * üåç DESTINATION ANALYZER SERVICE
 * 
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç AI –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ç–∏–ø–∞ "–ï–≤—Ä–æ–ø–∞ –æ—Å–µ–Ω—å—é"
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å OpenAI Agents SDK v2
 */

import {
  MultiDestinationPlan,
  DestinationPlan,
  GeographicalScopeAnalysis,
  SupportedRegion,
  TravelSeason,
  SUPPORTED_REGIONS,
  // TRAVEL_SEASONS,
  REGION_CHARACTERISTICS,
  multiDestinationPlanSchema,
  // destinationPlanSchema
} from '../../../../shared/types/multi-destination-types';
import { ContentUtils } from '../common/content-utils';

export interface DestinationAnalyzerConfig {
  aiModel?: string;
  confidenceThreshold?: number;
  maxDestinations?: number;
  preferredRegions?: SupportedRegion[];
}

export interface DestinationGenerationParams {
  query: string;
  season?: TravelSeason;
  region?: SupportedRegion;
  budgetRange?: 'budget' | 'mid_range' | 'premium' | 'luxury';
  targetAudience?: 'families' | 'couples' | 'solo_travelers' | 'business' | 'mixed';
  maxDestinations?: number;
  preferences?: {
    culture?: boolean;
    nature?: boolean;
    cities?: boolean;
    beaches?: boolean;
    adventure?: boolean;
    food?: boolean;
  };
}

export class DestinationAnalyzer {
  private config: DestinationAnalyzerConfig;
  // private _performanceStart: number = 0;

  constructor(config: DestinationAnalyzerConfig = {}) {
    this.config = {
      aiModel: config.aiModel || 'gpt-4o-mini',
      confidenceThreshold: config.confidenceThreshold || 75,
      maxDestinations: config.maxDestinations || 6,
      preferredRegions: config.preferredRegions || [...SUPPORTED_REGIONS],
      ...config
    };
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
   * –ü—Ä–∏–º–µ—Ä—ã: "–ï–≤—Ä–æ–ø–∞ –æ—Å–µ–Ω—å—é", "–ê–∑–∏—è –∑–∏–º–æ–π", "—Ç–µ–ø–ª—ã–µ —Å—Ç—Ä–∞–Ω—ã –≤ —è–Ω–≤–∞—Ä–µ"
   */
  async analyzeGeographicalScope(query: string): Promise<GeographicalScopeAnalysis> {
    // this._performanceStart = Date.now();
    
    try {
      console.log(`üåç Analyzing geographical scope for query: "${query}"`);

      // –®–∞–≥ 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
      const keywords = this.extractKeywords(query);
      const regionIndicators = this.detectRegionIndicators(query, keywords);
      const seasonalHints = this.detectSeasonalHints(query, keywords);
      
      // –®–∞–≥ 2: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
      const detectedRegion = this.determineRegion(regionIndicators, keywords);
      
      // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
      const suggestedDestinations = await this.generateDestinationOptions({
        query,
        region: detectedRegion,
        season: seasonalHints[0] || 'year_round',
        maxDestinations: this.config.maxDestinations || 5
      });

      // –®–∞–≥ 4: –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
      const confidenceScore = this.calculateConfidenceScore(
        detectedRegion,
        regionIndicators,
        seasonalHints,
        keywords
      );

      console.log(`‚úÖ Geographical analysis completed: ${detectedRegion} (confidence: ${confidenceScore}%)`);

      return {
        detected_region: detectedRegion,
        suggested_destinations: suggestedDestinations,
        confidence_score: confidenceScore,
        analysis_metadata: {
          query_processed: query.toLowerCase().trim(),
          keywords_extracted: keywords,
          region_indicators: regionIndicators,
          seasonal_hints: seasonalHints
        }
      };

    } catch (error) {
      console.error('‚ùå Geographical scope analysis error:', error);
      
      // NO FALLBACK POLICY: Fail fast with clear error
      throw new Error(`DestinationAnalyzer.analyzeGeographicalScope failed: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø—Ü–∏–π –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  async generateDestinationOptions(params: DestinationGenerationParams): Promise<DestinationPlan[]> {
    // this._performanceStart = Date.now();
    
    try {
      console.log(`üéØ Generating destination options for: ${params.query}`);

      // –®–∞–≥ 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      const region = params.region || this.detectRegionFromQuery(params.query);
      const season = params.season || this.detectSeasonFromQuery(params.query);
      const maxDestinations = Math.min(params.maxDestinations || 6, 12);

      // –®–∞–≥ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ä–µ–≥–∏–æ–Ω–∞
      const regionChar = REGION_CHARACTERISTICS[region];
      
      // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ AI –∞–Ω–∞–ª–∏–∑–∞
      const destinations = await this.generateDestinationsWithAI(params, region, season, regionChar);
      
      // –®–∞–≥ 4: –û–±–æ–≥–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      const enrichedDestinations = await this.enrichDestinations(destinations, params);
      
      // –®–∞–≥ 5: –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
      const finalDestinations = this.prioritizeDestinations(enrichedDestinations, params)
        .slice(0, maxDestinations);

      console.log(`‚úÖ Generated ${finalDestinations.length} destination options`);
      
      return finalDestinations;

    } catch (error) {
      console.error('‚ùå Destination generation error:', error);
      
      // NO FALLBACK POLICY: Fail fast with clear error
      throw new Error(`DestinationAnalyzer.generateRecommendations failed: ${error instanceof Error ? error.message : String(error)}`);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  async createUnifiedPlan(
    destinations: DestinationPlan[], 
    campaignName: string,
    context?: {
      theme?: string;
      targetSeason?: TravelSeason;
      budgetRange?: 'budget' | 'mid_range' | 'premium' | 'luxury';
      urgencyLevel?: 'low' | 'medium' | 'high';
    }
  ): Promise<MultiDestinationPlan> {
    try {
      console.log(`üìã Creating unified plan for ${destinations.length} destinations`);

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ layout —Ç–∏–ø–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
      const layoutType = this.determineLayoutType(destinations.length);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞
      const plan: MultiDestinationPlan = {
        id: ContentUtils.generateId('multi_plan'),
        name: campaignName,
        description: context?.theme || `–ö–∞–º–ø–∞–Ω–∏—è —Å ${destinations.length} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏`,
        destinations: destinations,
        campaign_context: {
          theme: context?.theme || campaignName,
          target_season: context?.targetSeason || this.detectDominantSeason(destinations),
          target_region: this.detectDominantRegion(destinations),
          campaign_duration: {
            start_date: new Date().toISOString().split('T')[0]!,
            end_date: this.calculateCampaignEndDate(context?.targetSeason)
          },
          budget_range: context?.budgetRange || 'mid_range',
          urgency_level: context?.urgencyLevel || 'medium'
        },
        layout_plan: {
          layout_type: layoutType,
          structure: this.createLayoutStructure(destinations, layoutType),
          responsive_config: this.createResponsiveConfig(layoutType),
          template_mapping: this.createTemplateMapping(layoutType, destinations.length)
        },
        positioning_strategy: {
          primary_value_proposition: this.generateValueProposition(destinations, context),
          competitive_advantages: this.identifyCompetitiveAdvantages(destinations),
          target_audience: context?.budgetRange === 'luxury' ? 'couples' : 'families',
          messaging_focus: context?.budgetRange === 'budget' ? 'price' : 'experience'
        },
        metadata: {
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
          version: '1.0.0',
          created_by: 'ai_agent',
          optimization_score: this.calculateOptimizationScore(destinations)
        }
      };

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–ª–∞–Ω–∞
      const validationResult = multiDestinationPlanSchema.safeParse(plan);
      if (!validationResult.success) {
        console.warn('‚ö†Ô∏è Plan validation issues:', validationResult.error.issues);
      }

      console.log(`‚úÖ Unified plan created: ${plan.layout_plan.layout_type} layout`);
      
      return plan;

    } catch (error) {
      console.error('‚ùå Unified plan creation error:', error);
      throw error;
    }
  }

  // ============ –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ============

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
   */
  private extractKeywords(query: string): string[] {
    const words = query.toLowerCase()
      .replace(/[^\w\s]/g, ' ')
      .split(/\s+/)
      .filter(word => word.length > 2);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
    const stopWords = ['–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–¥–ª—è', '–æ—Ç', '–¥–æ', 'the', 'in', 'on', 'at', 'to', 'for', 'of'];
    return words.filter(word => !stopWords.includes(word));
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  private detectRegionIndicators(query: string, _keywords: string[]): string[] {
    const indicators: string[] = [];
    const lowerQuery = query.toLowerCase();

    // –ü—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    const regionMentions: Record<string, string[]> = {
      'europe': ['–µ–≤—Ä–æ–ø', 'europe', 'eu'],
      'asia': ['–∞–∑–∏—è', 'asia', '–≤–æ—Å—Ç–æ–∫'],
      'north_america': ['–∞–º–µ—Ä–∏–∫', 'america', '—Å—à–∞', 'usa', '–∫–∞–Ω–∞–¥'],
      'south_america': ['—é–∂–Ω–∞—è –∞–º–µ—Ä–∏–∫–∞', '–ª–∞—Ç–∏–Ω—Å–∫', '–±—Ä–∞–∑–∏–ª–∏'],
      'africa': ['–∞—Ñ—Ä–∏–∫', 'africa'],
      'oceania': ['–∞–≤—Å—Ç—Ä–∞–ª–∏', '–æ–∫–µ–∞–Ω–∏', 'australia'],
      'middle_east': ['–±–ª–∏–∂–Ω–∏–π –≤–æ—Å—Ç–æ–∫', 'middle east', '–∞—Ä–∞–±—Å–∫']
    };

    // –£–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω
    const countryMentions: Record<string, SupportedRegion> = {
      '—Ñ—Ä–∞–Ω—Ü–∏—è': 'europe', '—Ñ—Ä–∞–Ω—Ü–∏': 'europe', 'paris': 'europe', '–ø–∞—Ä–∏–∂': 'europe',
      '–∏—Ç–∞–ª–∏—è': 'europe', '–∏—Ç–∞–ª–∏': 'europe', '—Ä–∏–º': 'europe', 'rome': 'europe',
      '–∏—Å–ø–∞–Ω–∏—è': 'europe', '–∏—Å–ø–∞–Ω–∏': 'europe', '–º–∞–¥—Ä–∏–¥': 'europe', 'barcelona': 'europe',
      '–≥–µ—Ä–º–∞–Ω–∏—è': 'europe', '–≥–µ—Ä–º–∞–Ω': 'europe', '–±–µ—Ä–ª–∏–Ω': 'europe', 'berlin': 'europe',
      '—è–ø–æ–Ω–∏—è': 'asia', 'japan': 'asia', '—Ç–æ–∫–∏–æ': 'asia', 'tokyo': 'asia',
      '–∫–∏—Ç–∞–π': 'asia', 'china': 'asia', '–ø–µ–∫–∏–Ω': 'asia', 'beijing': 'asia',
      '—Ç–∞–∏–ª–∞–Ω–¥': 'asia', 'thailand': 'asia', '–±–∞–Ω–≥–∫–æ–∫': 'asia', 'bangkok': 'asia'
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–æ–≤
    Object.entries(regionMentions).forEach(([region, words]) => {
      if (words.some(word => lowerQuery.includes(word))) {
        indicators.push(region);
      }
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω
    Object.entries(countryMentions).forEach(([country, region]) => {
      if (lowerQuery.includes(country)) {
        indicators.push(region);
      }
    });

    return Array.from(new Set(indicators)); // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö –ø–æ–¥—Å–∫–∞–∑–æ–∫
   */
  private detectSeasonalHints(query: string, _keywords: string[]): TravelSeason[] {
    const hints: TravelSeason[] = [];
    const lowerQuery = query.toLowerCase();

    const seasonKeywords: Record<TravelSeason, string[]> = {
      'spring': ['–≤–µ—Å–Ω', 'spring', '–º–∞—Ä—Ç', '–∞–ø—Ä–µ–ª', '–º–∞–π', 'march', 'april', 'may'],
      'summer': ['–ª–µ—Ç', 'summer', '–∏—é–Ω', '–∏—é–ª', '–∞–≤–≥—É—Å—Ç', 'june', 'july', 'august'],
      'autumn': ['–æ—Å–µ–Ω', 'autumn', 'fall', '—Å–µ–Ω—Ç—è–±—Ä', '–æ–∫—Ç—è–±—Ä', '–Ω–æ—è–±—Ä', 'september', 'october', 'november'],
      'winter': ['–∑–∏–º', 'winter', '–¥–µ–∫–∞–±—Ä', '—è–Ω–≤–∞—Ä', '—Ñ–µ–≤—Ä–∞–ª', 'december', 'january', 'february'],
      'year_round': ['–∫—Ä—É–≥–ª—ã–π –≥–æ–¥', 'year round', '–≤—Å–µ–≥–¥–∞', 'always']
    };

    Object.entries(seasonKeywords).forEach(([season, words]) => {
      if (words.some(word => lowerQuery.includes(word))) {
        hints.push(season as TravelSeason);
      }
    });

    return hints;
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
   */
  private determineRegion(indicators: string[], _keywords: string[]): SupportedRegion {
    if (indicators.length === 0) {
      return 'europe'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ä–µ–≥–∏–æ–Ω
    const validRegion = indicators.find(indicator => 
      SUPPORTED_REGIONS.includes(indicator as SupportedRegion)
    );
    
    return (validRegion as SupportedRegion) || 'europe';
  }

  /**
   * –†–∞—Å—á–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞
   */
  private calculateConfidenceScore(
    _region: SupportedRegion,
    indicators: string[],
    seasonalHints: TravelSeason[],
    _keywords: string[]
  ): number {
    let score = 50; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

    // +30 –∑–∞ –ø—Ä—è–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–µ–≥–∏–æ–Ω–∞
    if (indicators.length > 0) score += 30;
    
    // +20 –∑–∞ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏
    if (seasonalHints.length > 0) score += 20;
    
    // +10 –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
    score += Math.min(_keywords.length * 2, 20);
    
    // -10 –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    if (_keywords.length < 3) score -= 10;

    return Math.max(25, Math.min(95, score));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI (mock implementation)
   */
  private async generateDestinationsWithAI(
    _params: DestinationGenerationParams,
    region: SupportedRegion,
    season: TravelSeason | undefined,
    _regionChar: any
  ): Promise<DestinationPlan[]> {
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ AI –º–æ–¥–µ–ª–∏
    console.log(`ü§ñ AI generating destinations for ${region} in ${season || 'any season'}`);
    
    // Mock destinations –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–≥–∏–æ–Ω–∞
    const mockDestinations: Record<SupportedRegion, Partial<DestinationPlan>[]> = {
      'europe': [
        {
          id: 'fr-paris',
          geographical_info: {
            country_code: 'FR',
            country_name: '–§—Ä–∞–Ω—Ü–∏—è',
            city: '–ü–∞—Ä–∏–∂',
            region: 'europe',
            continent: '–ï–≤—Ä–æ–ø–∞'
          },
          content: {
            title: '–ü–∞—Ä–∏–∂ - –ì–æ—Ä–æ–¥ –°–≤–µ—Ç–∞',
            description: '–†–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π',
            highlights: ['–≠–π—Ñ–µ–ª–µ–≤–∞ –±–∞—à–Ω—è', '–õ—É–≤—Ä', '–ï–ª–∏—Å–µ–π—Å–∫–∏–µ –ø–æ–ª—è'],
            call_to_action: '–û—Ç–∫—Ä—ã—Ç—å –ü–∞—Ä–∏–∂'
          }
        },
        {
          id: 'it-rome',
          geographical_info: {
            country_code: 'IT',
            country_name: '–ò—Ç–∞–ª–∏—è',
            city: '–†–∏–º',
            region: 'europe',
            continent: '–ï–≤—Ä–æ–ø–∞'
          },
          content: {
            title: '–†–∏–º - –í–µ—á–Ω—ã–π –ì–æ—Ä–æ–¥',
            description: '–î—Ä–µ–≤–Ω—è—è —Å—Ç–æ–ª–∏—Ü–∞ –∏–º–ø–µ—Ä–∏–∏ —Å –±–æ–≥–∞—Ç–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π',
            highlights: ['–ö–æ–ª–∏–∑–µ–π', '–í–∞—Ç–∏–∫–∞–Ω', '–ü–∞–Ω—Ç–µ–æ–Ω'],
            call_to_action: '–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –†–∏–º'
          }
        }
      ],
      'asia': [
        {
          id: 'jp-tokyo',
          geographical_info: {
            country_code: 'JP',
            country_name: '–Ø–ø–æ–Ω–∏—è',
            city: '–¢–æ–∫–∏–æ',
            region: 'asia',
            continent: '–ê–∑–∏—è'
          },
          content: {
            title: '–¢–æ–∫–∏–æ - –ú–µ–≥–∞–ø–æ–ª–∏—Å –±—É–¥—É—â–µ–≥–æ',
            description: '–°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞ —Å —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–æ–π –∫—É–ª—å—Ç—É—Ä–æ–π',
            highlights: ['–°–∏–±—É—è', '–•—Ä–∞–º—ã', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏'],
            call_to_action: '–û—Ç–∫—Ä—ã—Ç—å –¢–æ–∫–∏–æ'
          }
        }
      ],
      'north_america': [],
      'south_america': [],
      'africa': [],
      'oceania': [],
      'middle_east': []
    };

    const baseDests = mockDestinations[region] || mockDestinations['europe'];
    
    return baseDests.map((dest, index) => ({
      id: dest.id || ContentUtils.generateId('dest'),
      priority: index === 0 ? 'primary' : 'secondary',
      geographical_info: dest.geographical_info!,
      seasonal_context: {
        primary_season: season || 'year_round',
        optimal_months: this.getOptimalMonths(region, season)
      },
      pricing: {
        base_price: 35000 + Math.random() * 15000,
        currency: 'RUB',
        price_range: { min: 30000, max: 50000 }
      },
      assets: {
        primary_image: {
          alt_text: `${dest.content?.title} - –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ`,
          source: 'figma'
        }
      },
      content: dest.content!,
      metadata: {
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        source: 'ai_generated',
        confidence_score: 85
      }
    })) as DestinationPlan[];
  }

  /**
   * –û–±–æ–≥–∞—â–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
   */
  private async enrichDestinations(
    destinations: DestinationPlan[],
    params: DestinationGenerationParams
  ): Promise<DestinationPlan[]> {
    return destinations.map(dest => ({
      ...dest,
      seasonal_context: {
        ...dest.seasonal_context,
        weather_description: this.generateWeatherDescription(dest, params.season),
        seasonal_highlights: this.generateSeasonalHighlights(dest, params.season)
      },
      pricing: {
        ...dest.pricing,
        savings_potential: Math.floor(Math.random() * 25) + 5,
        price_trend: ['rising', 'falling', 'stable'][Math.floor(Math.random() * 3)] as any
      }
    }));
  }

  /**
   * –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  private prioritizeDestinations(
    destinations: DestinationPlan[],
    _params: DestinationGenerationParams
  ): DestinationPlan[] {
    return destinations.sort((a, b) => {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ confidence_score –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
      const scoreA = a.metadata.confidence_score || 0;
      const scoreB = b.metadata.confidence_score || 0;
      return scoreB - scoreA;
    });
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
   */
  private detectRegionFromQuery(query: string): SupportedRegion {
    const analysis = this.detectRegionIndicators(query, this.extractKeywords(query));
    return (analysis[0] as SupportedRegion) || 'europe';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
   */
  private detectSeasonFromQuery(query: string): TravelSeason | undefined {
    const hints = this.detectSeasonalHints(query, this.extractKeywords(query));
    return hints[0];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞ –∏ —Å–µ–∑–æ–Ω–∞
   */
  private getOptimalMonths(_region: SupportedRegion, season?: TravelSeason): number[] {
    const seasonMonths: Record<TravelSeason, number[]> = {
      'spring': [3, 4, 5],
      'summer': [6, 7, 8],
      'autumn': [9, 10, 11],
      'winter': [12, 1, 2],
      'year_round': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    };

    return seasonMonths[season || 'year_round'];
  }

  // ============ –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –£–¢–ò–õ–ò–¢–´ ============

  private determineLayoutType(destinationCount: number): any {
    if (destinationCount <= 3) return 'compact';
    if (destinationCount <= 6) return 'grid';
    return 'carousel';
  }

  private detectDominantSeason(destinations: DestinationPlan[]): TravelSeason {
    const seasons = destinations.map(d => d.seasonal_context.primary_season);
    return seasons[0] || 'year_round';
  }

  private detectDominantRegion(destinations: DestinationPlan[]): SupportedRegion | undefined {
    const regions = destinations.map(d => d.geographical_info.region);
    return regions[0];
  }

  private calculateCampaignEndDate(_season?: TravelSeason): string {
    const date = new Date();
    date.setMonth(date.getMonth() + 3); // –ö–∞–º–ø–∞–Ω–∏—è –Ω–∞ 3 –º–µ—Å—è—Ü–∞
    return date.toISOString().split('T')[0]!;
  }

  private createLayoutStructure(destinations: DestinationPlan[], _layoutType: string): any {
    return {
      primary_destination_count: Math.min(destinations.length, 2),
      secondary_destination_count: Math.max(0, destinations.length - 2),
      total_destinations: destinations.length,
      sections: [
        {
          section_id: 'hero',
          section_type: 'hero',
          destination_ids: destinations.slice(0, 1).map(d => d.id),
          position: 1
        },
        {
          section_id: 'featured',
          section_type: 'featured',
          destination_ids: destinations.slice(1).map(d => d.id),
          position: 2
        }
      ]
    };
  }

  private createResponsiveConfig(layoutType: string): any {
    return {
      mobile_layout: 'stack',
      tablet_layout: 'grid_2x2',
      desktop_layout: layoutType === 'grid' ? 'grid_3x2' : 'carousel',
      breakpoints: {
        mobile: 768,
        tablet: 1024,
        desktop: 1200
      }
    };
  }

  private createTemplateMapping(layoutType: string, destinationCount: number): any {
    const templateMap: Record<string, string> = {
      'compact': 'multi-destination-compact.mjml',
      'grid': 'multi-destination-grid.mjml',
      'carousel': 'multi-destination-carousel.mjml'
    };

    return {
      mjml_template: templateMap[layoutType] || 'multi-destination-grid.mjml',
      template_variables: {
        destination_count: destinationCount,
        layout_style: layoutType
      }
    };
  }

  private generateValueProposition(destinations: DestinationPlan[], _context: any): string {
    if (destinations.length <= 3) {
      return `–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ ${destinations.length} –ª—É—á—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π`;
    }
    return `–û—Ç–∫—Ä–æ–π—Ç–µ ${destinations.length} —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏`;
  }

  private identifyCompetitiveAdvantages(destinations: DestinationPlan[]): string[] {
    return [
      '–¢—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏',
      `${destinations.length} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏`
    ];
  }

  private calculateOptimizationScore(destinations: DestinationPlan[]): number {
    const avgConfidence = destinations.reduce((sum, d) => 
      sum + (d.metadata.confidence_score || 0), 0) / destinations.length;
    
    return Math.round(avgConfidence);
  }

  private generateWeatherDescription(_dest: DestinationPlan, season?: TravelSeason): string {
    const seasonDescriptions: Record<TravelSeason, string> = {
      'spring': '–ú—è–≥–∫–∞—è –≤–µ—Å–µ–Ω–Ω—è—è –ø–æ–≥–æ–¥–∞',
      'summer': '–¢–µ–ø–ª–æ–µ —Å–æ–ª–Ω–µ—á–Ω–æ–µ –ª–µ—Ç–æ',
      'autumn': '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –æ—Å–µ–Ω–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
      'winter': '–ü—Ä–æ—Ö–ª–∞–¥–Ω–∞—è –∑–∏–º–Ω—è—è –ø–æ–≥–æ–¥–∞',
      'year_round': '–ö–æ–º—Ñ–æ—Ä—Ç–Ω–∞—è –ø–æ–≥–æ–¥–∞ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥'
    };
    
    return seasonDescriptions[season || 'year_round'];
  }

  private generateSeasonalHighlights(_dest: DestinationPlan, season?: TravelSeason): string[] {
    const highlights: Record<TravelSeason, string[]> = {
      'spring': ['–¶–≤–µ—Ç–µ–Ω–∏–µ —Å–∞–¥–æ–≤', '–ö–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≥—É–ª–∫–∏'],
      'summer': ['–ü–ª—è–∂–Ω—ã–π —Å–µ–∑–æ–Ω', '–§–µ—Å—Ç–∏–≤–∞–ª–∏ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–æ–∑–¥—É—Ö–µ'],
      'autumn': ['–ó–æ–ª–æ—Ç–∞—è –æ—Å–µ–Ω—å', '–°–µ–∑–æ–Ω —É—Ä–æ–∂–∞—è'],
      'winter': ['–ó–∏–º–Ω–∏–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è', '–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞'],
      'year_round': ['–í—Å–µ—Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è']
    };
    
    return highlights[season || 'year_round'];
  }
}