/**
 * üí∞ PRICING SERVICE
 * 
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ü–µ–Ω –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ü–µ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * –í—ã–¥–µ–ª–µ–Ω –∏–∑ content-generator.ts –¥–ª—è –º–æ–¥—É–ª—å–Ω–æ—Å—Ç–∏
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å OpenAI Agents SDK v2
 */

import {
  ContentGeneratorParams,
  PricingData,
  PricingContext,
  PricingAnalysisResult,
  ValidationResult,
  PerformanceMetrics,
  BaseContentService
} from '../common/content-types';
import { ContentUtils } from '../common/content-utils';

export class PricingService implements BaseContentService {
  private performanceStart: number = 0;
  private metricsData: Record<string, number> = {};

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  async analyzePricingData(params: ContentGeneratorParams): Promise<PricingAnalysisResult> {
    this.performanceStart = Date.now();
    
    try {
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const validation = this.validateInput(params);
      if (!validation.valid) {
        throw new Error(`Pricing validation failed: ${validation.errors.join(', ')}`);
      }

      if (!params.pricing_data) {
        throw new Error('Pricing data is required for pricing analysis');
      }

      console.log(`üí∞ Analyzing pricing data for ${params.pricing_data.prices.length} routes`);

      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const normalizedPricingData = this.normalizePricingData(params.pricing_data);
      
      // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const enhancedPricing = this.enhancePricingContext(normalizedPricingData, params);
      
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      const pricingContext = this.createPricingContext(enhancedPricing, params);
      
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
      const pricingIntelligence = this.generatePricingIntelligence(enhancedPricing, params);

      // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
      this.metricsData.api_calls_made = 1;
      this.metricsData.success_rate = 100;
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ formatPricesForDisplay —Å normalizedPricingData
      const formattedPrices = this.formatPricesForDisplay(normalizedPricingData);

      console.log(`‚úÖ Pricing analysis completed: ${pricingContext.competitive_analysis.market_position} positioning`);

      return {
        success: true,
        pricing_context: pricingContext,
        enhanced_pricing: {
          formatted_prices: formattedPrices,
          saving_messages: this.generateSavingMessages(enhancedPricing),
          urgency_triggers: this.generateUrgencyTriggers(enhancedPricing, params)
        },
        pricing_intelligence: pricingIntelligence
      };

    } catch (error) {
      console.error('‚ùå Pricing service error:', error);
      this.metricsData.success_rate = 0;
      
      return {
        success: false,
        pricing_context: this.getDefaultPricingContext(),
        enhanced_pricing: {
          formatted_prices: [],
          saving_messages: [],
          urgency_triggers: []
        },
        pricing_intelligence: {
          psychological_pricing: 'standard',
          optimal_presentation: 'simple',
          cross_sell_opportunities: []
        }
      };
    }
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
   */
  private enhancePricingContext(pricingData: PricingData, params: ContentGeneratorParams): any {
    const enhanced = {
      ...pricingData,
      price_positioning: this.determinePricePositioning(pricingData),
      savings_potential: this.calculateSavingsPotential(pricingData),
      market_analysis: this.analyzeMarketPosition(pricingData),
      psychological_factors: this.analyzePsychologicalFactors(pricingData, params)
    };

    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    if (!enhanced.statistics) {
      enhanced.statistics = this.calculatePricingStatistics(pricingData.prices);
    }

    return enhanced;
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private createPricingContext(enhancedPricing: any, params: ContentGeneratorParams): PricingContext {
    const urgencyData = this.generateUrgencyIndicators(enhancedPricing, params.campaign_context);
    
    return {
      price_positioning: enhancedPricing.price_positioning,
      savings_potential: enhancedPricing.savings_potential,
      urgency_indicators: urgencyData,
      competitive_analysis: {
        market_position: enhancedPricing.market_analysis.position,
        value_proposition: enhancedPricing.market_analysis.value_prop,
        messaging_strategy: enhancedPricing.market_analysis.messaging
      }
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã
   */
  private determinePricePositioning(pricingData: PricingData): string {
    if (!pricingData.statistics) {
      return 'competitive';
    }

    const { cheapest, statistics } = pricingData;
    const { average, price_range } = statistics;
    
    const priceRatio = cheapest / average;
    
    if (priceRatio <= 0.7) {
      return 'budget';
    } else if (priceRatio <= 0.9) {
      return 'value';
    } else if (priceRatio <= 1.1) {
      return 'competitive';
    } else {
      return 'premium';
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ —ç–∫–æ–Ω–æ–º–∏–∏
   */
  private calculateSavingsPotential(pricingData: PricingData): number {
    if (!pricingData.statistics) {
      return 0;
    }

    const { cheapest, statistics } = pricingData;
    const maxPrice = statistics.price_range.max;
    
    if (maxPrice <= cheapest) {
      return 0;
    }

    return Math.round(((maxPrice - cheapest) / maxPrice) * 100);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  private analyzeMarketPosition(pricingData: PricingData): any {
    const positioning = this.determinePricePositioning(pricingData);
    const savingsPotential = this.calculateSavingsPotential(pricingData);

    const positionData: Record<string, any> = {
      'budget': {
        position: 'lowest',
        value_prop: '–°–∞–º—ã–µ –Ω–∏–∑–∫–∏–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ',
        messaging: ['—ç–∫–æ–Ω–æ–º–∏—è', '–≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ª—É—á—à–∏–µ —Ü–µ–Ω—ã']
      },
      'value': {
        position: 'competitive', 
        value_prop: '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞',
        messaging: ['–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä', '—Ä–∞–∑—É–º–Ω—ã–µ —Ü–µ–Ω—ã', '–≤—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']
      },
      'competitive': {
        position: 'competitive',
        value_prop: '–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ —Ä—ã–Ω–∫–µ',
        messaging: ['—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—ã–µ —Ü–µ–Ω—ã', '—Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã']
      },
      'premium': {
        position: 'premium',
        value_prop: '–ü—Ä–µ–º–∏—É–º-—É—Å–ª—É–≥–∏ –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —Ü–µ–Ω–µ',
        messaging: ['–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å', '–ø—Ä–µ–º–∏—É–º-–æ–ø—ã—Ç', '–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞']
      }
    };

    return positionData[positioning] || positionData['competitive'];
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
   */
  private analyzePsychologicalFactors(pricingData: PricingData, params: ContentGeneratorParams): any {
    const positioning = this.determinePricePositioning(pricingData);
    const audience = typeof params.target_audience === 'string' ? params.target_audience : 'general';
    
    const factors: any = {
      price_anchoring: this.createPriceAnchoring(pricingData),
      scarcity_messaging: this.createScarcityMessaging(params.campaign_context),
      social_proof: this.createSocialProofElements(positioning),
      urgency_drivers: this.createUrgencyDrivers(pricingData, params.campaign_context)
    };

    // –ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –∞—É–¥–∏—Ç–æ—Ä–∏—é
    switch (audience) {
      case 'budget_conscious':
        factors.emphasis = 'savings';
        factors.comparison_focus = 'price_difference';
        break;
      case 'young_adults':
        factors.emphasis = 'value';
        factors.comparison_focus = 'quality_benefits';
        break;
      case 'business_travelers':
        factors.emphasis = 'efficiency';
        factors.comparison_focus = 'time_value';
        break;
      default:
        factors.emphasis = 'balance';
        factors.comparison_focus = 'overall_value';
    }

    return factors;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
   */
  private generateUrgencyIndicators(enhancedPricing: any, campaignContext: any): any {
    const savingsPotential = enhancedPricing.savings_potential || 0;
    const positioning = enhancedPricing.price_positioning;
    
    const indicators = {
      is_deal: savingsPotential > 15,
      time_sensitive: false,
      inventory_limited: false,
      messaging: [] as string[]
    };

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏
    if (campaignContext?.urgency_level) {
      switch (campaignContext.urgency_level) {
        case 'high':
        case 'critical':
          indicators.time_sensitive = true;
          indicators.inventory_limited = true;
          indicators.messaging.push('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
          indicators.messaging.push('–°–ø–µ—à–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å');
          break;
        case 'medium':
          indicators.time_sensitive = true;
          indicators.messaging.push('–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏');
          break;
      }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–∫–æ–Ω–æ–º–∏–∏
    if (indicators.is_deal) {
      indicators.messaging.push(`–≠–∫–æ–Ω–æ–º–∏—è –¥–æ ${savingsPotential}%`);
      indicators.messaging.push('–í—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
    }

    // –°–µ–∑–æ–Ω–Ω–∞—è —Å—Ä–æ—á–Ω–æ—Å—Ç—å
    if (campaignContext?.seasonality) {
      const seasonalMessages: Record<string, string[]> = {
        'holiday': ['–ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ —Ü–µ–Ω—ã', '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ —Å–∫–∏–¥–∫–∏'],
        'summer': ['–õ–µ—Ç–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–°–µ–∑–æ–Ω–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã'], 
        'winter': ['–ó–∏–º–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è']
      };
      
      const seasonal = seasonalMessages[campaignContext.seasonality];
      if (seasonal) {
        indicators.messaging.push(...seasonal);
      }
    }

    return indicators;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω–æ–≤–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
   */
  private generatePricingIntelligence(enhancedPricing: any, params: ContentGeneratorParams): any {
    const positioning = enhancedPricing.price_positioning;
    const audience = typeof params.target_audience === 'string' ? params.target_audience : 'general';

    // –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
    const psychologicalPricing = this.determinePsychologicalPricing(enhancedPricing, audience);
    
    // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è
    const optimalPresentation = this.determineOptimalPresentation(positioning, audience);
    
    // –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∫—Ä–æ—Å—Å-–ø—Ä–æ–¥–∞–∂
    const crossSellOpportunities = this.generateCrossSellOpportunities(enhancedPricing, params);

    return {
      psychological_pricing: psychologicalPricing,
      optimal_presentation: optimalPresentation,
      cross_sell_opportunities: crossSellOpportunities
    };
  }

  // ============ –ü–†–ò–í–ê–¢–ù–´–ï –£–¢–ò–õ–ò–¢–´ ============

  private calculatePricingStatistics(prices: PricingData['prices']): any {
    const priceValues = prices.map(p => p.price);
    const average = priceValues.reduce((sum, price) => sum + price, 0) / priceValues.length;
    const sorted = [...priceValues].sort((a, b) => a - b);
    const median = sorted.length % 2 === 0 
      ? (sorted[sorted.length / 2 - 1] + sorted[sorted.length / 2]) / 2 
      : sorted[Math.floor(sorted.length / 2)];

    return {
      average: Math.round(average),
      median: Math.round(median),
      price_range: {
        min: Math.min(...priceValues),
        max: Math.max(...priceValues)
      }
    };
  }

  private formatPricesForDisplay(pricingData: PricingData): string[] {
    return pricingData.prices.map(price => 
      `${price.origin} ‚Üí ${price.destination}: ${ContentUtils.formatPrice(price.price, price.currency)}`
    );
  }

  private generateSavingMessages(enhancedPricing: any): string[] {
    const messages: string[] = [];
    const savingsPotential = enhancedPricing.savings_potential || 0;

    if (savingsPotential > 20) {
      messages.push('–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—è!');
      messages.push(`–°—ç–∫–æ–Ω–æ–º—å—Ç–µ –¥–æ ${savingsPotential}%`);
    } else if (savingsPotential > 10) {
      messages.push('–í—ã–≥–æ–¥–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
      messages.push(`–≠–∫–æ–Ω–æ–º–∏—è ${savingsPotential}%`);
    } else if (savingsPotential > 0) {
      messages.push('–•–æ—Ä–æ—à–∞—è —Ü–µ–Ω–∞');
    }

    return messages;
  }

  private generateUrgencyTriggers(enhancedPricing: any, params: ContentGeneratorParams): string[] {
    const triggers: string[] = [];
    const positioning = enhancedPricing.price_positioning;

    // –£–¥–∞–ª–µ–Ω –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç - –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ OpenAI SDK
    // –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    return triggers; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ - –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≥–µ–Ω—Ç–æ–º
  }

  private createPriceAnchoring(pricingData: PricingData): any {
    if (!pricingData.statistics) {
      return { strategy: 'simple', anchor: pricingData.cheapest };
    }

    return {
      strategy: 'comparison',
      anchor: pricingData.statistics.price_range.max,
      target: pricingData.cheapest,
      savings: pricingData.statistics.price_range.max - pricingData.cheapest
    };
  }

  private createScarcityMessaging(campaignContext: any): string[] {
    const messages: string[] = [];
    
    if (campaignContext?.promotion_details?.limited_availability) {
      messages.push('–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç');
      messages.push('–¢–æ–ª—å–∫–æ –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è');
    }

    if (campaignContext?.urgency_level === 'high') {
      messages.push('–ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—Ç–∞');
      messages.push('–ó–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
    }

    return messages;
  }

  private createSocialProofElements(positioning: string): string[] {
    const proofElements: Record<string, string[]> = {
      'budget': ['–í—ã–±–æ—Ä —ç–∫–æ–Ω–æ–º–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤', '–¢—ã—Å—è—á–∏ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'],
      'value': ['–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä', '–†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç —ç–∫—Å–ø–µ—Ä—Ç—ã'],
      'competitive': ['–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ'],
      'premium': ['–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–î–ª—è –≤–∑—ã—Å–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤']
    };

    return proofElements[positioning] || proofElements['competitive'];
  }

  private createUrgencyDrivers(pricingData: PricingData, campaignContext: any): string[] {
    const drivers: string[] = [];

    if (campaignContext?.promotion_details?.validity_period) {
      drivers.push(`–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ ${campaignContext.promotion_details.validity_period}`);
    }

    if (pricingData.statistics && this.calculateSavingsPotential(pricingData) > 10) {
      drivers.push('–¶–µ–Ω—ã —Ä–∞—Å—Ç—É—Ç –∫–∞–∂–¥—ã–π –¥–µ–Ω—å');
    }

    return drivers;
  }

  private determinePsychologicalPricing(enhancedPricing: any, audience: string): string {
    const strategies: Record<string, string> = {
      'budget_conscious': 'price_emphasis',
      'luxury_seekers': 'value_emphasis', 
      'business_travelers': 'efficiency_emphasis',
      'families': 'savings_emphasis'
    };

    return strategies[audience] || 'balanced';
  }

  private determineOptimalPresentation(positioning: string, audience: string): string {
    if (positioning === 'budget' && audience === 'budget_conscious') {
      return 'price_highlighted';
    }

    if (positioning === 'premium' && audience === 'luxury_seekers') {
      return 'value_focused';
    }

    return 'balanced_presentation';
  }

  private generateCrossSellOpportunities(enhancedPricing: any, params: ContentGeneratorParams): string[] {
    const opportunities: string[] = [];

    if (enhancedPricing.savings_potential > 15) {
      opportunities.push('–°—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π —Å–æ —Å–∫–∏–¥–∫–æ–π');
      opportunities.push('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω–µ');
    }

    const audienceType = typeof params.target_audience === 'string' ? params.target_audience : undefined;
    if (audienceType === 'families') {
      opportunities.push('–î–µ—Ç—Å–∫–∏–µ —Ç–∞—Ä–∏—Ñ—ã');
      opportunities.push('–°–µ–º–µ–π–Ω—ã–µ –ø–∞–∫–µ—Ç—ã');
    }

    return opportunities;
  }

  private getDefaultPricingContext(): PricingContext {
    return {
      price_positioning: 'competitive',
      savings_potential: 0,
      urgency_indicators: {
        is_deal: false,
        time_sensitive: false,
        inventory_limited: false,
        messaging: []
      },
      competitive_analysis: {
        market_position: 'competitive',
        value_proposition: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —Ü–µ–Ω—ã',
        messaging_strategy: ['–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å', '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å']
      }
    };
  }

  // ============ –ü–†–ò–í–ê–¢–ù–´–ï –£–¢–ò–õ–ò–¢–´ ============

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å PricingData
   */
  private normalizePricingData(pricingData: any): PricingData {
    if (!pricingData || !pricingData.prices) {
      return {
        prices: [],
        currency: 'RUB',
        cheapest: 0,
        statistics: {
          average: 0,
          median: 0,
          price_range: { min: 0, max: 0 }
        }
      };
    }

    const normalizedPrices = pricingData.prices.map((price: any) => ({
      origin: price.origin || '–ú–æ—Å–∫–≤–∞',
      destination: price.destination || '–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
      price: price.price || 0,
      currency: price.currency || pricingData.currency || 'RUB',
      date: price.date || new Date().toISOString().split('T')[0]
    }));

    return {
      prices: normalizedPrices,
      currency: pricingData.currency || 'RUB',
      cheapest: pricingData.cheapest || 0,
      statistics: pricingData.statistics || this.calculatePricingStatistics(normalizedPrices)
    };
  }

  // ============ –ë–ê–ó–û–í–´–ï –ú–ï–¢–û–î–´ –ò–ù–¢–ï–†–§–ï–ô–°–ê ============

  validateInput(params: ContentGeneratorParams): ValidationResult {
    return ContentUtils.validateContentInput(params);
  }

  getPerformanceMetrics(): PerformanceMetrics {
    return ContentUtils.calculatePerformance(
      'pricing_analysis',
      this.performanceStart,
      this.metricsData
    );
  }
}