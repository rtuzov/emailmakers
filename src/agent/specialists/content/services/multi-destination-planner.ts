/**
 * üó∫Ô∏è MULTI-DESTINATION PLANNER SERVICE
 * 
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ multi-destination –∫–∞–º–ø–∞–Ω–∏–π
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π, –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–µ–∑–æ–Ω–∞–º –∏ —Ä–µ–≥–∏–æ–Ω–∞–º
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å OpenAI Agents SDK v2
 */

import {
  MultiDestinationPlan,
  DestinationPlan,
  SupportedRegion,
  TravelSeason,
  LayoutType,
  SUPPORTED_REGIONS,
  TRAVEL_SEASONS,
  LAYOUT_TYPES,
  MULTI_DESTINATION_LIMITS,
  REGION_CHARACTERISTICS,
  multiDestinationPlanSchema,
  destinationPlanSchema
} from '../../../../shared/types/multi-destination-types';
import { ContentUtils } from '../common/content-utils';
import { DestinationAnalyzer, DestinationGenerationParams } from './destination-analyzer';

export interface MultiDestinationPlannerConfig {
  maxDestinations?: number;
  preferBalancedRegions?: boolean;
  seasonalOptimization?: boolean;
  pricingStrategy?: 'budget_first' | 'premium_first' | 'balanced' | 'value_optimized';
  layoutPreferences?: LayoutType[];
}

export interface PlanOptimizationParams {
  originalPlan: MultiDestinationPlan;
  optimizationGoals: ('engagement' | 'conversion' | 'seasonal_relevance' | 'price_optimization' | 'regional_balance')[];
  constraints?: {
    maxPriceIncrease?: number;
    mustIncludeRegions?: SupportedRegion[];
    mustIncludeSeasons?: TravelSeason[];
    budgetRange?: 'budget' | 'mid_range' | 'premium' | 'luxury';
  };
}

export interface DestinationMixOptimization {
  optimized_destinations: DestinationPlan[];
  removed_destinations: DestinationPlan[];
  added_destinations: DestinationPlan[];
  optimization_score: number;
  changes_summary: {
    total_changes: number;
    regional_balance_improved: boolean;
    seasonal_optimization_applied: boolean;
    pricing_optimized: boolean;
    layout_improved: boolean;
  };
  performance_prediction: {
    engagement_lift: number;
    conversion_improvement: number;
    seasonal_relevance_score: number;
    confidence_level: 'high' | 'medium' | 'low';
  };
}

export interface UnifiedPlanCreationParams {
  destinations: DestinationPlan[];
  campaignName: string;
  campaignTheme?: string;
  targetSeason?: TravelSeason;
  targetRegion?: SupportedRegion;
  budgetRange?: 'budget' | 'mid_range' | 'premium' | 'luxury';
  urgencyLevel?: 'low' | 'medium' | 'high';
  targetAudience?: 'families' | 'couples' | 'solo_travelers' | 'business' | 'mixed';
  layoutPreference?: LayoutType;
}

export class MultiDestinationPlanner {
  private config: MultiDestinationPlannerConfig;
  private destinationAnalyzer: DestinationAnalyzer;
  private performanceStart: number = 0;

  constructor(config: MultiDestinationPlannerConfig = {}) {
    this.config = {
      maxDestinations: config.maxDestinations || 6,
      preferBalancedRegions: config.preferBalancedRegions ?? true,
      seasonalOptimization: config.seasonalOptimization ?? true,
      pricingStrategy: config.pricingStrategy || 'balanced',
      layoutPreferences: config.layoutPreferences || ['grid', 'compact', 'carousel'],
      ...config
    };
    
    this.destinationAnalyzer = new DestinationAnalyzer({
      maxDestinations: this.config.maxDestinations
    });
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è multi-destination –∫–∞–º–ø–∞–Ω–∏–π
   */
  async createUnifiedPlan(params: UnifiedPlanCreationParams): Promise<MultiDestinationPlan> {
    this.performanceStart = Date.now();
    
    try {
      console.log(`üó∫Ô∏è Creating unified plan for "${params.campaignName}" with ${params.destinations.length} destinations`);
      
      // –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      this.validatePlanInputs(params);
      
      // –®–∞–≥ 2: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      const optimizedDestinations = await this.optimizeDestinationsForPlan(params.destinations, params);
      
      // –®–∞–≥ 3: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ layout —Ç–∏–ø–∞
      const layoutType = this.determineOptimalLayout(optimizedDestinations, params.layoutPreference);
      
      // –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∞ —á–µ—Ä–µ–∑ DestinationAnalyzer
      const basePlan = await this.destinationAnalyzer.createUnifiedPlan(
        optimizedDestinations,
        params.campaignName,
        {
          theme: params.campaignTheme || params.campaignName,
          targetSeason: params.targetSeason,
          budgetRange: params.budgetRange,
          urgencyLevel: params.urgencyLevel
        }
      );
      
      // –®–∞–≥ 5: –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      const enhancedPlan = await this.enhancePlanWithPlannerLogic(basePlan, params);
      
      // –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
      const validationResult = multiDestinationPlanSchema.safeParse(enhancedPlan);
      if (!validationResult.success) {
        console.warn('‚ö†Ô∏è Plan validation issues:', validationResult.error.issues);
      }
      
      console.log(`‚úÖ Unified plan created successfully: ${enhancedPlan.layout_plan.layout_type} layout with ${enhancedPlan.destinations.length} destinations`);
      
      return enhancedPlan;
      
    } catch (error) {
      console.error('‚ùå Unified plan creation error:', error);
      throw error;
    }
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –º–∏–∫—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è performance
   */
  async optimizeDestinationMix(params: PlanOptimizationParams): Promise<DestinationMixOptimization> {
    this.performanceStart = Date.now();
    
    try {
      console.log(`üîß Optimizing destination mix for plan: ${params.originalPlan.name}`);
      console.log(`üéØ Optimization goals: ${params.optimizationGoals.join(', ')}`);
      
      const originalDestinations = params.originalPlan.destinations;
      let optimizedDestinations = [...originalDestinations];
      const changes = [];
      
      // –®–∞–≥ 1: –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
      if (params.optimizationGoals.includes('regional_balance')) {
        const balanceResult = await this.optimizeRegionalBalance(optimizedDestinations, params.constraints);
        optimizedDestinations = balanceResult.destinations;
        changes.push(...balanceResult.changes);
      }
      
      // –®–∞–≥ 2: –°–µ–∑–æ–Ω–Ω–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
      if (params.optimizationGoals.includes('seasonal_relevance')) {
        const seasonalResult = await this.optimizeSeasonalRelevance(optimizedDestinations, params.originalPlan.campaign_context.target_season);
        optimizedDestinations = seasonalResult.destinations;
        changes.push(...seasonalResult.changes);
      }
      
      // –®–∞–≥ 3: –¶–µ–Ω–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
      if (params.optimizationGoals.includes('price_optimization')) {
        const pricingResult = await this.optimizePricing(optimizedDestinations, params.originalPlan.campaign_context.budget_range, params.constraints);
        optimizedDestinations = pricingResult.destinations;
        changes.push(...pricingResult.changes);
      }
      
      // –®–∞–≥ 4: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
      if (params.optimizationGoals.includes('conversion')) {
        const conversionResult = await this.optimizeForConversion(optimizedDestinations, params.originalPlan.positioning_strategy.target_audience);
        optimizedDestinations = conversionResult.destinations;
        changes.push(...conversionResult.changes);
      }
      
      // –®–∞–≥ 5: –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
      const optimizationMetrics = this.calculateOptimizationMetrics(originalDestinations, optimizedDestinations, changes);
      
      // –®–∞–≥ 6: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
      const addedDestinations = this.findAddedDestinations(originalDestinations, optimizedDestinations);
      const removedDestinations = this.findRemovedDestinations(originalDestinations, optimizedDestinations);
      
      console.log(`‚úÖ Destination mix optimization completed: ${changes.length} changes applied`);
      
      return {
        optimized_destinations: optimizedDestinations,
        removed_destinations: removedDestinations,
        added_destinations: addedDestinations,
        optimization_score: optimizationMetrics.overallScore,
        changes_summary: {
          total_changes: changes.length,
          regional_balance_improved: changes.some(c => c.type === 'regional_balance'),
          seasonal_optimization_applied: changes.some(c => c.type === 'seasonal'),
          pricing_optimized: changes.some(c => c.type === 'pricing'),
          layout_improved: changes.some(c => c.type === 'layout')
        },
        performance_prediction: {
          engagement_lift: optimizationMetrics.engagementImprovement,
          conversion_improvement: optimizationMetrics.conversionImprovement,
          seasonal_relevance_score: optimizationMetrics.seasonalRelevance,
          confidence_level: optimizationMetrics.confidence
        }
      };
      
    } catch (error) {
      console.error('‚ùå Destination mix optimization error:', error);
      throw error;
    }
  }

  // ============ –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ ============

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–ª–∞–Ω–∞
   */
  private validatePlanInputs(params: UnifiedPlanCreationParams): void {
    if (!params.destinations || params.destinations.length < MULTI_DESTINATION_LIMITS.MIN_DESTINATIONS) {
      throw new Error(`Minimum ${MULTI_DESTINATION_LIMITS.MIN_DESTINATIONS} destinations required`);
    }
    
    if (params.destinations.length > MULTI_DESTINATION_LIMITS.MAX_DESTINATIONS) {
      throw new Error(`Maximum ${MULTI_DESTINATION_LIMITS.MAX_DESTINATIONS} destinations allowed`);
    }
    
    if (!params.campaignName || params.campaignName.trim().length === 0) {
      throw new Error('Campaign name is required');
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    params.destinations.forEach((dest, index) => {
      const validation = destinationPlanSchema.safeParse(dest);
      if (!validation.success) {
        console.warn(`‚ö†Ô∏è Destination ${index + 1} validation issues:`, validation.error.issues);
      }
    });
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–ª–∞–Ω–∞
   */
  private async optimizeDestinationsForPlan(
    destinations: DestinationPlan[], 
    params: UnifiedPlanCreationParams
  ): Promise<DestinationPlan[]> {
    
    if (!this.config.seasonalOptimization && !this.config.preferBalancedRegions) {
      return destinations;
    }
    
    let optimized = [...destinations];
    
    // –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞
    if (this.config.preferBalancedRegions) {
      optimized = this.balanceRegionalDistribution(optimized);
    }
    
    // –°–µ–∑–æ–Ω–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    if (this.config.seasonalOptimization && params.targetSeason) {
      optimized = this.optimizeForSeason(optimized, params.targetSeason);
    }
    
    // –¶–µ–Ω–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è
    optimized = this.applyPricingStrategy(optimized, params.budgetRange);
    
    return optimized.slice(0, this.config.maxDestinations);
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ layout
   */
  private determineOptimalLayout(destinations: DestinationPlan[], preference?: LayoutType): LayoutType {
    const count = destinations.length;
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –∏ –æ–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (preference && this.isLayoutSuitableForCount(preference, count)) {
      return preference;
    }
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    if (count <= 3) return 'compact';
    if (count <= 6) return 'grid';
    return 'carousel';
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ layout –¥–ª—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  private isLayoutSuitableForCount(layout: LayoutType, count: number): boolean {
    const limits = MULTI_DESTINATION_LIMITS.OPTIMAL_DESTINATIONS[layout];
    return count >= limits.min && count <= limits.max;
  }

  /**
   * –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ —Å –ª–æ–≥–∏–∫–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
   */
  private async enhancePlanWithPlannerLogic(
    basePlan: MultiDestinationPlan, 
    params: UnifiedPlanCreationParams
  ): Promise<MultiDestinationPlan> {
    
    return {
      ...basePlan,
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      positioning_strategy: {
        ...basePlan.positioning_strategy,
        target_audience: params.targetAudience || basePlan.positioning_strategy.target_audience,
        primary_value_proposition: this.generateValueProposition(basePlan.destinations, params),
        competitive_advantages: this.generateCompetitiveAdvantages(basePlan.destinations, params)
      },
      // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
      metadata: {
        ...basePlan.metadata,
        version: '1.0.0',
        optimization_score: this.calculatePlanQualityScore(basePlan.destinations)
      }
    };
  }

  /**
   * –ë–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏–∏
   */
  private balanceRegionalDistribution(destinations: DestinationPlan[]): DestinationPlan[] {
    const regionCounts = new Map<SupportedRegion, number>();
    
    // –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
    destinations.forEach(dest => {
      const region = dest.geographical_info.region;
      regionCounts.set(region, (regionCounts.get(region) || 0) + 1);
    });
    
    // –ï—Å–ª–∏ –¥–∏—Å—Ç—Ä–∏–±—É—Ü–∏—è —É–∂–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
    const maxCount = Math.max(...regionCounts.values());
    const minCount = Math.min(...regionCounts.values());
    
    if (maxCount - minCount <= 1) {
      return destinations;
    }
    
    // –ü—Ä–æ—Å—Ç–∞—è –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∞ - —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–≥–∏–æ–Ω—É –∏ –±–µ—Ä–µ–º –ø–æ –æ—á–µ—Ä–µ–¥–∏
    const grouped = new Map<SupportedRegion, DestinationPlan[]>();
    destinations.forEach(dest => {
      const region = dest.geographical_info.region;
      if (!grouped.has(region)) {
        grouped.set(region, []);
      }
      grouped.get(region)!.push(dest);
    });
    
    const balanced: DestinationPlan[] = [];
    const regions = Array.from(grouped.keys());
    let maxIndex = Math.max(...Array.from(grouped.values()).map(arr => arr.length));
    
    for (let i = 0; i < maxIndex; i++) {
      for (const region of regions) {
        const regionDests = grouped.get(region)!;
        if (i < regionDests.length) {
          balanced.push(regionDests[i]);
        }
      }
    }
    
    return balanced;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–µ–∑–æ–Ω–∞
   */
  private optimizeForSeason(destinations: DestinationPlan[], season: TravelSeason): DestinationPlan[] {
    return destinations.sort((a, b) => {
      const scoreA = this.calculateSeasonalScore(a, season);
      const scoreB = this.calculateSeasonalScore(b, season);
      return scoreB - scoreA;
    });
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–µ–∑–æ–Ω–Ω–æ–≥–æ —Å–∫–æ—Ä–∞
   */
  private calculateSeasonalScore(destination: DestinationPlan, targetSeason: TravelSeason): number {
    if (destination.seasonal_context.primary_season === targetSeason) {
      return 100;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –º–µ—Å—è—Ü–µ–≤
    const seasonMonths: Record<TravelSeason, number[]> = {
      'spring': [3, 4, 5],
      'summer': [6, 7, 8], 
      'autumn': [9, 10, 11],
      'winter': [12, 1, 2],
      'year_round': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]
    };
    
    const targetMonths = seasonMonths[targetSeason];
    const destMonths = destination.seasonal_context.optimal_months;
    const overlap = destMonths.filter(month => targetMonths.includes(month)).length;
    
    return (overlap / targetMonths.length) * 75;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
   */
  private applyPricingStrategy(destinations: DestinationPlan[], budgetRange?: string): DestinationPlan[] {
    if (!this.config.pricingStrategy || this.config.pricingStrategy === 'balanced') {
      return destinations;
    }
    
    switch (this.config.pricingStrategy) {
      case 'budget_first':
        return destinations.sort((a, b) => a.pricing.base_price - b.pricing.base_price);
      
      case 'premium_first':
        return destinations.sort((a, b) => b.pricing.base_price - a.pricing.base_price);
      
      case 'value_optimized':
        return destinations.sort((a, b) => {
          const valueA = this.calculateValueScore(a);
          const valueB = this.calculateValueScore(b);
          return valueB - valueA;
        });
      
      default:
        return destinations;
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  private calculateValueScore(destination: DestinationPlan): number {
    const price = destination.pricing.base_price;
    const confidenceScore = destination.metadata.confidence_score || 50;
    const highlightsCount = destination.content.highlights.length;
    
    // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: (–∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ * —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å) / —Ü–µ–Ω–∞
    return ((highlightsCount * 20 + confidenceScore) / price) * 1000;
  }

  // ============ –ú–ï–¢–û–î–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –ú–ò–ö–°–ê ============

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
   */
  private async optimizeRegionalBalance(
    destinations: DestinationPlan[], 
    constraints: any
  ): Promise<{ destinations: DestinationPlan[], changes: any[] }> {
    
    const balanced = this.balanceRegionalDistribution(destinations);
    const changes = [];
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    for (let i = 0; i < destinations.length; i++) {
      if (destinations[i].id !== balanced[i].id) {
        changes.push({
          type: 'regional_balance',
          destination_id: balanced[i].id,
          action: 'reordered',
          reason: 'Regional balance optimization'
        });
      }
    }
    
    return { destinations: balanced, changes };
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å–µ–∑–æ–Ω–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  private async optimizeSeasonalRelevance(
    destinations: DestinationPlan[], 
    targetSeason: TravelSeason
  ): Promise<{ destinations: DestinationPlan[], changes: any[] }> {
    
    const optimized = this.optimizeForSeason(destinations, targetSeason);
    const changes = [];
    
    for (let i = 0; i < destinations.length; i++) {
      if (destinations[i].id !== optimized[i].id) {
        changes.push({
          type: 'seasonal',
          destination_id: optimized[i].id,
          action: 'reordered',
          reason: `Seasonal optimization for ${targetSeason}`
        });
      }
    }
    
    return { destinations: optimized, changes };
  }

  /**
   * –¶–µ–Ω–æ–≤–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
   */
  private async optimizePricing(
    destinations: DestinationPlan[], 
    budgetRange: string,
    constraints: any
  ): Promise<{ destinations: DestinationPlan[], changes: any[] }> {
    
    const priceOptimized = this.applyPricingStrategy(destinations, budgetRange);
    const changes = [];
    
    for (let i = 0; i < destinations.length; i++) {
      if (destinations[i].id !== priceOptimized[i].id) {
        changes.push({
          type: 'pricing',
          destination_id: priceOptimized[i].id,
          action: 'reordered',
          reason: `Price optimization for ${budgetRange} segment`
        });
      }
    }
    
    return { destinations: priceOptimized, changes };
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
   */
  private async optimizeForConversion(
    destinations: DestinationPlan[], 
    targetAudience: string
  ): Promise<{ destinations: DestinationPlan[], changes: any[] }> {
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—É –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    const optimized = destinations.sort((a, b) => {
      const scoreA = this.calculateConversionPotential(a, targetAudience);
      const scoreB = this.calculateConversionPotential(b, targetAudience);
      return scoreB - scoreA;
    });
    
    const changes = [];
    for (let i = 0; i < destinations.length; i++) {
      if (destinations[i].id !== optimized[i].id) {
        changes.push({
          type: 'conversion',
          destination_id: optimized[i].id,
          action: 'reordered',
          reason: `Conversion optimization for ${targetAudience}`
        });
      }
    }
    
    return { destinations: optimized, changes };
  }

  /**
   * –†–∞—Å—á–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
   */
  private calculateConversionPotential(destination: DestinationPlan, audience: string): number {
    let score = 50; // –±–∞–∑–æ–≤—ã–π —Å–∫–æ—Ä
    
    // –§–∞–∫—Ç–æ—Ä —Ü–µ–Ω—ã (–±–æ–ª–µ–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ = –≤—ã—à–µ –∫–æ–Ω–≤–µ—Ä—Å–∏—è –¥–ª—è budget –∞—É–¥–∏—Ç–æ—Ä–∏–∏)
    if (audience === 'families' || audience === 'budget') {
      score += Math.max(0, 60000 - destination.pricing.base_price) / 1000;
    }
    
    // –§–∞–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    score += destination.content.highlights.length * 5;
    score += destination.metadata.confidence_score || 0;
    
    // –°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
    if (destination.seasonal_context.primary_season !== 'winter') {
      score += 10; // –ó–∏–º–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç –º–µ–Ω—å—à–∏–π —Å–ø—Ä–æ—Å
    }
    
    return score;
  }

  // ============ –£–¢–ò–õ–ò–¢–´ ============

  /**
   * –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private calculateOptimizationMetrics(
    original: DestinationPlan[], 
    optimized: DestinationPlan[], 
    changes: any[]
  ): any {
    
    const engagementImprovement = Math.min(changes.length * 5, 25); // 5% –∑–∞ –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –º–∞–∫—Å 25%
    const conversionImprovement = Math.min(changes.length * 3, 15); // 3% –∑–∞ –∫–∞–∂–¥–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ, –º–∞–∫—Å 15%
    const seasonalRelevance = this.calculateOverallSeasonalRelevance(optimized);
    
    return {
      overallScore: Math.round((engagementImprovement + conversionImprovement + seasonalRelevance) / 3),
      engagementImprovement,
      conversionImprovement,
      seasonalRelevance,
      confidence: changes.length > 3 ? 'high' : changes.length > 1 ? 'medium' : 'low'
    };
  }

  /**
   * –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å–µ–∑–æ–Ω–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
   */
  private calculateOverallSeasonalRelevance(destinations: DestinationPlan[]): number {
    const scores = destinations.map(d => d.metadata.confidence_score || 50);
    return scores.reduce((sum, score) => sum + score, 0) / scores.length;
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  private findAddedDestinations(original: DestinationPlan[], optimized: DestinationPlan[]): DestinationPlan[] {
    const originalIds = new Set(original.map(d => d.id));
    return optimized.filter(d => !originalIds.has(d.id));
  }

  /**
   * –ü–æ–∏—Å–∫ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
   */
  private findRemovedDestinations(original: DestinationPlan[], optimized: DestinationPlan[]): DestinationPlan[] {
    const optimizedIds = new Set(optimized.map(d => d.id));
    return original.filter(d => !optimizedIds.has(d.id));
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
   */
  private generateValueProposition(destinations: DestinationPlan[], params: UnifiedPlanCreationParams): string {
    const count = destinations.length;
    const regions = new Set(destinations.map(d => d.geographical_info.region));
    
    if (regions.size > 1) {
      return `–û—Ç–∫—Ä–æ–π—Ç–µ ${count} —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ ${regions.size} —Ä–µ–≥–∏–æ–Ω–∞—Ö –º–∏—Ä–∞`;
    }
    
    const region = Array.from(regions)[0];
    const regionName = this.getRegionDisplayName(region);
    
    return `–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–∞—è –ø–æ–¥–±–æ—Ä–∫–∞ ${count} –ª—É—á—à–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π ${regionName}`;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤
   */
  private generateCompetitiveAdvantages(destinations: DestinationPlan[], params: UnifiedPlanCreationParams): string[] {
    const advantages = [
      '–¢—â–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏',
      `${destinations.length} –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏`
    ];
    
    // –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ
    const regions = new Set(destinations.map(d => d.geographical_info.region));
    if (regions.size > 1) {
      advantages.push(`–ì–µ–æ–≥—Ä–∞—Ñ–∏—è ${regions.size} —Ä–µ–≥–∏–æ–Ω–æ–≤ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞`);
    }
    
    // –¶–µ–Ω–æ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    const avgPrice = destinations.reduce((sum, d) => sum + d.pricing.base_price, 0) / destinations.length;
    if (avgPrice < 40000) {
      advantages.push('–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
    return advantages;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ä–µ–≥–∏–æ–Ω–∞
   */
  private getRegionDisplayName(region: SupportedRegion): string {
    const names: Record<SupportedRegion, string> = {
      'europe': '–ï–≤—Ä–æ–ø—ã',
      'asia': '–ê–∑–∏–∏', 
      'north_america': '–°–µ–≤–µ—Ä–Ω–æ–π –ê–º–µ—Ä–∏–∫–∏',
      'south_america': '–Æ–∂–Ω–æ–π –ê–º–µ—Ä–∏–∫–∏',
      'africa': '–ê—Ñ—Ä–∏–∫–∏',
      'oceania': '–û–∫–µ–∞–Ω–∏–∏',
      'middle_east': '–ë–ª–∏–∂–Ω–µ–≥–æ –í–æ—Å—Ç–æ–∫–∞'
    };
    
    return names[region] || region;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–ª–∞–Ω–∞
   */
  private calculatePlanQualityScore(destinations: DestinationPlan[]): number {
    const avgConfidence = destinations.reduce((sum, d) => sum + (d.metadata.confidence_score || 0), 0) / destinations.length;
    const regionBalance = this.calculateRegionBalanceScore(destinations);
    const contentQuality = this.calculateContentQualityScore(destinations);
    
    return Math.round((avgConfidence + regionBalance + contentQuality) / 3);
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å–∫–æ—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤
   */
  private calculateRegionBalanceScore(destinations: DestinationPlan[]): number {
    const regionCounts = new Map<SupportedRegion, number>();
    
    destinations.forEach(dest => {
      const region = dest.geographical_info.region;
      regionCounts.set(region, (regionCounts.get(region) || 0) + 1);
    });
    
    const counts = Array.from(regionCounts.values());
    const maxCount = Math.max(...counts);
    const minCount = Math.min(...counts);
    const balance = minCount / maxCount;
    
    return balance * 100;
  }

  /**
   * –†–∞—Å—á–µ—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private calculateContentQualityScore(destinations: DestinationPlan[]): number {
    const avgHighlights = destinations.reduce((sum, d) => sum + d.content.highlights.length, 0) / destinations.length;
    const contentCompleteness = destinations.filter(d => 
      d.content.title && d.content.description && d.content.call_to_action
    ).length / destinations.length;
    
    return ((avgHighlights / 5) * 50) + (contentCompleteness * 50);
  }
}