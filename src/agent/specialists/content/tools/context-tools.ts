/**
 * Context Intelligence Tools
 * 
 * Provides AI-powered context analysis and date intelligence
 * for destination-specific campaign content generation.
 */

import { tool } from '@openai/agents';
import { z } from 'zod';
import { promises as fs } from 'fs';
import path from 'path';
import { OpenAI } from 'openai';
import { ENV_CONFIG } from '../../../../config/env';
import { log } from '../../../core/agent-logger';
import { getErrorMessage } from '../utils/error-handling';

// Campaign context types 
interface CampaignWorkflowContext {
  campaignId?: string;
  campaignPath?: string;
  metadata?: any;
  context_analysis?: any;
  date_analysis?: any;
  pricing_analysis?: any;
  asset_strategy?: any;
  generated_content?: any;
  technical_requirements?: any;
  design_brief?: any;
  trace_id?: string | null;
}

interface ExtendedRunContext {
  campaignContext?: CampaignWorkflowContext;
}

/**
 * Extract campaign context from OpenAI SDK context parameter
 */
function extractCampaignContext(context?: any): CampaignWorkflowContext {
  if (!context) return {};
  
  // Extract campaign path from OpenAI Agent SDK context structure
  const campaignPath = context.context?.campaign?.path || null;
  
  console.log(`üîç DEBUG: extractCampaignContext - found campaignPath: ${campaignPath}`);
  
  return {
    campaignPath,
    // Use only the correct context structure
    ...context.context?.campaign
  };
}

/**
 * Generate dynamic context analysis using OpenAI
 */
async function generateDynamicContextAnalysis(
  destination: string,
  contextType: string
): Promise<any> {
  try {
    const openai = new OpenAI({
      apiKey: ENV_CONFIG.OPENAI_API_KEY
    });

    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è "${destination}" –ø–æ —Ç–∏–ø—É "${contextType}".

–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "destination": "${destination}",
  "context_type": "${contextType}",
  "cultural_insights": {
    "traditions": ["—Ç—Ä–∞–¥–∏—Ü–∏—è1", "—Ç—Ä–∞–¥–∏—Ü–∏—è2"],
    "local_customs": ["–æ–±—ã—á–∞–π1", "–æ–±—ã—á–∞–π2"],
    "cultural_highlights": ["–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å1", "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å2"]
  },
  "target_audience": {
    "primary_segments": ["—Å–µ–≥–º–µ–Ω—Ç1", "—Å–µ–≥–º–µ–Ω—Ç2"],
    "interests": ["–∏–Ω—Ç–µ—Ä–µ—Å1", "–∏–Ω—Ç–µ—Ä–µ—Å2"],
    "demographics": {
      "age_groups": ["18-25", "26-40"],
      "travel_style": "luxury|budget|family|adventure"
    }
  },
  "content_strategy": {
    "key_messages": ["—Å–æ–æ–±—â–µ–Ω–∏–µ1", "—Å–æ–æ–±—â–µ–Ω–∏–µ2"],
    "tone": "friendly|professional|adventurous|luxury",
    "emotional_hooks": ["—ç–º–æ—Ü–∏—è1", "—ç–º–æ—Ü–∏—è2"]
  },
  "visual_elements": {
    "recommended_imagery": ["—Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è1", "—Ç–∏–ø –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è2"],
    "color_palette": ["—Ü–≤–µ—Ç1", "—Ü–≤–µ—Ç2"],
    "visual_style": "–æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è"
  },
  "seasonal_context": {
    "best_months": ["–º–µ—Å—è—Ü1", "–º–µ—Å—è—Ü2"],
    "weather_highlights": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã",
    "seasonal_activities": ["–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å1", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å2"]
  }
}

–ò—Å–ø–æ–ª—å–∑—É–π –∑–Ω–∞–Ω–∏—è –æ —Ç—É—Ä–∏–∑–º–µ, –∫—É–ª—å—Ç—É—Ä–µ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞.`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [{ role: 'user', content: prompt }],
      temperature: 0.7,
      max_tokens: 1500
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('No content generated from OpenAI');
    }

    // Enhanced JSON parsing with markdown cleanup
    try {
      let jsonString = content.trim();
      
      // Remove markdown code blocks if present
      if (jsonString.startsWith('```json')) {
        jsonString = jsonString.replace(/^```json\s*/, '').replace(/\s*```$/, '');
      } else if (jsonString.startsWith('```')) {
        jsonString = jsonString.replace(/^```\s*/, '').replace(/\s*```$/, '');
      }
      
      // Remove any leading/trailing text that's not JSON
      const jsonStart = jsonString.indexOf('{');
      const jsonEnd = jsonString.lastIndexOf('}');
      
      if (jsonStart !== -1 && jsonEnd !== -1) {
        jsonString = jsonString.substring(jsonStart, jsonEnd + 1);
      }
      
      return JSON.parse(jsonString.trim());
    } catch (parseError) {
      // Log the actual response for debugging
      log.error('ContentSpecialist', 'JSON parsing failed for context analysis', {
        destination,
        context_type: contextType,
        raw_response: content.substring(0, 500) + '...',
        parse_error: parseError instanceof Error ? parseError.message : String(parseError)
      });
      
      // NO FALLBACK POLICY: Fail fast with clear error
      throw new Error(`Failed to parse OpenAI response as JSON for ${destination} context analysis. Response was not valid JSON format. Parse error: ${parseError instanceof Error ? parseError.message : String(parseError)}`);
    }

  } catch (error: unknown) {
    const errorMessage = getErrorMessage(error);
    log.error('ContentSpecialist', 'Failed to generate dynamic context analysis', {
      error: errorMessage,
      destination,
      context_type: contextType
    });
    
    // Fallback error - no static fallback allowed per project rules
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è ${destination}: ${errorMessage}`);
  }
}

/**
 * Context provider tool
 */
export const contextProvider = tool({
  name: 'contextProvider',
  description: '–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç AI-–≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫—É–ª—å—Ç—É—Ä—ã, –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
  parameters: z.object({
    destination: z.string().describe('–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'),
    context_type: z.string().describe('–¢–∏–ø –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (cultural, marketing, seasonal)'),
    trace_id: z.string().nullable().describe('ID —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏')
  }),
  
  async execute(params, context) {
    const startTime = Date.now();
    
    try {
      // Get campaign context
      const campaignContext = extractCampaignContext(context);
      
      // Generate dynamic context analysis
      const contextAnalysis = await generateDynamicContextAnalysis(
        params.destination,
        params.context_type
      );
      
      // Save analysis to campaign folder if available
      if (campaignContext.campaignPath) {
        const contentDir = path.join(campaignContext.campaignPath, 'content');
        const analysisPath = path.join(contentDir, 'context-analysis.json');
        
        // Ensure content directory exists
        await fs.mkdir(contentDir, { recursive: true });
        await fs.writeFile(analysisPath, JSON.stringify(contextAnalysis, null, 2));
        console.log(`‚úÖ Context analysis saved to: ${analysisPath}`);
      }
      
      // Update campaign context
      const updatedCampaignContext = {
        ...campaignContext,
        context_analysis: contextAnalysis
      };
      
      // Save context to context parameter (OpenAI SDK pattern)
      if (context) {
        (context as ExtendedRunContext).campaignContext = updatedCampaignContext;
      }

      // Return formatted string with design brief info
      const duration = Date.now() - startTime;
      log.info('ContentSpecialist', 'Context analysis generated', {
        destination: params.destination,
        context_type: params.context_type,
        duration,
        trace_id: params.trace_id
      });
      
      log.tool('contextProvider', params, contextAnalysis, duration, true);
      
      return `–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è ${params.destination} —Å–æ–∑–¥–∞–Ω! –¢–∏–ø: ${params.context_type}. –ö–ª—é—á–µ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${contextAnalysis.content_strategy?.key_messages?.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}. –¢–æ–Ω: ${contextAnalysis.content_strategy?.tone || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}. –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${contextAnalysis.target_audience?.primary_segments?.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}. –í–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å: ${contextAnalysis.visual_elements?.visual_style || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–ª–µ–¥—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.`;

    } catch (error: unknown) {
      const duration = Date.now() - startTime;
      const errorMessage = getErrorMessage(error);
      log.error('ContentSpecialist', 'Context provider failed', {
        error: errorMessage,
        destination: params.destination,
        context_type: params.context_type,
        duration,
        trace_id: params.trace_id
      });
      
      log.tool('contextProvider', params, null, duration, false, errorMessage);
      return `–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: ${errorMessage}`;
    }
  }
});

/**
 * Generate dynamic date analysis using OpenAI
 */
async function generateDynamicDateAnalysis(
  destination: string,
  season: string,
  flexibility: string
): Promise<any> {
  try {
    const openai = new OpenAI({
      apiKey: ENV_CONFIG.OPENAI_API_KEY
    });

    // Get current date for more accurate analysis
    const now = new Date();
    const actualCurrentDate = now.toISOString().split('T')[0];
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth() + 1;
    
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è –≤ "${destination}" –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.

–ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –ê–ö–¢–£–ê–õ–¨–ù–ê–Ø –î–ê–¢–ê:
- –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: ${actualCurrentDate}
- –¢–µ–∫—É—â–∏–π –≥–æ–¥: ${currentYear}
- –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü: ${currentMonth}

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:
- –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${destination}
- –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–µ–∑–æ–Ω: ${season}
- –ì–∏–±–∫–æ—Å—Ç—å –¥–∞—Ç: ${flexibility}

–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–´–ï –¢–†–ï–ë–û–í–ê–ù–ò–Ø –ö –î–ê–¢–ê–ú:
- –í–°–ï –î–ê–¢–´ –î–û–õ–ñ–ù–´ –ë–´–¢–¨ –í –ë–£–î–£–©–ï–ú (–ø–æ—Å–ª–µ ${actualCurrentDate})
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ ${currentYear} –≥–æ–¥ –∏ –ø–æ–∑–∂–µ
- –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞: –∑–∞–≤—Ç—Ä–∞ (${new Date(now.getTime() + 24*60*60*1000).toISOString().split('T')[0]})

–í–ê–ñ–ù–û: –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ markdown –±–ª–æ–∫–æ–≤.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:

{
  "destination": "${destination}",
  "season": "${season}",
  "flexibility": "${flexibility}",
  "optimal_dates": ["YYYY-MM-DD", "YYYY-MM-DD", "YYYY-MM-DD"],
  "pricing_windows": ["–ø–µ—Ä–∏–æ–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º", "–ø–µ—Ä–∏–æ–¥ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º"],
  "booking_recommendation": "–∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ —Å—Ä–æ–∫–∞–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
  "seasonal_factors": "–æ–ø–∏—Å–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤",
  "current_date": "${actualCurrentDate}",
  "weather_forecast": {
    "temperature_range": "XX-XX¬∞C",
    "precipitation": "low|medium|high",
    "weather_description": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã"
  },
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è2"]
}

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü—Ä–µ–¥–ª–æ–∂–∏ 4-6 –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ 12 –º–µ—Å—è—Ü–µ–≤ –æ—Ç ${actualCurrentDate}
- –£—á—Ç–∏ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏ –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –†–∞—Å—Å–º–æ—Ç—Ä–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–ø–æ—Ç–æ–∫–∏ –∏ —Ü–µ–Ω–æ–≤—ã–µ –ø–µ—Ä–∏–æ–¥—ã –∞–≤–∏–∞–ø–µ—Ä–µ–≤–æ–∑–æ–∫
- –ê–¥–∞–ø—Ç–∏—Ä—É–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–¥ —É—Ä–æ–≤–µ–Ω—å –≥–∏–±–∫–æ—Å—Ç–∏
- –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
- –í—Å–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD –∏ –¢–û–õ–¨–ö–û –í –ë–£–î–£–©–ï–ú
- –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –ù–ï –ò–°–ü–û–õ–¨–ó–£–ô MARKDOWN –ë–õ–û–ö–ò (\`\`\`json), —Ç–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π JSON`;

    const response = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π —Ç–æ—á–Ω—É—é, –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –°–¢–†–û–ì–û –≤ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–º JSON —Ñ–æ—Ä–º–∞—Ç–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ markdown –±–ª–æ–∫–æ–≤.'
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.3, // Lower temperature for more consistent JSON structure
      max_tokens: 1500
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('No content generated from OpenAI');
    }

    // Enhanced JSON parsing with markdown cleanup
    let jsonString = content.trim();
    
    // Remove markdown code blocks if present
    if (jsonString.startsWith('```json')) {
      jsonString = jsonString.replace(/^```json\s*/, '').replace(/\s*```$/, '');
    } else if (jsonString.startsWith('```')) {
      jsonString = jsonString.replace(/^```\s*/, '').replace(/\s*```$/, '');
    }
    
    // Remove any leading/trailing text that's not JSON
    const jsonStart = jsonString.indexOf('{');
    const jsonEnd = jsonString.lastIndexOf('}');
    
    if (jsonStart !== -1 && jsonEnd !== -1) {
      jsonString = jsonString.substring(jsonStart, jsonEnd + 1);
    }
    
    try {
      const parsedResult = JSON.parse(jsonString.trim());
      
      // üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–¢ - –ü–†–û–ì–†–ê–ú–ú–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê 
      const currentDate = new Date();
      const today = currentDate.toISOString().split('T')[0];
      
      console.log(`üîç DEBUG: Date validation - Current date: ${today}`);
      console.log(`üîç DEBUG: Received optimal_dates from AI:`, parsedResult.optimal_dates);
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
      if (parsedResult.optimal_dates && Array.isArray(parsedResult.optimal_dates)) {
        const futureDates = parsedResult.optimal_dates.filter((date: string) => {
          const dateObj = new Date(date);
          const isValid = dateObj > currentDate;
          console.log(`üîç DEBUG: Date ${date} - Valid future date: ${isValid}`);
          return isValid;
        });
        
        console.log(`üîç DEBUG: Filtered future dates:`, futureDates);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –±—É–¥—É—â–∏—Ö –¥–∞—Ç –∏–ª–∏ –∏—Ö —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ
        if (futureDates.length < 3) {
          console.log(`‚ö†Ô∏è WARNING: Too few future dates (${futureDates.length}), generating new ones...`);
          
          const newOptimalDates = [];
          const baseDate = new Date(currentDate);
          baseDate.setDate(baseDate.getDate() + 7); // –ù–∞—á–∏–Ω–∞–µ–º —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é
          
          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 5 –¥–∞—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 2-3 –Ω–µ–¥–µ–ª–∏
          for (let i = 0; i < 5; i++) {
            const newDate = new Date(baseDate);
            newDate.setDate(newDate.getDate() + (i * 17)); // ~2.5 –Ω–µ–¥–µ–ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª
            newOptimalDates.push(newDate.toISOString().split('T')[0]);
          }
          
          console.log(`‚úÖ Generated new future dates:`, newOptimalDates);
          parsedResult.optimal_dates = newOptimalDates;
          parsedResult.current_date = today;
          parsedResult.date_validation_applied = true;
        } else {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
          parsedResult.optimal_dates = futureDates;
          parsedResult.current_date = today;
          parsedResult.date_validation_applied = true;
        }
      }
      
      return parsedResult;
    } catch (parseError) {
      // Log the actual response for debugging
      log.error('ContentSpecialist', 'JSON parsing failed for date analysis', {
        destination,
        season,
        flexibility,
        raw_response: content.substring(0, 500) + '...',
        cleaned_json: jsonString.substring(0, 500) + '...',
        parse_error: parseError instanceof Error ? parseError.message : String(parseError)
      });
      
      // NO FALLBACK POLICY: Fail fast with clear error
      throw new Error(`Failed to parse OpenAI response as JSON for ${destination} date analysis. Response was not valid JSON format. Parse error: ${parseError instanceof Error ? parseError.message : String(parseError)}`);
    }

  } catch (error: unknown) {
    const errorMessage = getErrorMessage(error);
    log.error('ContentSpecialist', 'Failed to generate dynamic date analysis', {
      error: errorMessage,
      destination,
      season,
      flexibility
    });
    
    // Fallback error - no static fallback allowed per project rules
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑ –¥–∞—Ç –¥–ª—è ${destination}: ${errorMessage}`);
  }
}

/**
 * Date intelligence tool
 */
export const dateIntelligence = tool({
  name: 'dateIntelligence',
  description: 'AI-–∞–Ω–∞–ª–∏–∑ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö –¥–∞—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏, –ø–æ–≥–æ–¥—ã –∏ —Ü–µ–Ω–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤',
  parameters: z.object({
    destination: z.string().describe('–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'),
    season: z.string().describe('–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Å–µ–∑–æ–Ω'),
    flexibility: z.string().describe('–ì–∏–±–∫–æ—Å—Ç—å –¥–∞—Ç (fixed, flexible, very_flexible)'),
    trace_id: z.string().nullable().describe('ID —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏')
  }),
  
  async execute(params, context) {
    const startTime = Date.now();
    
    try {
      // Get campaign context
      const campaignContext = extractCampaignContext(context);
      
      // Generate dynamic date analysis
      const dateAnalysis = await generateDynamicDateAnalysis(
        params.destination,
        params.season,
        params.flexibility
      );
      
      // Save analysis to campaign folder if available
      if (campaignContext.campaignPath) {
        const contentDir = path.join(campaignContext.campaignPath, 'content');
        const analysisPath = path.join(contentDir, 'date-analysis.json');
        
        try {
          // Campaign folder should already exist from orchestrator
          // Just ensure content subdirectory exists 
          await fs.mkdir(contentDir, { recursive: true });
          console.log(`üìÅ Content directory ensured: ${contentDir}`);
          
          // Save with enhanced structure that finalization tool expects
          const enhancedDateAnalysis = {
            ...dateAnalysis,
            // Ensure required fields exist for finalization tool
            optimal_dates: dateAnalysis.optimal_dates || [],
            seasonal_factors: dateAnalysis.seasonal_factors || {},
            booking_trends: dateAnalysis.booking_recommendation || {},
            saved_at: new Date().toISOString(),
            campaign_path: campaignContext.campaignPath
          };
          
          await fs.writeFile(analysisPath, JSON.stringify(enhancedDateAnalysis, null, 2));
          console.log(`‚úÖ Date analysis saved to: ${analysisPath}`);
          
          // Verify file was actually written
          try {
            const verifyData = await fs.readFile(analysisPath, 'utf8');
            const parsed = JSON.parse(verifyData);
            console.log(`‚úÖ File verification successful. Keys: ${Object.keys(parsed).join(', ')}`);
          } catch (verifyError) {
            console.error(`‚ùå File verification failed: ${verifyError}`);
          }
          
        } catch (saveError) {
          console.error(`‚ùå Failed to save date analysis: ${saveError}`);
          console.error(`‚ùå Campaign path: ${campaignContext.campaignPath}`);
          console.error(`‚ùå Content dir: ${contentDir}`);
          console.error(`‚ùå Analysis path: ${analysisPath}`);
          throw new Error(`Failed to save date analysis to ${analysisPath}: ${getErrorMessage(saveError)}`);
        }
      } else {
        console.error(`‚ùå No campaign path available for saving date analysis. Context:`, campaignContext);
        throw new Error(`‚ùå CRITICAL ERROR: No campaign path available for saving date analysis. Date analysis is required for email generation. Campaign context keys: ${Object.keys(campaignContext)}`);
      }
      
      // Update campaign context
      const updatedCampaignContext = {
        ...campaignContext,
        date_analysis: dateAnalysis
      };
      
      // Save context to context parameter (OpenAI SDK pattern)
      if (context) {
        (context as ExtendedRunContext).campaignContext = updatedCampaignContext;
      }

      // Return formatted string
      const duration = Date.now() - startTime;
      log.info('ContentSpecialist', 'Date analysis generated', {
        destination: params.destination,
        season: params.season,
        duration,
        trace_id: params.trace_id
      });
      
      log.tool('dateIntelligence', params, dateAnalysis, duration, true);
      
      return `–ê–Ω–∞–ª–∏–∑ –¥–∞—Ç –¥–ª—è ${params.destination} –≤ ${params.season}: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –¥–∞—Ç—ã - ${dateAnalysis.optimal_dates?.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}. –¶–µ–Ω–æ–≤—ã–µ –æ–∫–Ω–∞ - –Ω–∏–∑–∫–∏–π —Å–µ–∑–æ–Ω: ${dateAnalysis.pricing_windows?.low_season?.months?.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é - ${dateAnalysis.booking_recommendation?.advance_booking || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞'}. –°–µ–∑–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã - ${dateAnalysis.seasonal_factors?.local_events?.join(', ') || '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã'}. –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–ª–µ–¥—É—é—â–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º.`;

    } catch (error: unknown) {
      const duration = Date.now() - startTime;
      const errorMessage = getErrorMessage(error);
      log.error('ContentSpecialist', 'Date intelligence failed', {
        error: errorMessage,
        destination: params.destination,
        season: params.season,
        duration,
        trace_id: params.trace_id
      });
      
      log.tool('dateIntelligence', params, null, duration, false, errorMessage);
      return `–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞—Ç: ${errorMessage}`;
    }
  }
});