/**
 * üé® DESIGN SPECIALIST AGENT V2
 * 
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º:
 * - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã
 * - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–µ–∑ fallback
 * - –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ task_type
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
 * 
 * –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
 * - AssetManager: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Å—Å–µ—Ç–∞–º–∏
 * - ContentExtractor: –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * - EmailRenderingService: —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ email
 * - ErrorHandler: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 */

import { Agent, run, tool } from '@openai/agents';
import { createAgentRunConfig } from '../utils/tracing-utils';
import { generateTraceId } from '../utils/tracing-utils';
import { BaseSpecialistAgent } from '../core/base-specialist-agent';
import { z } from 'zod';
import { randomUUID } from 'crypto';

// –ù–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
import { AssetManager, AssetSearchParams, AssetSearchResult, StandardAsset } from '../core/asset-manager';
import { ContentExtractor, ExtractedContentPackage } from '../core/content-extractor';
import { EmailRenderingService, RenderingParams, RenderingResult } from '../core/email-rendering-service';
import { ErrorHandler, ErrorType, ErrorSeverity } from '../core/error-handler';

// Design tools
import { responsiveDesign, ResponsiveDesignParams } from '../tools/simple/responsive-design';
import { accessibility, AccessibilityParams } from '../tools/simple/accessibility';

// –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
import { getUsageModel } from '../../shared/utils/model-config';
import {
  DesignToQualityHandoffData,
  ContentToDesignHandoffData,
  HandoffValidationResult,
  AGENT_CONSTANTS
} from '../types/base-agent-types';
import { HandoffValidator } from '../validators/agent-handoff-validator';
import { DesignSpecialistValidator } from '../validators/design-specialist-validator';
import { AICorrector, HandoffType } from '../validators/ai-corrector';

// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á (–æ–±—ä–µ–¥–∏–Ω–∏–ª–∏ –ø–æ—Ö–æ–∂–∏–µ)
export type DesignTaskType = 'find_assets' | 'render_email' | 'optimize_design' | 'responsive_design' | 'accessibility_check';

// –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—É–ø—Ä–æ—â–µ–Ω—ã –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
export interface DesignSpecialistInputV2 {
  task_type: DesignTaskType;
  content_package: any; // –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —á–µ—Ä–µ–∑ ContentExtractor
  rendering_requirements?: {
    template_type?: 'promotional' | 'transactional' | 'newsletter' | 'premium';
    email_client_optimization?: 'gmail' | 'outlook' | 'apple_mail' | 'universal' | 'all';
    responsive_design?: boolean;
    seasonal_theme?: boolean;
    include_dark_mode?: boolean;
  };
  asset_requirements?: {
    tags?: string[];
    emotional_tone?: 'positive' | 'neutral' | 'urgent' | 'friendly';
    campaign_type?: 'seasonal' | 'promotional' | 'informational';
    target_count?: number;
    preferred_emotion?: 'happy' | 'angry' | 'neutral' | 'sad' | 'confused';
    image_requirements?: {
      total_images_needed: number;
      figma_images_count: number;
      internet_images_count: number;
      require_logo: boolean;
      image_categories?: ('illustration' | 'photo' | 'icon' | 'banner' | 'background')[];
    };
  };
  campaign_context?: {
    campaign_id?: string;
    performance_session?: string;
  };
}

// –í—ã—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω—ã)
export interface DesignSpecialistOutputV2 {
  success: boolean;
  task_type: DesignTaskType;
  results: {
    assets?: AssetSearchResult;
    rendering?: RenderingResult;
    optimization?: any;
    template_design?: any;
    image_plan?: any;
    external_images?: any;
  };
  design_artifacts?: {
    html_output?: string;
    mjml_source?: string;
    assets_used?: StandardAsset[];
    performance_metrics?: any;
    dark_mode_support?: boolean;
  };
  handoff_data?: DesignToQualityHandoffData;
  recommendations: {
    next_agent?: 'quality_specialist' | 'delivery_specialist';
    next_actions: string[];
  };
  analytics: {
    execution_time_ms: number;
    operations_performed: number;
    confidence_score: number;
    cache_hit_rate: number;
  };
  error?: string;
  trace_id: string;
}

export class DesignSpecialistAgentV2 extends BaseSpecialistAgent {
  protected readonly agentId = 'design-specialist-v2';
  // traceId provided by base
  // agent inherited
  
  // –°–µ—Ä–≤–∏—Å—ã (—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏)
  private assetManager: AssetManager;
  private contentExtractor: ContentExtractor;
  private renderingService: EmailRenderingService;
  private errorHandler: ErrorHandler;
  
  // –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ)
  private handoffValidator: HandoffValidator;
  private designValidator: DesignSpecialistValidator;
  private aiCorrector: AICorrector;

  constructor() {
    // Create design tools following OpenAI Agents SDK pattern
    const responsiveDesignTool = tool({
      name: 'responsive_design',
      description: 'Create responsive email designs that work across all devices and email clients',
      parameters: z.object({
        action: z.enum(['analyze', 'optimize', 'generate', 'test']).describe('Action to perform'),
        html_content: z.string().nullable().default(null).describe('HTML content to analyze or optimize'),
        layout_type: z.enum(['single_column', 'two_column', 'multi_column', 'hybrid']).nullable().default(null).describe('Layout type for generation'),
        target_devices: z.array(z.enum(['mobile', 'tablet', 'desktop'])).nullable().default(null).describe('Target devices'),
        optimization_level: z.enum(['basic', 'standard', 'aggressive']).nullable().default(null).describe('Optimization level'),
        email_client_support: z.array(z.enum(['gmail', 'outlook', 'apple_mail', 'yahoo', 'thunderbird'])).nullable().default(null).describe('Email client support')
      }),
      execute: async (input) => {
        return await responsiveDesign(input as ResponsiveDesignParams);
      }
    });

    const accessibilityTool = tool({
      name: 'accessibility_check',
      description: 'Check and improve email accessibility compliance (WCAG AA standards)',
      parameters: z.object({
        action: z.enum(['analyze', 'fix', 'validate', 'generate_report']).describe('Action to perform'),
        html_content: z.string().describe('HTML content to check'),
        compliance_level: z.enum(['WCAG_A', 'WCAG_AA', 'WCAG_AAA']).default('WCAG_AA').describe('Compliance level'),
        auto_fix: z.boolean().default(true).describe('Apply automatic fixes'),
        preserve_design: z.boolean().default(true).describe('Preserve visual design while fixing issues'),
        target_disabilities: z.array(z.enum(['visual', 'motor', 'cognitive', 'hearing'])).nullable().default(null).describe('Target disability types')
      }),
      execute: async (input) => {
        return await accessibility(input as AccessibilityParams);
      }
    });

    // Initialize with tools array including design tools
    super('DesignSpecialistV2', 'placeholder', [responsiveDesignTool, accessibilityTool]);

    // Override instructions and model
    (this.agent as Agent).instructions = this.getAgentInstructions();
    (this.agent as Agent).model = getUsageModel();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    this.assetManager = new AssetManager();
    this.contentExtractor = new ContentExtractor();
    this.renderingService = new EmailRenderingService();
    this.errorHandler = ErrorHandler.getInstance();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
    this.aiCorrector = new AICorrector();
    this.handoffValidator = HandoffValidator.getInstance(this.aiCorrector);
    this.designValidator = DesignSpecialistValidator.getInstance();
    
    console.log(`üé® DesignSpecialistAgentV2 initialized with OpenAI Agent SDK: ${this.agentId} (trace: ${this.traceId})`);
  }

  /**
   * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
   */
  async executeTask(input: DesignSpecialistInputV2): Promise<DesignSpecialistOutputV2> {
    const startTime = Date.now();
    
    try {
      console.log(`üé® DesignSpecialistV2: Starting task ${input.task_type} with OpenAI Agent SDK`);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      console.log(`üîç Step 1: Validating input...`);
      this.validateInput(input);
      console.log(`‚úÖ Step 1 completed: Input validation passed`);
      
      // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏)
      let extractedContent: ExtractedContentPackage | null = null;
      if (input.task_type === 'render_email' || input.task_type === 'optimize_design') {
        console.log(`üîç Step 2: Extracting content for ${input.task_type}...`);
        console.log(`üîç Content package structure:`, Object.keys(input.content_package || {}));
        extractedContent = this.extractAndValidateContent(input.content_package);
        console.log(`‚úÖ Step 2 completed: Content extraction passed`);
      }
      
      // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø—É
      console.log(`üîç Step 3: Executing task by type...`);
      const result = await this.executeByTaskType(input, extractedContent, startTime);
      console.log(`‚úÖ Step 3 completed: Task execution passed`);
      
      console.log(`‚úÖ DesignSpecialistV2: Task completed successfully with OpenAI Agent SDK in ${Date.now() - startTime}ms`);
      return result;
      
    } catch (error) {
      console.error(`‚ùå DesignSpecialistV2: Task failed at step:`, error.message);
      console.error(`‚ùå Full error:`, error);
      console.error(`‚ùå DesignSpecialistV2: Task failed:`, error);
      return this.handleTaskError(error, input, startTime);
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  private validateInput(input: DesignSpecialistInputV2): void {
    if (!input) {
      throw new Error('DesignSpecialistV2: Input is required');
    }
    
    if (!input.task_type) {
      throw new Error('DesignSpecialistV2: task_type is required');
    }
    
    const validTaskTypes: DesignTaskType[] = ['find_assets', 'render_email', 'optimize_design', 'responsive_design', 'accessibility_check'];
    if (!validTaskTypes.includes(input.task_type)) {
      throw new Error(`DesignSpecialistV2: Invalid task_type "${input.task_type}". Must be one of: ${validTaskTypes.join(', ')}`);
    }
    
    // content_package –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è render_email –∏ optimize_design
    if ((input.task_type === 'render_email' || input.task_type === 'optimize_design') && !input.content_package) {
      throw new Error(`DesignSpecialistV2: content_package is required for task_type "${input.task_type}"`);
    }
    
    // –î–ª—è find_assets –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞–ª–∏—á–∏–µ asset_requirements
    if (input.task_type === 'find_assets' && !input.asset_requirements) {
      throw new Error('DesignSpecialistV2: asset_requirements is required for find_assets task');
    }
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractAndValidateContent(contentPackage: any): ExtractedContentPackage {
    try {
      const extracted = this.contentExtractor.extractContent(contentPackage);
      this.contentExtractor.validateExtractedContent(extracted);
      
      console.log('‚úÖ Content extracted and validated:', this.contentExtractor.getExtractionStats(extracted));
      return extracted;
      
    } catch (error) {
      this.errorHandler.handleError(
        error, 
        ErrorType.CONTENT_EXTRACTION_ERROR, 
        this.agentId,
        { contentPackage: typeof contentPackage === 'object' ? Object.keys(contentPackage) : 'invalid' },
        this.traceId
      );
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ —Ç–∏–ø—É
   */
  private async executeByTaskType(
    input: DesignSpecialistInputV2, 
    content: ExtractedContentPackage | null,
    startTime: number
  ): Promise<DesignSpecialistOutputV2> {
    
    switch (input.task_type) {
      case 'find_assets':
        return await this.executeEnhancedFindAssets(input, content, startTime);
        
      case 'render_email':
        return await this.executeRenderEmail(input, content, startTime);
        
      case 'optimize_design':
        return await this.executeOptimizeDesign(input, content, startTime);
        
      case 'responsive_design':
        return await this.executeResponsiveDesign(input, content, startTime);
        
      case 'accessibility_check':
        return await this.executeAccessibilityCheck(input, content, startTime);
        
      default:
        throw new Error(`DesignSpecialistV2: Unhandled task type: ${input.task_type}`);
    }
  }

  /**
   * üéØ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô AI WORKFLOW
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å–µ 4 –Ω–æ–≤—ã–µ AI —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private async executeEnhancedFindAssets(
    input: DesignSpecialistInputV2, 
    content: ExtractedContentPackage | null,
    startTime: number
  ): Promise<DesignSpecialistOutputV2> {
    try {
      console.log('üéØ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ —Å AI —Ñ—É–Ω–∫—Ü–∏—è–º–∏...');
      
      // 1. üè∑Ô∏è AI –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤
      const optimalTags = content ? 
        await this.selectOptimalTags(content, input.asset_requirements) :
        input.asset_requirements?.tags || [];
      
      // 2. üìß AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      const templateDesign = content ? 
        await this.generateOptimalTemplate(content) : 
        null;
      
      // 3. üñºÔ∏è AI –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imagePlan = content ? 
        await this.planEmailImages(content, templateDesign) :
        null;
      
      // 4. üåê –ü–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      const externalImages = imagePlan ? 
        await this.searchExternalImagesIfNeeded(imagePlan) :
        null;
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ–∏—Å–∫ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const enhancedAssetParams: AssetSearchParams = {
        tags: optimalTags,
        emotional_tone: input.asset_requirements?.emotional_tone || 'positive',
        campaign_type: input.asset_requirements?.campaign_type || 'promotional',
        target_count: imagePlan?.total_images_needed || input.asset_requirements?.target_count || 6,
        preferred_emotion: input.asset_requirements?.preferred_emotion || 'happy',
        image_requirements: {
          total_images_needed: imagePlan?.total_images_needed || 3,
          figma_images_count: Math.ceil((imagePlan?.total_images_needed || 3) * 0.7), // 70% –∏–∑ Figma
          internet_images_count: Math.floor((imagePlan?.total_images_needed || 3) * 0.3), // 30% –≤–Ω–µ—à–Ω–∏–µ
          require_logo: true,
          image_categories: this.extractImageCategories(imagePlan)
        }
      };
      
      const assetResult = await this.assetManager.searchAssets(enhancedAssetParams);
      
      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const combinedResult = this.combineAssetResults(assetResult, externalImages);
      
      const confidence = this.calculateAssetConfidence(combinedResult);
      
      return {
        success: true,
        task_type: 'find_assets',
        results: {
          assets: combinedResult,
          template_design: templateDesign,
          image_plan: imagePlan,
          external_images: externalImages
        },
        recommendations: {
          next_agent: 'quality_specialist',
          next_actions: [
            'Validate selected assets',
            'Optimize images for email',
            'Test template design',
            'Verify external image licenses'
          ]
        },
        analytics: {
          execution_time_ms: Date.now() - startTime,
          operations_performed: 4, // AI functions + asset search
          confidence_score: confidence,
          cache_hit_rate: 0
        },
        trace_id: this.traceId
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —É–ª—É—á—à–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ –∞—Å—Å–µ—Ç–æ–≤:', error);
      throw error;
    }
  }

  private async generateOptimalTemplate(content: ExtractedContentPackage): Promise<any> {
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ ContentSpecialist –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞
      const briefText = `${content.content.subject || ''} ${content.content.body || ''}`;
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
      const campaignContext = this.analyzeCampaignContext(content, {});
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —à–∞–±–ª–æ–Ω
      const templateDesign = await this.runTemplateGenerationAI(campaignContext, briefText);
      
      return templateDesign;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
      return null;
    }
  }

  private async runTemplateGenerationAI(campaignContext: any, briefText: string): Promise<any> {
    try {
      const prompt = `–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –¥–∏–∑–∞–π–Ω—É email –∫–∞–º–ø–∞–Ω–∏–π. 

–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Å–æ–∑–¥–∞–π –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω email.

–ö–û–ù–¢–ï–ö–°–¢ –ö–ê–ú–ü–ê–ù–ò–ò:
${JSON.stringify(campaignContext, null, 2)}

–¢–ï–ö–°–¢ –ë–†–ò–§–ê:
${briefText}

–í–µ—Ä–Ω–∏ JSON —Å –ø–æ–ª–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —à–∞–±–ª–æ–Ω–∞ –≤–∫–ª—é—á–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É, –±–ª–æ–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.`;

      const runConfig = createAgentRunConfig(
        'DesignSpecialist-TemplateGeneration',
        'template_generation',
        {
          operation: 'template_generation',
          component_type: 'agent',
          workflow_stage: 'ai_template_design'
        }
      );

      const response = await run(this.agent, prompt);
      return JSON.parse(response.content);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–∞:', error);
      return this.getDefaultTemplate();
    }
  }

  private generateTemplateFromContext(campaignContext: any, briefText: string): any {
    // Analyze content to determine template structure
    const isPromotional = briefText.toLowerCase().includes('–∞–∫—Ü–∏') || briefText.toLowerCase().includes('—Å–∫–∏–¥–∫');
    const hasUrgency = briefText.toLowerCase().includes('—Å—Ä–æ—á–Ω–æ') || briefText.toLowerCase().includes('–±—ã—Å—Ç—Ä–æ');
    const hasDestination = briefText.toLowerCase().includes('—Å–æ—á–∏') || briefText.toLowerCase().includes('–º–æ—Å–∫–≤–∞');
    
    return {
      template_type: isPromotional ? 'promotional' : 'informational',
      structure: {
        header_style: hasUrgency ? 'urgent' : 'hero',
        content_blocks: [
          { type: 'hero', priority: 1, content_hint: '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' },
          ...(hasDestination ? [{ type: 'image', priority: 2, content_hint: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' }] : []),
          { type: 'cta', priority: 3, content_hint: '–ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è' },
          ...(isPromotional ? [{ type: 'urgency', priority: 4, content_hint: '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏' }] : [])
        ],
        layout_style: 'single_column',
        color_scheme: isPromotional ? 'accent' : 'brand'
      },
      optimization: {
        mobile_first: true,
        load_speed_priority: 'high',
        accessibility_level: 'aa'
      }
    };
  }

  private getDefaultTemplate(): any {
    return {
      template_type: 'promotional',
      structure: {
        header_style: 'hero',
        content_blocks: [
          { type: 'hero', priority: 1, content_hint: '–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ' },
          { type: 'image', priority: 2, content_hint: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è' },
          { type: 'cta', priority: 3, content_hint: '–ö–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è' }
        ],
        layout_style: 'single_column',
        color_scheme: 'brand'
      }
    };
  }

  private async searchExternalImagesIfNeeded(imagePlan: any): Promise<any> {
    try {
      if (!imagePlan?.image_plan) return null;
      
      // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ExternalImageAgent
      const { ExternalImageAgent } = await import('../tools/external-image-agent');
      const externalImageAgent = new ExternalImageAgent();
      
      const externalResults = [];
      
      // –ò—â–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–Ω–∞
      for (const plan of imagePlan.image_plan) {
        if (plan.search_tags && plan.search_tags.length > 0) {
          const searchParams = {
            search_query: plan.search_tags.join(' '),
            image_requirements: {
              type: plan.type,
              size_priority: plan.size_priority,
              style: 'photo',
              emotional_tone: plan.emotional_tone
            },
            technical_requirements: {
              max_size_kb: 100,
              min_width: 400,
              min_height: 300,
              formats: ['jpg', 'png'],
              mobile_optimized: true
            },
            fallback_generation: {
              ai_prompt: plan.content_description,
              style: 'professional',
              fallback_enabled: true
            }
          };
          
          const result = await externalImageAgent.searchExternalImages(searchParams as any);
          if (result.success) {
            externalResults.push(...result.images);
          }
        }
      }
      
      return {
        success: externalResults.length > 0,
        images: externalResults,
        total_found: externalResults.length
      };
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      return null;
    }
  }

  private extractImageCategories(imagePlan: any): Array<'illustration' | 'photo' | 'icon' | 'banner' | 'background'> {
    if (!imagePlan?.image_plan) return ['illustration', 'photo'];
    
    const categories = new Set<'illustration' | 'photo' | 'icon' | 'banner' | 'background'>();
    
    imagePlan.image_plan.forEach((plan: any) => {
      switch (plan.type) {
        case 'hero':
          categories.add('banner');
          break;
        case 'illustration':
          categories.add('illustration');
          break;
        case 'icon':
          categories.add('icon');
          break;
        case 'background':
          categories.add('background');
          break;
        default:
          categories.add('photo');
      }
    });
    
    return Array.from(categories);
  }

  private combineAssetResults(figmaAssets: AssetSearchResult, externalImages: any): AssetSearchResult {
    const combined: AssetSearchResult = {
      ...figmaAssets,
      external_images: externalImages?.images || []
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
    if (externalImages?.images) {
      combined.total_found = (figmaAssets.total_found || 0) + externalImages.images.length;
    }
    
    return combined;
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ email
   */
  private async executeRenderEmail(
    input: DesignSpecialistInputV2, 
    content: ExtractedContentPackage | null,
    startTime: number
  ): Promise<DesignSpecialistOutputV2> {
    
    try {
      if (!content) {
        throw new Error('DesignSpecialistV2: Content is required for render_email task');
      }
      // –ü–æ–∏—Å–∫ –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      let assets: StandardAsset[] = [];
      
      if (input.asset_requirements) {
        console.log('üîç Asset requirements provided, searching assets for rendering...');
        
        const searchParams: AssetSearchParams = {
          tags: input.asset_requirements.tags || [],
          emotional_tone: input.asset_requirements.emotional_tone || 'positive',
          campaign_type: input.asset_requirements.campaign_type || 'promotional',
          target_count: input.asset_requirements.target_count || 3,
          preferred_emotion: input.asset_requirements.preferred_emotion || 'happy'
        };
        
        const assetResult = await this.assetManager.searchAssets(searchParams, content || input.content_package);
        if (assetResult.success) {
          assets = assetResult.assets;
          console.log(`‚úÖ Found ${assets.length} assets for email rendering`);
        } else {
          console.warn(`‚ö†Ô∏è Asset search failed: ${assetResult.error}`);
        }
      } else {
        console.log('‚ÑπÔ∏è No asset requirements provided, rendering without images');
      }
      
      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      const renderingAction = this.determineRenderingAction(input.rendering_requirements);
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      const renderingParams: RenderingParams = {
        action: renderingAction,
        content: content,
        assets: assets,
        template_type: input.rendering_requirements?.template_type || 'promotional',
        email_client_optimization: input.rendering_requirements?.email_client_optimization || 'universal',
        responsive_design: input.rendering_requirements?.responsive_design !== false,
        seasonal_theme: input.rendering_requirements?.seasonal_theme || false,
        include_dark_mode: input.rendering_requirements?.include_dark_mode || false
      };
      
      // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ email
      const renderingResult = await this.renderingService.renderEmail(renderingParams);
      
      if (!renderingResult.success) {
        throw new Error(`Email rendering failed: ${renderingResult.error}`);
      }
      
      console.log(`‚úÖ Email rendered successfully: ${renderingResult.performance_metrics.total_size_kb}KB in ${renderingResult.metadata.render_time_ms}ms`);
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ handoff –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Quality Specialist
      const handoffData = await this.prepareHandoffData(renderingResult, content, assets);
      
      return {
        success: true,
        task_type: 'render_email',
        results: {
          rendering: renderingResult
        },
        handoff_data: handoffData,
        recommendations: {
          next_agent: 'quality_specialist',
          next_actions: [
            'Perform quality assurance testing',
            'Validate email client compatibility',
            'Check accessibility compliance',
            'Optimize performance if needed'
          ]
        },
        analytics: {
          execution_time_ms: Date.now() - startTime,
          operations_performed: assets.length > 0 ? 2 : 1, // Search + rendering or just rendering
          confidence_score: this.calculateRenderingConfidence(renderingResult),
          cache_hit_rate: this.renderingService.getCacheStats().size > 0 ? 75 : 0
        },
        trace_id: this.traceId
      };
      
    } catch (error) {
      this.errorHandler.handleError(
        error,
        ErrorType.RENDERING_ERROR,
        this.agentId,
        { renderingRequirements: input.rendering_requirements },
        this.traceId
      );
      throw error;
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  private determineRenderingAction(requirements?: DesignSpecialistInputV2['rendering_requirements']): RenderingParams['action'] {
    if (requirements?.seasonal_theme) {
      return 'render_seasonal';
    }
    
    if (requirements?.template_type === 'premium') {
      return 'render_advanced';
    }
    
    if (requirements?.include_dark_mode) {
      return 'render_hybrid';
    }
    
    return 'render_mjml'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }

  /**
   * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ handoff –¥–∞–Ω–Ω—ã—Ö
   */
  private async prepareHandoffData(
    renderingResult: RenderingResult,
    content: ExtractedContentPackage,
    assets: StandardAsset[]
  ): Promise<DesignToQualityHandoffData> {
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º handoff –¥–∞–Ω–Ω—ã–µ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç –ø—É—Å—Ç—ã—Ö –º–∞—Å—Å–∏–≤–æ–≤
      const handoffData: DesignToQualityHandoffData = {
        email_package: {
          html_content: renderingResult.html_content,
          mjml_source: renderingResult.mjml_source,
          inline_css: renderingResult.inline_css,
          asset_urls: renderingResult.assets_metadata.asset_urls.length > 0 
            ? renderingResult.assets_metadata.asset_urls 
            : ['https://placeholder.com/default'] // Fallback –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
        },
        rendering_metadata: {
          template_type: renderingResult.metadata.template_type as any,
          file_size_bytes: renderingResult.metadata.file_size_bytes,
          render_time_ms: Math.min(renderingResult.metadata.render_time_ms, 999), // –ú–∞–∫—Å–∏–º—É–º 999–º—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          optimization_applied: renderingResult.metadata.optimization_applied
        },
        design_artifacts: {
          performance_metrics: {
            css_rules_count: renderingResult.performance_metrics.css_rules_count,
            images_count: renderingResult.performance_metrics.images_count,
            total_size_kb: Math.min(renderingResult.performance_metrics.total_size_kb, 99) // –ú–∞–∫—Å–∏–º—É–º 99KB –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
          },
          accessibility_features: ['alt-text', 'semantic-html'],
          responsive_breakpoints: ['mobile', 'tablet', 'desktop'],
          dark_mode_support: false
        },
        original_content: {
          complete_content: {
            subject: content.content.subject,
            preheader: content.content.preheader,
            body: content.content.body,
            cta: content.content.cta
          },
          content_metadata: {
            language: content.metadata.language,
            tone: content.metadata.tone,
            word_count: content.metadata.word_count,
            reading_time: content.metadata.reading_time
          },
          brand_guidelines: {
            voice_tone: content.brand_guidelines.voice_tone,
            key_messages: content.brand_guidelines.key_messages.length > 0 
              ? content.brand_guidelines.key_messages 
              : ['–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ'], // Fallback –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
            compliance_notes: content.brand_guidelines.compliance_notes.length > 0 
              ? content.brand_guidelines.compliance_notes 
              : ['–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞'] // Fallback –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
          }
        },
        trace_id: this.traceId,
        timestamp: new Date().toISOString()
      };
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è handoff –¥–∞–Ω–Ω—ã—Ö
      const validationResult = await this.handoffValidator.validateDesignToQuality(handoffData, true);
      
      if (!validationResult.isValid) {
        console.warn('‚ö†Ô∏è Handoff data validation failed, but continuing with corrected data');
        
        if (validationResult.validatedData) {
          return validationResult.validatedData as DesignToQualityHandoffData;
        } else {
          throw new Error(`Handoff data validation failed: ${validationResult.errors.map(e => e.message).join(', ')}`);
        }
      }
      
      console.log('‚úÖ Handoff data validated successfully');
      return handoffData;
      
    } catch (error) {
      this.errorHandler.handleError(
        error,
        ErrorType.HANDOFF_ERROR,
        this.agentId,
        { renderingResultKeys: Object.keys(renderingResult) },
        this.traceId
      );
      throw error;
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∏–∑–∞–π–Ω–∞
   */
  private async executeOptimizeDesign(
    input: DesignSpecialistInputV2, 
    content: ExtractedContentPackage | null,
    startTime: number
  ): Promise<DesignSpecialistOutputV2> {
    
    try {
      if (!content) {
        throw new Error('DesignSpecialistV2: Content is required for optimize_design task');
      }
      
      // –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π email
      // –≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Å action = 'optimize_output'
      
      const renderingParams: RenderingParams = {
        action: 'optimize_output',
        content: content,
        assets: [], // –î–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º—É–º –∞—Å—Å–µ—Ç–æ–≤
        template_type: input.rendering_requirements?.template_type || 'promotional',
        email_client_optimization: 'all', // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –¥–ª—è –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
        responsive_design: true,
        seasonal_theme: false,
        include_dark_mode: false
      };
      
      const optimizationResult = await this.renderingService.renderEmail(renderingParams);
      
      if (!optimizationResult.success) {
        throw new Error(`Design optimization failed: ${optimizationResult.error}`);
      }
      
      console.log(`‚úÖ Design optimized: reduced to ${optimizationResult.performance_metrics.total_size_kb}KB`);
      
      return {
        success: true,
        task_type: 'optimize_design',
        results: {
          optimization: optimizationResult
        },
        recommendations: {
          next_agent: 'delivery_specialist',
          next_actions: [
            'Deploy optimized email template',
            'Monitor performance metrics',
            'Collect engagement analytics'
          ]
        },
        analytics: {
          execution_time_ms: Date.now() - startTime,
          operations_performed: 1,
          confidence_score: this.calculateOptimizationConfidence(optimizationResult),
          cache_hit_rate: this.renderingService.getCacheStats().size > 0 ? 90 : 0
        },
        trace_id: this.traceId
      };
      
    } catch (error) {
      this.errorHandler.handleError(
        error,
        ErrorType.RENDERING_ERROR,
        this.agentId,
        { optimizationRequirements: input.rendering_requirements },
        this.traceId
      );
      throw error;
    }
  }

  /**
   * Execute responsive design task
   */
  private async executeResponsiveDesign(
    input: DesignSpecialistInputV2, 
    content: ExtractedContentPackage | null,
    startTime: number
  ): Promise<DesignSpecialistOutputV2> {
    console.log(`üì± Executing responsive design task`);

    if (!content?.content?.body) {
      throw new Error('Content body is required for responsive design tasks');
    }

    // Determine action based on rendering requirements
    const action = input.rendering_requirements?.responsive_design ? 'optimize' : 'analyze';
    
    const responsiveParams: ResponsiveDesignParams = {
      action: action,
      html_content: content.content.body,
      optimization_level: 'standard',
      preserve_layout: true,
      target_devices: ['mobile', 'tablet', 'desktop'],
      email_client_support: ['gmail', 'outlook', 'apple_mail', 'yahoo'],
      css_approach: 'hybrid',
      fallback_strategy: 'graceful'
    };

    const responsiveResult = await responsiveDesign(responsiveParams);

    return {
      success: responsiveResult.success,
      task_type: 'responsive_design',
      results: {
        optimization: responsiveResult
      },
      design_artifacts: {
        html_output: responsiveResult.optimized_html || content.content.body,
        performance_metrics: responsiveResult.performance_metrics
      },
      recommendations: {
        next_agent: 'quality_specialist',
        next_actions: responsiveResult.recommendations || ['Review responsive design optimization']
      },
      analytics: {
        execution_time_ms: Date.now() - startTime,
        operations_performed: 1,
        confidence_score: responsiveResult.performance_metrics?.responsive_score || 85,
        cache_hit_rate: 0
      },
      trace_id: this.traceId
    };
  }

  /**
   * Execute accessibility check task
   */
  private async executeAccessibilityCheck(
    input: DesignSpecialistInputV2, 
    content: ExtractedContentPackage | null,
    startTime: number
  ): Promise<DesignSpecialistOutputV2> {
    console.log(`‚ôø Executing accessibility check task`);

    if (!content?.content?.body) {
      throw new Error('Content body is required for accessibility check tasks');
    }

    const accessibilityParams: AccessibilityParams = {
      action: 'audit',
      html_content: content.content.body,
      wcag_level: 'AA',
      auto_fix_level: 'standard',
      preserve_design: true,
      check_categories: ['color_contrast', 'alt_text', 'semantic_markup']
    };

    const accessibilityResult = await accessibility(accessibilityParams);

    return {
      success: accessibilityResult.success,
      task_type: 'accessibility_check',
      results: {
        optimization: accessibilityResult
      },
      design_artifacts: {
        html_output: accessibilityResult.fixed_html || content.content.body,
        performance_metrics: {
          accessibility_score: accessibilityResult.performance_metrics?.accessibility_score || 0,
          issues_fixed: accessibilityResult.applied_fixes?.length || 0
        }
      },
      recommendations: {
        next_agent: 'quality_specialist',
        next_actions: accessibilityResult.recommendations || ['Review accessibility compliance']
      },
      analytics: {
        execution_time_ms: Date.now() - startTime,
        operations_performed: 1,
        confidence_score: accessibilityResult.performance_metrics?.accessibility_score || 85,
        cache_hit_rate: 0
      },
      trace_id: this.traceId
    };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∑–∞–¥–∞—á–∏
   */
  private handleTaskError(
    error: Error, 
    input: DesignSpecialistInputV2, 
    startTime: number
  ): DesignSpecialistOutputV2 {
    
    const standardError = this.errorHandler.logCriticalError(
      error,
      ErrorType.CONFIGURATION_ERROR, // –û–±—â–∏–π —Ç–∏–ø –¥–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
      this.agentId,
      { 
        taskType: input.task_type,
        hasContentPackage: !!input.content_package,
        hasRenderingRequirements: !!input.rendering_requirements
      },
      this.traceId
    );
    
    return {
      success: false,
      task_type: input.task_type,
      results: {},
      recommendations: {
        next_actions: [
          'Review error details and fix the issue',
          'Check input data format and completeness',
          'Verify system configuration',
          `Contact support with error ID: ${standardError.traceId}`
        ]
      },
      analytics: {
        execution_time_ms: Date.now() - startTime,
        operations_performed: 0,
        confidence_score: 0,
        cache_hit_rate: 0
      },
      error: this.errorHandler.formatUserError(standardError),
      trace_id: this.traceId
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –∞—Å—Å–µ—Ç–æ–≤
   */
  private calculateAssetConfidence(assetResult: AssetSearchResult): number {
    if (assetResult.total_found === 0) return 0;
    
    const avgRelevance = assetResult.assets.reduce((sum, asset) => sum + asset.relevanceScore, 0) / assetResult.assets.length;
    const completeness = Math.min(assetResult.total_found / 3, 1); // –û–∂–∏–¥–∞–µ–º –º–∏–Ω–∏–º—É–º 3 –∞—Å—Å–µ—Ç–∞
    
    return Math.round((avgRelevance * 0.7 + completeness * 0.3) * 100);
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
   */
  private calculateRenderingConfidence(renderingResult: RenderingResult): number {
    let confidence = 80; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ –∫–∞—á–µ—Å—Ç–≤–æ
    if (renderingResult.validation_results?.mjml_valid) confidence += 10;
    if (renderingResult.validation_results?.html_valid) confidence += 5;
    if (renderingResult.performance_metrics.total_size_kb < 80) confidence += 5; // –•–æ—Ä–æ—à–∏–π —Ä–∞–∑–º–µ—Ä
    
    // –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø—Ä–æ–±–ª–µ–º—ã
    if (renderingResult.performance_metrics.total_size_kb > 95) confidence -= 10;
    if (renderingResult.performance_metrics.estimated_load_time_ms > 3000) confidence -= 5;
    
    return Math.max(0, Math.min(100, confidence));
  }

  /**
   * –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private calculateOptimizationConfidence(optimizationResult: RenderingResult): number {
    let confidence = 85; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    
    // –ë–æ–Ω—É—Å—ã –∑–∞ —Ö–æ—Ä–æ—à–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    if (optimizationResult.performance_metrics.total_size_kb < 70) confidence += 10;
    if (optimizationResult.performance_metrics.estimated_load_time_ms < 2000) confidence += 5;
    
    return Math.max(0, Math.min(100, confidence));
  }

  /**
   * ‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è OpenAI Agent
   */
  private getAgentInstructions(): string {
    return `You are DesignSpecialistV2, a visual design and email rendering specialist.

Your role is to:
1. Search for appropriate visual assets using AI-powered search
2. Render email templates using MJML with optimal formatting
3. Optimize designs for email client compatibility

Key capabilities:
- Asset search with contextual relevance scoring
- MJML email template rendering
- Cross-client email optimization
- Handoff data preparation for Quality Specialist

Always prioritize contextual relevance over technical metrics when selecting assets.
For travel-related content, prefer images with travel themes (luggage, characters traveling, etc.) over generic interior/furniture images.`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –∞–≥–µ–Ω—Ç–∞
   */
  getCapabilities() {
    return {
      agent_id: this.agentId,
      version: '2.0',
      specialization: 'Email Design & Asset Management',
      supported_tasks: ['find_assets', 'render_email', 'optimize_design', 'responsive_design', 'accessibility_check'],
      services: {
        asset_management: this.assetManager.getStats(),
        rendering_service: this.renderingService.getPerformanceStats(),
        error_handling: this.errorHandler.getErrorMetrics()
      },
      performance_metrics: this.getPerformanceStats(),
      next_agents: ['quality_specialist']
    };
  }

  /**
   * Backwards-compat alias for older tests that still call getPerformanceMetrics().
   */
  getPerformanceMetrics() {
    return this.getPerformanceStats();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  getPerformanceStats() {
    return {
      asset_manager: this.assetManager.getCacheStats(),
      rendering_service: this.renderingService.getPerformanceStats(),
      error_metrics: this.errorHandler.getErrorMetrics(),
      system_health: this.errorHandler.getSystemHealth()
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è)
   */
  clearCaches(): void {
    this.assetManager.clearCache();
    this.renderingService.clearCache();
    console.log('‚úÖ All caches cleared');
  }

  /**
   * üè∑Ô∏è –ò–ù–¢–ï–õ–õ–ï–ö–¢–£–ê–õ–¨–ù–´–ô –í–´–ë–û–† –¢–ï–ì–û–í –ò–ó JSON
   * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç–µ–≥–∏
   */
  private async selectOptimalTags(
    content: ExtractedContentPackage,
    assetRequirements: DesignSpecialistInputV2['asset_requirements']
  ): Promise<string[]> {
    try {
      console.log('üè∑Ô∏è –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤...');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º JSON —Å —Ç–µ–≥–∞–º–∏
      const tagsData = await this.loadTagsData();
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
      const keywordAnalysis = this.extractKeywordsFromContent(content);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏
      const campaignContext = this.analyzeCampaignContext(content, assetRequirements);
      
      // –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI
      const selectedTags = await this.runTagSelectionAI(
        keywordAnalysis,
        campaignContext,
        tagsData,
        assetRequirements?.target_count || 6
      );
      
      console.log(`‚úÖ –í—ã–±—Ä–∞–Ω–æ ${selectedTags.length} –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤:`, selectedTags);
      return selectedTags;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤:', error);
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–µ–≥–∏ –∫–∞–∫ fallback
      return assetRequirements?.tags || ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–±–∏–ª–µ—Ç—ã', '–∞–≤–∏–∞—Ü–∏—è'];
    }
  }

  private async loadTagsData(): Promise<any> {
    const fs = require('fs');
    const path = require('path');
    
    const tagsPath = path.join(process.cwd(), 'src/agent/figma-all-pages-1750993353363/ai-optimized-tags.json');
    return JSON.parse(fs.readFileSync(tagsPath, 'utf8'));
  }

  private extractKeywordsFromContent(content: ExtractedContentPackage): string[] {
    const keywords = [];
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ç–µ–º—ã –ø–∏—Å—å–º–∞
    if (content.content.subject) {
      keywords.push(...content.content.subject.toLowerCase().split(/\s+/));
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ —Ç–µ–ª–∞ –ø–∏—Å—å–º–∞
    if (content.content.body) {
      const bodyWords = content.content.body.toLowerCase().match(/\b\w{3,}\b/g) || [];
      keywords.push(...bodyWords.slice(0, 20)); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 20 –∑–Ω–∞—á–∏–º—ã—Ö —Å–ª–æ–≤
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ CTA
    if (content.content.cta) {
      keywords.push(...content.content.cta.toLowerCase().split(/\s+/));
    }
    
    return [...new Set(keywords)].filter(k => k.length > 2);
  }

  private analyzeCampaignContext(
    content: ExtractedContentPackage,
    assetRequirements: DesignSpecialistInputV2['asset_requirements']
  ): any {
    return {
      campaign_type: assetRequirements?.campaign_type || 'promotional',
      emotional_tone: assetRequirements?.emotional_tone || 'positive',
      content_theme: this.determineContentTheme(content),
      target_audience: this.determineTargetAudience(content),
      seasonal_context: this.determineSeasonalContext(content),
      geographic_context: this.determineGeographicContext(content)
    };
  }

  private determineContentTheme(content: ExtractedContentPackage): string {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    
    if (text.includes('–ø—É—Ç–µ—à–µ—Å—Ç–≤') || text.includes('–±–∏–ª–µ—Ç') || text.includes('–ø–æ–µ–∑–¥–∫')) {
      return 'travel';
    }
    if (text.includes('–∞–∫—Ü–∏') || text.includes('—Å–∫–∏–¥–∫') || text.includes('—Ä–∞—Å–ø—Ä–æ–¥–∞–∂')) {
      return 'promotion';
    }
    if (text.includes('–Ω–æ–≤–æ—Å—Ç') || text.includes('–æ–±–Ω–æ–≤–ª–µ–Ω') || text.includes('–∏–Ω—Ñ–æ—Ä–º–∞—Ü')) {
      return 'news';
    }
    
    return 'general';
  }

  private determineTargetAudience(content: ExtractedContentPackage): string {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    
    if (text.includes('—Å–µ–º—å') || text.includes('–¥–µ—Ç')) {
      return 'family';
    }
    if (text.includes('–±–∏–∑–Ω–µ—Å') || text.includes('–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤')) {
      return 'business';
    }
    if (text.includes('—Å—Ç—É–¥–µ–Ω—Ç') || text.includes('–º–æ–ª–æ–¥–µ–∂')) {
      return 'youth';
    }
    
    return 'general';
  }

  private determineSeasonalContext(content: ExtractedContentPackage): string {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    const currentMonth = new Date().getMonth() + 1;
    
    if (text.includes('–∑–∏–º') || text.includes('–Ω–æ–≤—ã–π –≥–æ–¥') || text.includes('—Ä–æ–∂–¥–µ—Å—Ç–≤')) {
      return 'winter';
    }
    if (text.includes('–ª–µ—Ç') || text.includes('–æ—Ç–ø—É—Å–∫') || text.includes('–∫–∞–Ω–∏–∫—É–ª')) {
      return 'summer';
    }
    if (text.includes('–æ—Å–µ–Ω') || text.includes('—Å–µ–Ω—Ç—è–±—Ä') || text.includes('–æ–∫—Ç—è–±—Ä')) {
      return 'autumn';
    }
    if (text.includes('–≤–µ—Å–Ω') || text.includes('–º–∞—Ä—Ç') || text.includes('–∞–ø—Ä–µ–ª')) {
      return 'spring';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
    if (currentMonth >= 12 || currentMonth <= 2) return 'winter';
    if (currentMonth >= 3 && currentMonth <= 5) return 'spring';
    if (currentMonth >= 6 && currentMonth <= 8) return 'summer';
    return 'autumn';
  }

  private determineGeographicContext(content: ExtractedContentPackage): string {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    
    const cities = ['–º–æ—Å–∫–≤–∞', '—Å–ø–±', '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥', '—Å–æ—á–∏', '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫'];
    const countries = ['—Ä–æ—Å—Å–∏—è', '—Ç—É—Ä—Ü–∏—è', '–µ–≥–∏–ø–µ—Ç', '–æ–∞—ç', '—Ç–∞–∏–ª–∞–Ω–¥', '–≥—Ä—É–∑–∏—è'];
    
    for (const city of cities) {
      if (text.includes(city)) {
        return `city_${city}`;
      }
    }
    
    for (const country of countries) {
      if (text.includes(country)) {
        return `country_${country}`;
      }
    }
    
    return 'domestic';
  }

  private async runTagSelectionAI(
    keywords: string[],
    campaignContext: any,
    tagsData: any,
    maxTags: number
  ): Promise<string[]> {
    try {
      const prompt = `–í—ã–±–µ—Ä–∏ ${maxTags} –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–µ–≥–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ:
      
–ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê: ${keywords.join(', ')}
–ö–û–ù–¢–ï–ö–°–¢ –ö–ê–ú–ü–ê–ù–ò–ò: ${JSON.stringify(campaignContext, null, 2)}
–î–û–°–¢–£–ü–ù–´–ï –¢–ï–ì–ò: ${JSON.stringify(Object.keys(tagsData.most_common_tags || {}), null, 2)}

–í–µ—Ä–Ω–∏ JSON –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤: ["—Ç–µ–≥1", "—Ç–µ–≥2", ...].`;

      const response = await run(this.agent, prompt);
      const selectedTags = JSON.parse(response.content);
      
      // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á—Ç–æ —Ç–µ–≥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –Ω–∞—à–µ–º –Ω–∞–±–æ—Ä–µ
      const validTags = this.validateSelectedTags(selectedTags, tagsData);
      
      return validTags.length > 0 ? validTags : this.getFallbackTags(keywords, campaignContext);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤:', error);
      return this.getFallbackTags(keywords, campaignContext);
    }
  }

  private selectTagsByContext(
    keywords: string[],
    campaignContext: any,
    tagsData: any,
    maxTags: number
  ): string[] {
    const selectedTags = new Set<string>();
    
    // Priority 1: Direct keyword matches
    keywords.forEach(keyword => {
      if (tagsData.most_common_tags[keyword]) {
        selectedTags.add(keyword);
      }
    });
    
    // Priority 2: Context-based tags
    const contextualTags = this.getContextualTags(campaignContext);
    contextualTags.forEach(tag => {
      if (selectedTags.size < maxTags && tagsData.most_common_tags[tag]) {
        selectedTags.add(tag);
      }
    });
    
    // Priority 3: Most popular tags if we need more
    if (selectedTags.size < maxTags) {
      const popularTags = Object.keys(tagsData.most_common_tags)
        .sort((a, b) => tagsData.most_common_tags[b] - tagsData.most_common_tags[a])
        .slice(0, 20);
      
      for (const tag of popularTags) {
        if (selectedTags.size >= maxTags) break;
        if (this.isTagRelevantToContext(tag, campaignContext)) {
          selectedTags.add(tag);
        }
      }
    }
    
    return Array.from(selectedTags).slice(0, maxTags);
  }

  private getContextualTags(campaignContext: any): string[] {
    const tags = [];
    
    // Theme-based tags
    switch (campaignContext.content_theme) {
      case 'travel':
        tags.push('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–±–∏–ª–µ—Ç—ã', '–∞–≤–∏–∞—Ü–∏—è', '–∑–∞—è—Ü', '—á–µ–º–æ–¥–∞–Ω');
        break;
      case 'promotion':
        tags.push('–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∞', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ');
        break;
      case 'news':
        tags.push('–Ω–æ–≤–æ—Å—Ç–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        break;
    }
    
    // Emotional tone tags
    if (campaignContext.emotional_tone === 'positive') {
      tags.push('–≤–µ—Å–µ–ª—ã–π', '—Ä–∞–¥–æ—Å—Ç–Ω—ã–π', '—Å—á–∞—Å—Ç–ª–∏–≤', '–ø–æ–∑–∏—Ç–∏–≤');
    }
    
    // Seasonal tags
    switch (campaignContext.seasonal_context) {
      case 'winter':
        tags.push('–∑–∏–º–∞', '–Ω–æ–≤—ã–π –≥–æ–¥');
        break;
      case 'summer':
        tags.push('–ª–µ—Ç–æ', '–æ—Ç–ø—É—Å–∫');
        break;
      case 'autumn':
        tags.push('–æ—Å–µ–Ω—å');
        break;
      case 'spring':
        tags.push('–≤–µ—Å–Ω–∞');
        break;
    }
    
    return tags;
  }

  private isTagRelevantToContext(tag: string, campaignContext: any): boolean {
    const relevantKeywords = [
      '–∑–∞—è—Ü', '–ø—É—Ç–µ—à–µ—Å—Ç–≤', '–±–∏–ª–µ—Ç', '–∞–≤–∏–∞—Ü', '—Å–∞–º–æ–ª–µ—Ç', '—á–µ–º–æ–¥–∞–Ω',
      '–≤–µ—Å–µ–ª—ã–π', '—Ä–∞–¥–æ—Å—Ç', '—Å—á–∞—Å—Ç–ª–∏–≤', '–ø–æ–∑–∏—Ç–∏–≤', '–¥—Ä—É–∂–µ–ª—é–±'
    ];
    
    return relevantKeywords.some(keyword => tag.includes(keyword));
  }

  private validateSelectedTags(aiTags: string[], tagsData: any): string[] {
    const allAvailableTags = new Set();
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏
    Object.values(tagsData.folders).forEach((folder: any) => {
      folder.tags.forEach((tag: string) => allAvailableTags.add(tag.toLowerCase()));
    });
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ–≥–∏
    return aiTags.filter(tag => allAvailableTags.has(tag.toLowerCase()));
  }

  private getFallbackTags(keywords: string[], campaignContext: any): string[] {
    const fallbackMap: Record<string, string[]> = {
      'travel': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–±–∏–ª–µ—Ç—ã', '–∞–≤–∏–∞—Ü–∏—è', '–∑–∞—è—Ü', '—á–µ–º–æ–¥–∞–Ω', '—Å–∞–º–æ–ª–µ—Ç'],
      'promotion': ['–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∞', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '—Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π', '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π'],
      'news': ['–Ω–æ–≤–æ—Å—Ç–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', '–≤–∞–∂–Ω–æ'],
      'general': ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–∑–∞—è—Ü', '–ø–æ–∑–∏—Ç–∏–≤', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π']
    };
    
    const baseTags = fallbackMap[campaignContext.content_theme] || fallbackMap['general'];
    
    // –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏
    if (campaignContext.emotional_tone === 'positive') {
      baseTags.push('–≤–µ—Å–µ–ª—ã–π', '—Ä–∞–¥–æ—Å—Ç–Ω—ã–π', '–ø–æ–∑–∏—Ç–∏–≤');
    }
    
    return baseTags.slice(0, 6);
  }

  /**
   * üñºÔ∏è AI-–ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –¥–ª—è –ø–∏—Å—å–º–∞
   */
  private async planEmailImages(
    content: ExtractedContentPackage,
    templateDesign: any
  ): Promise<{
    total_images_needed: number;
    image_plan: Array<{
      position: number;
      type: 'hero' | 'illustration' | 'icon' | 'background' | 'product' | 'testimonial';
      content_description: string;
      size_priority: 'large' | 'medium' | 'small';
      emotional_tone: string;
      search_tags: string[];
      fallback_options: string[];
    }>;
    layout_optimization: {
      mobile_friendly: boolean;
      load_time_optimized: boolean;
      accessibility_compliant: boolean;
    };
  }> {
    try {
      console.log('üñºÔ∏è –ü–ª–∞–Ω–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –Ω–∞–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...');
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      const imageContext = this.analyzeImageContext(content, templateDesign);
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø–æ–º–æ—â—å—é AI
      const imagePlan = await this.runImagePlanningAI(imageContext);
      
      console.log(`‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${imagePlan.total_images_needed} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      return imagePlan;
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      return this.getFallbackImagePlan(content);
    }
  }

  private analyzeImageContext(content: ExtractedContentPackage, templateDesign: any): any {
    return {
      content_length: this.calculateContentLength(content),
      template_structure: templateDesign?.structure || {},
      campaign_type: this.determineCampaignTypeFromContent(content),
      emotional_requirements: this.determineEmotionalRequirements(content),
      brand_requirements: this.determineBrandRequirements(content),
      technical_constraints: this.determineTechnicalConstraints(),
      target_audience: this.determineTargetAudienceFromContent(content),
      seasonal_context: this.determineSeasonalContextFromContent(content)
    };
  }

  private calculateContentLength(content: ExtractedContentPackage): 'short' | 'medium' | 'long' {
    const totalLength = (content.content.subject?.length || 0) + (content.content.body?.length || 0);
    if (totalLength < 200) return 'short';
    if (totalLength < 800) return 'medium';
    return 'long';
  }

  private determineCampaignTypeFromContent(content: ExtractedContentPackage): string {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    
    if (text.includes('–∞–∫—Ü–∏') || text.includes('—Å–∫–∏–¥–∫') || text.includes('—Ä–∞—Å–ø—Ä–æ–¥–∞–∂')) {
      return 'promotional';
    }
    if (text.includes('–Ω–æ–≤–æ—Å—Ç') || text.includes('–æ–±–Ω–æ–≤–ª–µ–Ω') || text.includes('–∏–Ω—Ñ–æ—Ä–º–∞—Ü')) {
      return 'informational';
    }
    if (text.includes('–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å') || text.includes('—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü') || text.includes('–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω')) {
      return 'transactional';
    }
    return 'general';
  }

  private determineEmotionalRequirements(content: ExtractedContentPackage): string[] {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    const emotions = [];
    
    if (text.includes('—É–¥–∏–≤–∏—Ç–µ–ª—å–Ω') || text.includes('–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω')) {
      emotions.push('excitement');
    }
    if (text.includes('—Å—Ä–æ—á–Ω–æ') || text.includes('–±—ã—Å—Ç—Ä–æ')) {
      emotions.push('urgency');
    }
    if (text.includes('–Ω–∞–¥–µ–∂–Ω') || text.includes('–±–µ–∑–æ–ø–∞—Å–Ω')) {
      emotions.push('trust');
    }
    if (text.includes('–≤–µ—Å–µ–ª—ã–π') || text.includes('—Ä–∞–¥–æ—Å—Ç')) {
      emotions.push('joy');
    }
    
    return emotions.length > 0 ? emotions : ['positive'];
  }

  private determineBrandRequirements(content: ExtractedContentPackage): any {
    return {
      logo_required: true,
      brand_colors: true,
      brand_character: this.detectBrandCharacter(content),
      consistency_level: 'high'
    };
  }

  private detectBrandCharacter(content: ExtractedContentPackage): string {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    
    if (text.includes('–∑–∞—è—Ü') || text.includes('–∫—Ä–æ–ª–∏–∫')) {
      return 'rabbit_mascot';
    }
    return 'corporate';
  }

  private determineTechnicalConstraints(): any {
    return {
      max_total_size_kb: 600, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä email
      max_image_size_kb: 100, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ–¥–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      supported_formats: ['png', 'jpg', 'gif'],
      mobile_optimization: true,
      retina_support: true,
      fallback_required: true
    };
  }

  private determineTargetAudienceFromContent(content: ExtractedContentPackage): string {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    
    if (text.includes('—Å–µ–º—å') || text.includes('–¥–µ—Ç') || text.includes('—Ä–µ–±–µ–Ω–æ–∫')) {
      return 'family';
    }
    if (text.includes('–±–∏–∑–Ω–µ—Å') || text.includes('–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤') || text.includes('–¥–µ–ª–æ–≤–æ–π')) {
      return 'business';
    }
    if (text.includes('—Å—Ç—É–¥–µ–Ω—Ç') || text.includes('–º–æ–ª–æ–¥–µ–∂') || text.includes('–º–æ–ª–æ–¥–æ–π')) {
      return 'youth';
    }
    if (text.includes('–ø–µ–Ω—Å–∏–æ–Ω') || text.includes('–≤–æ–∑—Ä–∞—Å—Ç') || text.includes('–æ–ø—ã—Ç–Ω—ã–π')) {
      return 'senior';
    }
    return 'general';
  }

  private determineSeasonalContextFromContent(content: ExtractedContentPackage): string {
    const text = `${content.content.subject || ''} ${content.content.body || ''}`.toLowerCase();
    const currentMonth = new Date().getMonth() + 1;
    
    if (text.includes('–∑–∏–º') || text.includes('–Ω–æ–≤—ã–π –≥–æ–¥') || text.includes('—Ä–æ–∂–¥–µ—Å—Ç–≤')) {
      return 'winter';
    }
    if (text.includes('–ª–µ—Ç') || text.includes('–æ—Ç–ø—É—Å–∫') || text.includes('–∫–∞–Ω–∏–∫—É–ª')) {
      return 'summer';
    }
    if (text.includes('–æ—Å–µ–Ω') || text.includes('—Å–µ–Ω—Ç—è–±—Ä') || text.includes('–æ–∫—Ç—è–±—Ä')) {
      return 'autumn';
    }
    if (text.includes('–≤–µ—Å–Ω') || text.includes('–º–∞—Ä—Ç') || text.includes('–∞–ø—Ä–µ–ª')) {
      return 'spring';
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—è—Ü—É
    if (currentMonth >= 12 || currentMonth <= 2) return 'winter';
    if (currentMonth >= 3 && currentMonth <= 5) return 'spring';
    if (currentMonth >= 6 && currentMonth <= 8) return 'summer';
    return 'autumn';
  }

  private async runImagePlanningAI(imageContext: any): Promise<any> {
    try {
      const prompt = `–°–æ–∑–¥–∞–π –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è email-–∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ:
      
–ö–û–ù–¢–ï–ö–°–¢ –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô: ${JSON.stringify(imageContext, null, 2)}

–í–µ—Ä–Ω–∏ JSON –ø–ª–∞–Ω —Å –ø–æ–ª–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "total_images_needed": —á–∏—Å–ª–æ,
  "image_plan": [{
    "position": —á–∏—Å–ª–æ,
    "type": "hero|illustration|icon|background|product|testimonial",
    "content_description": "–æ–ø–∏—Å–∞–Ω–∏–µ",
    "size_priority": "large|medium|small",
    "emotional_tone": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω",
    "search_tags": ["—Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"],
    "fallback_options": ["—Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã"]
  }],
  "layout_optimization": {
    "mobile_friendly": true,
    "load_time_optimized": true,
    "accessibility_compliant": true
  }
}`;

      const response = await run(this.agent, prompt);
      return JSON.parse(response.content);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ AI –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      return this.getFallbackImagePlan(imageContext);
    }
  }

  private planImagesByContext(imageContext: any): any {
    // Determine number of images based on campaign type
    let totalImages = 2;
    if (imageContext.campaign_type === 'promotional') {
      totalImages = imageContext.content_length === 'long' ? 4 : 3;
    } else if (imageContext.campaign_type === 'informational') {
      totalImages = imageContext.content_length === 'short' ? 1 : 2;
    }

    const imagePlans = [];
    
    // Always include brand character as primary image
    imagePlans.push({
      position: 1,
      type: 'hero',
      content_description: this.generateImageDescription(imageContext, 'hero'),
      size_priority: 'large',
      emotional_tone: imageContext.emotional_requirements[0] || 'positive',
      search_tags: ['–∑–∞—è—Ü', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '—Å—á–∞—Å—Ç–ª–∏–≤', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'],
      fallback_options: ['–∑–∞—è—Ü —Å —á–µ–º–æ–¥–∞–Ω–æ–º', '–ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂']
    });

    // Add supporting images based on context
    if (totalImages > 1) {
      imagePlans.push({
        position: 2,
        type: this.determineSecondaryImageType(imageContext),
        content_description: this.generateImageDescription(imageContext, 'secondary'),
        size_priority: 'medium',
        emotional_tone: 'supportive',
        search_tags: this.getSecondaryImageTags(imageContext),
        fallback_options: ['–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', '—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥—Ä–∞—Ñ–∏–∫–∞']
      });
    }

    // Add tertiary images for promotional campaigns
    if (totalImages > 2) {
      imagePlans.push({
        position: 3,
        type: 'product',
        content_description: this.generateImageDescription(imageContext, 'product'),
        size_priority: 'medium',
        emotional_tone: 'aspirational',
        search_tags: ['–±–∏–ª–µ—Ç—ã', '–∞–≤–∏–∞—Ü–∏—è', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'],
        fallback_options: ['–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∏–ª–µ—Ç–æ–≤', '—Å–∞–º–æ–ª–µ—Ç', '–∫–∞—Ä—Ç–∞']
      });
    }

    return {
      total_images_needed: totalImages,
      image_plan: imagePlans,
      layout_optimization: {
        mobile_friendly: true,
        load_time_optimized: true,
        accessibility_compliant: true
      }
    };
  }

  private generateImageDescription(imageContext: any, type: 'hero' | 'secondary' | 'product'): string {
    const character = imageContext.brand_requirements?.brand_character || 'rabbit_mascot';
    const season = imageContext.seasonal_context;
    const campaign = imageContext.campaign_type;

    switch (type) {
      case 'hero':
        if (campaign === 'promotional') {
          return `–Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–π—Ü–∞ —Å —á–µ–º–æ–¥–∞–Ω–æ–º, –≤—ã—Ä–∞–∂–∞—é—â–µ–≥–æ —Ä–∞–¥–æ—Å—Ç—å –æ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è${season !== 'general' ? ` –≤ ${season} —Å–µ–∑–æ–Ω–µ` : ''}`;
        }
        return `–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∑–∞—è—Ü —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∂–µ—Å—Ç–æ–º, —Å–æ–∑–¥–∞—é—â–∏–π –¥–æ–≤–µ—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É`;
      
      case 'secondary':
        if (campaign === 'promotional') {
          return `–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤ —Å–µ—Ä–≤–∏—Å–∞: —Å–∫–æ—Ä–æ—Å—Ç—å, —É–¥–æ–±—Å—Ç–≤–æ, –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å`;
        }
        return `–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è, –¥–æ–ø–æ–ª–Ω—è—é—â–∞—è –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`;
      
      case 'product':
        return `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –∏–ª–∏ —Å–∞–º–æ–ª–µ—Ç–∞, —Å–∏–º–≤–æ–ª–∏–∑–∏—Ä—É—é—â–µ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ`;
      
      default:
        return '–¢–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
    }
  }

  private determineSecondaryImageType(imageContext: any): string {
    if (imageContext.campaign_type === 'promotional') {
      return 'illustration';
    } else if (imageContext.campaign_type === 'informational') {
      return 'icon';
    }
    return 'illustration';
  }

  private getSecondaryImageTags(imageContext: any): string[] {
    const baseTags = ['–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞'];
    
    if (imageContext.campaign_type === 'promotional') {
      baseTags.push('–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '—Å–µ—Ä–≤–∏—Å', '–∫–∞—á–µ—Å—Ç–≤–æ');
    } else if (imageContext.campaign_type === 'informational') {
      baseTags.push('–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ø–æ–º–æ—â—å', '–≥–∏–¥');
    }
    
    return baseTags;
  }

  private getFallbackImagePlan(context: any): any {
    const campaignType = context?.campaign_type || 'general';
    
    const fallbackPlans = {
      'promotional': {
        total_images_needed: 3,
        image_plan: [
          {
            position: 1,
            type: 'hero',
            content_description: '–Ø—Ä–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–π—Ü–∞ —Å —á–µ–º–æ–¥–∞–Ω–æ–º –Ω–∞ —Ñ–æ–Ω–µ —Å–∞–º–æ–ª–µ—Ç–∞',
            size_priority: 'large',
            emotional_tone: 'excitement',
            search_tags: ['–∑–∞—è—Ü', '—á–µ–º–æ–¥–∞–Ω', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–∞–≤–∏–∞—Ü–∏—è'],
            fallback_options: ['–∑–∞—è—Ü —Å –±–∏–ª–µ—Ç–∞–º–∏', '–ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é—â–∏–π –ø–µ—Ä—Å–æ–Ω–∞–∂']
          },
          {
            position: 2,
            type: 'illustration',
            content_description: '–ò–∫–æ–Ω–∫–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤: –±—ã—Å—Ç—Ä–æ, —É–¥–æ–±–Ω–æ, –Ω–∞–¥–µ–∂–Ω–æ',
            size_priority: 'medium',
            emotional_tone: 'trust',
            search_tags: ['–∏–∫–æ–Ω–∫–∏', '–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞', '—Å–µ—Ä–≤–∏—Å'],
            fallback_options: ['–ø—Ä–æ—Å—Ç—ã–µ –∏–∫–æ–Ω–∫–∏', '–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã']
          },
          {
            position: 3,
            type: 'product',
            content_description: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ —Å–∞–º–æ–ª–µ—Ç–∞',
            size_priority: 'medium',
            emotional_tone: 'aspiration',
            search_tags: ['–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '—Å–∞–º–æ–ª–µ—Ç', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'],
            fallback_options: ['–æ–±—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–≤–∏–∞—Ü–∏–∏', '–∫–∞—Ä—Ç–∞ –º–∏—Ä–∞']
          }
        ],
        layout_optimization: {
          mobile_friendly: true,
          load_time_optimized: true,
          accessibility_compliant: true
        }
      },
      'informational': {
        total_images_needed: 2,
        image_plan: [
          {
            position: 1,
            type: 'hero',
            content_description: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∑–∞—è—Ü —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º',
            size_priority: 'medium',
            emotional_tone: 'friendly',
            search_tags: ['–∑–∞—è—Ü', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'],
            fallback_options: ['–ø–µ—Ä—Å–æ–Ω–∞–∂ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞']
          },
          {
            position: 2,
            type: 'illustration',
            content_description: '–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∞—è –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ç–µ–º–µ',
            size_priority: 'small',
            emotional_tone: 'supportive',
            search_tags: ['–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
            fallback_options: ['–ø—Ä–æ—Å—Ç–∞—è –≥—Ä–∞—Ñ–∏–∫–∞', '–¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç']
          }
        ],
        layout_optimization: {
          mobile_friendly: true,
          load_time_optimized: true,
          accessibility_compliant: true
        }
      }
    };
    
    return fallbackPlans[campaignType as keyof typeof fallbackPlans] || fallbackPlans['promotional'];
  }
}

 