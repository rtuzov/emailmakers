import { z } from 'zod';
import {
  DesignToQualityHandoffData,
  DesignToQualityHandoffDataSchema,
  HandoffValidationResult,
  HandoffValidationError,
  CorrectionSuggestion,
  AGENT_CONSTANTS
} from '../types/base-agent-types';

/**
 * üé® DESIGN SPECIALIST VALIDATOR
 * 
 * –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö DesignSpecialist –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ QualitySpecialist
 * –ü—Ä–∏–Ω—Ü–∏–ø: –ñ–µ—Å—Ç–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ HTML –∫–∞—á–µ—Å—Ç–≤—É, —Ä–∞–∑–º–µ—Ä–∞–º —Ñ–∞–π–ª–æ–≤ –∏ W3C compliance
 */

export interface W3CValidationResult {
  isValid: boolean;
  errors: string[];
  warnings: string[];
  validatorUrl?: string;
}

export interface AssetValidationResult {
  isValid: boolean;
  missingAssets: string[];
  invalidFormats: string[];
  oversizedAssets: string[];
  totalSize: number;
}

export interface HTMLQualityMetrics {
  w3cCompliant: boolean;
  fileSizeBytes: number;
  cssRulesCount: number;
  imagesCount: number;
  totalSizeKB: number;
  hasInlineStyles: boolean;
  hasExternalDependencies: boolean;
  estimatedRenderTime: number;
}

export class DesignSpecialistValidator {
  private static instance: DesignSpecialistValidator;

  private constructor() {}

  public static getInstance(): DesignSpecialistValidator {
    if (!DesignSpecialistValidator.instance) {
      DesignSpecialistValidator.instance = new DesignSpecialistValidator();
    }
    return DesignSpecialistValidator.instance;
  }

  /**
   * üéØ –û–°–ù–û–í–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –í–´–•–û–î–ù–´–• –î–ê–ù–ù–´–• DESIGN SPECIALIST
   */
  public async validateDesignOutput(
    data: any,
    enableDeepValidation: boolean = true
  ): Promise<HandoffValidationResult> {
    const startTime = Date.now();
    
    try {
      // 1. –ë–∞–∑–æ–≤–∞—è Zod –≤–∞–ª–∏–¥–∞—Ü–∏—è
      const validatedData = DesignToQualityHandoffDataSchema.parse(data);
      const typedData = validatedData as DesignToQualityHandoffData;
      
      const errors: HandoffValidationError[] = [];
      const warnings: string[] = [];
      const correctionSuggestions: CorrectionSuggestion[] = [];
      
      // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è HTML –∫–∞—á–µ—Å—Ç–≤–∞
      const htmlValidation = await this.validateHTMLQuality(typedData.email_package.html_content);
      if (!htmlValidation.isValid) {
        errors.push(...htmlValidation.errors);
        correctionSuggestions.push(...htmlValidation.suggestions);
      }
      
      // 3. –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–æ–≤ —Ñ–∞–π–ª–æ–≤
      const sizeValidation = this.validateFileSizes(typedData);
      if (!sizeValidation.isValid) {
        errors.push(...sizeValidation.errors);
        correctionSuggestions.push(...sizeValidation.suggestions);
      }
      
      // 4. –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤
      const assetValidation = await this.validateAssets(typedData.email_package.asset_urls);
      if (!assetValidation.isValid) {
        errors.push(...assetValidation.errors);
        correctionSuggestions.push(...assetValidation.suggestions);
      }
      
      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
      const performanceValidation = this.validateRenderingPerformance(typedData);
      if (!performanceValidation.isValid) {
        errors.push(...performanceValidation.errors);
        correctionSuggestions.push(...performanceValidation.suggestions);
      }
      
      // 6. W3C Compliance (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –≥–ª—É–±–æ–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è)
      if (enableDeepValidation) {
        const w3cValidation = await this.validateW3CCompliance(typedData.email_package.html_content);
        if (!w3cValidation.isValid) {
          errors.push(...w3cValidation.errors);
          correctionSuggestions.push(...w3cValidation.suggestions);
        }
      }
      
      // 7. –í–∞–ª–∏–¥–∞—Ü–∏—è email-specific —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
      const emailValidation = this.validateEmailSpecificRequirements(typedData);
      if (!emailValidation.isValid) {
        errors.push(...emailValidation.errors);
        correctionSuggestions.push(...emailValidation.suggestions);
      }
      
      return {
        isValid: errors.length === 0,
        errors: errors.filter(e => e.severity === 'critical'),
        warnings: warnings.concat(errors.filter(e => e.severity !== 'critical').map(e => e.message)),
        correctionSuggestions: correctionSuggestions,
        validatedData: errors.length === 0 ? typedData : undefined,
        validationDuration: Date.now() - startTime
      };
      
    } catch (error) {
      if (error instanceof z.ZodError) {
        const validationErrors: HandoffValidationError[] = error.errors.map(issue => ({
          field: issue.path.join('.'),
          errorType: 'invalid_value',
          message: issue.message,
          severity: 'critical'
        }));
        
        return {
          isValid: false,
          errors: validationErrors,
          warnings: [],
          correctionSuggestions: this.generateZodErrorCorrections(validationErrors),
          validationDuration: Date.now() - startTime
        };
      }
      
      throw error;
    }
  }

  /**
   * üîÑ ALIAS –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –¢–ï–°–¢–ê–ú–ò
   */
  public async validateOutput(data: any): Promise<HandoffValidationResult> {
    return this.validateDesignOutput(data, true);
  }

  /**
   * üîç –í–ê–õ–ò–î–ê–¶–ò–Ø HTML –ö–ê–ß–ï–°–¢–í–ê
   */
  private async validateHTMLQuality(htmlContent: string): Promise<{
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  }> {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã HTML (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ DOCTYPE)
    const hasDoctype = htmlContent.toLowerCase().includes('<!doctype html') || 
                      htmlContent.includes('<!DOCTYPE html');
    if (!hasDoctype) {
      errors.push({
        field: 'email_package.html_content',
        errorType: 'format_error',
        message: 'HTML –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å DOCTYPE declaration',
        severity: 'critical'
      });
      
      suggestions.push({
        field: 'email_package.html_content',
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DOCTYPE',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å DOCTYPE html PUBLIC declaration',
        correctionPrompt: '–î–æ–±–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π DOCTYPE –¥–ª—è email HTML: <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
        priority: 'high'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö email-specific —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!htmlContent.includes('<title>')) {
      errors.push({
        field: 'email_package.html_content',
        errorType: 'missing',
        message: 'HTML –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å <title> —ç–ª–µ–º–µ–Ω—Ç',
        severity: 'major'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è table-based layout
    if (!htmlContent.includes('<table') || htmlContent.includes('display: flex') || htmlContent.includes('display: grid')) {
      errors.push({
        field: 'email_package.html_content',
        errorType: 'format_error',
        message: 'Email HTML –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å table-based layout, –Ω–µ flex/grid',
        severity: 'critical'
      });
      
      suggestions.push({
        field: 'email_package.html_content',
        issue: '–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π layout',
        suggestion: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å table-based —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
        correctionPrompt: '–ü–µ—Ä–µ–¥–µ–ª–∞–π—Ç–µ HTML —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ <table>, <tr>, <td> —ç–ª–µ–º–µ–Ω—Ç—ã. –£–±–µ—Ä–∏—Ç–µ flex, grid –∏ –¥—Ä—É–≥–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ CSS —Å–≤–æ–π—Å—Ç–≤–∞. Email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º —Å Outlook.',
        priority: 'high'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö CSS —Ñ–∞–π–ª–æ–≤ (—Ä–∞–∑—Ä–µ—à–∞–µ–º Google Fonts)
    const externalStylesheets = htmlContent.match(/<link[^>]*rel=["']stylesheet["'][^>]*>/gi);
    if (externalStylesheets && externalStylesheets.length > 0) {
      const hasGoogleFonts = externalStylesheets.some(link => link.includes('fonts.googleapis.com'));
      const hasOtherCSS = externalStylesheets.some(link => !link.includes('fonts.googleapis.com'));
      
      if (hasGoogleFonts && !hasOtherCSS) {
        // –¢–æ–ª—å–∫–æ Google Fonts - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        suggestions.push({
          field: 'email_package.html_content',
          issue: 'Google Fonts —Å—Å—ã–ª–∫–∞',
          suggestion: '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ web-safe —à—Ä–∏—Ñ—Ç–æ–≤ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
          correctionPrompt: 'Google Fonts –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤–æ –≤—Å–µ—Ö email –∫–ª–∏–µ–Ω—Ç–∞—Ö. –î–æ–±–∞–≤—å—Ç–µ fallback —à—Ä–∏—Ñ—Ç—ã –≤ CSS.',
          priority: 'medium'
        });
      } else if (hasOtherCSS) {
        // –î—Ä—É–≥–∏–µ –≤–Ω–µ—à–Ω–∏–µ CSS - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞
        errors.push({
          field: 'email_package.html_content',
          errorType: 'format_error',
          message: 'HTML –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Å—Ç–∏–ª–µ–≤—ã–µ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ Google Fonts)',
          severity: 'critical'
        });
        
        suggestions.push({
          field: 'email_package.html_content',
          issue: '–í–Ω–µ—à–Ω–∏–µ CSS —Ñ–∞–π–ª—ã',
          suggestion: '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∏–Ω–ª–∞–π–Ω —Å—Ç–∏–ª–∏',
          correctionPrompt: '–£–±–µ—Ä–∏—Ç–µ –≤—Å–µ –≤–Ω–µ—à–Ω–∏–µ CSS —Ñ–∞–π–ª—ã –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π—Ç–µ —Å—Ç–∏–ª–∏ –≤ –∏–Ω–ª–∞–π–Ω –∞—Ç—Ä–∏–±—É—Ç—ã style="". –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Å—Ç–∏–ª–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∞—Ç—Ä–∏–±—É—Ç–µ style.',
          priority: 'high'
        });
      }
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üìè –°–¢–†–û–ì–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–û–í –§–ê–ô–õ–û–í
   */
  private validateFileSizes(data: DesignToQualityHandoffData): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ HTML —Ñ–∞–π–ª–∞
    const htmlSize = Buffer.byteLength(data.email_package.html_content, 'utf8');
    const maxSizeBytes = AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB * 1024;
    
    if (htmlSize > maxSizeBytes) {
      errors.push({
        field: 'email_package.html_content',
        errorType: 'size_limit',
        message: `HTML —Ä–∞–∑–º–µ—Ä ${Math.round(htmlSize/1024)}KB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB}KB`,
        currentValue: htmlSize,
        expectedValue: maxSizeBytes,
        severity: 'critical'
      });
      
      suggestions.push({
        field: 'email_package.html_content',
        issue: '–ü—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä HTML —Ñ–∞–π–ª–∞',
        suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å HTML –∏ CSS',
        correctionPrompt: `HTML —Ñ–∞–π–ª –≤–µ—Å–∏—Ç ${Math.round(htmlSize/1024)}KB, –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â§${AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB}KB. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ: 1) –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ CSS 2) –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∏–ª–∏ 3) –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É 4) –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å—Ç–∏–ª–∏`,
        priority: 'high'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ total_size_kb –∏–∑ –º–µ—Ç—Ä–∏–∫
    if (data.design_artifacts.performance_metrics.total_size_kb > AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB) {
      errors.push({
        field: 'design_artifacts.performance_metrics.total_size_kb',
        errorType: 'size_limit',
        message: `–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä ${data.design_artifacts.performance_metrics.total_size_kb}KB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB}KB`,
        currentValue: data.design_artifacts.performance_metrics.total_size_kb,
        expectedValue: AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB,
        severity: 'critical'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
    if (data.rendering_metadata.render_time_ms > AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_VALIDATION_TIME_MS) {
      errors.push({
        field: 'rendering_metadata.render_time_ms',
        errorType: 'invalid_value',
        message: `–í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ ${data.rendering_metadata.render_time_ms}–º—Å –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_VALIDATION_TIME_MS}–º—Å`,
        currentValue: data.rendering_metadata.render_time_ms,
        expectedValue: AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_VALIDATION_TIME_MS,
        severity: 'major'
      });
      
      suggestions.push({
        field: 'rendering_metadata.render_time_ms',
        issue: '–ú–µ–¥–ª–µ–Ω–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥',
        suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å—Ç–∏–ª–∏',
        correctionPrompt: '–†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ: 1) –£–ø—Ä–æ—Å—Ç–∏—Ç–µ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä—ã 2) –£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 3) –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π 4) –£–¥–∞–ª–∏—Ç–µ —Å–ª–æ–∂–Ω—ã–µ CSS —ç—Ñ—Ñ–µ–∫—Ç—ã',
        priority: 'medium'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üñºÔ∏è –í–ê–õ–ò–î–ê–¶–ò–Ø –ê–°–°–ï–¢–û–í
   */
  private async validateAssets(assetUrls: string[]): Promise<{
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  }> {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ URL –∞—Å—Å–µ—Ç–æ–≤
    for (const url of assetUrls) {
      try {
        new URL(url);
      } catch {
        errors.push({
          field: 'email_package.asset_urls',
          errorType: 'format_error',
          message: `–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –∞—Å—Å–µ—Ç–∞: ${url}`,
          currentValue: url,
          severity: 'major'
        });
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
      const allowedExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.svg', '.webp'];
      const hasValidExtension = allowedExtensions.some(ext => url.toLowerCase().includes(ext));
      
      if (!hasValidExtension) {
        errors.push({
          field: 'email_package.asset_urls',
          errorType: 'format_error',
          message: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—Å—Å–µ—Ç–∞: ${url}`,
          currentValue: url,
          severity: 'minor'
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Å—Å–µ—Ç–æ–≤ (–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ)
    if (assetUrls.length > 20) {
      errors.push({
        field: 'email_package.asset_urls',
        errorType: 'size_limit',
        message: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞—Å—Å–µ—Ç–æ–≤: ${assetUrls.length}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è ‚â§20`,
        currentValue: assetUrls.length,
        expectedValue: 20,
        severity: 'minor'
      });
      
      suggestions.push({
        field: 'email_package.asset_urls',
        issue: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Å—Å–µ—Ç–æ–≤',
        correctionPrompt: '–£–º–µ–Ω—å—à–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: 1) –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø—Ä–∞–π—Ç—ã 2) –£–±–µ—Ä–∏—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 3) –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSS –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ 4) –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        priority: 'low'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * ‚ö° –í–ê–õ–ò–î–ê–¶–ò–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê
   */
  private validateRenderingPerformance(data: DesignToQualityHandoffData): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ CSS –ø—Ä–∞–≤–∏–ª
    const maxCssRules = 500;
    if (data.design_artifacts.performance_metrics.css_rules_count > maxCssRules) {
      errors.push({
        field: 'design_artifacts.performance_metrics.css_rules_count',
        errorType: 'size_limit',
        message: `–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ CSS –ø—Ä–∞–≤–∏–ª: ${data.design_artifacts.performance_metrics.css_rules_count}. –ú–∞–∫—Å–∏–º—É–º: ${maxCssRules}`,
        currentValue: data.design_artifacts.performance_metrics.css_rules_count,
        expectedValue: maxCssRules,
        severity: 'major'
      });
      
      suggestions.push({
        field: 'design_artifacts.performance_metrics.css_rules_count',
        issue: '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ CSS –ø—Ä–∞–≤–∏–ª',
        suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å CSS',
        correctionPrompt: '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ CSS –ø—Ä–∞–≤–∏–ª: 1) –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –ø–æ—Ö–æ–∂–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã 2) –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å—Ç–∏–ª–∏ 3) –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫—Ä–∞—Ç–∫–∏–µ CSS —Å–≤–æ–π—Å—Ç–≤–∞ 4) –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ CSS –∫–æ–¥',
        priority: 'medium'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ dark mode (—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è)
    if (!data.design_artifacts.dark_mode_support) {
      suggestions.push({
        field: 'design_artifacts.dark_mode_support',
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å dark mode support',
        correctionPrompt: '–î–æ–±–∞–≤—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã –∏—Å–ø–æ–ª—å–∑—É—è CSS media queries: @media (prefers-color-scheme: dark). –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Ñ–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞.',
        priority: 'low'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üåê W3C COMPLIANCE –í–ê–õ–ò–î–ê–¶–ò–Ø
   */
  private async validateW3CCompliance(htmlContent: string): Promise<{
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  }> {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ W3C —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –¥–ª—è email
    const requiredPatterns = [
      {
        pattern: /<!DOCTYPE html/i,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç DOCTYPE declaration',
        field: 'w3c_doctype'
      },
      {
        pattern: /<html[^>]*>/i,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç <html> —ç–ª–µ–º–µ–Ω—Ç',
        field: 'w3c_html_element'
      },
      {
        pattern: /<head[^>]*>/i,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç <head> —Å–µ–∫—Ü–∏—è',
        field: 'w3c_head_section'
      },
      {
        pattern: /<meta[^>]*charset[^>]*>/i,
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç meta charset',
        field: 'w3c_charset'
      }
    ];
    
    for (const check of requiredPatterns) {
      if (!check.pattern.test(htmlContent)) {
        errors.push({
          field: `email_package.html_content.${check.field}`,
          errorType: 'missing',
          message: check.message,
          severity: 'major'
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Ç–µ–≥–æ–≤
    const unclosedTags = this.findUnclosedTags(htmlContent);
    if (unclosedTags.length > 0) {
      errors.push({
        field: 'email_package.html_content.structure',
        errorType: 'format_error',
        message: `–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ —Ç–µ–≥–∏: ${unclosedTags.join(', ')}`,
        severity: 'major'
      });
      
      suggestions.push({
        field: 'email_package.html_content',
        issue: '–ù–µ–∑–∞–∫—Ä—ã—Ç—ã–µ HTML —Ç–µ–≥–∏',
        suggestion: '–ó–∞–∫—Ä—ã—Ç—å –≤—Å–µ HTML —Ç–µ–≥–∏',
        correctionPrompt: `–ó–∞–∫—Ä–æ–π—Ç–µ –≤—Å–µ HTML —Ç–µ–≥–∏: ${unclosedTags.join(', ')}. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∫–∞–∂–¥—ã–π –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ –∏–º–µ–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–π —Ç–µ–≥ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ self-closing —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ç–µ–≥–æ–≤.`,
        priority: 'medium'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üìß –í–ê–õ–ò–î–ê–¶–ò–Ø EMAIL-SPECIFIC –¢–†–ï–ë–û–í–ê–ù–ò–ô
   */
  private validateEmailSpecificRequirements(data: DesignToQualityHandoffData): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    const htmlContent = data.email_package.html_content;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —à–∏—Ä–∏–Ω—ã (600-640px –¥–ª—è email)
    const widthPattern = /width\s*:\s*(\d+)px/gi;
    let match;
    let hasValidWidth = false;
    
    while ((match = widthPattern.exec(htmlContent)) !== null) {
      const width = parseInt(match[1]);
      if (width <= 640) {
        hasValidWidth = true;
      }
      if (width > 640) {
        errors.push({
          field: 'email_package.html_content.width',
          errorType: 'invalid_value',
          message: `–®–∏—Ä–∏–Ω–∞ ${width}px –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º 640px –¥–ª—è email`,
          currentValue: width,
          expectedValue: 640,
          severity: 'major'
        });
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è preheader —Ç–µ–∫—Å—Ç–∞
    if (!htmlContent.includes('preheader') && !htmlContent.includes('preview')) {
      suggestions.push({
        field: 'email_package.html_content',
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç preheader —Ç–µ–∫—Å—Ç',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å preheader –¥–ª—è preview',
        correctionPrompt: '–î–æ–±–∞–≤—å—Ç–µ preheader —Ç–µ–∫—Å—Ç –≤ –Ω–∞—á–∞–ª–æ email: <div style="display:none;max-height:0;overflow:hidden;">–í–∞—à preheader —Ç–µ–∫—Å—Ç –∑–¥–µ—Å—å</div>. –≠—Ç–æ —É–ª—É—á—à–∏—Ç preview –≤ email –∫–ª–∏–µ–Ω—Ç–∞—Ö.',
        priority: 'medium'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ accessibility –∞—Ç—Ä–∏–±—É—Ç–æ–≤
    if (!htmlContent.includes('alt=') && htmlContent.includes('<img')) {
      errors.push({
        field: 'email_package.html_content.accessibility',
        errorType: 'missing',
        message: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å alt –∞—Ç—Ä–∏–±—É—Ç—ã',
        severity: 'major'
      });
      
      suggestions.push({
        field: 'email_package.html_content',
        issue: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç alt –∞—Ç—Ä–∏–±—É—Ç—ã',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å alt —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π',
        correctionPrompt: '–î–æ–±–∞–≤—å—Ç–µ alt –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: <img src="..." alt="–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">. –≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è accessibility –∏ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è.',
        priority: 'medium'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üîß HELPER METHODS
   */

  private findUnclosedTags(html: string): string[] {
    const openTags: string[] = [];
    const unclosedTags: string[] = [];
    
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ–≥–æ–≤
    const tagRegex = /<\/?(\w+)[^>]*>/g;
    let match;
    
    const selfClosingTags = ['img', 'br', 'hr', 'meta', 'link', 'input'];
    
    while ((match = tagRegex.exec(html)) !== null) {
      const tag = match[1].toLowerCase();
      const isClosing = match[0].startsWith('</');
      const isSelfClosing = selfClosingTags.includes(tag) || match[0].endsWith('/>');
      
      if (isSelfClosing) continue;
      
      if (isClosing) {
        const openIndex = openTags.lastIndexOf(tag);
        if (openIndex !== -1) {
          openTags.splice(openIndex, 1);
        }
      } else {
        openTags.push(tag);
      }
    }
    
    return openTags;
  }

  private generateZodErrorCorrections(errors: HandoffValidationError[]): CorrectionSuggestion[] {
    return errors.map(error => ({
      field: error.field,
      issue: error.message,
      suggestion: `–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–µ ${error.field}`,
      correctionPrompt: `–ü–æ–ª–µ "${error.field}" —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É: ${error.message}. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ö–µ–º–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.`,
      priority: error.severity === 'critical' ? 'high' : 'medium'
    }));
  }

  /**
   * üìä –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê HTML
   */
  public calculateHTMLQualityMetrics(htmlContent: string): HTMLQualityMetrics {
    return {
      w3cCompliant: this.isW3CCompliant(htmlContent),
      fileSizeBytes: Buffer.byteLength(htmlContent, 'utf8'),
      cssRulesCount: this.countCSSRules(htmlContent),
      imagesCount: this.countImages(htmlContent),
      totalSizeKB: Math.round(Buffer.byteLength(htmlContent, 'utf8') / 1024),
      hasInlineStyles: htmlContent.includes('style='),
      hasExternalDependencies: htmlContent.includes('<link') || htmlContent.includes('<script'),
      estimatedRenderTime: this.estimateRenderTime(htmlContent)
    };
  }

  private isW3CCompliant(html: string): boolean {
    return html.includes('<!DOCTYPE html') && 
           html.includes('<html') && 
           html.includes('<head') &&
           html.includes('charset');
  }

  private countCSSRules(html: string): number {
    const styleBlocks = html.match(/<style[^>]*>([\s\S]*?)<\/style>/gi) || [];
    const inlineStyles = html.match(/style\s*=\s*["'][^"']*["']/gi) || [];
    return styleBlocks.length * 10 + inlineStyles.length; // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
  }

  private countImages(html: string): number {
    return (html.match(/<img[^>]*>/gi) || []).length;
  }

  private estimateRenderTime(html: string): number {
    const size = Buffer.byteLength(html, 'utf8');
    const complexity = this.countCSSRules(html) + this.countImages(html);
    return Math.round((size / 1000) + (complexity * 2)); // –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –æ—Ü–µ–Ω–∫–∏
  }
}