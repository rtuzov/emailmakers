// import { z } from 'zod';
import {
  HandoffValidationResult,
  HandoffValidationError,
  CorrectionSuggestion,
  AGENT_CONSTANTS
} from '../types/base-agent-types';

/**
 * üì¶ DELIVERY SPECIALIST VALIDATOR
 * 
 * –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –ø–µ—Ä–µ–¥ –¥–æ—Å—Ç–∞–≤–∫–æ–π –∫–ª–∏–µ–Ω—Ç—É
 * –ü—Ä–∏–Ω—Ü–∏–ø: –ê–±—Å–æ–ª—é—Ç–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –¥–æ—Å—Ç–∞–≤–∫–µ, —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ <600KB, –ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è
 */

export interface DeliveryPackage {
  html_email: string;
  mjml_source?: string;
  assets: AssetFile[];
  metadata: DeliveryMetadata;
  documentation: DeliveryDocumentation;
  preview_files: PreviewFile[];
}

export interface AssetFile {
  filename: string;
  content: Buffer | string;
  size_bytes: number;
  mime_type: string;
  optimized: boolean;
}

export interface DeliveryMetadata {
  package_version: string;
  creation_date: string;
  quality_score: number;
  compatibility_report: string;
  accessibility_report: string;
  performance_metrics: string;
  total_size_kb: number;
}

export interface DeliveryDocumentation {
  readme: string;
  implementation_guide: string;
  testing_notes: string;
  browser_support: string;
  troubleshooting: string;
}

export interface PreviewFile {
  filename: string;
  content: string;
  type: 'desktop' | 'mobile' | 'dark_mode' | 'plain_text';
  size_bytes: number;
}

export interface PackageIntegrityReport {
  total_files: number;
  total_size_bytes: number;
  total_size_kb: number;
  html_size_kb: number;
  assets_size_kb: number;
  documentation_size_kb: number;
  compression_ratio: number;
  within_size_limit: boolean;
  missing_files: string[];
  corrupted_files: string[];
}

export class DeliverySpecialistValidator {
  private static instance: DeliverySpecialistValidator;

  private constructor() {}

  public static getInstance(): DeliverySpecialistValidator {
    if (!DeliverySpecialistValidator.instance) {
      DeliverySpecialistValidator.instance = new DeliverySpecialistValidator();
    }
    return DeliverySpecialistValidator.instance;
  }

  /**
   * üéØ –û–°–ù–û–í–ù–ê–Ø –í–ê–õ–ò–î–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –ü–ê–ö–ï–¢–ê –î–û–°–¢–ê–í–ö–ò
   */
  public async validateDeliveryPackage(
    deliveryPackage: any,
    enableStrictValidation: boolean = true
  ): Promise<HandoffValidationResult> {
    const startTime = Date.now();
    
    try {
      const errors: HandoffValidationError[] = [];
      const warnings: string[] = [];
      const correctionSuggestions: CorrectionSuggestion[] = [];
      
      // 1. –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ö–ï–¢–ê
      const structureValidation = this.validatePackageStructure(deliveryPackage);
      if (!structureValidation.isValid) {
        errors.push(...structureValidation.errors);
        correctionSuggestions.push(...structureValidation.suggestions);
      }
      
      // 2. –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –ü–ê–ö–ï–¢–ê <600KB
      const sizeValidation = await this.validatePackageSize(deliveryPackage);
      if (!sizeValidation.isValid) {
        errors.push(...sizeValidation.errors);
        correctionSuggestions.push(...sizeValidation.suggestions);
      }
      
      // 3. –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –í–°–ï–• –§–ê–ô–õ–û–í
      const integrityValidation = await this.validateFileIntegrity(deliveryPackage);
      if (!integrityValidation.isValid) {
        errors.push(...integrityValidation.errors);
        correctionSuggestions.push(...integrityValidation.suggestions);
      }
      
      // 4. –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û HTML
      const htmlValidation = this.validateFinalHTML(deliveryPackage.html_email);
      if (!htmlValidation.isValid) {
        errors.push(...htmlValidation.errors);
        correctionSuggestions.push(...htmlValidation.suggestions);
      }
      
      // 5. –í–ê–õ–ò–î–ê–¶–ò–Ø EXPORT –§–û–†–ú–ê–¢–û–í
      const exportValidation = this.validateExportFormats(deliveryPackage);
      if (!exportValidation.isValid) {
        errors.push(...exportValidation.errors);
        correctionSuggestions.push(...exportValidation.suggestions);
      }
      
      // 6. –ü–†–û–í–ï–†–ö–ê PREVIEW –§–ê–ô–õ–û–í
      const previewValidation = this.validatePreviewFiles(deliveryPackage.preview_files);
      if (!previewValidation.isValid) {
        errors.push(...previewValidation.errors);
        correctionSuggestions.push(...previewValidation.suggestions);
      }
      
      // 7. –í–ê–õ–ò–î–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
      const docsValidation = this.validateDocumentation(deliveryPackage.documentation);
      if (!docsValidation.isValid) {
        errors.push(...docsValidation.errors);
        correctionSuggestions.push(...docsValidation.suggestions);
      }
      
      // 8. –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–û–°–¢–ê–í–ö–ï
      const readinessValidation = this.validateDeliveryReadiness(deliveryPackage);
      if (!readinessValidation.isValid) {
        errors.push(...readinessValidation.errors);
        correctionSuggestions.push(...readinessValidation.suggestions);
      }
      
      // –í —Å—Ç—Ä–æ–≥–æ–º —Ä–µ–∂–∏–º–µ –ª—é–±–∞—è –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫—É
      const blockingErrors = enableStrictValidation ? 
        errors :
        errors.filter(e => e.severity === 'critical');
      
      return {
        isValid: blockingErrors.length === 0,
        errors: blockingErrors,
        warnings: warnings.concat(errors.filter(e => !blockingErrors.includes(e)).map(e => e.message)),
        correctionSuggestions: correctionSuggestions,
        validatedData: blockingErrors.length === 0 ? deliveryPackage : undefined,
        validationDuration: Date.now() - startTime
      };
      
    } catch (error) {
      return {
        isValid: false,
        errors: [{
          field: 'delivery_package',
          errorType: 'invalid_value',
          message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
          severity: 'critical'
        }],
        warnings: [],
        correctionSuggestions: [],
        validationDuration: Date.now() - startTime
      };
    }
  }

  /**
   * üîÑ ALIAS –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò –° –¢–ï–°–¢–ê–ú–ò
   */
  public async validateOutput(deliveryPackage: any): Promise<HandoffValidationResult> {
    return this.validateDeliveryPackage(deliveryPackage, true);
  }

  /**
   * üìã –í–ê–õ–ò–î–ê–¶–ò–Ø –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ö–ï–¢–ê
   */
  private validatePackageStructure(pkg: any): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = [
      'html_email',
      'assets',
      'metadata',
      'documentation',
      'preview_files'
    ];
    
    const missingFields = requiredFields.filter(field => !pkg[field]);
    
    if (missingFields.length > 0) {
      errors.push({
        field: 'package_structure',
        errorType: 'missing',
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`,
        severity: 'critical'
      });
      
      suggestions.push({
        field: 'package_structure',
        issue: '–ù–µ–ø–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–∫–µ—Ç–∞',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã',
        correctionPrompt: `–ü–∞–∫–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –ù–ï–ü–û–õ–ù–´–ô. –î–æ–±–∞–≤—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: ${missingFields.join(', ')}. –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–æ–ª–∂–Ω–∞ –≤–∫–ª—é—á–∞—Ç—å: 1) html_email (—Ñ–∏–Ω–∞–ª—å–Ω—ã–π HTML) 2) assets (–≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã) 3) metadata (–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞—á–µ—Å—Ç–≤–∞) 4) documentation (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏) 5) preview_files (–ø—Ä–µ–≤—å—é —Ñ–∞–π–ª—ã)`,
        priority: 'high'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if (pkg.html_email && typeof pkg.html_email !== 'string') {
      errors.push({
        field: 'html_email',
        errorType: 'invalid_type',
        message: 'html_email –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π',
        severity: 'critical'
      });
    }
    
    if (pkg.assets && !Array.isArray(pkg.assets)) {
      errors.push({
        field: 'assets',
        errorType: 'invalid_type',
        message: 'assets –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º',
        severity: 'critical'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üìè –ñ–ï–°–¢–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –†–ê–ó–ú–ï–†–ê –ü–ê–ö–ï–¢–ê <600KB
   */
  private async validatePackageSize(pkg: any): Promise<{
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  }> {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    const maxSizeKB = AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_PACKAGE_SIZE_KB;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞
    let totalSizeBytes = 0;
    
    // HTML —Ä–∞–∑–º–µ—Ä
    if (pkg.html_email) {
      totalSizeBytes += Buffer.byteLength(pkg.html_email, 'utf8');
    }
    
    // MJML —Ä–∞–∑–º–µ—Ä (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if (pkg.mjml_source) {
      totalSizeBytes += Buffer.byteLength(pkg.mjml_source, 'utf8');
    }
    
    // –†–∞–∑–º–µ—Ä –∞—Å—Å–µ—Ç–æ–≤
    if (pkg.assets && Array.isArray(pkg.assets)) {
      for (const asset of pkg.assets) {
        if (asset.size_bytes) {
          totalSizeBytes += asset.size_bytes;
        } else if (asset.content) {
          totalSizeBytes += Buffer.byteLength(
            typeof asset.content === 'string' ? asset.content : asset.content.toString(),
            'utf8'
          );
        }
      }
    }
    
    // –†–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if (pkg.documentation) {
      Object.values(pkg.documentation).forEach((doc: any) => {
        if (typeof doc === 'string') {
          totalSizeBytes += Buffer.byteLength(doc, 'utf8');
        }
      });
    }
    
    // –†–∞–∑–º–µ—Ä preview —Ñ–∞–π–ª–æ–≤
    if (pkg.preview_files && Array.isArray(pkg.preview_files)) {
      for (const preview of pkg.preview_files) {
        totalSizeBytes += preview.size_bytes || Buffer.byteLength(preview.content || '', 'utf8');
      }
    }
    
    const totalSizeKB = totalSizeBytes / 1024;
    
    // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê 600KB
    if (totalSizeKB > maxSizeKB) {
      errors.push({
        field: 'package_size',
        errorType: 'size_limit',
        message: `–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ ${Math.round(totalSizeKB)}KB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${maxSizeKB}KB`,
        currentValue: totalSizeKB,
        expectedValue: maxSizeKB,
        severity: 'critical'
      });
      
      suggestions.push({
        field: 'package_size',
        issue: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–∫–µ—Ç–∞',
        suggestion: '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤',
        correctionPrompt: `–ö–†–ò–¢–ò–ß–ù–û: –ü–∞–∫–µ—Ç –≤–µ—Å–∏—Ç ${Math.round(totalSizeKB)}KB, –º–∞–∫—Å–∏–º—É–º ${maxSizeKB}KB. –°—Ä–æ—á–Ω–æ –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ: 1) –°–∂–∏–º–∞–π—Ç–µ HTML (–º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è) 2) –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (WebP, –∫–∞—á–µ—Å—Ç–≤–æ) 3) –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞—Å—Å–µ—Ç—ã 4) –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–π—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é 5) –°–∂–∏–º–∞–π—Ç–µ preview —Ñ–∞–π–ª—ã. –ö–∞–∂–¥—ã–π –∫–∏–ª–æ–±–∞–π—Ç –∫—Ä–∏—Ç–∏—á–µ–Ω!`,
        priority: 'high'
      });
    }
    
    // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É (>80%)
    if (totalSizeKB > maxSizeKB * 0.8) {
      suggestions.push({
        field: 'package_size',
        issue: '–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –±–ª–∏–∑–æ–∫ –∫ –ª–∏–º–∏—Ç—É',
        suggestion: '–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è',
        correctionPrompt: `–†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ ${Math.round(totalSizeKB)}KB –±–ª–∏–∑–æ–∫ –∫ –ª–∏–º–∏—Ç—É ${maxSizeKB}KB. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –∑–∞–ø–∞—Å–∞.`,
        priority: 'medium'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üîê –í–ê–õ–ò–î–ê–¶–ò–Ø –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –§–ê–ô–õ–û–í
   */
  private async validateFileIntegrity(pkg: any): Promise<{
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  }> {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ HTML —Ñ–∞–π–ª–∞
    if (!pkg.html_email || pkg.html_email.length < 100) {
      errors.push({
        field: 'html_email',
        errorType: 'invalid_value',
        message: 'HTML email —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π',
        severity: 'critical'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–µ—Ç–æ–≤
    if (pkg.assets && Array.isArray(pkg.assets)) {
      for (let i = 0; i < pkg.assets.length; i++) {
        const asset = pkg.assets[i];
        
        if (!asset.filename) {
          errors.push({
            field: `assets[${i}].filename`,
            errorType: 'missing',
            message: `–ê—Å—Å–µ—Ç ${i} –Ω–µ –∏–º–µ–µ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞`,
            severity: 'major'
          });
        }
        
        if (!asset.content && !asset.size_bytes) {
          errors.push({
            field: `assets[${i}].content`,
            errorType: 'missing',
            message: `–ê—Å—Å–µ—Ç ${asset.filename || i} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞`,
            severity: 'major'
          });
        }
        
        if (!asset.mime_type) {
          errors.push({
            field: `assets[${i}].mime_type`,
            errorType: 'missing',
            message: `–ê—Å—Å–µ—Ç ${asset.filename || i} –Ω–µ –∏–º–µ–µ—Ç MIME —Ç–∏–ø–∞`,
            severity: 'minor'
          });
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ preview —Ñ–∞–π–ª–æ–≤
    if (pkg.preview_files && Array.isArray(pkg.preview_files)) {
      const requiredPreviews = ['desktop', 'mobile'];
      const existingTypes = pkg.preview_files.map((p: any) => p.type);
      const missingPreviews = requiredPreviews.filter(type => !existingTypes.includes(type));
      
      if (missingPreviews.length > 0) {
        errors.push({
          field: 'preview_files',
          errorType: 'missing',
          message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ preview: ${missingPreviews.join(', ')}`,
          severity: 'major'
        });
        
        suggestions.push({
          field: 'preview_files',
          issue: '–ù–µ–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä preview —Ñ–∞–π–ª–æ–≤',
          suggestion: '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ preview',
          correctionPrompt: `–î–æ–±–∞–≤—å—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ preview —Ñ–∞–π–ª—ã: ${missingPreviews.join(', ')}. –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã email –≤ desktop –∏ mobile –≤–µ—Ä—Å–∏—è—Ö.`,
          priority: 'medium'
        });
      }
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üìß –ü–†–û–í–ï–†–ö–ê –ö–ê–ß–ï–°–¢–í–ê –§–ò–ù–ê–õ–¨–ù–û–ì–û HTML
   */
  private validateFinalHTML(htmlContent: string): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    if (!htmlContent) {
      errors.push({
        field: 'html_email',
        errorType: 'missing',
        message: '–§–∏–Ω–∞–ª—å–Ω—ã–π HTML –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        severity: 'critical'
      });
      return { isValid: false, errors, suggestions };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    const requiredElements = ['<!DOCTYPE', '<html', '<head', '<body', '<title'];
    const missingElements = requiredElements.filter(element => !htmlContent.includes(element));
    
    if (missingElements.length > 0) {
      errors.push({
        field: 'html_email',
        errorType: 'format_error',
        message: `–§–∏–Ω–∞–ª—å–Ω—ã–π HTML –Ω–µ–ø–æ–ª–Ω—ã–π, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingElements.join(', ')}`,
        severity: 'critical'
      });
      
      suggestions.push({
        field: 'html_email',
        issue: '–ù–µ–ø–æ–ª–Ω–∞—è HTML —Å—Ç—Ä—É–∫—Ç—É—Ä–∞',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ HTML —ç–ª–µ–º–µ–Ω—Ç—ã',
        correctionPrompt: `–§–∏–Ω–∞–ª—å–Ω—ã–π HTML –Ω–µ–ø–æ–ª–Ω—ã–π. –î–æ–±–∞–≤—å—Ç–µ: ${missingElements.join(', ')}. HTML –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏.`,
        priority: 'high'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ email-specific —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if (!htmlContent.includes('charset')) {
      errors.push({
        field: 'html_email',
        errorType: 'missing',
        message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç charset declaration',
        severity: 'major'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ placeholder —Ç–µ–∫—Å—Ç–∞
    const placeholderPatterns = [
      /\{\{.*?\}\}/g,
      /\[.*?\]/g,
      /placeholder/gi,
      /lorem ipsum/gi,
      /test content/gi
    ];
    
    const foundPlaceholders = placeholderPatterns.some(pattern => pattern.test(htmlContent));
    
    if (foundPlaceholders) {
      errors.push({
        field: 'html_email',
        errorType: 'invalid_value',
        message: 'HTML —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –∫–æ–Ω—Ç–µ–Ω—Ç',
        severity: 'major'
      });
      
      suggestions.push({
        field: 'html_email',
        issue: 'Placeholder –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º HTML',
        suggestion: '–ó–∞–º–µ–Ω–∏—Ç—å –≤—Å–µ placeholder –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
        correctionPrompt: '–§–∏–Ω–∞–ª—å–Ω—ã–π HTML —Å–æ–¥–µ—Ä–∂–∏—Ç placeholder –∫–æ–Ω—Ç–µ–Ω—Ç. –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã, {{variables}}, [placeholders] –Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏.',
        priority: 'high'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üìÅ –í–ê–õ–ò–î–ê–¶–ò–Ø EXPORT –§–û–†–ú–ê–¢–û–í
   */
  private validateExportFormats(pkg: any): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // HTML –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if (!pkg.html_email) {
      errors.push({
        field: 'export_formats.html',
        errorType: 'missing',
        message: 'HTML format –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        severity: 'critical'
      });
    }
    
    // MJML –∂–µ–ª–∞—Ç–µ–ª–µ–Ω, –Ω–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–µ–Ω
    if (!pkg.mjml_source) {
      suggestions.push({
        field: 'export_formats.mjml',
        issue: 'MJML source –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å MJML source –¥–ª—è –±—É–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π',
        correctionPrompt: '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤–∫–ª—é—á–∏—Ç—å MJML source —Ñ–∞–π–ª –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±—É–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π email —à–∞–±–ª–æ–Ω–∞.',
        priority: 'low'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Å—Å–µ—Ç–æ–≤
    if (!pkg.assets || !Array.isArray(pkg.assets) || pkg.assets.length === 0) {
      suggestions.push({
        field: 'export_formats.assets',
        issue: '–ê—Å—Å–µ—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
        suggestion: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –∞—Å—Å–µ—Ç–æ–≤',
        correctionPrompt: 'Email –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∞—Å—Å–µ—Ç–æ–≤ (–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π). –ï—Å–ª–∏ email –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –≤–∫–ª—é—á–∏—Ç–µ –∏—Ö –≤ –ø–∞–∫–µ—Ç.',
        priority: 'low'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üñºÔ∏è –í–ê–õ–ò–î–ê–¶–ò–Ø PREVIEW –§–ê–ô–õ–û–í
   */
  private validatePreviewFiles(previewFiles: any[]): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    if (!previewFiles || !Array.isArray(previewFiles)) {
      errors.push({
        field: 'preview_files',
        errorType: 'missing',
        message: 'Preview —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
        severity: 'major'
      });
      return { isValid: false, errors, suggestions };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö preview —Ç–∏–ø–æ–≤
    const requiredTypes = ['desktop', 'mobile'];
    const existingTypes = previewFiles.map(p => p.type);
    const missingTypes = requiredTypes.filter(type => !existingTypes.includes(type));
    
    if (missingTypes.length > 0) {
      errors.push({
        field: 'preview_files',
        errorType: 'missing',
        message: `–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç preview —Ç–∏–ø—ã: ${missingTypes.join(', ')}`,
        severity: 'major'
      });
      
      suggestions.push({
        field: 'preview_files',
        issue: '–ù–µ–ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä preview',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ preview —Ç–∏–ø—ã',
        correctionPrompt: `–î–æ–±–∞–≤—å—Ç–µ preview —Ñ–∞–π–ª—ã –¥–ª—è: ${missingTypes.join(', ')}. –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã email –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç—É.`,
        priority: 'medium'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ preview —Ñ–∞–π–ª–∞
    previewFiles.forEach((preview, index) => {
      if (!preview.filename) {
        errors.push({
          field: `preview_files[${index}].filename`,
          errorType: 'missing',
          message: `Preview ${index} –Ω–µ –∏–º–µ–µ—Ç –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞`,
          severity: 'minor'
        });
      }
      
      if (!preview.content) {
        errors.push({
          field: `preview_files[${index}].content`,
          errorType: 'missing',
          message: `Preview ${preview.filename || index} –Ω–µ –∏–º–µ–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞`,
          severity: 'major'
        });
      }
    });
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üìö –í–ê–õ–ò–î–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
   */
  private validateDocumentation(documentation: any): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    if (!documentation) {
      errors.push({
        field: 'documentation',
        errorType: 'missing',
        message: '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
        severity: 'major'
      });
      return { isValid: false, errors, suggestions };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    const requiredDocs = [
      'readme',
      'implementation_guide',
      'testing_notes',
      'browser_support'
    ];
    
    const missingDocs = requiredDocs.filter(doc => !documentation[doc] || documentation[doc].length < 50);
    
    if (missingDocs.length > 0) {
      errors.push({
        field: 'documentation',
        errorType: 'missing',
        message: `–ù–µ–ø–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: ${missingDocs.join(', ')}`,
        severity: 'major'
      });
      
      suggestions.push({
        field: 'documentation',
        issue: '–ù–µ–ø–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è',
        suggestion: '–î–æ–±–∞–≤–∏—Ç—å –≤—Å–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏',
        correctionPrompt: `–î–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏: ${missingDocs.join(', ')}. –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–º–∏–Ω–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).`,
        priority: 'medium'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
    if (documentation.readme && documentation.readme.length < 100) {
      suggestions.push({
        field: 'documentation.readme',
        issue: '–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π README',
        suggestion: '–†–∞—Å—à–∏—Ä–∏—Ç—å README —Ñ–∞–π–ª',
        correctionPrompt: 'README —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ email —à–∞–±–ª–æ–Ω–∞, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é, –≤–∞–∂–Ω—ã–µ –∑–∞–º–µ—á–∞–Ω–∏—è.',
        priority: 'low'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üöÄ –í–ê–õ–ò–î–ê–¶–ò–Ø –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–û–°–¢–ê–í–ö–ï
   */
  private validateDeliveryReadiness(pkg: any): {
    isValid: boolean;
    errors: HandoffValidationError[];
    suggestions: CorrectionSuggestion[];
  } {
    const errors: HandoffValidationError[] = [];
    const suggestions: CorrectionSuggestion[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞
    if (pkg.metadata) {
      if (pkg.metadata.quality_score < AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_QUALITY_SCORE) {
        errors.push({
          field: 'metadata.quality_score',
          errorType: 'invalid_value',
          message: `Quality score ${pkg.metadata.quality_score} –Ω–∏–∂–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏`,
          severity: 'critical'
        });
      }
      
      if (!pkg.metadata.compatibility_report) {
        errors.push({
          field: 'metadata.compatibility_report',
          errorType: 'missing',
          message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏',
          severity: 'major'
        });
      }
      
      if (!pkg.metadata.accessibility_report) {
        errors.push({
          field: 'metadata.accessibility_report',
          errorType: 'missing',
          message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç—á–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏',
          severity: 'major'
        });
      }
    } else {
      errors.push({
        field: 'metadata',
        errorType: 'missing',
        message: '–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç',
        severity: 'critical'
      });
    }
    
    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    const hasHTML = pkg.html_email && pkg.html_email.length > 100;
    const hasAssets = !pkg.assets || pkg.assets.length === 0 || pkg.assets.every((a: any) => a.content || a.size_bytes);
    const hasDocs = pkg.documentation && pkg.documentation.readme;
    const hasPreviews = pkg.preview_files && pkg.preview_files.length > 0;
    
    if (!hasHTML || !hasAssets || !hasDocs || !hasPreviews) {
      errors.push({
        field: 'delivery_readiness',
        errorType: 'invalid_value',
        message: '–ü–∞–∫–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ: –Ω–µ–ø–æ–ª–Ω–∞—è –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏—è',
        severity: 'critical'
      });
      
      suggestions.push({
        field: 'delivery_readiness',
        issue: '–ü–∞–∫–µ—Ç –Ω–µ –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ',
        suggestion: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–∞–∫–µ—Ç–∞',
        correctionPrompt: '–ü–∞–∫–µ—Ç –ù–ï –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã: HTML email, –∞—Å—Å–µ—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è, preview —Ñ–∞–π–ª—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞.',
        priority: 'high'
      });
    }
    
    return {
      isValid: errors.filter(e => e.severity === 'critical').length === 0,
      errors,
      suggestions
    };
  }

  /**
   * üìä –°–û–ó–î–ê–ù–ò–ï –û–¢–ß–ï–¢–ê –û –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –ü–ê–ö–ï–¢–ê
   */
  public generatePackageIntegrityReport(pkg: any): PackageIntegrityReport {
    let totalFiles = 0;
    let totalSizeBytes = 0;
    
    // HTML —Ñ–∞–π–ª
    const htmlSizeBytes = pkg.html_email ? Buffer.byteLength(pkg.html_email, 'utf8') : 0;
    if (htmlSizeBytes > 0) totalFiles++;
    totalSizeBytes += htmlSizeBytes;
    
    // MJML —Ñ–∞–π–ª
    const mjmlSizeBytes = pkg.mjml_source ? Buffer.byteLength(pkg.mjml_source, 'utf8') : 0;
    if (mjmlSizeBytes > 0) totalFiles++;
    totalSizeBytes += mjmlSizeBytes;
    
    // –ê—Å—Å–µ—Ç—ã
    let assetsSizeBytes = 0;
    if (pkg.assets && Array.isArray(pkg.assets)) {
      totalFiles += pkg.assets.length;
      pkg.assets.forEach((asset: any) => {
        assetsSizeBytes += asset.size_bytes || Buffer.byteLength(asset.content || '', 'utf8');
      });
    }
    totalSizeBytes += assetsSizeBytes;
    
    // –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
    let docsSizeBytes = 0;
    if (pkg.documentation) {
      Object.values(pkg.documentation).forEach((doc: any) => {
        if (typeof doc === 'string') {
          docsSizeBytes += Buffer.byteLength(doc, 'utf8');
        }
      });
      totalFiles += Object.keys(pkg.documentation).length;
    }
    totalSizeBytes += docsSizeBytes;
    
    // Preview —Ñ–∞–π–ª—ã
    if (pkg.preview_files && Array.isArray(pkg.preview_files)) {
      totalFiles += pkg.preview_files.length;
      pkg.preview_files.forEach((preview: any) => {
        totalSizeBytes += preview.size_bytes || Buffer.byteLength(preview.content || '', 'utf8');
      });
    }
    
    const totalSizeKB = totalSizeBytes / 1024;
    const maxSizeKB = AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_PACKAGE_SIZE_KB;
    
    return {
      total_files: totalFiles,
      total_size_bytes: totalSizeBytes,
      total_size_kb: Math.round(totalSizeKB * 100) / 100,
      html_size_kb: Math.round(htmlSizeBytes / 1024 * 100) / 100,
      assets_size_kb: Math.round(assetsSizeBytes / 1024 * 100) / 100,
      documentation_size_kb: Math.round(docsSizeBytes / 1024 * 100) / 100,
      compression_ratio: totalSizeBytes > 0 ? Math.round((1 - totalSizeBytes / (totalSizeBytes * 1.5)) * 100) / 100 : 0,
      within_size_limit: totalSizeKB <= maxSizeKB,
      missing_files: [],
      corrupted_files: []
    };
  }

  /**
   * üéØ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò –ö –î–û–°–¢–ê–í–ö–ï
   */
  public isReadyForClientDelivery(pkg: any): {
    ready: boolean;
    blockers: string[];
    recommendations: string[];
    summary: string;
  } {
    const blockers: string[] = [];
    const recommendations: string[] = [];
    
    // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –±–ª–æ–∫–µ—Ä—ã
    if (!pkg.html_email || pkg.html_email.length < 100) {
      blockers.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω HTML email');
    }
    
    const integrityReport = this.generatePackageIntegrityReport(pkg);
    if (!integrityReport.within_size_limit) {
      blockers.push(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞: ${integrityReport.total_size_kb}KB > ${AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_PACKAGE_SIZE_KB}KB`);
    }
    
    if (!pkg.metadata || pkg.metadata.quality_score < AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_QUALITY_SCORE) {
      blockers.push('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π quality score –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏');
    }
    
    if (!pkg.documentation || !pkg.documentation.readme) {
      blockers.push('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –±–∞–∑–æ–≤–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è');
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!pkg.mjml_source) {
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å MJML source –¥–ª—è –±—É–¥—É—â–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π');
    }
    
    if (!pkg.preview_files || pkg.preview_files.length < 2) {
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ preview —Ñ–∞–π–ª–æ–≤ (desktop, mobile, dark mode)');
    }
    
    if (integrityReport.total_size_kb > AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_PACKAGE_SIZE_KB * 0.8) {
      recommendations.push('–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –¥–ª—è –∑–∞–ø–∞—Å–∞');
    }
    
    const ready = blockers.length === 0;
    const summary = ready ? 
      `‚úÖ –ü–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ (${integrityReport.total_files} —Ñ–∞–π–ª–æ–≤, ${integrityReport.total_size_kb}KB)` :
      `‚ùå –ü–∞–∫–µ—Ç –ù–ï –≥–æ—Ç–æ–≤: ${blockers.length} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º`;
    
    return {
      ready,
      blockers,
      recommendations,
      summary
    };
  }
}