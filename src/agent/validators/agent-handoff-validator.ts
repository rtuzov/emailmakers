import { z } from 'zod';
import { ValidationMonitor } from '../utils/validation-monitor-stub';
import { generateTraceId } from '../utils/tracing-utils';
import {
  HandoffDataUnion,
  HandoffValidationResult,
  HandoffValidationError,
  CorrectionSuggestion,
  ContentToDesignHandoffData,
  DesignToQualityHandoffData,
  QualityToDeliveryHandoffData,
  ContentToDesignHandoffDataSchema,
  DesignToQualityHandoffDataSchema,
  QualityToDeliveryHandoffDataSchema,
  AGENT_CONSTANTS
} from '../types/base-agent-types';

/**
 * üéØ UNIVERSAL HANDOFF VALIDATOR
 * 
 * –°–∏—Å—Ç–µ–º–∞ —Å—Ç—Ä–æ–≥–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏
 * –ü—Ä–∏–Ω—Ü–∏–ø: Zero tolerance –∫ –æ—à–∏–±–∫–∞–º, AI –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
 */

export type HandoffType = 'content-to-design' | 'design-to-quality' | 'quality-to-delivery';

export interface AICorrector {
  correctData(
    invalidData: any,
    correctionSuggestions: CorrectionSuggestion[],
    handoffType: HandoffType
  ): Promise<any>;
}

export class HandoffValidator {
  private static instance: HandoffValidator;
  private aiCorrector?: AICorrector;
  private monitor: ValidationMonitor;

  private constructor(aiCorrector?: AICorrector) {
    this.aiCorrector = aiCorrector;
    this.monitor = ValidationMonitor.getInstance();
  }

  /**
   * Singleton instance –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
   */
  public static getInstance(aiCorrector?: AICorrector): HandoffValidator {
    if (!HandoffValidator.instance) {
      HandoffValidator.instance = new HandoffValidator(aiCorrector);
    }
    return HandoffValidator.instance;
  }

  /**
   * üîÑ –í–ê–õ–ò–î–ê–¶–ò–Ø ContentSpecialist ‚Üí DesignSpecialist
   */
  public async validateContentToDesign(
    data: any,
    enableAICorrection: boolean = true
  ): Promise<HandoffValidationResult> {
    const startTime = Date.now();
    let correctionAttempts = 0;
    
    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä—è–º–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const validatedData = ContentToDesignHandoffDataSchema.parse(data);
      
      // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      this.monitor.recordValidation({
        agentId: 'content-specialist',
        agentType: 'content',
        success: true,
        duration: Date.now() - startTime,
        validationType: 'content-to-design',
        correctionAttempts
      });
      
      return {
        isValid: true,
        errors: [],
        warnings: [],
        correctionSuggestions: [],
        validatedData: validatedData as ContentToDesignHandoffData,
        validationDuration: Date.now() - startTime
      };
    } catch (error) {
      if (error instanceof z.ZodError) {
        const validationErrors = this.processZodErrors(error);
        const correctionSuggestions = this.generateContentToDesignCorrections(validationErrors, data);
        
        // –ü–æ–ø—ã—Ç–∫–∞ AI –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞
        if (enableAICorrection && this.aiCorrector) {
          correctionAttempts = 1;
          
          const correctedData = await this.attemptAICorrection(
            data,
            correctionSuggestions,
            'content-to-design'
          );
          
          if (correctedData) {
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            try {
              const validatedCorrectedData = ContentToDesignHandoffDataSchema.parse(correctedData);
              
              // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
              this.monitor.recordValidation({
                agentId: 'content-specialist',
                agentType: 'content',
                success: true,
                duration: Date.now() - startTime,
                validationType: 'content-to-design',
                correctionAttempts
              });
              
              this.monitor.recordCorrection({
                agentId: 'content-specialist',
                success: true,
                attempts: correctionAttempts,
                correctionType: 'content-to-design',
                originalErrors: validationErrors,
                correctedData: validatedCorrectedData
              });
              
              return {
                isValid: true,
                errors: [],
                warnings: ['Data corrected by AI'],
                correctionSuggestions: correctionSuggestions,
                validatedData: validatedCorrectedData as ContentToDesignHandoffData,
                validationDuration: Date.now() - startTime
              };
            } catch (revalidationError) {
              // AI –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ –ø–æ–º–æ–≥–ª–∞ - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ—É–¥–∞—á–∏
              this.monitor.recordCorrection({
                agentId: 'content-specialist',
                success: false,
                attempts: correctionAttempts,
                correctionType: 'content-to-design',
                originalErrors: validationErrors
              });
              
              this.monitor.recordValidation({
                agentId: 'content-specialist',
                agentType: 'content',
                success: false,
                duration: Date.now() - startTime,
                validationType: 'content-to-design',
                errorDetails: validationErrors,
                correctionAttempts
              });
              
              return {
                isValid: false,
                errors: validationErrors,
                warnings: ['AI correction failed'],
                correctionSuggestions: correctionSuggestions,
                validationDuration: Date.now() - startTime
              };
            }
          }
        }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ—É–¥–∞—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏
        this.monitor.recordValidation({
          agentId: 'content-specialist',
          agentType: 'content',
          success: false,
          duration: Date.now() - startTime,
          validationType: 'content-to-design',
          errorDetails: validationErrors,
          correctionAttempts
        });
        
        return {
          isValid: false,
          errors: validationErrors,
          warnings: [],
          correctionSuggestions: correctionSuggestions,
          validationDuration: Date.now() - startTime
        };
      }
      
      throw error;
    }
  }

  /**
   * üîÑ –í–ê–õ–ò–î–ê–¶–ò–Ø DesignSpecialist ‚Üí QualitySpecialist
   */
  public async validateDesignToQuality(
    data: any,
    enableAICorrection: boolean = true
  ): Promise<HandoffValidationResult> {
    const startTime = Date.now();
    
    try {
      const validatedData = DesignToQualityHandoffDataSchema.parse(data);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const additionalValidation = this.performDesignQualityChecks(validatedData as DesignToQualityHandoffData);
      
      if (!additionalValidation.isValid) {
        const correctionSuggestions = this.generateDesignToQualityCorrections(
          additionalValidation.errors, 
          data
        );
        
        if (enableAICorrection && this.aiCorrector) {
          const correctedData = await this.attemptAICorrection(
            data,
            correctionSuggestions,
            'design-to-quality'
          );
          
          if (correctedData) {
            try {
              const validatedCorrectedData = DesignToQualityHandoffDataSchema.parse(correctedData);
              const recheck = this.performDesignQualityChecks(validatedCorrectedData as DesignToQualityHandoffData);
              
              if (recheck.isValid) {
                return {
                  isValid: true,
                  errors: [],
                  warnings: ['Data corrected by AI'],
                  correctionSuggestions: correctionSuggestions,
                  validatedData: validatedCorrectedData as DesignToQualityHandoffData,
                  validationDuration: Date.now() - startTime
                };
              }
            } catch (revalidationError) {
              // Ignore, fall through to error return
            }
          }
        }
        
        return {
          isValid: false,
          errors: additionalValidation.errors,
          warnings: [],
          correctionSuggestions: correctionSuggestions,
          validationDuration: Date.now() - startTime
        };
      }
      
      return {
        isValid: true,
        errors: [],
        warnings: [],
        correctionSuggestions: [],
        validatedData: validatedData as DesignToQualityHandoffData,
        validationDuration: Date.now() - startTime
      };
    } catch (error) {
      if (error instanceof z.ZodError) {
        const validationErrors = this.processZodErrors(error);
        const correctionSuggestions = this.generateDesignToQualityCorrections(validationErrors, data);
        
        if (enableAICorrection && this.aiCorrector) {
          const correctedData = await this.attemptAICorrection(
            data,
            correctionSuggestions,
            'design-to-quality'
          );
          
          if (correctedData) {
            try {
              const validatedCorrectedData = DesignToQualityHandoffDataSchema.parse(correctedData);
              return {
                isValid: true,
                errors: [],
                warnings: ['Data corrected by AI'],
                correctionSuggestions: correctionSuggestions,
                validatedData: validatedCorrectedData as DesignToQualityHandoffData,
                validationDuration: Date.now() - startTime
              };
            } catch (revalidationError) {
              // AI –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ –ø–æ–º–æ–≥–ª–∞
            }
          }
        }
        
        return {
          isValid: false,
          errors: validationErrors,
          warnings: [],
          correctionSuggestions: correctionSuggestions,
          validationDuration: Date.now() - startTime
        };
      }
      
      throw error;
    }
  }

  /**
   * üîÑ –í–ê–õ–ò–î–ê–¶–ò–Ø QualitySpecialist ‚Üí DeliverySpecialist
   */
  public async validateQualityToDelivery(
    data: any,
    enableAICorrection: boolean = true
  ): Promise<HandoffValidationResult> {
    const startTime = Date.now();
    
    try {
      const validatedData = QualityToDeliveryHandoffDataSchema.parse(data);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
      const finalValidation = this.performFinalQualityChecks(validatedData as QualityToDeliveryHandoffData);
      
      if (!finalValidation.isValid) {
        const correctionSuggestions = this.generateQualityToDeliveryCorrections(
          finalValidation.errors,
          data
        );
        
        if (enableAICorrection && this.aiCorrector) {
          const correctedData = await this.attemptAICorrection(
            data,
            correctionSuggestions,
            'quality-to-delivery'
          );
          
          if (correctedData) {
            try {
              const validatedCorrectedData = QualityToDeliveryHandoffDataSchema.parse(correctedData);
              const recheck = this.performFinalQualityChecks(validatedCorrectedData as QualityToDeliveryHandoffData);
              
              if (recheck.isValid) {
                return {
                  isValid: true,
                  errors: [],
                  warnings: ['Data corrected by AI'],
                  correctionSuggestions: correctionSuggestions,
                  validatedData: validatedCorrectedData as QualityToDeliveryHandoffData,
                  validationDuration: Date.now() - startTime
                };
              }
            } catch (revalidationError) {
              // Ignore, fall through to error return
            }
          }
        }
        
        return {
          isValid: false,
          errors: finalValidation.errors,
          warnings: [],
          correctionSuggestions: correctionSuggestions,
          validationDuration: Date.now() - startTime
        };
      }
      
      return {
        isValid: true,
        errors: [],
        warnings: [],
        correctionSuggestions: [],
        validatedData: validatedData as QualityToDeliveryHandoffData,
        validationDuration: Date.now() - startTime
      };
    } catch (error) {
      if (error instanceof z.ZodError) {
        const validationErrors = this.processZodErrors(error);
        const correctionSuggestions = this.generateQualityToDeliveryCorrections(validationErrors, data);
        
        if (enableAICorrection && this.aiCorrector) {
          const correctedData = await this.attemptAICorrection(
            data,
            correctionSuggestions,
            'quality-to-delivery'
          );
          
          if (correctedData) {
            try {
              const validatedCorrectedData = QualityToDeliveryHandoffDataSchema.parse(correctedData);
              return {
                isValid: true,
                errors: [],
                warnings: ['Data corrected by AI'],
                correctionSuggestions: correctionSuggestions,
                validatedData: validatedCorrectedData as QualityToDeliveryHandoffData,
                validationDuration: Date.now() - startTime
              };
            } catch (revalidationError) {
              // AI –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ –ø–æ–º–æ–≥–ª–∞
            }
          }
        }
        
        return {
          isValid: false,
          errors: validationErrors,
          warnings: [],
          correctionSuggestions: correctionSuggestions,
          validationDuration: Date.now() - startTime
        };
      }
      
      throw error;
    }
  }

  /**
   * üîç –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò HANDOFF –î–ê–ù–ù–´–•
   */
  public validateHandoffIntegrity(
    data: any,
    expectedType: HandoffType
  ): HandoffValidationResult {
    const startTime = Date.now();
    const errors: HandoffValidationError[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤
    if (!data.trace_id) {
      errors.push({
        field: 'trace_id',
        errorType: 'missing',
        message: 'trace_id –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è',
        severity: 'critical'
      });
    }
    
    if (!data.timestamp) {
      errors.push({
        field: 'timestamp',
        errorType: 'missing',
        message: 'timestamp –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω',
        severity: 'critical'
      });
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ —Ç–∏–ø—É
    switch (expectedType) {
      case 'content-to-design':
        if (!data.content_package || !data.design_requirements) {
          errors.push({
            field: 'structure',
            errorType: 'missing',
            message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è content-to-design',
            severity: 'critical'
          });
        }
        break;
        
      case 'design-to-quality':
        if (!data.email_package || !data.rendering_metadata) {
          errors.push({
            field: 'structure',
            errorType: 'missing',
            message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è design-to-quality',
            severity: 'critical'
          });
        }
        break;
        
      case 'quality-to-delivery':
        if (!data.quality_package || !data.test_results) {
          errors.push({
            field: 'structure',
            errorType: 'missing',
            message: '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ–∫—Ü–∏–∏ –¥–ª—è quality-to-delivery',
            severity: 'critical'
          });
        }
        break;
    }
    
    return {
      isValid: errors.length === 0,
      errors: errors,
      warnings: [],
      correctionSuggestions: [],
      validationDuration: Date.now() - startTime
    };
  }

  /**
   * üîß PRIVATE HELPER METHODS
   */

  private processZodErrors(error: z.ZodError): HandoffValidationError[] {
    return error.errors.map(issue => ({
      field: issue.path.join('.'),
      errorType: this.mapZodErrorType(issue.code),
      message: issue.message,
      currentValue: 'received' in issue ? issue.received : undefined,
      expectedValue: 'expected' in issue ? issue.expected : undefined,
      severity: this.determineSeverity(issue.path, issue.code)
    }));
  }

  private mapZodErrorType(code: z.ZodIssueCode): HandoffValidationError['errorType'] {
    switch (code) {
      case 'invalid_type':
        return 'invalid_type';
      case 'too_small':
      case 'too_big':
        return 'size_limit';
      case 'invalid_string':
        return 'format_error';
      default:
        return 'invalid_value';
    }
  }

  private determineSeverity(path: (string | number)[], code: z.ZodIssueCode): 'critical' | 'major' | 'minor' {
    const criticalFields = ['trace_id', 'timestamp', 'quality_score', 'html_content'];
    const fieldName = path[path.length - 1]?.toString();
    
    if (criticalFields.includes(fieldName ?? '')) {
      return 'critical';
    }
    
    if (code === 'invalid_type' || code === 'invalid_literal') {
      return 'major';
    }
    
    return 'minor';
  }

  private generateContentToDesignCorrections(
    errors: HandoffValidationError[],
    originalData: any
  ): CorrectionSuggestion[] {
    return errors.map(error => ({
      field: error.field,
      issue: error.message,
      suggestion: this.getContentToDesignSuggestion(error.field, error.errorType),
      correctionPrompt: this.generateContentToDesignPrompt(error.field, error.errorType, originalData),
      priority: error.severity === 'critical' ? 'high' : error.severity === 'major' ? 'medium' : 'low'
    }));
  }

  private generateDesignToQualityCorrections(
    errors: HandoffValidationError[],
    originalData: any
  ): CorrectionSuggestion[] {
    return errors.map(error => ({
      field: error.field,
      issue: error.message,
      suggestion: this.getDesignToQualitySuggestion(error.field, error.errorType),
      correctionPrompt: this.generateDesignToQualityPrompt(error.field, error.errorType, originalData),
      priority: error.severity === 'critical' ? 'high' : error.severity === 'major' ? 'medium' : 'low'
    }));
  }

  private generateQualityToDeliveryCorrections(
    errors: HandoffValidationError[],
    originalData: any
  ): CorrectionSuggestion[] {
    return errors.map(error => ({
      field: error.field,
      issue: error.message,
      suggestion: this.getQualityToDeliverySuggestion(error.field, error.errorType),
      correctionPrompt: this.generateQualityToDeliveryPrompt(error.field, error.errorType, originalData),
      priority: error.severity === 'critical' ? 'high' : error.severity === 'major' ? 'medium' : 'low'
    }));
  }

  private getContentToDesignSuggestion(field: string, errorType: string): string {
    const suggestions: Record<string, string> = {
      'content_package.complete_content.subject': 'Subject –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-100 —Å–∏–º–≤–æ–ª–æ–≤',
      'content_package.complete_content.preheader': 'Preheader –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-150 —Å–∏–º–≤–æ–ª–æ–≤',
      'content_package.complete_content.body': 'Body –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 10-5000 —Å–∏–º–≤–æ–ª–æ–≤',
      'content_package.complete_content.cta': 'CTA –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1-50 —Å–∏–º–≤–æ–ª–æ–≤',
      'design_requirements.template_type': '–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: promotional, informational, newsletter, transactional',
      'campaign_context.urgency_level': '–£—Ä–æ–≤–µ–Ω—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å: low, medium, high, critical'
    };
    
    return suggestions[field] || `–ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–µ ${field} —Å–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º`;
  }

  private getDesignToQualitySuggestion(field: string, errorType: string): string {
    const suggestions: Record<string, string> = {
      'email_package.html_content': 'HTML –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –∏ >100 —Å–∏–º–≤–æ–ª–æ–≤',
      'rendering_metadata.file_size_bytes': '–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â§100KB (102400 –±–∞–π—Ç)',
      'design_artifacts.performance_metrics.total_size_kb': '–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â§100KB',
      'rendering_metadata.render_time_ms': '–í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å ‚â§1000–º—Å'
    };
    
    return suggestions[field] || `–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–ª–µ ${field}`;
  }

  private getQualityToDeliverySuggestion(field: string, errorType: string): string {
    const suggestions: Record<string, string> = {
      'quality_package.quality_score': 'Quality score –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â•70 –±–∞–ª–ª–æ–≤',
      'test_results.email_client_compatibility.compatibility_score': '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å ‚â•95%',
      'accessibility_report.score': 'Accessibility score –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â•80 –±–∞–ª–ª–æ–≤',
      'spam_analysis.spam_score': 'Spam score –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ‚â§3 –±–∞–ª–ª–æ–≤'
    };
    
    return suggestions[field] || `–£–ª—É—á—à–∏—Ç–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ–ª—è ${field}`;
  }

  private generateContentToDesignPrompt(field: string, errorType: string, data: any): string {
    return `–ò–°–ü–†–ê–í–ò–¢–¨ –ö–û–ù–¢–ï–ù–¢: –ü–æ–ª–µ "${field}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. 
–°–æ–∑–¥–∞–π—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è email —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —É—á–µ—Ç–æ–º:
- Subject: 1-100 —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π
- Preheader: 1-150 —Å–∏–º–≤–æ–ª–æ–≤, –¥–æ–ø–æ–ª–Ω—è–µ—Ç subject
- Body: 10-5000 —Å–∏–º–≤–æ–ª–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
- CTA: 1-50 —Å–∏–º–≤–æ–ª–æ–≤, –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
–¢–µ–º–∞: ${data?.campaign_context?.topic || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
–í–µ—Ä–Ω–∏—Ç–µ –¢–û–õ–¨–ö–û –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.`;
  }

  private generateDesignToQualityPrompt(field: string, errorType: string, data: any): string {
    return `–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–¢–¨ –î–ò–ó–ê–ô–ù: –ü–æ–ª–µ "${field}" –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç—ã. 
–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ:
- HTML: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–∞–ª–∏–¥–Ω—ã–π, <100KB
- CSS: –∏–Ω–ª–∞–π–Ω —Å—Ç–∏–ª–∏, –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è
- –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã
- –í—Ä–µ–º—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞: <1000–º—Å
–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∏–∑–∞–π–Ω–∞, –Ω–æ —Å–æ–±–ª—é–¥–∏—Ç–µ –≤—Å–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.
–í–µ—Ä–Ω–∏—Ç–µ –¢–û–õ–¨–ö–û –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.`;
  }

  private generateQualityToDeliveryPrompt(field: string, errorType: string, data: any): string {
    return `–£–õ–£–ß–®–ò–¢–¨ –ö–ê–ß–ï–°–¢–í–û: –ü–æ–ª–µ "${field}" –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –∫–∞—á–µ—Å—Ç–≤–∞.
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- Quality score ‚â•70 –±–∞–ª–ª–æ–≤
- –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å email –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚â•95%
- Accessibility score ‚â•80 –±–∞–ª–ª–æ–≤ (WCAG AA)
- Spam score ‚â§3 –±–∞–ª–ª–æ–≤
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –∏—Ö.
–í–µ—Ä–Ω–∏—Ç–µ –¢–û–õ–¨–ö–û —É–ª—É—á—à–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ.`;
  }

  /**
   * üîÑ –ü–û–ü–´–¢–ö–ê AI –ö–û–†–†–ï–ö–¶–ò–ò –° –£–ú–ù–û–ô –õ–û–ì–ò–ö–û–ô
   */
  private async attemptAICorrection(
    data: any,
    suggestions: CorrectionSuggestion[],
    handoffType: HandoffType
  ): Promise<any> {
    if (!this.aiCorrector) {
      console.warn('‚ö†Ô∏è AICorrector –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return null;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ü–∏—é
    const criticalErrors = suggestions.filter(s => s.priority === 'high').length;
    const totalErrors = suggestions.length;
    
    // –£–º–Ω–∞—è –ª–æ–≥–∏–∫–∞: –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ—Ä—Ä–µ–∫—Ü–∏—é –¥–ª—è –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫
    if (AGENT_CONSTANTS.HANDOFF_VALIDATION.SKIP_CORRECTION_FOR_MINOR_ERRORS) {
      if (criticalErrors === 0 && totalErrors < AGENT_CONSTANTS.HANDOFF_VALIDATION.TOTAL_ERROR_THRESHOLD) {
        console.log(`‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é: ${criticalErrors} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, ${totalErrors} –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫ (–ø–æ—Ä–æ–≥: ${AGENT_CONSTANTS.HANDOFF_VALIDATION.TOTAL_ERROR_THRESHOLD})`);
        return null;
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    const dataSize = JSON.stringify(data).length;
    if (dataSize > AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_CORRECTION_DATA_SIZE) {
      console.warn(`‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏: ${dataSize} –±–∞–π—Ç (–º–∞–∫—Å–∏–º—É–º: ${AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_CORRECTION_DATA_SIZE})`);
      return null;
    }

    console.log(`ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º AI –∫–æ—Ä—Ä–µ–∫—Ü–∏—é: ${criticalErrors} –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö, ${totalErrors} –æ–±—â–∏—Ö –æ—à–∏–±–æ–∫`);
    
    try {
      return await this.aiCorrector.correctData(data, suggestions, handoffType);
    } catch (error) {
      console.error('‚ùå AI –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞:', error.message);
      return null;
    }
  }

  private performDesignQualityChecks(data: DesignToQualityHandoffData): { isValid: boolean; errors: HandoffValidationError[] } {
    const errors: HandoffValidationError[] = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ HTML —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ undefined
    if (!data.email_package?.html_content) {
      errors.push({
        field: 'email_package.html_content',
        errorType: 'missing',
        message: `HTML –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π`,
        currentValue: data.email_package?.html_content || null,
        expectedValue: '–°—Ç—Ä–æ–∫–∞ –¥–ª–∏–Ω–æ–π >100 —Å–∏–º–≤–æ–ª–æ–≤',
        severity: 'critical'
      });
    } else {
      const htmlSize = Buffer.byteLength(data.email_package.html_content, 'utf8');
      if (htmlSize > AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB * 1024) {
        errors.push({
          field: 'email_package.html_content',
          errorType: 'size_limit',
          message: `HTML —Ä–∞–∑–º–µ—Ä ${Math.round(htmlSize/1024)}KB –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç ${AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB}KB`,
          currentValue: htmlSize,
          expectedValue: AGENT_CONSTANTS.HANDOFF_VALIDATION.MAX_FILE_SIZE_KB * 1024,
          severity: 'critical'
        });
      }
    }
    
    return { isValid: errors.length === 0, errors };
  }

  private performFinalQualityChecks(data: QualityToDeliveryHandoffData): { isValid: boolean; errors: HandoffValidationError[] } {
    const errors: HandoffValidationError[] = [];
    
    // –ñ–µ—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ quality score
    if (data.quality_package.quality_score < AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_QUALITY_SCORE) {
      errors.push({
        field: 'quality_package.quality_score',
        errorType: 'invalid_value',
        message: `Quality score ${data.quality_package.quality_score} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ${AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_QUALITY_SCORE}`,
        currentValue: data.quality_package.quality_score,
        expectedValue: AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_QUALITY_SCORE,
        severity: 'critical'
      });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ email –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (data.test_results.email_client_compatibility.compatibility_score < AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_COMPATIBILITY_SCORE) {
      errors.push({
        field: 'test_results.email_client_compatibility.compatibility_score',
        errorType: 'invalid_value',
        message: `–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å ${data.test_results.email_client_compatibility.compatibility_score}% –º–µ–Ω—å—à–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö ${AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_COMPATIBILITY_SCORE}%`,
        currentValue: data.test_results.email_client_compatibility.compatibility_score,
        expectedValue: AGENT_CONSTANTS.HANDOFF_VALIDATION.MIN_COMPATIBILITY_SCORE,
        severity: 'critical'
      });
    }
    
    return { isValid: errors.length === 0, errors };
  }
}

/**
 * üîß UTILITY FUNCTIONS
 */

export function createTimestamp(): string {
  return new Date().toISOString();
}

export function calculateDataSize(data: any): number {
  return Buffer.byteLength(JSON.stringify(data), 'utf8');
}