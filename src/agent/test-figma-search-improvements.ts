#!/usr/bin/env tsx

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π –≤ –ø–æ–∏—Å–∫–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Figma –∞—Å—Å–µ—Ç–æ–≤
 */

import { getLocalFigmaAssets } from './tools/figma-local-processor';

async function testFigmaSearchImprovements() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏–π –ø–æ–∏—Å–∫–∞ Figma –∞—Å—Å–µ—Ç–æ–≤\n');

  // –¢–µ—Å—Ç 1: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å
  console.log('='.repeat(80));
  console.log('üîç –¢–ï–°–¢ 1: –ò—Å—Ö–æ–¥–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å');
  console.log('='.repeat(80));
  
  const test1Params = {
    tags: ['–∑–∞—è—Ü', '—Å—á–∞—Å—Ç–ª–∏–≤', '—Ç—É—Ä—Ü–∏—è', '–∞–∫—Ü–∏–∏'],
    context: {
      campaign_type: 'promotional' as const,
      emotional_tone: 'positive' as const,
      target_count: 2,
      diversity_mode: true,
      preferred_emotion: 'happy' as const,
      airline: 'Turkish Airlines',
      use_local_only: true
    }
  };

  try {
    const result1 = await getLocalFigmaAssets(test1Params);
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê 1:');
    console.log('Success:', result1.success);
    if (result1.success && result1.data) {
      console.log('–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', result1.data.paths?.length || 0);
      result1.data.paths?.forEach((path: string, index: number) => {
        const fileName = path.split('/').pop();
        console.log(`  ${index + 1}. ${fileName}`);
      });
    } else {
      console.log('Error:', result1.error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 1:', error);
  }

  // –¢–µ—Å—Ç 2: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –∑–∞–π—Ü–µ–≤ —Å —ç–º–æ—Ü–∏—è–º–∏
  console.log('\n' + '='.repeat(80));
  console.log('üîç –¢–ï–°–¢ 2: –ü–æ–∏—Å–∫ –∑–∞–π—Ü–µ–≤ —Å —ç–º–æ—Ü–∏—è–º–∏ (–±–µ–∑ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏)');
  console.log('='.repeat(80));
  
  const test2Params = {
    tags: ['–∑–∞—è—Ü', '—Å—á–∞—Å—Ç–ª–∏–≤', '—Ä–∞–¥–æ—Å—Ç—å'],
    context: {
      campaign_type: 'promotional' as const,
      emotional_tone: 'positive' as const,
      target_count: 3,
      diversity_mode: true,
      preferred_emotion: 'happy' as const,
      use_local_only: true
    }
  };

  try {
    const result2 = await getLocalFigmaAssets(test2Params);
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê 2:');
    console.log('Success:', result2.success);
    if (result2.success && result2.data) {
      console.log('–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', result2.data.paths?.length || 0);
      result2.data.paths?.forEach((path: string, index: number) => {
        const fileName = path.split('/').pop();
        console.log(`  ${index + 1}. ${fileName}`);
      });
    } else {
      console.log('Error:', result2.error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 2:', error);
  }

  // –¢–µ—Å—Ç 3: –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π
  console.log('\n' + '='.repeat(80));
  console.log('üîç –¢–ï–°–¢ 3: –ü–æ–∏—Å–∫ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π');
  console.log('='.repeat(80));
  
  const test3Params = {
    tags: ['—Ç—É—Ä—Ü–∏—è', '–∞–≤–∏–∞–ø–µ—Ä–µ–≤–æ–∑–∫–∏', '–ª–æ–≥–æ—Ç–∏–ø'],
    context: {
      campaign_type: 'promotional' as const,
      target_count: 2,
      diversity_mode: false,
      airline: 'Turkish Airlines',
      use_local_only: true
    }
  };

  try {
    const result3 = await getLocalFigmaAssets(test3Params);
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê 3:');
    console.log('Success:', result3.success);
    if (result3.success && result3.data) {
      console.log('–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', result3.data.paths?.length || 0);
      result3.data.paths?.forEach((path: string, index: number) => {
        const fileName = path.split('/').pop();
        console.log(`  ${index + 1}. ${fileName}`);
      });
    } else {
      console.log('Error:', result3.error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 3:', error);
  }

  // –¢–µ—Å—Ç 4: –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ —Å fallback
  console.log('\n' + '='.repeat(80));
  console.log('üîç –¢–ï–°–¢ 4: –®–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫ —Å fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–º');
  console.log('='.repeat(80));
  
  const test4Params = {
    tags: ['–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π-—Ç–µ–≥', '–∑–∞—è—Ü'],
    context: {
      target_count: 2,
      diversity_mode: true,
      use_local_only: true
    }
  };

  try {
    const result4 = await getLocalFigmaAssets(test4Params);
    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ê 4:');
    console.log('Success:', result4.success);
    if (result4.success && result4.data) {
      console.log('–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤:', result4.data.paths?.length || 0);
      result4.data.paths?.forEach((path: string, index: number) => {
        const fileName = path.split('/').pop();
        console.log(`  ${index + 1}. ${fileName}`);
      });
    } else {
      console.log('Error:', result4.error);
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ 4:', error);
  }

  console.log('\n' + '='.repeat(80));
  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
  console.log('='.repeat(80));
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testFigmaSearchImprovements().catch(console.error);
}

export { testFigmaSearchImprovements }; 