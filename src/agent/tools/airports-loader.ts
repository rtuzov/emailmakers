/**
 * Airport Data Loader
 * Loads airport data from CSV and provides airport to city code mapping
 */

import fs from 'fs';
import path from 'path';

interface AirportData {
  code: string;
  city_code: string;
  country_code: string;
  time_zone: string;
  iata_type: string;
  flightable: string;
  name: string;
  name_en: string;
  lat: string;
  lon: string;
}

interface DestinationInfo {
  originalCode: string;
  finalCode: string;
  countryCode: string;
  isInternational: boolean;
  wasConverted: boolean;
}

let airportsData: Map<string, AirportData> | null = null;

// Russian city names to IATA codes mapping
const RUSSIAN_CITY_TO_IATA: Record<string, string> = {
  // Major Russian cities
  '–º–æ—Å–∫–≤–∞': 'MOW',
  '—Å–∞–Ω–∫—Ç-–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'LED',
  '–ø–µ—Ç–µ—Ä–±—É—Ä–≥': 'LED',
  '—Å–ø–±': 'LED',
  '–ø–∏—Ç–µ—Ä': 'LED',
  '—Å–æ—á–∏': 'AER',
  '–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥': 'SVX',
  '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫': 'OVB',
  '–∫–∞–∑–∞–Ω—å': 'KZN',
  '–Ω–∏–∂–Ω–∏–π –Ω–æ–≤–≥–æ—Ä–æ–¥': 'GOJ',
  '—á–µ–ª—è–±–∏–Ω—Å–∫': 'CEK',
  '–æ–º—Å–∫': 'OMS',
  '—Å–∞–º–∞—Ä–∞': 'KUF',
  '—Ä–æ—Å—Ç–æ–≤-–Ω–∞-–¥–æ–Ω—É': 'ROV',
  '—Ä–æ—Å—Ç–æ–≤': 'ROV',
  '—É—Ñ–∞': 'UFA',
  '–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫': 'KJA',
  '–≤–æ—Ä–æ–Ω–µ–∂': 'VOZ',
  '–ø–µ—Ä–º—å': 'PEE',
  '–≤–æ–ª–≥–æ–≥—Ä–∞–¥': 'VOG',
  '–∫—Ä–∞—Å–Ω–æ–¥–∞—Ä': 'KRR',
  '—Å–∞—Ä–∞—Ç–æ–≤': 'RTW',
  '—Ç—é–º–µ–Ω—å': 'TJM',
  '–∏—Ä–∫—É—Ç—Å–∫': 'IKT',
  '—Ö–∞–±–∞—Ä–æ–≤—Å–∫': 'KHV',
  '–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫': 'VVO',
  '–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥': 'KGD',
  '–º—É—Ä–º–∞–Ω—Å–∫': 'MMK',
  '–∞—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫': 'ARH',
  '—Å—ã–∫—Ç—ã–≤–∫–∞—Ä': 'SCW',
  '–∫–∏—Ä–æ–≤': 'KVX',
  '–∏–∂–µ–≤—Å–∫': 'IJK',
  '–æ—Ä–µ–Ω–±—É—Ä–≥': 'REN',
  '–ø–µ–Ω–∑–∞': 'PEZ',
  '—É–ª—å—è–Ω–æ–≤—Å–∫': 'ULY',
  '–∫—É—Ä—Å–∫': 'URS',
  '–±–µ–ª–≥–æ—Ä–æ–¥': 'EGO',
  '—Ç—É–ª–∞': 'TYA',
  '—Ä—è–∑–∞–Ω—å': 'RZN',
  '–ª–∏–ø–µ—Ü–∫': 'LPK',
  '—Ç–∞–º–±–æ–≤': 'TBW',
  '–±—Ä—è–Ω—Å–∫': 'BZK',
  '–∫–∞–ª—É–≥–∞': 'KLF',
  '–æ—Ä–µ–ª': 'OEL',
  '—Å–º–æ–ª–µ–Ω—Å–∫': 'LNX',
  '—Ç–≤–µ—Ä—å': 'KLD',
  '—è—Ä–æ—Å–ª–∞–≤–ª—å': 'IAR',
  '–∫–æ—Å—Ç—Ä–æ–º–∞': 'KMW',
  '–∏–≤–∞–Ω–æ–≤–æ': 'IWA',
  '–≤–ª–∞–¥–∏–º–∏—Ä': 'VLM',
  
  // International destinations
  '–ø–∞—Ä–∏–∂': 'PAR',
  '–ª–æ–Ω–¥–æ–Ω': 'LON',
  '—Ä–∏–º': 'ROM',
  '–±–µ—Ä–ª–∏–Ω': 'BER',
  '–º–∞–¥—Ä–∏–¥': 'MAD',
  '–±–∞—Ä—Å–µ–ª–æ–Ω–∞': 'BCN',
  '–∞–º—Å—Ç–µ—Ä–¥–∞–º': 'AMS',
  '–≤–µ–Ω–∞': 'VIE',
  '–ø—Ä–∞–≥–∞': 'PRG',
  '–≤–∞—Ä—à–∞–≤–∞': 'WAW',
  '—Å—Ç–æ–∫–≥–æ–ª—å–º': 'STO',
  '—Ö–µ–ª—å—Å–∏–Ω–∫–∏': 'HEL',
  '–∫–æ–ø–µ–Ω–≥–∞–≥–µ–Ω': 'CPH',
  '–æ—Å–ª–æ': 'OSL',
  '—Ü—é—Ä–∏—Ö': 'ZUR',
  '–∂–µ–Ω–µ–≤–∞': 'GVA',
  '–º–∏–ª–∞–Ω': 'MIL',
  '–≤–µ–Ω–µ—Ü–∏—è': 'VCE',
  '–Ω–µ–∞–ø–æ–ª—å': 'NAP',
  '–∞—Ñ–∏–Ω—ã': 'ATH',
  '—Å—Ç–∞–º–±—É–ª': 'IST',
  '–∞–Ω–∫–∞—Ä–∞': 'ANK',
  '–∞–Ω—Ç–∞–ª—å—è': 'AYT',
  '–¥—É–±–∞–π': 'DXB',
  '–∞–±—É-–¥–∞–±–∏': 'AUH',
  '–¥–æ—Ö–∞': 'DOH',
  '—ç—Ä-—Ä–∏—è–¥': 'RUH',
  '–∫—É–≤–µ–π—Ç': 'KWI',
  '—Ç–µ–ª—å-–∞–≤–∏–≤': 'TLV',
  '–∫–∞–∏—Ä': 'CAI',
  '–∫–∞—Å–∞–±–ª–∞–Ω–∫–∞': 'CAS',
  '—Ç—É–Ω–∏—Å': 'TUN',
  '–∞–ª–∂–∏—Ä': 'ALG',
  '–Ω—å—é-–π–æ—Ä–∫': 'NYC',
  '–ª–æ—Å-–∞–Ω–¥–∂–µ–ª–µ—Å': 'LAX',
  '—á–∏–∫–∞–≥–æ': 'CHI',
  '–º–∞–π–∞–º–∏': 'MIA',
  '—Ç–æ—Ä–æ–Ω—Ç–æ': 'YTO',
  '–≤–∞–Ω–∫—É–≤–µ—Ä': 'YVR',
  '—Ç–æ–∫–∏–æ': 'TYO',
  '–æ—Å–∞–∫–∞': 'OSA',
  '—Å–µ—É–ª': 'SEL',
  '–ø–µ–∫–∏–Ω': 'BJS',
  '—à–∞–Ω—Ö–∞–π': 'SHA',
  '–≥–æ–Ω–∫–æ–Ω–≥': 'HKG',
  '—Å–∏–Ω–≥–∞–ø—É—Ä': 'SIN',
  '–∫—É–∞–ª–∞-–ª—É–º–ø—É—Ä': 'KUL',
  '–¥–∂–∞–∫–∞—Ä—Ç–∞': 'JKT',
  '–±–∞–Ω–≥–∫–æ–∫': 'BKK',
  '—Ö–æ—à–∏–º–∏–Ω': 'SGN',
  '—Ö–∞–Ω–æ–π': 'HAN',
  '–º–∞–Ω–∏–ª–∞': 'MNL',
  '–¥–µ–ª–∏': 'DEL',
  '–º—É–º–±–∞–∏': 'BOM',
  '–±–∞–Ω–≥–∞–ª–æ—Ä': 'BLR',
  '–∫–æ–ª–æ–º–±–æ': 'CMB',
  '–∫–∞—Ç–º–∞–Ω–¥—É': 'KTM',
  '—Ç–∞—à–∫–µ–Ω—Ç': 'TAS',
  '–∞–ª–º–∞—Ç—ã': 'ALA',
  '–∞—Å—Ç–∞–Ω–∞': 'NUR',
  '–±–∏—à–∫–µ–∫': 'FRU',
  '–¥—É—à–∞–Ω–±–µ': 'DYU',
  '–∞—à—Ö–∞–±–∞–¥': 'ASB',
  '–±–∞–∫—É': 'BAK',
  '–µ—Ä–µ–≤–∞–Ω': 'EVN',
  '—Ç–±–∏–ª–∏—Å–∏': 'TBS',
  '–º–∏–Ω—Å–∫': 'MSQ',
  '–∫–∏–µ–≤': 'KBP',
  '–æ–¥–µ—Å—Å–∞': 'ODS',
  '–ª—å–≤–æ–≤': 'LWO',
  '–∫–∏—à–∏–Ω–µ–≤': 'KIV',
  '—Ä–∏–≥–∞': 'RIX',
  '—Ç–∞–ª–ª–∏–Ω': 'TLL',
  '–≤–∏–ª—å–Ω—é—Å': 'VNO',
  '–∫—Ä–∞–∫–æ–≤': 'KRK',
  '–≥–¥–∞–Ω—å—Å–∫': 'GDN',
  '–±—É–¥–∞–ø–µ—à—Ç': 'BUD',
  '–±—É—Ö–∞—Ä–µ—Å—Ç': 'BUH',
  '—Å–æ—Ñ–∏—è': 'SOF',
  '–±–µ–ª–≥—Ä–∞–¥': 'BEG',
  '–∑–∞–≥—Ä–µ–±': 'ZAG',
  '–ª—é–±–ª—è–Ω–∞': 'LJU',
  '—Å–∫–æ–ø—å–µ': 'SKP',
  '–ø–æ–¥–≥–æ—Ä–∏—Ü–∞': 'TGD',
  '—Å–∞—Ä–∞–µ–≤–æ': 'SJJ',
  '—Ç–∏—Ä–∞–Ω–∞': 'TIA',
  
  // Popular resort destinations
  '–±–∞–ª–∏': 'DPS',
  '–ø—Ö—É–∫–µ—Ç': 'HKT',
  '—Å–∞–º—É–∏': 'USM',
  '–ø–∞—Ç—Ç–∞–π—è': 'BKK', // –ü–∞—Ç—Ç–∞–π—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ë–∞–Ω–≥–∫–æ–∫
  '–≥–æ–∞': 'GOI',
  '–º–∞–ª—å–¥–∏–≤—ã': 'MLE',
  '—Å–µ–π—à–µ–ª—ã': 'SEZ',
  '–º–∞–≤—Ä–∏–∫–∏–π': 'MRU',
  '–∑–∞–Ω–∑–∏–±–∞—Ä': 'ZNZ',
  '–∫–∏–ø—Ä': 'LCA',
  '–∫—Ä–∏—Ç': 'HER',
  '—Ä–æ–¥–æ—Å': 'RHO',
  '–∫–æ—Ä—Ñ—É': 'CFU',
  '—Å–∞–Ω—Ç–æ—Ä–∏–Ω–∏': 'JTR',
  '–º–∏–∫–æ–Ω–æ—Å': 'JMK',
  '–∏–±–∏—Ü–∞': 'IBZ',
  '–º–∞–π–æ—Ä–∫–∞': 'PMI',
  '—Ç–µ–Ω–µ—Ä–∏—Ñ–µ': 'TFS',
  '–ª–∞—Å-–ø–∞–ª—å–º–∞—Å': 'LPA',
  '–º–∞–ª—å—Ç–∞': 'MLA',
  '–Ω–∏—Ü—Ü–∞': 'NCE',
  '–∫–∞–Ω–Ω—ã': 'NCE', // –ö–∞–Ω–Ω—ã –∏—Å–ø–æ–ª—å–∑—É—é—Ç –ù–∏—Ü—Ü—É
  '–º–æ–Ω–∞–∫–æ': 'NCE', // –ú–æ–Ω–∞–∫–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ù–∏—Ü—Ü—É
};

/**
 * Load airports data from CSV file
 */
function loadAirportsData(): Map<string, AirportData> {
  if (airportsData) {
    return airportsData;
  }

  const csvPath = path.resolve(process.cwd(), 'airports.csv');
  
  try {
    const csvContent = fs.readFileSync(csvPath, 'utf-8');
    const lines = csvContent.split('\n');
    
    // Skip header line
    const dataLines = lines.slice(1).filter(line => line.trim());
    
    airportsData = new Map();
    
    for (const line of dataLines) {
      // Split by semicolon as per CSV format
      const columns = line.split(';');
      
      if (columns.length >= 10) {
        const airport: AirportData = {
          code: columns[0].trim(),
          city_code: columns[1].trim(),
          country_code: columns[2].trim(),
          time_zone: columns[3].trim(),
          iata_type: columns[4].trim(),
          flightable: columns[5].trim(),
          name: columns[6].trim(),
          name_en: columns[7].trim(),
          lat: columns[8].trim(),
          lon: columns[9].trim()
        };
        
        airportsData.set(airport.code, airport);
      }
    }
    
    console.log(`‚úàÔ∏è Loaded ${airportsData.size} airports from CSV`);
    return airportsData;
    
  } catch (error) {
    console.error('‚ùå Failed to load airports.csv:', error);
    throw error instanceof Error ? error : new Error(String(error));
  }
}

/**
 * Convert Russian city name to IATA code
 */
export function convertRussianCityToIATA(cityName: string): string {
  const normalizedName = cityName.toLowerCase().trim();
  
  // Direct mapping lookup
  const iataCode = RUSSIAN_CITY_TO_IATA[normalizedName];
  if (iataCode) {
    console.log(`üåç Russian city ‚Üí IATA conversion: ${cityName} ‚Üí ${iataCode}`);
    return iataCode;
  }
  
  // Try partial matches for compound city names
  for (const [russianCity, iata] of Object.entries(RUSSIAN_CITY_TO_IATA)) {
    if (normalizedName.includes(russianCity) || russianCity.includes(normalizedName)) {
      console.log(`üåç Partial Russian city ‚Üí IATA conversion: ${cityName} ‚Üí ${iata} (matched: ${russianCity})`);
      return iata;
    }
  }
  
  // If no mapping found, return original (it might be already an IATA code)
  return cityName;
}

/**
 * Convert airport code to city code using CSV data
 */
export function convertAirportToCity(airportCode: string): string {
  const airports = loadAirportsData();
  const airport = airports.get(airportCode);
  
  if (airport && airport.city_code) {
    return airport.city_code;
  }
  
  // Return original code if not found
  return airportCode;
}

/**
 * Get comprehensive destination information with Russian city name support
 */
export function getDestinationInfo(destination: string): DestinationInfo {
  const originalCode = destination;
  
  // First try to convert Russian city name to IATA
  const convertedFromRussian = convertRussianCityToIATA(destination);
  
  // If conversion happened, use the IATA code
  let finalCode = convertedFromRussian;
  let wasConverted = convertedFromRussian !== destination;
  
  // Then try to get airport info from CSV
  const airports = loadAirportsData();
  const airport = airports.get(convertedFromRussian);
  
  if (airport) {
    // If we found airport data, use city_code if available
    if (airport.city_code && airport.city_code !== convertedFromRussian) {
      finalCode = airport.city_code;
      wasConverted = true;
      console.log(`üè¢ Airport ‚Üí City conversion: ${convertedFromRussian} ‚Üí ${airport.city_code}`);
    }
    
    const countryCode = airport.country_code;
    const isRussianDestination = countryCode === 'RU';
    
    return {
      originalCode,
      finalCode,
      countryCode,
      isInternational: !isRussianDestination,
      wasConverted
    };
  }
  
  // If no airport data found, assume it's international if we converted from Russian
  return {
    originalCode,
    finalCode,
    countryCode: wasConverted ? 'UNKNOWN' : 'UNKNOWN',
    isInternational: wasConverted,
    wasConverted
  };
}

/**
 * Get airport details by code
 */
export function getAirportDetails(airportCode: string): AirportData | null {
  const airports = loadAirportsData();
  return airports.get(airportCode) || null;
}

/**
 * Search airports by name (Russian or English)
 */
export function searchAirportsByName(searchTerm: string): AirportData[] {
  const airports = loadAirportsData();
  const results: AirportData[] = [];
  const searchLower = searchTerm.toLowerCase();
  
  for (const airport of airports.values()) {
    if (airport.name.toLowerCase().includes(searchLower) || 
        airport.name_en.toLowerCase().includes(searchLower)) {
      results.push(airport);
    }
  }
  
  return results;
}

/**
 * Get all airports in a country
 */
export function getAirportsByCountry(countryCode: string): AirportData[] {
  const airports = loadAirportsData();
  const results: AirportData[] = [];
  
  for (const airport of airports.values()) {
    if (airport.country_code === countryCode) {
      results.push(airport);
    }
  }
  
  return results;
}