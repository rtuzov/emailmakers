/**
 * üìù CONTENT CREATION TOOL
 * 
 * –°–æ–∑–¥–∞–Ω–∏–µ email –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –ø–æ–º–æ—â—å—é –ò–ò
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏, —Ç–µ–∫—Å—Ç—ã, CTA –∏ –ø–æ–ª–Ω—ã–µ email –∫–∞–º–ø–∞–Ω–∏–∏
 */

import { z } from 'zod';
import { executeToolWithTrace } from '../../utils/tracing-utils';

// –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ü–†–û–°–¢–ê–Ø –°–•–ï–ú–ê –î–õ–Ø OPENAI –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
export const contentCreateSchema = z.object({
  topic: z.string().describe('Main topic for email content'),
  content_type: z.enum(['email', 'subject_line', 'preheader', 'body_text', 'complete_campaign']).describe('Type of content to generate'),
  tone: z.enum(['professional', 'friendly', 'urgent', 'casual', 'luxury', 'family']).describe('Content tone'),
  language: z.enum(['ru', 'en']).describe('Content language'),
  target_audience: z.string().describe('Target audience for personalization'),
  urgency_level: z.enum(['low', 'medium', 'high']).describe('Campaign urgency level'),
  include_personalization: z.boolean().describe('Include personalization elements'),
  include_cta: z.boolean().describe('Include call-to-action'),
  content_length: z.enum(['short', 'medium', 'long']).describe('Desired content length'),
  generation_quality: z.enum(['fast', 'balanced', 'quality']).describe('Generation quality vs speed')
});

export type ContentCreateParams = z.infer<typeof contentCreateSchema>;

export interface ContentCreateResult {
  success: boolean;
  content_data: {
    generated_content: string;
    content_type: string;
    language: string;
    tone: string;
    word_count: number;
    estimated_read_time: string;
    seo_keywords?: string[];
    engagement_score?: number;
    personalization_tokens?: string[];
  };
  analytics: {
    generation_time_ms: number;
    ai_model_used: string;
    confidence_score: number;
    content_quality_score: number;
  };
  recommendations?: {
    variations?: string[];
    optimization_tips?: string[];
    a_b_test_suggestions?: string[];
  };
  error?: string;
}

export async function contentCreate(_params: ContentCreateParams): Promise<ContentCreateResult> {
  throw new Error('content-create simple tool disabled by policy.');
}

function extractContentData(result: any, contentType: string): any {
  const data = result.data || {};
  
  // If this is a content generation request, return placeholder content
  // The actual content will be generated by OpenAI Agents SDK
  if (data.content_generation_request) {
    const _request // Currently unused = data.content_generation_request;
    return {
      complete_content: {
        subject: null, // Will be generated by OpenAI SDK
        preheader: null, // Will be generated by OpenAI SDK
        body: null, // Will be generated by OpenAI SDK
        cta: null // Will be generated by OpenAI SDK
      }
    };
  }
  
  // Handle email content type (complete email content)
  if (contentType === 'email' || contentType === 'complete_campaign') {
    return {
      complete_content: {
        subject: data.subject || data.content?.subject || null,
        preheader: data.preheader || data.content?.preheader || null,
        body: data.body || data.email_body || data.content?.body || null,
        cta: data.cta || data.cta_text || data.content?.cta || null
      }
    };
  }

  // Handle specific content types
  switch (contentType) {
    case 'subject_line':
      if (!data.subject) {
        console.error('‚ùå ContentCreate: Subject –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è subject_line');
        throw new Error('Subject –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è subject_line');
      }
      return { subject: data.subject };
    case 'preheader':
      if (!data.preheader) {
        console.error('‚ùå ContentCreate: Preheader –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è preheader');
        throw new Error('Preheader –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è preheader');
      }
      return { preheader: data.preheader };
    case 'body_text':
      const body = data.body || data.email_body;
      if (!body) {
        console.error('‚ùå ContentCreate: Body –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è body_text');
        throw new Error('Body –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è body_text');
      }
      return { email_body: body };
    case 'call_to_action':
      const cta = data.cta || data.cta_text;
      if (!cta) {
        console.error('‚ùå ContentCreate: CTA –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è call_to_action');
        throw new Error('CTA –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è call_to_action');
      }
      return { cta_text: cta };
    default:
      console.error(`‚ùå ContentCreate: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π content_type: ${contentType}`);
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π content_type: ${contentType}`);
  }
}

function analyzeContentStructure(contentData: any, params: ContentCreateParams): any {
  const allText = JSON.stringify(contentData).toLowerCase();
  const wordCount = allText.split(/\s+/).length;
  
  // Analyze content characteristics
  const hasPersonalization = params.include_personalization && /–≤—ã|–≤–∞—à|–¥–ª—è –≤–∞—Å|–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ/i.test(allText);
  const includesPricing = /—Ä—É–±|‚ÇΩ|—Ü–µ–Ω–∞|—Å—Ç–æ–∏–º–æ—Å—Ç—å|–æ—Ç \d+/i.test(allText);
  
  // Find urgency indicators
  const urgencyIndicators: string[] = [];
  if (/—Å–∫–∏–¥–∫–∞|–∞–∫—Ü–∏—è|–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è|—É—Å–ø–µ–π—Ç–µ|—Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è/i.test(allText)) {
    urgencyIndicators.push('limited_time_offer');
  }
  if (/–æ—Å—Ç–∞–ª–æ—Å—å|–ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—Ç–∞|–∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è/i.test(allText)) {
    urgencyIndicators.push('scarcity');
  }
  if (/—Å–ø–µ—à–∏—Ç–µ|–±—ã—Å—Ç—Ä–æ|–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ/i.test(allText)) {
    urgencyIndicators.push('action_urgency');
  }

  // Analyze CTA strength
  let ctaStrength: 'weak' | 'medium' | 'strong' = 'weak';
  const ctaText = (contentData.cta_text || contentData.complete_content?.cta);
  if (!ctaText) {
    console.error('‚ùå ContentCreate: CTA —Ç–µ–∫—Å—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–ª—ã');
    throw new Error('CTA —Ç–µ–∫—Å—Ç –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–∏–ª—ã –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é');
  }
  const ctaLowerCase = ctaText.toLowerCase();
  
  if (/–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å|–∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç|–ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É/i.test(ctaLowerCase)) {
    ctaStrength = 'strong';
  } else if (/–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å|–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å|—É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ/i.test(ctaLowerCase)) {
    ctaStrength = 'medium';
  }

  // Generate recommendations
  const recommendations: string[] = [];
  
  if (!hasPersonalization && params.include_personalization) {
    recommendations.push('Consider adding personalization elements');
  }
  
  if (!includesPricing && params.urgency_level === 'high') {
    recommendations.push('Include pricing information for better conversion');
  }
  
  if (urgencyIndicators.length === 0 && params.urgency_level === 'high') {
    recommendations.push('Add urgency indicators for high-priority campaigns');
  }
  
  if (ctaStrength === 'weak') {
    recommendations.push('Strengthen call-to-action with action verbs');
  }

  if (wordCount < 50) {
    recommendations.push('Consider expanding content for better engagement');
  }

  return {
    content_type: params.content_type,
    tone: params.tone,
    language: params.language,
    word_count: wordCount,
    generation_confidence: Math.min(95, 70 + urgencyIndicators.length * 5 + (ctaStrength === 'strong' ? 10 : 0)),
    content_structure: {
      has_personalization: hasPersonalization,
      includes_pricing: includesPricing,
      urgency_indicators: urgencyIndicators,
      call_to_action_strength: ctaStrength
    },
    recommendations
  };
}

// ========== MISSING FUNCTIONS ==========

async function generateContentBasedOnParams(params: ContentCreateParams): Promise<string> {
  const { topic, content_type, tone, language, target_audience, urgency_level } = params;
  
  // Content generation is now handled by OpenAI Agents SDK
  // This function returns empty structure for compatibility
  
  if (content_type === 'email' || content_type === 'complete_campaign') {
    // Return empty structure - content will be generated by agents
    const emptyContent = {
      complete_content: {
        subject: null, // To be generated by OpenAI SDK
        preheader: null, // To be generated by OpenAI SDK
        body: null, // To be generated by OpenAI SDK
        cta: null // To be generated by OpenAI SDK
      }
    };
    
    return JSON.stringify(emptyContent);
  } else {
    // Return null for other content types - to be generated by OpenAI SDK
    return JSON.stringify({ content: null });
  }
}

async function analyzeGeneratedContent(content: string, params: ContentCreateParams): Promise<{
  generation_time_ms: number;
  ai_model_used: string;
  confidence_score: number;
  content_quality_score: number;
  engagement_score: number;
}> {
  const wordCount = content.split(' ').length;
  
  return {
    generation_time_ms: 250 + Math.random() * 500, // Simulate realistic generation time
    ai_model_used: 'content-generator-v1',
    confidence_score: Math.min(95, 80 + (wordCount > 50 ? 10 : 0) + (params.tone === 'professional' ? 5 : 0)),
    content_quality_score: Math.min(90, 75 + (wordCount > 100 ? 15 : 0)),
    engagement_score: Math.min(85, 70 + (params.urgency_level === 'high' ? 10 : 0) + (params.include_cta ? 5 : 0))
  };
}

async function generateRecommendations(_content: string, params: ContentCreateParams): Promise<{
  variations?: string[];
  optimization_tips?: string[];
  a_b_test_suggestions?: string[];
}> {
  const recommendations: {
    variations?: string[];
    optimization_tips?: string[];
    a_b_test_suggestions?: string[];
  } = {};
  
  if (params.content_type === 'email') {
    recommendations.variations = [
      '–í–µ—Ä—Å–∏—è —Å –±–æ–ª–µ–µ —è—Ä–∫–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º',
      '–í–µ—Ä—Å–∏—è —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏',
      '–í–µ—Ä—Å–∏—è —Å —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞–º–∏'
    ];
    
    recommendations.optimization_tips = [
      '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ç–µ–º—É –ø–∏—Å—å–º–∞',
      '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ–º–æ—Å—Ç–∏',
      '–°–æ–∫—Ä–∞—Ç–∏—Ç–µ –¥–ª–∏–Ω—É –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞'
    ];
    
    recommendations.a_b_test_suggestions = [
      '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ CTA –∫–Ω–æ–ø–∫–∏',
      '–°—Ä–∞–≤–Ω–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫—É—é –∏ –¥–ª–∏–Ω–Ω—É—é –≤–µ—Ä—Å–∏–∏',
      '–¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏'
    ];
  }
  
  return recommendations;
}

function calculateReadTime(content: string): string {
  const wordCount = content.split(' ').length;
  const readingTime = Math.ceil(wordCount / 200); // 200 words per minute
  return `${readingTime} –º–∏–Ω`;
}

function extractKeywords(content: string): string[] {
  const text = content.toLowerCase();
  const keywords: string[] = [];
  
  // Travel-related keywords
  if (text.includes('—Ñ—Ä–∞–Ω—Ü–∏—è') || text.includes('–ø–∞—Ä–∏–∂')) keywords.push('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è');
  if (text.includes('–æ—Å–µ–Ω—å') || text.includes('–æ—Å–µ–Ω—å—é')) keywords.push('—Å–µ–∑–æ–Ω');
  if (text.includes('—Å–∫–∏–¥–∫–∞') || text.includes('–∞–∫—Ü–∏—è')) keywords.push('–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è');
  if (text.includes('–±–∏–ª–µ—Ç') || text.includes('–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')) keywords.push('–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
  
  return keywords.length > 0 ? keywords : ['–∫–æ–Ω—Ç–µ–Ω—Ç', 'email', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥'];
}

function extractPersonalizationTokens(content: string): string[] {
  const tokens: string[] = [];
  
  if (content.includes('{{')) {
    // Extract placeholder tokens
    const matches = content.match(/{{([^}]+)}}/g);
    if (matches) {
      tokens.push(...matches.map(m => m.replace(/[{}]/g, '')));
    }
  }
  
  // Add common personalization tokens
  if (content.includes('–î–æ—Ä–æ–≥–∏–µ') || content.includes('Dear')) {
    tokens.push('–∏–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
  }
  
  return tokens;
}