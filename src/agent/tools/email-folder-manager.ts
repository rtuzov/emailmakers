import { promises as fs } from 'fs';
import * as path from 'path';
import { AssetHashManager } from '../utils/asset-hash-manager';

export interface EmailFolder {
  campaignId: string;
  basePath: string;
  assetsPath: string;
  spritePath: string;
  htmlPath: string;
  mjmlPath: string;
  metadataPath: string;
}

export interface EmailFolderMetadata {
  campaign_id: string;
  created_at: string;
  topic: string;
  campaign_type: string;
  target_audience?: string;
  assets_count: number;
  figma_assets_processed: number;
  sprite_slices_generated: number;
  shared_assets_used: number;
  asset_hashes: string[];
  html_size_kb?: number;
  mjml_size_kb?: number;
  generation_time_ms?: number;
  status: 'initializing' | 'processing' | 'completed' | 'failed';
}

/**
 * Email Folder Manager - —Å–æ–∑–¥–∞–µ—Ç –∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø–∞–ø–æ–∫ –¥–ª—è email –∫–∞–º–ø–∞–Ω–∏–π
 */
export default class EmailFolderManager {
  /**
   * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–∞–ø–∫—É –¥–ª—è email –∫–∞–º–ø–∞–Ω–∏–∏
   */
  static async createEmailFolder(
    topic: string, 
    campaignType: string = 'promotional',
    traceId?: string
  ): Promise<EmailFolder> {
    const fs = require('fs').promises;
    const path = require('path');
    
    // –û—á–∏—Å—Ç–∫–∞ —Ç–æ–ø–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
    const cleanTopic = topic
      .toLowerCase()
      .replace(/[^a-z0-9–∞-—è\s]/g, '') // –£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
      .replace(/\s+/g, '-') // –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –¥–µ—Ñ–∏—Å—ã
      .substring(0, 50); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
    
    // –°–æ–∑–¥–∞–µ–º –£–ù–ò–ö–ê–õ–¨–ù–´–ô campaignId —Å timestamp –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    let campaignId: string;
    const timestamp = Date.now().toString(36); // –ö–æ—Ä–æ—Ç–∫–∏–π timestamp –≤ base36
    const shortId = Math.random().toString(36).substring(2, 6); // –ö–æ—Ä–æ—Ç–∫–∏–π —Å–ª—É—á–∞–π–Ω—ã–π ID
    
    if (traceId) {
      campaignId = `${cleanTopic}-${traceId}-${timestamp}`;
    } else {
      campaignId = `${cleanTopic}-${shortId}-${timestamp}`;
    }
    
    // Ensure the folder name is valid and unique
    if (!campaignId || campaignId.length < 3) {
      campaignId = `campaign-${shortId}-${timestamp}`;
    }
    
    console.log(`üìÅ Creating NEW unique campaign folder: "${campaignId}" for topic: "${topic}"`);
    
    // ‚ùå REMOVED: Don't check for existing folders - always create new ones
    // const existingFolder = await EmailFolderManager.loadEmailFolder(campaignId);
    // if (existingFolder) {
    //   console.log(`üìÅ Using existing email folder: ${campaignId}`);
    //   return existingFolder;
    // }
    
    const basePath = path.resolve(process.cwd(), 'mails', campaignId);
    const assetsPath = path.join(basePath, 'assets');
    const spritePath = path.join(assetsPath, 'sprite-slices');
    
    // –°–æ–∑–¥–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–ø–∫–∏
    await fs.mkdir(basePath, { recursive: true });
    await fs.mkdir(assetsPath, { recursive: true });
    await fs.mkdir(spritePath, { recursive: true });
    
    const emailFolder: EmailFolder = {
      campaignId,
      basePath,
      assetsPath,
      spritePath,
      htmlPath: path.join(basePath, 'email.html'),
      mjmlPath: path.join(basePath, 'email.mjml'),
      metadataPath: path.join(basePath, 'metadata.json')
    };
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π metadata.json
    const initialMetadata: EmailFolderMetadata = {
      campaign_id: campaignId,
      created_at: new Date().toISOString(),
      topic,
      campaign_type: campaignType,
      assets_count: 0,
      figma_assets_processed: 0,
      sprite_slices_generated: 0,
      shared_assets_used: 0,
      asset_hashes: [],
      status: 'initializing'
    };
    
    await EmailFolderManager.updateMetadata(emailFolder, initialMetadata);
    
    console.log(`üìÅ Created NEW email folder: ${campaignId}`);
    console.log(`üìÇ Assets path: ${assetsPath}`);
    
    return emailFolder;
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É email
   */
  static async loadEmailFolder(campaignId: string): Promise<EmailFolder | null> {
    try {
      // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
      const possibleNames = [
        campaignId, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è
        campaignId.replace(/-/g, '_'), // –ó–∞–º–µ–Ω—è–µ–º –¥–µ—Ñ–∏—Å—ã –Ω–∞ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        campaignId.replace(/_/g, '-'), // –ó–∞–º–µ–Ω—è–µ–º –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –Ω–∞ –¥–µ—Ñ–∏—Å—ã
        campaignId.toLowerCase(), // –í –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
        campaignId.toLowerCase().replace(/-/g, '_'), // –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Å –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è–º–∏
        campaignId.toLowerCase().replace(/_/g, '-'), // –ù–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä —Å –¥–µ—Ñ–∏—Å–∞–º–∏
      ];

      // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const uniqueNames = Array.from(new Set(possibleNames));
      
      for (const name of uniqueNames) {
        try {
          const basePath = path.resolve(process.cwd(), 'mails', name);
          const assetsPath = path.join(basePath, 'assets');
          const spritePath = path.join(assetsPath, 'sprite-slices');
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏
          await fs.access(basePath);
          
          // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–¥–ø–∞–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
          try {
            await fs.mkdir(assetsPath, { recursive: true });
            await fs.mkdir(spritePath, { recursive: true });
            console.log(`üìÅ Ensured directory structure for: ${name}`);
          } catch (dirError) {
            console.warn(`‚ö†Ô∏è Could not create directories for ${name}:`, dirError);
          }
          
          console.log(`üìÅ Found email folder: ${name} (searched for: ${campaignId})`);
          
          return {
            campaignId: name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∏–º—è
            basePath,
            assetsPath,
            spritePath,
            htmlPath: path.join(basePath, 'email.html'),
            mjmlPath: path.join(basePath, 'email.mjml'),
            metadataPath: path.join(basePath, 'metadata.json')
          };
        } catch {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
          continue;
        }
      }
      
      // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —á–∞—Å—Ç–∏ –∏–º–µ–Ω–∏
      try {
        const mailsDir = path.resolve(process.cwd(), 'mails');
        const existingFolders = await fs.readdir(mailsDir);
        
        // –ò—â–µ–º –ø–∞–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ campaignId
        const searchTerms = campaignId.toLowerCase().split(/[-_\s]+/).filter(term => term.length > 2);
        
        for (const folder of existingFolders) {
          if (folder === 'shared-assets') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –ø–∞–ø–∫—É
          
          const folderLower = folder.toLowerCase();
          const matchCount = searchTerms.filter(term => folderLower.includes(term)).length;
          
          // –ï—Å–ª–∏ –ø–∞–ø–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤, —Å—á–∏—Ç–∞–µ–º –µ—ë –ø–æ–¥—Ö–æ–¥—è—â–µ–π
          if (matchCount >= Math.max(1, searchTerms.length - 1)) {
            const basePath = path.resolve(process.cwd(), 'mails', folder);
            const assetsPath = path.join(basePath, 'assets');
            const spritePath = path.join(assetsPath, 'sprite-slices');
            
            // –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–¥–ø–∞–ø–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            try {
              await fs.mkdir(assetsPath, { recursive: true });
              await fs.mkdir(spritePath, { recursive: true });
              console.log(`üìÅ Ensured directory structure for: ${folder}`);
            } catch (dirError) {
              console.warn(`‚ö†Ô∏è Could not create directories for ${folder}:`, dirError);
            }
            
            console.log(`üìÅ Found similar email folder: ${folder} (searched for: ${campaignId}, matched ${matchCount}/${searchTerms.length} terms)`);
            
            return {
              campaignId: folder,
              basePath,
              assetsPath,
              spritePath,
              htmlPath: path.join(basePath, 'email.html'),
              mjmlPath: path.join(basePath, 'email.mjml'),
              metadataPath: path.join(basePath, 'metadata.json')
            };
          }
        }
      } catch {
        // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
      }
      
      return null;
    } catch {
      return null;
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Figma –∞—Å—Å–µ—Ç –≤ –ø–∞–ø–∫—É –∫–∞–º–ø–∞–Ω–∏–∏ (legacy –º–µ—Ç–æ–¥)
   */
  static async saveFigmaAsset(
    emailFolder: EmailFolder, 
    assetUrl: string, 
    fileName: string
  ): Promise<string> {
    const assetPath = path.join(emailFolder.assetsPath, fileName);
    
    // –ï—Å–ª–∏ —ç—Ç–æ URL, —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    if (assetUrl.startsWith('http')) {
      const response = await fetch(assetUrl);
      if (!response.ok) {
        throw new Error(`Failed to download asset: ${response.statusText}`);
      }
      
      const buffer = await response.arrayBuffer();
      await fs.writeFile(assetPath, Buffer.from(buffer));
    } else {
      // –ï—Å–ª–∏ —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å, –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
      await fs.copyFile(assetUrl, assetPath);
    }
    
    console.log(`üíæ Saved asset: ${fileName} -> ${assetPath}`);
    return assetPath;
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Å—Å–µ—Ç –≤ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Å—ã–ª–∫—É –≤ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  static async addSharedAsset(
    emailFolder: EmailFolder,
    sourceFilePath: string,
    fileName: string
  ): Promise<{
    assetPath: string;
    hash: string;
    wasExisting: boolean;
  }> {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –∞—Å—Å–µ—Ç –∏–∑ –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    const { sharedPath: _sharedPath, hash, wasExisting } = await AssetHashManager.addOrGetSharedAsset(
      sourceFilePath,
      fileName
    );

    // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –≤ –ø–∞–ø–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏
    const linkPath = await AssetHashManager.linkAssetToCampaign(
      hash,
      emailFolder.assetsPath,
      fileName
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
    const currentMetadata = await EmailFolderManager.getMetadata(emailFolder);
    const assetHashes = [...(currentMetadata.asset_hashes || [])];
    
    if (!assetHashes.includes(hash)) {
      assetHashes.push(hash);
      await EmailFolderManager.updateMetadata(emailFolder, {
        asset_hashes: assetHashes,
        shared_assets_used: assetHashes.length
      });
    }

    return {
      assetPath: linkPath,
      hash,
      wasExisting
    };
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Å—Å–µ—Ç –∏–∑ Figma —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
   */
  static async addFigmaAsset(
    emailFolder: EmailFolder,
    assetUrl: string,
    fileName: string
  ): Promise<{
    assetPath: string;
    hash: string;
    wasExisting: boolean;
  }> {
    console.log(`üîç DEBUG: addFigmaAsset called with:`, {
      campaignId: emailFolder.campaignId,
      assetUrl,
      fileName,
      metadataPath: emailFolder.metadataPath
    });

    // Ensure the assets directory exists
    try {
      await fs.mkdir(emailFolder.assetsPath, { recursive: true });
      console.log(`üìÅ Assets directory ensured: ${emailFolder.assetsPath}`);
    } catch (dirError) {
      console.warn(`‚ö†Ô∏è Could not create assets directory: ${emailFolder.assetsPath}`, dirError);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ metadata.json –ü–ï–†–ï–î –æ–ø–µ—Ä–∞—Ü–∏–µ–π
    try {
      await fs.access(emailFolder.metadataPath);
      console.log(`‚úÖ Metadata file exists: ${emailFolder.metadataPath}`);
    } catch (metadataError) {
      console.warn(`‚ö†Ô∏è Metadata file not accessible: ${emailFolder.metadataPath}`, metadataError);
      // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª metadata.json –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
      await EmailFolderManager.updateMetadata(emailFolder, {
        campaign_id: emailFolder.campaignId,
        created_at: new Date().toISOString(),
        topic: 'Unknown',
        campaign_type: 'promotional',
        assets_count: 0,
        figma_assets_processed: 0,
        sprite_slices_generated: 0,
        shared_assets_used: 0,
        asset_hashes: [],
        status: 'initializing'
      });
      console.log(`‚úÖ Created metadata file: ${emailFolder.metadataPath}`);
    }

    // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const tempPath = path.join(emailFolder.assetsPath, `.temp_${fileName}`);
    console.log(`üì• Temp file path: ${tempPath}`);
    
    try {
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏–ª–∏ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
      if (assetUrl.startsWith('http')) {
        console.log(`üåê Downloading from URL: ${assetUrl}`);
        const response = await fetch(assetUrl);
        if (!response.ok) {
          throw new Error(`Failed to download asset: ${response.statusText}`);
        }
        
        const buffer = await response.arrayBuffer();
        await fs.writeFile(tempPath, Buffer.from(buffer));
        console.log(`‚úÖ Downloaded to temp file: ${tempPath}`);
      } else {
        console.log(`üìÅ Copying local file: ${assetUrl}`);
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        try {
          await fs.access(assetUrl);
        await fs.copyFile(assetUrl, tempPath);
          console.log(`‚úÖ Copied to temp file: ${tempPath}`);
        } catch (accessError) {
          console.warn(`‚ö†Ô∏è Could not access source file: ${assetUrl}`, accessError);
          throw new Error(`Source file does not exist: ${assetUrl}`);
        }
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      console.log(`üîÑ Adding to shared storage...`);
      const result = await EmailFolderManager.addSharedAsset(emailFolder, tempPath, fileName);
      console.log(`‚úÖ Added to shared storage:`, result);

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      try {
      await fs.unlink(tempPath);
        console.log(`üóëÔ∏è Removed temp file: ${tempPath}`);
      } catch (unlinkError) {
        console.warn(`‚ö†Ô∏è Could not remove temp file: ${tempPath}`, unlinkError);
      }

      console.log(`üé® Added Figma asset: ${fileName} (${result.wasExisting ? 'existing' : 'new'})`);
      return result;

    } catch (error) {
      console.error(`‚ùå Error in addFigmaAsset:`, error);
      // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      try {
        await fs.unlink(tempPath);
      } catch {}
      
      // –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –æ—à–∏–±–∫–∞
      const errorMessage = error instanceof Error ? error.message : String(error);
      throw new Error(`Failed to add Figma asset ${fileName}: ${errorMessage}`);
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã sprite splitter
   */
  static async saveSpriteSlices(
    emailFolder: EmailFolder,
    slices: Array<{ filename: string; buffer: Buffer }>,
    manifest: any
  ): Promise<string[]> {
    const savedPaths: string[] = [];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–π slice
    for (const slice of slices) {
      const slicePath = path.join(emailFolder.spritePath, slice.filename);
      await fs.writeFile(slicePath, slice.buffer);
      savedPaths.push(slicePath);
      console.log(`üî™ Saved sprite slice: ${slice.filename}`);
    }
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º manifest
    const manifestPath = path.join(emailFolder.spritePath, 'manifest.json');
    await fs.writeFile(manifestPath, JSON.stringify(manifest, null, 2));
    console.log(`üìã Saved sprite manifest: ${manifestPath}`);
    
    return savedPaths;
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML email
   */
  static async saveHtml(emailFolder: EmailFolder, html: string): Promise<void> {
    await fs.writeFile(emailFolder.htmlPath, html, 'utf8');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ metadata
    const stats = await fs.stat(emailFolder.htmlPath);
    const sizeKb = stats.size / 1024;
    
    await EmailFolderManager.updateMetadata(emailFolder, { 
      html_size_kb: Math.round(sizeKb * 100) / 100 
    });
    
    console.log(`üíæ Saved HTML: ${emailFolder.htmlPath} (${sizeKb.toFixed(2)}KB)`);
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç MJML source
   */
  static async saveMjml(emailFolder: EmailFolder, mjml: string): Promise<void> {
    await fs.writeFile(emailFolder.mjmlPath, mjml, 'utf8');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –≤ metadata
    const stats = await fs.stat(emailFolder.mjmlPath);
    const sizeKb = stats.size / 1024;
    
    await EmailFolderManager.updateMetadata(emailFolder, { 
      mjml_size_kb: Math.round(sizeKb * 100) / 100 
    });
    
    console.log(`üíæ Saved MJML: ${emailFolder.mjmlPath} (${sizeKb.toFixed(2)}KB)`);
  }
  
  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç metadata.json
   */
  static async updateMetadata(
    emailFolder: EmailFolder, 
    updates: Partial<EmailFolderMetadata>
  ): Promise<void> {
    let currentMetadata: EmailFolderMetadata;
    
    try {
      const metadataContent = await fs.readFile(emailFolder.metadataPath, 'utf8');
      currentMetadata = JSON.parse(metadataContent);
    } catch {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      currentMetadata = {
        campaign_id: emailFolder.campaignId,
        created_at: new Date().toISOString(),
        topic: 'Unknown',
        campaign_type: 'promotional',
        assets_count: 0,
        figma_assets_processed: 0,
        sprite_slices_generated: 0,
        shared_assets_used: 0,
        asset_hashes: [],
        status: 'initializing'
      };
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º metadata
    const updatedMetadata = { ...currentMetadata, ...updates };
    await fs.writeFile(
      emailFolder.metadataPath, 
      JSON.stringify(updatedMetadata, null, 2),
      'utf8'
    );
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç metadata –∫–∞–º–ø–∞–Ω–∏–∏
   */
  static async getMetadata(emailFolder: EmailFolder): Promise<EmailFolderMetadata> {
    try {
    const metadataContent = await fs.readFile(emailFolder.metadataPath, 'utf8');
    return JSON.parse(metadataContent);
    } catch (error) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
      console.warn(`‚ö†Ô∏è Could not read metadata from ${emailFolder.metadataPath}, creating default`);
      return {
        campaign_id: emailFolder.campaignId,
        created_at: new Date().toISOString(),
        topic: 'Unknown',
        campaign_type: 'promotional',
        assets_count: 0,
        figma_assets_processed: 0,
        sprite_slices_generated: 0,
        shared_assets_used: 0,
        asset_hashes: [],
        status: 'initializing'
      };
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞—Å—Å–µ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ
   */
  static async listAssets(emailFolder: EmailFolder): Promise<string[]> {
    try {
      const files = await fs.readdir(emailFolder.assetsPath);
      return files
        .filter(file => file.toLowerCase().endsWith('.png') || file.toLowerCase().endsWith('.jpg'))
        .map(file => path.join(emailFolder.assetsPath, file));
    } catch {
      return [];
    }
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ sprite slices
   */
  static async listSpriteSlices(emailFolder: EmailFolder): Promise<string[]> {
    try {
      const files = await fs.readdir(emailFolder.spritePath);
      return files
        .filter(file => file.toLowerCase().endsWith('.png'))
        .map(file => path.join(emailFolder.spritePath, file));
    } catch {
      return [];
    }
  }
  
  /**
   * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∫–∞–º–ø–∞–Ω–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å
   */
  static async completeCampaign(
    emailFolder: EmailFolder, 
    generationTimeMs: number,
    status: 'completed' | 'failed' = 'completed'
  ): Promise<void> {
    const assets = await EmailFolderManager.listAssets(emailFolder);
    const spriteSlices = await EmailFolderManager.listSpriteSlices(emailFolder);
    
    await EmailFolderManager.updateMetadata(emailFolder, {
      status,
      generation_time_ms: generationTimeMs,
      assets_count: assets.length,
      sprite_slices_generated: spriteSlices.length
    });
    
    console.log(`üèÅ Campaign ${status}: ${emailFolder.campaignId}`);
    console.log(`üìä Final stats: ${assets.length} assets, ${spriteSlices.length} sprite slices`);
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç URL –¥–ª—è –∞—Å—Å–µ—Ç–∞ (–¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ email)
   */
  static getAssetUrl(_emailFolder: EmailFolder, fileName: string): string {
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ email
    return `./assets/${fileName}`;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –∞—Å—Å–µ—Ç—É
   */
  static getAssetPath(emailFolder: EmailFolder, fileName: string): string {
    return path.join(emailFolder.assetsPath, fileName);
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—â–∏–º –∞—Å—Å–µ—Ç–∞–º —Å–∏—Å—Ç–µ–º—ã
   */
  static async getSharedAssetsStats(): Promise<{
    totalAssets: number;
    totalSizeBytes: number;
    totalSizeMB: number;
    oldestAsset: string;
    newestAsset: string;
  }> {
    const stats = await AssetHashManager.getStats();
    return {
      ...stats,
      totalSizeMB: Math.round(stats.totalSizeBytes / (1024 * 1024) * 100) / 100
    };
  }

  /**
   * –û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞—Å—Å–µ—Ç—ã
   */
  static async cleanupSharedAssets(keepDays: number = 30): Promise<number> {
    return await AssetHashManager.cleanupUnusedAssets(keepDays);
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö –∞—Å—Å–µ—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–µ–π
   */
  static async getCampaignSharedAssets(emailFolder: EmailFolder): Promise<{
    hashes: string[];
    count: number;
    details: Array<{
      hash: string;
      fileName: string;
      size: number;
      createdAt: string;
    }>;
  }> {
    const metadata = await EmailFolderManager.getMetadata(emailFolder);
    const hashes = metadata.asset_hashes || [];
    
    const details = [];
    for (const hash of hashes) {
      const asset = await AssetHashManager.getAssetByHash(hash);
      if (asset) {
        details.push({
          hash,
          fileName: asset.fileName,
          size: asset.size,
          createdAt: asset.createdAt
        });
      }
    }

    return {
      hashes,
      count: hashes.length,
      details
    };
  }
}

// Named export for compatibility
export { EmailFolderManager }; 