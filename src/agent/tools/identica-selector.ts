// Import only what we need to break circular dependency
import { handleToolErrorUnified } from '../core/error-handler';
import { logger } from '../core/logger';

// Define ToolResult locally to avoid circular import
interface ToolResult {
  success: boolean;
  data?: any;
  error?: string;
  metadata?: Record<string, any>;
}

// Local error handling function
function handleToolError(toolName: string, error: any): ToolResult {
  logger.error(`Tool ${toolName} failed`, { error });
  return handleToolErrorUnified(toolName, error);
}
import * as path from 'path';
import * as fs from 'fs/promises';

interface IdenticaAsset {
  fileName: string;
  filePath: string;
  shortName: string;
  tags: string[];
  description: string;
  tone: string;
  confidence: number;
  usageContext: string[];
  figmaNodeId?: string;
}

interface IdenticaSelectionParams {
  campaign_type?: 'promotional' | 'informational' | 'brand' | 'logo' | 'premium';
  emotional_tone?: '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π' | '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π' | '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π';
  usage_context?: string[];
  tags?: string[];
  target_count?: number;
  prefer_logo?: boolean;
  prefer_premium?: boolean;
}

interface IdenticaSelectionResult {
  selected_assets: IdenticaAsset[];
  total_available: number;
  selection_criteria: string;
  confidence_score: number;
}

/**
 * T16: Identica Creative Selector
 * –í—ã–±–∏—Ä–∞–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤—ã –∏–∑ –ø–∞–ø–∫–∏ –∞–π–¥–µ–Ω—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function selectIdenticaCreatives(params: IdenticaSelectionParams): Promise<ToolResult> {
  try {
    console.log('üé® T16: Selecting identica creatives with params:', params);
    
    const identicaPath = path.join(process.cwd(), 'figma-all-pages-1750993353363', '–∞–π–¥–µ–Ω—Ç–∏–∫–∞');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ agent-file-mapping.json
    const mappingPath = path.join(identicaPath, 'agent-file-mapping.json');
    let assetMapping: any = {};
    
    try {
      const mappingContent = await fs.readFile(mappingPath, 'utf-8');
      const mappingData = JSON.parse(mappingContent);
      if (!mappingData.fileMapping) {
        throw new Error('No file mapping found in asset mapping data');
      }
      assetMapping = mappingData.fileMapping;
    } catch (error) {
      throw new Error(`Required agent-file-mapping.json not found or invalid: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
    const files = await fs.readdir(identicaPath);
    const pngFiles = files.filter(file => file.endsWith('.png'));
    
    console.log(`üìÅ T16: Found ${pngFiles.length} PNG files in identica folder`);
    
    // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –∞—Å—Å–µ—Ç–æ–≤ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
    const assets: IdenticaAsset[] = [];
    
    for (const fileName of pngFiles) {
      const filePath = path.join(identicaPath, fileName);
      
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ mapping
      const shortName = fileName.replace('.png', '');
      const mappingKey = (Object || {}).keys(assetMapping).find(key => 
        fileName.includes(key) || shortName.includes(key)
      );
      
      let assetData: IdenticaAsset;
      
      if (mappingKey && assetMapping[mappingKey]) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ mapping
        const mapping = assetMapping[mappingKey];
        assetData = {
          fileName,
          filePath,
          shortName: mappingKey,
          tags: mapping.allTags ? mapping.allTags : [],
          description: mapping.description ? mapping.description : '',
          tone: mapping.tone ? mapping.tone : '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
          confidence: mapping.confidence ? mapping.confidence : 0.8,
          usageContext: ['email-—Ä–∞—Å—Å—ã–ª–∫–∞', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥'],
          figmaNodeId: mapping.figmaNodeId
        };
      } else {
        // Asset not found in mapping - fail fast
        throw new Error(`Asset ${fileName} not found in agent-file-mapping.json. All assets must be properly mapped.`);
      }
      
      assets.push(assetData);
    }
    
    console.log(`üîç T16: Processed ${assets.length} assets with metadata`);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞—Å—Å–µ—Ç—ã
    const selectedAssets = selectBestAssets(assets, params);
    
    const result: IdenticaSelectionResult = {
      selected_assets: selectedAssets,
      total_available: assets.length,
      selection_criteria: buildSelectionCriteria(params),
      confidence_score: calculateSelectionConfidence(selectedAssets, params)
    };
    
    console.log(`‚úÖ T16: Selected ${selectedAssets.length} identica assets:`, 
      selectedAssets.map(a => ({ name: (a || {}).shortName, tags: (a || {}).tags, tone: (a || {}).tone }))
    );
    
    return {
      success: true,
      data: result,
      metadata: {
        source: 'identica-folder',
        total_processed: assets.length,
        selection_method: 'smart-matching',
        avg_confidence: selectedAssets.reduce((sum, a) => sum + (a || {}).confidence, 0) / selectedAssets.length
      }
    };
    
  } catch (error) {
    console.error('‚ùå T16: Identica selection failed:', error);
    return {
      success: false,
      error: `Identica selection failed: ${error instanceof Error ? error.message : 'Unknown error'}`,
      metadata: {
        source: 'identica-folder',
        error_type: error instanceof Error ? error.constructor.name : 'UnknownError'
      }
    };
  }
}

// Removed analyzeAssetByFileName function - no fallback logic allowed

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–µ –∞—Å—Å–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤
 */
function selectBestAssets(assets: IdenticaAsset[], params: IdenticaSelectionParams): IdenticaAsset[] {
  if (!params.target_count) {
    throw new Error('target_count parameter is required');
  }
  const targetCount = params.target_count;
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∞—Å—Å–µ—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  const scoredAssets = assets.map(asset => ({
    asset,
    score: calculateAssetScore(asset, params)
  }));
  
  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  scoredAssets.sort((a, b) => (b || {}).score - (a || {}).score);
  
  console.log('üéØ T16: Asset scoring results (top 5):', 
    scoredAssets.slice(0, 5).map(item => ({
      name: item.asset.shortName,
      score: item.score,
      tags: item.asset.tags,
      tone: item.asset.tone
    }))
  );
  
  // –ü—Ä–∏–º–µ–Ω—è–µ–º –ª–æ–≥–∏–∫—É —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  const selected: IdenticaAsset[] = [];
  const usedTags = new Set<string>();
  
  // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ª–æ–≥–æ—Ç–∏–ø, —Å–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ª–æ–≥–æ—Ç–∏–ø—ã
  if (params.prefer_logo) {
    const logos = scoredAssets.filter(item => 
      item.asset.tags.includes('–ª–æ–≥–æ—Ç–∏–ø') || item.asset.tags.includes('–±—Ä–µ–Ω–¥–∏–Ω–≥')
    );
    if (logos.length > 0) {
      selected.push(logos[0].asset);
      logos[0].asset.tags.forEach(tag => usedTags.add(tag));
    }
  }
  
  // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –ø—Ä–µ–º–∏—É–º, –∏—â–µ–º –ø—Ä–µ–º–∏—É–º –∞—Å—Å–µ—Ç—ã
  if (params.prefer_premium) {
    const premiumAssets = scoredAssets.filter(item => 
      item.asset.tags.includes('–ø—Ä–µ–º–∏—É–º') && !selected.includes(item.asset)
    );
    if (premiumAssets.length > 0) {
      selected.push(premiumAssets[0].asset);
      premiumAssets[0].asset.tags.forEach(tag => usedTags.add(tag));
    }
  }
  
  // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∞—Å—Å–µ—Ç—ã —Å —É—á–µ—Ç–æ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
  for (const item of scoredAssets) {
    if (selected.length >= targetCount) break;
    if (selected.includes(item.asset)) continue;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ —Ç–µ–≥–æ–≤
    const hasNewTags = item.asset.tags.some(tag => !usedTags.has(tag));
    const hasMatchingTone = params.emotional_tone ? item.asset.tone === params.emotional_tone : true;
    
    if (hasNewTags && hasMatchingTone) {
      selected.push(item.asset);
      item.asset.tags.forEach(tag => usedTags.add(tag));
    }
  }
  
  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ, –¥–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è
  for (const item of scoredAssets) {
    if (selected.length >= targetCount) break;
    if (!selected.includes(item.asset)) {
      selected.push(item.asset);
    }
  }
  
  return selected.slice(0, targetCount);
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∞—Å—Å–µ—Ç–∞
 */
function calculateAssetScore(asset: IdenticaAsset, params: IdenticaSelectionParams): number {
  let score = 0;
  
  // –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
  score += asset.confidence * 30;
  
  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø—É –∫–∞–º–ø–∞–Ω–∏–∏
  if (params.campaign_type) {
    switch (params.campaign_type) {
      case 'promotional':
        if (asset.tags.includes('–º–∞—Ä–∫–µ—Ç–∏–Ω–≥') || asset.tags.includes('–∞–∫—Ü–∏–∏')) score += 20;
        break;
      case 'brand':
        if (asset.tags.includes('–±—Ä–µ–Ω–¥–∏–Ω–≥') || asset.tags.includes('–ª–æ–≥–æ—Ç–∏–ø')) score += 25;
        break;
      case 'logo':
        if (asset.tags.includes('–ª–æ–≥–æ—Ç–∏–ø')) score += 30;
        break;
      case 'premium':
        if (asset.tags.includes('–ø—Ä–µ–º–∏—É–º')) score += 25;
        break;
    }
  }
  
  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º—É —Ç–æ–Ω—É
  if (params.emotional_tone && asset.tone === params.emotional_tone) {
    score += 15;
  }
  
  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–µ–≥–∞–º
  if (params.tags) {
    const matchingTags = asset.tags.filter(tag => 
      params.tags!.some(paramTag => 
        tag.includes(paramTag) || paramTag.includes(tag)
      )
    );
    score += matchingTags.length * 10;
  }
  
  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
  if (params.usage_context) {
    const matchingContext = asset.usageContext.filter(context =>
      params.usage_context!.some(paramContext =>
        context.includes(paramContext) || paramContext.includes(context)
      )
    );
    score += matchingContext.length * 8;
  }
  
  // –ë–æ–Ω—É—Å –∑–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏
  if (asset.tags.includes('–∞–≤–∏–∞—Ü–∏—è') || asset.tags.includes('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è')) {
          score += 5; // –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ–º–∞—Ç–∏–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π
  }
  
  return score;
}

/**
 * –°—Ç—Ä–æ–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –≤—ã–±–æ—Ä–∞
 */
function buildSelectionCriteria(params: IdenticaSelectionParams): string {
  const criteria: string[] = [];
  
  if (params.campaign_type) {
    criteria.push(`—Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏: ${params.campaign_type}`);
  }
  
  if (params.emotional_tone) {
    criteria.push(`—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω: ${params.emotional_tone}`);
  }
  
  if (params.tags && params.tags.length > 0) {
    criteria.push(`—Ç–µ–≥–∏: ${params.tags.join(', ')}`);
  }
  
  if (params.prefer_logo) {
    criteria.push('–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞–º');
  }
  
  if (params.prefer_premium) {
    criteria.push('–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø—Ä–µ–º–∏—É–º-–∞—Å—Å–µ—Ç–∞–º');
  }
  
  criteria.push(`—Ü–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${params.target_count}`);
  
  return criteria.join('; ');
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –≤—ã–±–æ—Ä–µ
 */
function calculateSelectionConfidence(assets: IdenticaAsset[], params: IdenticaSelectionParams): number {
  if (assets.length === 0) return 0;
  
  const avgConfidence = assets.reduce((sum, asset) => sum + asset.confidence, 0) / assets.length;
  const targetCount = params.target_count;
  const countPenalty = assets.length < targetCount ? 0.8 : 1.0;
  
  return Math.min(0.95, avgConfidence * countPenalty);
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—É –¥–ª—è OpenAI
export const identicaSelectorSchema = {
  name: "select_identica_creatives",
  description: "–í—ã–±–∏—Ä–∞–µ—Ç –∫—Ä–µ–∞—Ç–∏–≤—ã –∏–∑ –ø–∞–ø–∫–∏ –∞–π–¥–µ–Ω—Ç–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –∫–∞–º–ø–∞–Ω–∏–∏",
  parameters: {
    type: "object",
    properties: {
      campaign_type: {
        type: "string",
        enum: ["promotional", "informational", "brand", "logo", "premium"],
        description: "–¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—Ä–µ–∞—Ç–∏–≤–æ–≤"
      },
      emotional_tone: {
        type: "string",
        enum: ["–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π", "–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π", "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π"],
        description: "–ñ–µ–ª–∞–µ–º—ã–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –∫—Ä–µ–∞—Ç–∏–≤–æ–≤"
      },
      usage_context: {
        type: "array",
        items: { type: "string" },
        description: "–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—Ä–µ–∞—Ç–∏–≤–æ–≤"
      },
      tags: {
        type: "array",
        items: { type: "string" },
        description: "–°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤"
      },
      target_count: {
        type: "number",
        default: 2,
        description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞"
      },
      prefer_logo: {
        type: "boolean",
        default: false,
        description: "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥–æ—Ç–∏–ø—ã –≤ –≤—ã–±–æ—Ä–µ"
      },
      prefer_premium: {
        type: "boolean", 
        default: false,
        description: "–ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—Ç—å –ø—Ä–µ–º–∏—É–º –∫—Ä–µ–∞—Ç–∏–≤—ã"
      }
    },
    required: []
  }
}; 