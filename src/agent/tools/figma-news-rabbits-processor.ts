import { config } from 'dotenv';
import * as path from 'path';
import * as fs from 'fs/promises';

// Load .env.local file
config({ path: path.resolve(process.cwd(), '.env.local') });

import { ToolResult, handleToolError } from './index';
import OpenAI from 'openai';
import { TagDictionaryManager, generateShortFileName, TagDictionary } from './figma-tag-dictionary';

interface NewsRabbitsProcessorParams {
  figmaUrl: string;
  outputDirectory?: string;
  context?: {
    campaign_type?: 'urgent' | 'newsletter' | 'seasonal' | 'promotional' | 'informational';
    content_theme?: string;
    target_audience?: string;
    brand_guidelines?: string[];
  };
}

interface ProcessedAsset {
  id: string;
  originalName: string;
  newName: string;
  tags: string[];
  variants?: VariantInfo[];
  selectedVariant?: VariantInfo;
  filePath: string;
  metadata: {
    figmaNodeId: string;
    componentType: string;
    hasVariants: boolean;
    aiAnalysis: AITagAnalysis;
  };
}

interface VariantInfo {
  id: string;
  name: string;
  newName: string;
  tags: string[];
  properties: Record<string, string>;
  filePath: string;
  confidence: number;
  aiAnalysis: AITagAnalysis;
}

interface AITagAnalysis {
  suggestedTags: string[];
  contentDescription: string;
  emotionalTone: string;
  usageContext: string[];
  confidence: number;
  reasoning: string;
}

interface FigmaPageNode {
  id: string;
  name: string;
  type: string;
  children?: FigmaPageNode[];
  componentPropertyDefinitions?: Record<string, any>;
  variantProperties?: Record<string, string>;
}

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–∏—Å—Ç–∞ "–ó–∞–π—Ü—ã –ù–æ–≤–æ—Å—Ç–∏" –∏–∑ Figma
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ GPT-4
 */
export async function processNewsRabbits(params: NewsRabbitsProcessorParams): Promise<ToolResult> {
  try {
    console.log('üê∞ News Rabbits Processor: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ª–∏—Å—Ç–∞ "–ó–∞–π—Ü—ã –ù–æ–≤–æ—Å—Ç–∏"');

    const figmaToken = process.env.FIGMA_ACCESS_TOKEN || process.env.FIGMA_TOKEN;
    
    if (!figmaToken) {
      throw new Error('FIGMA_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Figma URL
    const { fileId, nodeId } = extractFigmaIds(params.figmaUrl);
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–ó–∞–π—Ü—ã –ù–æ–≤–æ—Å—Ç–∏"
    const pageStructure = await getFigmaPageStructure(figmaToken, fileId, nodeId);
    
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–π—Ü–µ–≤
    const rabbitComponents = await findRabbitComponents(pageStructure);
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${rabbitComponents.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–π—Ü–µ–≤`);

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const outputDir = params.outputDirectory || path.join(process.cwd(), `news-rabbits-${Date.now()}`);
    await fs.mkdir(outputDir, { recursive: true });

    // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ª–æ–≤–∞—Ä—è —Ç–µ–≥–æ–≤
    const tagDictionaryManager = new TagDictionaryManager(outputDir);
    const tagDictionary = await tagDictionaryManager.loadOrCreateDictionary();

    const processedAssets: ProcessedAsset[] = [];

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
    for (const component of rabbitComponents) {
      console.log(`üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: "${component.name}"`);
      
      try {
        const processedAsset = await processRabbitComponent(
          figmaToken,
          fileId,
          component,
          outputDir,
          params.context,
          tagDictionary,
          tagDictionaryManager
        );
        
        processedAssets.push(processedAsset);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${component.name}:`, error.message);
      }
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤
    await tagDictionaryManager.saveDictionary(tagDictionary);

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    const agentExportPath = path.join(outputDir, 'agent-file-mapping.json');
    await tagDictionaryManager.exportForAgent(tagDictionary, agentExportPath);

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    const report = await generateProcessingReport(processedAssets, outputDir, params.context);

    console.log(`‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: ${outputDir}`);
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processedAssets.length} –∞—Å—Å–µ—Ç–æ–≤`);
    console.log(`üìñ –°–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤: ${tagDictionary.totalFiles} —Ñ–∞–π–ª–æ–≤, ${tagDictionary.totalTags} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–µ–≥–æ–≤`);

    return {
      success: true,
      data: {
        processedAssets,
        outputDirectory: outputDir,
        report,
        summary: {
          totalAssets: processedAssets.length,
          assetsWithVariants: processedAssets.filter(a => a.metadata.hasVariants).length,
          uniqueTags: Array.from(new Set(processedAssets.flatMap(a => a.tags))),
        }
      },
      metadata: {
        tool: 'figma-news-rabbits-processor',
        timestamp: new Date().toISOString(),
        figmaFile: fileId,
        figmaNode: nodeId
      }
    };

  } catch (error) {
    return handleToolError('processNewsRabbits', error);
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç fileId –∏ nodeId –∏–∑ Figma URL
 */
function extractFigmaIds(figmaUrl: string): { fileId: string; nodeId?: string } {
  const urlMatch = figmaUrl.match(/figma\.com\/design\/([a-zA-Z0-9]+)/);
  if (!urlMatch) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Figma URL');
  }

  const fileId = urlMatch[1];
  
  // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å node ID –∏–∑ URL
  const nodeMatch = figmaUrl.match(/node-id=([^&]+)/);
  const nodeId = nodeMatch ? decodeURIComponent(nodeMatch[1]) : undefined;

  return { fileId, nodeId };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Figma API
 */
async function getFigmaPageStructure(token: string, fileId: string, nodeId?: string): Promise<FigmaPageNode> {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É Figma —Ñ–∞–π–ª–∞...');

  const url = nodeId 
    ? `https://api.figma.com/v1/files/${fileId}/nodes?ids=${encodeURIComponent(nodeId)}`
    : `https://api.figma.com/v1/files/${fileId}`;

  const response = await fetch(url, {
    headers: { 'X-Figma-Token': token }
  });

  if (!response.ok) {
    throw new Error(`Figma API –æ—à–∏–±–∫–∞: ${response.status}`);
  }

  const data = await response.json();

  if (data.err) {
    throw new Error(`Figma API –æ—à–∏–±–∫–∞: ${data.err}`);
  }

  // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω nodeId, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —É–∑–µ–ª
  if (nodeId && data.nodes) {
    return data.nodes[nodeId]?.document;
  }

  // –ò–Ω–∞—á–µ –∏—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ó–∞–π—Ü—ã –ù–æ–≤–æ—Å—Ç–∏"
  const pages = data.document?.children || [];
  const newsRabbitsPage = pages.find((page: any) => 
    page.name.toLowerCase().includes('–∑–∞–π—Ü—ã') && 
    page.name.toLowerCase().includes('–Ω–æ–≤–æ—Å—Ç–∏')
  );

  if (!newsRabbitsPage) {
    throw new Error('–°—Ç—Ä–∞–Ω–∏—Ü–∞ "–ó–∞–π—Ü—ã –ù–æ–≤–æ—Å—Ç–∏" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  return newsRabbitsPage;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–π—Ü–µ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
async function findRabbitComponents(pageNode: FigmaPageNode): Promise<FigmaPageNode[]> {
  const components: FigmaPageNode[] = [];

  function traverse(node: FigmaPageNode) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º –∑–∞–π—Ü–∞
    if (isRabbitComponent(node)) {
      components.push(node);
    }

    // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ–±—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    if (node.children) {
      node.children.forEach(traverse);
    }
  }

  traverse(pageNode);
  return components;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º –∑–∞–π—Ü–∞
 */
function isRabbitComponent(node: FigmaPageNode): boolean {
  const name = node.name.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —É–∑–ª–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
  const isComponent = node.type === 'COMPONENT' || node.type === 'COMPONENT_SET' || node.type === 'INSTANCE';
  const hasRabbitKeyword = name.includes('–∑–∞—è—Ü') || name.includes('rabbit');
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  const hasNewsKeywords = name.includes('–Ω–æ–≤–æ—Å—Ç–∏') || name.includes('news') || 
                          name.includes('–ø–æ–¥–±–æ—Ä–∫–∞') || name.includes('–æ–±—â–∏–µ');

  return isComponent && hasRabbitKeyword && (hasNewsKeywords || name.includes('–∑–∞—è—Ü'));
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–π—Ü–∞
 */
async function processRabbitComponent(
  token: string,
  fileId: string,
  component: FigmaPageNode,
  outputDir: string,
  context?: NewsRabbitsProcessorParams['context'],
  tagDictionary?: TagDictionary,
  tagDictionaryManager?: TagDictionaryManager
): Promise<ProcessedAsset> {
  
  // –ï—Å–ª–∏ —ç—Ç–æ COMPONENT_SET —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
  if (component.type === 'COMPONENT_SET' && component.children) {
    console.log(`üé® –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è "${component.name}"`);
    const variants = await analyzeComponentVariants(token, fileId, component, outputDir, context, tagDictionary, tagDictionaryManager);
    
    return {
      id: component.id,
      originalName: component.name,
      newName: component.name, // –î–ª—è COMPONENT_SET –Ω–µ –º–µ–Ω—è–µ–º –∏–º—è
      tags: [],
      variants,
      selectedVariant: selectBestVariant(variants, context),
      filePath: '', // –£ COMPONENT_SET –Ω–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      metadata: {
        figmaNodeId: component.id,
        componentType: component.type,
        hasVariants: true,
        aiAnalysis: {
          suggestedTags: [],
          contentDescription: `Component set: ${component.name}`,
          emotionalTone: '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
          usageContext: [],
          confidence: 1.0,
          reasoning: 'Component set processed as variants'
        }
      }
    };
  }

  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  const imageData = await exportComponentImage(token, fileId, component.id);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const mainImagePath = await saveComponentImage(
    imageData,
    component.name,
    outputDir,
    'main'
  );

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
  const aiAnalysis = await analyzeImageWithAI(
    mainImagePath,
    component.name,
    context
  );

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤
  const { shortName, selectedTags } = generateShortFileName(aiAnalysis.suggestedTags);

  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
  const newImagePath = await renameImageFile(mainImagePath, shortName);

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤
  if (tagDictionary && tagDictionaryManager) {
    const dictionaryEntry = tagDictionaryManager.addEntry(
      shortName,
      component.name,
      aiAnalysis.suggestedTags, // –í–°–ï —Ç–µ–≥–∏ –æ—Ç GPT-4
      selectedTags, // –¢–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
      {
        contentDescription: aiAnalysis.contentDescription,
        emotionalTone: aiAnalysis.emotionalTone,
        usageContext: aiAnalysis.usageContext,
        confidence: aiAnalysis.confidence,
        reasoning: aiAnalysis.reasoning
      },
      {
        figmaNodeId: component.id,
        componentType: component.type,
        hasVariants: false,
        createdAt: new Date().toISOString()
      }
    );

    tagDictionary.entries[shortName] = dictionaryEntry;
  }

  return {
    id: component.id,
    originalName: component.name,
    newName: shortName,
    tags: aiAnalysis.suggestedTags, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Ç–µ–≥–∏
    variants: [],
    selectedVariant: undefined,
    filePath: newImagePath,
    metadata: {
      figmaNodeId: component.id,
      componentType: component.type,
      hasVariants: false,
      aiAnalysis
    }
  };
}

/**
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –∏–∑ Figma
 */
async function exportComponentImage(token: string, fileId: string, nodeId: string): Promise<Buffer> {
  const exportUrl = `https://api.figma.com/v1/images/${encodeURIComponent(fileId)}?ids=${nodeId}&format=png&scale=2`;
  
  const response = await fetch(exportUrl, {
    headers: { 'X-Figma-Token': token }
  });

  const data = await response.json();
  
  if (data.err) {
    throw new Error(`Export failed: ${data.err}`);
  }

  const imageUrl = data.images[nodeId];
  if (!imageUrl) {
    throw new Error(`No image URL for node ${nodeId}`);
  }

  // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const imageResponse = await fetch(imageUrl);
  return Buffer.from(await imageResponse.arrayBuffer());
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
async function analyzeComponentVariants(
  token: string,
  fileId: string,
  component: FigmaPageNode,
  outputDir: string,
  context?: NewsRabbitsProcessorParams['context'],
  tagDictionary?: TagDictionary,
  tagDictionaryManager?: TagDictionaryManager
): Promise<VariantInfo[]> {
  
  if (!component.children) return [];

  const variants: VariantInfo[] = [];
  
  // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  const variantIds = component.children.map(child => child.id);
  const exportUrl = `https://api.figma.com/v1/images/${encodeURIComponent(fileId)}?ids=${variantIds.join(',')}&format=png&scale=2`;
  
  const response = await fetch(exportUrl, {
    headers: { 'X-Figma-Token': token }
  });

  const data = await response.json();
  
  if (data.err) {
    throw new Error(`Variants export failed: ${data.err}`);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
  for (let i = 0; i < component.children.length; i++) {
    const child = component.children[i];
    const imageUrl = data.images[child.id];
    
    if (!imageUrl) continue;

    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const imageResponse = await fetch(imageUrl);
    const imageBuffer = Buffer.from(await imageResponse.arrayBuffer());
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É (–Ω–µ –≤ –ø–æ–¥–ø–∞–ø–∫—É)
    const variantPath = await saveComponentImage(
      imageBuffer,
      child.name,
      outputDir, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –ø–∞–ø–∫—É
      `variant-${i + 1}`
    );

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –ø–æ–º–æ—â—å—é GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
    const aiAnalysis = await analyzeImageWithAI(
      variantPath,
      child.name,
      context
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤
    const { shortName, selectedTags } = generateShortFileName(aiAnalysis.suggestedTags);

    // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const newVariantPath = await renameImageFile(variantPath, shortName);

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤
    if (tagDictionary && tagDictionaryManager) {
      const dictionaryEntry = tagDictionaryManager.addEntry(
        shortName,
        child.name,
        aiAnalysis.suggestedTags, // –í–°–ï —Ç–µ–≥–∏ –æ—Ç GPT-4
        selectedTags, // –¢–µ–≥–∏, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        {
          contentDescription: aiAnalysis.contentDescription,
          emotionalTone: aiAnalysis.emotionalTone,
          usageContext: aiAnalysis.usageContext,
          confidence: aiAnalysis.confidence,
          reasoning: aiAnalysis.reasoning
        },
        {
          figmaNodeId: child.id,
          componentType: 'VARIANT',
          hasVariants: false,
          createdAt: new Date().toISOString()
        }
      );

      tagDictionary.entries[shortName] = dictionaryEntry;
    }

    variants.push({
      id: child.id,
      name: child.name,
      newName: shortName,
      tags: aiAnalysis.suggestedTags, // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –í–°–ï —Ç–µ–≥–∏
      properties: child.variantProperties || {},
      filePath: newVariantPath,
      confidence: aiAnalysis.confidence,
      aiAnalysis
    });
  }

  return variants;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 */
async function saveComponentImage(
  imageBuffer: Buffer,
  componentName: string,
  outputDir: string,
  suffix: string = ''
): Promise<string> {
  
  const fileName = suffix 
    ? `${sanitizeFileName(componentName)}-${suffix}.png`
    : `${sanitizeFileName(componentName)}.png`;
  
  const filePath = path.join(outputDir, fileName);
  await fs.writeFile(filePath, imageBuffer);
  
  return filePath;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
 */
async function analyzeImageWithAI(
  imagePath: string,
  componentName: string,
  context?: NewsRabbitsProcessorParams['context']
): Promise<AITagAnalysis> {
  
  console.log(`ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º "${componentName}" —Å –ø–æ–º–æ—â—å—é GPT-4...`);

  // –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ base64
  const imageBuffer = await fs.readFile(imagePath);
  const base64Image = imageBuffer.toString('base64');

  const prompt = `
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ç–µ–≥–∏ –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞.

–ö–æ–Ω—Ç–µ–∫—Å—Ç:
- –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞: "${componentName}"
- –¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏: ${context?.campaign_type || '–Ω–µ —É–∫–∞–∑–∞–Ω'}
- –¢–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: ${context?.content_theme || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}
- –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è: ${context?.target_audience || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "suggestedTags": ["—Ç–µ–≥1", "—Ç–µ–≥2", "—Ç–µ–≥3", –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤],
  "contentDescription": "–æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
  "emotionalTone": "—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/—Å—Ä–æ—á–Ω—ã–π/–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π)",
  "usageContext": ["–∫–æ–Ω—Ç–µ–∫—Å—Ç1", "–∫–æ–Ω—Ç–µ–∫—Å—Ç2", –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤],
  "confidence": 0.95,
  "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤"
}

–¢–µ–≥–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ù–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
- –û–ø–∏—Å—ã–≤–∞—Ç—å —ç–º–æ—Ü–∏—é, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å–∏—Ç—É–∞—Ü–∏—é, —Ü–≤–µ—Ç, —Ä–∞–∑–º–µ—Ä, —Ñ–æ—Ä–º—É, —Ç–µ–∫—Å—Ç, –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
- –£–∫–∞–∑—ã–≤–∞—Ç—å —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–Ω–æ–≤–æ—Å—Ç–∏, –ø–æ–¥–±–æ—Ä–∫–∞, –æ–±—â–∏–µ)
- –ë—ã—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –∏–º–µ–Ω (–±–µ–∑ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)
`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "user",
          content: [
            { type: "text", text: prompt },
            {
              type: "image_url",
              image_url: {
                url: `data:image/png;base64,${base64Image}`,
                detail: "high"
              }
            }
          ]
        }
      ],
      max_tokens: 2000, // –£–≤–µ–ª–∏—á–∏–ª–∏ –ª–∏–º–∏—Ç –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–≥–æ–≤
      temperature: 0.3
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç GPT-4');
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ GPT-4');
    }

    const analysis: AITagAnalysis = JSON.parse(jsonMatch[0]);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (!analysis.suggestedTags || !Array.isArray(analysis.suggestedTags)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ GPT-4');
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${analysis.suggestedTags.length} —Ç–µ–≥–æ–≤: ${analysis.suggestedTags.join(', ')}`);
    
    return analysis;

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ GPT-4:', error.message);
    
    // Fallback: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return generateFallbackTags(componentName, context);
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç fallback —Ç–µ–≥–∏, –µ—Å–ª–∏ GPT-4 –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
 */
function generateFallbackTags(
  componentName: string,
  context?: NewsRabbitsProcessorParams['context']
): AITagAnalysis {
  
  const name = componentName.toLowerCase();
  const tags: string[] = [];

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–º—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –¥–æ–±–∞–≤–ª—è–µ–º "–∑–∞—è—Ü" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏
  if (name.includes('–∑–∞—è—Ü') || name.includes('rabbit')) tags.push('–∑–∞—è—Ü');
  if (name.includes('–Ω–æ–≤–æ—Å—Ç–∏')) tags.push('–Ω–æ–≤–æ—Å—Ç–∏');
  if (name.includes('–ø–æ–¥–±–æ—Ä–∫–∞')) tags.push('–ø–æ–¥–±–æ—Ä–∫–∞');
  if (name.includes('–æ–±—â–∏–µ')) tags.push('–æ–±—â–∏–µ');
  if (name.includes('–≤–æ–ø—Ä–æ—Å')) tags.push('–≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç');
  if (name.includes('–±–∏–ª–µ—Ç')) tags.push('–±–∏–ª–µ—Ç');
  if (name.includes('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è')) tags.push('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è');
  
  // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ —Ç–µ–≥–∏
  if (context?.campaign_type) {
    tags.push(context.campaign_type);
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Ç–µ–≥–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ
  if (tags.length === 0) {
    tags.push('–∫–æ–Ω—Ç–µ–Ω—Ç');
  }

  return {
    suggestedTags: tags,
    contentDescription: `–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è ${componentName}`,
    emotionalTone: '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
    usageContext: ['email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–Ω–æ–≤–æ—Å—Ç–∏'],
    confidence: 0.7,
    reasoning: '–¢–µ–≥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–º–µ–Ω–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ (fallback)'
  };
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–≥–æ–≤
 */
function generateNewFileName(originalName: string, tags: string[]): string {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï —Ç–µ–≥–∏ –æ—Ç GPT-4, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3-4
  const allTags = tags;
  
  // –û—á–∏—â–∞–µ–º —Ç–µ–≥–∏ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
  const cleanTags = allTags.map(tag => 
    tag.replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\-]/g, '').toLowerCase()
  ).filter(tag => tag.length > 0); // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Ç–µ–≥–∏

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–º—è –∏–∑ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–≥–æ–≤ (–¥–æ –ª–∏–º–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã)
  let newName = cleanTags.join('-');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã (247 —Å–∏–º–≤–æ–ª–æ–≤ - —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è macOS)
  const MAX_FILENAME_LENGTH = 247;
  
  if (newName.length > MAX_FILENAME_LENGTH) {
    console.log(`‚ö†Ô∏è –ò–º—è —Ñ–∞–π–ª–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (${newName.length} —Å–∏–º–≤–æ–ª–æ–≤), –æ–±—Ä–µ–∑–∞–µ–º –¥–æ ${MAX_FILENAME_LENGTH}`);
    
    // –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–µ—â–∞—é—Ç—Å—è –≤ –ª–∏–º–∏—Ç
    let truncatedName = '';
    let usedTags = 0;
    
    for (const tag of cleanTags) {
      const testName = truncatedName ? `${truncatedName}-${tag}` : tag;
      if (testName.length <= MAX_FILENAME_LENGTH) {
        truncatedName = testName;
        usedTags++;
      } else {
        break;
      }
    }
    
    newName = truncatedName;
    console.log(`üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${usedTags} –∏–∑ ${cleanTags.length} —Ç–µ–≥–æ–≤ (${newName.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
  } else {
    console.log(`üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –í–°–ï ${cleanTags.length} —Ç–µ–≥–æ–≤ (${newName.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
  }
  
  // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–≥–∞—Ö
  console.log(`üè∑Ô∏è –¢–µ–≥–∏: ${cleanTags.join(', ')}`);
  console.log(`üìÑ –ò—Ç–æ–≥–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞: ${newName}`);
  
  return newName || sanitizeFileName(originalName);
}

/**
 * –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
async function renameImageFile(oldPath: string, newName: string): Promise<string> {
  const dir = path.dirname(oldPath);
  const ext = path.extname(oldPath);
  const newPath = path.join(dir, `${newName}${ext}`);
  
  await fs.rename(oldPath, newPath);
  return newPath;
}

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function selectBestVariant(
  variants: VariantInfo[],
  context?: NewsRabbitsProcessorParams['context']
): VariantInfo | undefined {
  
  if (variants.length === 0) return undefined;
  if (variants.length === 1) return variants[0];

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ confidence –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ª—É—á—à–∏–π
  const sorted = variants.sort((a, b) => b.confidence - a.confidence);
  return sorted[0];
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç confidence –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞
 */
function calculateVariantConfidence(variant: FigmaPageNode, parent: FigmaPageNode): number {
  // –ë–∞–∑–æ–≤—ã–π confidence
  let confidence = 0.5;

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence, –µ—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–º–µ–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
  if (variant.variantProperties) {
    confidence += Object.keys(variant.variantProperties).length * 0.1;
  }

  // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º confidence, –µ—Å–ª–∏ –∏–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const name = variant.name.toLowerCase();
  if (name.includes('default') || name.includes('–æ—Å–Ω–æ–≤–Ω–æ–π')) confidence += 0.2;
  if (name.includes('active') || name.includes('–∞–∫—Ç–∏–≤–Ω—ã–π')) confidence += 0.15;

  return Math.min(confidence, 1.0);
}

/**
 * –û—á–∏—â–∞–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
 */
function sanitizeFileName(name: string): string {
  return name
    .replace(/[^a-zA-Z–∞-—è–ê-–Ø0-9\-\s]/g, '')
    .replace(/\s+/g, '-')
    .toLowerCase();
    // –£–±—Ä–∞–ª–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ .substring(0, 100), —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ —Ç–µ–≥–∏
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ –æ–±—Ä–∞–±–æ—Ç–∫–µ
 */
async function generateProcessingReport(
  processedAssets: ProcessedAsset[],
  outputDir: string,
  context?: NewsRabbitsProcessorParams['context']
): Promise<string> {
  
  const report = {
    summary: {
      totalAssets: processedAssets.length,
      assetsWithVariants: processedAssets.filter(a => a.metadata.hasVariants).length,
      totalVariants: processedAssets.reduce((sum, a) => sum + (a.variants?.length || 0), 0),
      uniqueTags: Array.from(new Set(processedAssets.flatMap(a => a.tags))),
      averageConfidence: processedAssets.reduce((sum, a) => sum + a.metadata.aiAnalysis.confidence, 0) / processedAssets.length
    },
    assets: processedAssets.map(asset => ({
      originalName: asset.originalName,
      newName: asset.newName,
      tags: asset.tags,
      hasVariants: asset.metadata.hasVariants,
      variantCount: asset.variants?.length || 0,
      aiConfidence: asset.metadata.aiAnalysis.confidence,
      emotionalTone: asset.metadata.aiAnalysis.emotionalTone
    })),
    timestamp: new Date().toISOString()
  };

  const reportPath = path.join(outputDir, 'processing-report.json');
  await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
  
  return reportPath;
} 