import * as fs from 'fs/promises';
import * as path from 'path';
import { ToolResult, AssetInfo, handleToolError } from './index';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ Figma –∞—Å—Å–µ—Ç–æ–≤
 */
interface LocalFigmaAssetParams {
  tags: string[];
  context?: {
    campaign_type?: 'seasonal' | 'promotional' | 'informational';
    emotional_tone?: 'positive' | 'neutral' | 'urgent' | 'friendly';
    target_count?: number;
    diversity_mode?: boolean;
    preferred_emotion?: 'happy' | 'angry' | 'neutral' | 'sad' | 'confused';
    airline?: string;
    use_local_only?: boolean;
  };
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ agent-file-mapping.json
 */
interface AgentFileMapping {
  version: string;
  updatedAt: string;
  totalFiles: number;
  fileMapping: Record<string, {
    allTags: string[];
    description: string;
    tone: string;
    confidence: number;
  }>;
}

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ tag-dictionary.json
 */
interface TagDictionary {
  version: string;
  createdAt: string;
  updatedAt: string;
  totalFiles: number;
  totalTags: number;
  uniqueTags: string[];
  entries: Record<string, {
    originalName: string;
    shortName: string;
    allTags: string[];
    selectedTags: string[];
    aiAnalysis: {
      contentDescription: string;
      emotionalTone: string;
      usageContext: string[];
      confidence: number;
      reasoning: string;
    };
    metadata: {
      figmaNodeId: string;
      componentType: string;
      hasVariants: boolean;
      createdAt: string;
    };
    imageMetadata: {
      technical: {
        width: number;
        height: number;
        format: string;
        fileSize: number;
        fileSizeFormatted: string;
        aspectRatio: string;
        orientation: string;
      };
      analysis: {
        dimensions: Record<string, boolean>;
        quality: Record<string, any>;
        file: Record<string, any>;
      };
    };
  }>;
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞–ø–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Figma —Ñ–∞–π–ª–æ–≤
 */
const LOCAL_FIGMA_FOLDERS = {
  '–∑–∞–π—Ü—ã-–æ–±—â–∏–µ': {
    name: '–ó–∞–π—Ü—ã –æ–±—â–∏–µ',
    description: '–û–±—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–π—Ü–µ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π',
    priority: 10,
    categories: ['rabbit', 'general', 'mascot']
  },
  '–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏': {
    name: '–ó–∞–π—Ü—ã —ç–º–æ—Ü–∏–∏',
    description: '–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–π—Ü–µ–≤',
    priority: 9,
    categories: ['rabbit', 'emotions', 'expressions'],
    emotions: ['happy', 'angry', 'sad', 'confused', 'neutral']
  },
  '–∑–∞–π—Ü—ã-–ø–æ–¥–±–æ—Ä–∫–∞': {
    name: '–ó–∞–π—Ü—ã –ø–æ–¥–±–æ—Ä–∫–∞',
    description: '–ó–∞–π—Ü—ã –¥–ª—è newsletter –∏ –ø–æ–¥–±–æ—Ä–æ–∫',
    priority: 8,
    categories: ['rabbit', 'newsletter', 'collection']
  },
  '–∑–∞–π—Ü—ã-–Ω–æ–≤–æ—Å—Ç–∏': {
    name: '–ó–∞–π—Ü—ã –Ω–æ–≤–æ—Å—Ç–∏',
    description: '–ó–∞–π—Ü—ã –¥–ª—è –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫',
    priority: 7,
    categories: ['rabbit', 'news', 'announcements']
  },
  '–ª–æ–≥–æ—Ç–∏–ø—ã-–∞–∫': {
    name: '–õ–æ–≥–æ—Ç–∏–ø—ã –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π',
    description: '–õ–æ–≥–æ—Ç–∏–ø—ã –∏ —Å–∏–º–≤–æ–ª–∏–∫–∞ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π',
    priority: 6,
    categories: ['airline', 'logo', 'brand'],
    airlines: ['–∞—ç—Ä–æ—Ñ–ª–æ—Ç', 'turkish', 'emirates', 'utair', 'nordwind']
  },
  '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏': {
    name: '–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏',
    description: '–û–±—â–∏–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è email –∫–∞–º–ø–∞–Ω–∏–π',
    priority: 5,
    categories: ['illustration', 'general', 'travel']
  },
  '–∏–∫–æ–Ω–∫–∏-–¥–æ–ø—É—Å–ª—É–≥': {
    name: '–ò–∫–æ–Ω–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Å–ª—É–≥',
    description: '–ò–∫–æ–Ω–∫–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞–≤–∏–∞ —É—Å–ª—É–≥',
    priority: 4,
    categories: ['icon', 'service', 'additional']
  },
  '–∞–π–¥–µ–Ω—Ç–∏–∫–∞': {
    name: '–ê–π–¥–µ–Ω—Ç–∏–∫–∞',
    description: '–≠–ª–µ–º–µ–Ω—Ç—ã —Ñ–∏—Ä–º–µ–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è',
    priority: 3,
    categories: ['brand', 'identity', 'style']
  },
  '–∑–∞–π—Ü—ã-–ø—Ä–æ—á–µ–µ': {
    name: '–ó–∞–π—Ü—ã –ø—Ä–æ—á–µ–µ',
    description: '–ü—Ä–æ—á–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–π—Ü–µ–≤',
    priority: 2,
    categories: ['rabbit', 'misc']
  },
  '—Ü–≤–µ—Ç–∞': {
    name: '–¶–≤–µ—Ç–∞',
    description: '–¶–≤–µ—Ç–æ–≤–∞—è –ø–∞–ª–∏—Ç—Ä–∞ –∏ –¥–∏–∑–∞–π–Ω-—Ç–æ–∫–µ–Ω—ã',
    priority: 1,
    categories: ['color', 'design-tokens', 'palette']
  }
};

/**
 * –ú–∞–ø–ø–∏–Ω–≥ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –Ω–∞ –ø–∞–ø–∫–∏ –∏ —Ç–µ–≥–∏
 */
const EMOTION_MAPPING = {
  happy: {
    folders: ['–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏', '–∑–∞–π—Ü—ã-–æ–±—â–∏–µ'],
    tags: ['—Å—á–∞—Å—Ç—å–µ', '—Å—á–∞—Å—Ç–ª–∏–≤', '—Ä–∞–¥–æ—Å—Ç—å', '–≤–µ—Å–µ–ª—å–µ', '–ø–æ–∑–∏—Ç–∏–≤', '–ª–µ—Ç–æ', '–æ—Ç–¥—ã—Ö'],
    keywords: ['—Å—á–∞—Å—Ç—å–µ', '—Ä–∞–¥–æ—Å—Ç—å', '–≤–µ—Å–µ–ª—å–µ', '–∞–∫—Ü–∏—è', '–ª–µ—Ç–æ']
  },
  angry: {
    folders: ['–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏'],
    tags: ['–≥–Ω–µ–≤', '–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', '—Ä–∞–∑–æ–∑–ª–µ–Ω'],
    keywords: ['–≥–Ω–µ–≤', '–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', '—ç–º–æ—Ü–∏–∏', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ']
  },
  sad: {
    folders: ['–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏'],
    tags: ['–≥—Ä—É—Å—Ç—å', '–≥—Ä—É—Å—Ç–Ω—ã–π', '–∑–∞–±–æ—Ç–∞', '–ø–æ–º–æ—â—å'],
    keywords: ['–≥—Ä—É—Å—Ç—å', '–≥—Ä—É—Å—Ç–Ω—ã–π', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–∑–∞–±–æ—Ç–∞']
  },
  confused: {
    folders: ['–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏', '–∑–∞–π—Ü—ã-–æ–±—â–∏–µ'],
    tags: ['–æ–∑–∞–¥–∞—á–µ–Ω–Ω–æ—Å—Ç—å', '–≤–æ–ø—Ä–æ—Å—ã', '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è', '–∑–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å'],
    keywords: ['–æ–∑–∞–¥–∞—á–µ–Ω–Ω–æ—Å—Ç—å', '–≤–æ–ø—Ä–æ—Å—ã', '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è', '–∑–∞–±–∞–≤–Ω—ã–π']
  },
  neutral: {
    folders: ['–∑–∞–π—Ü—ã-–æ–±—â–∏–µ', '–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏'],
    tags: ['–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω', '–∫—Ä–æ–ª–∏–∫', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π'],
    keywords: ['–∫—Ä–æ–ª–∏–∫', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π']
  }
};

/**
 * –ú–∞–ø–ø–∏–Ω–≥ —Ç–∏–ø–æ–≤ –∫–∞–º–ø–∞–Ω–∏–π –Ω–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–∞–ø–∫–∏
 */
const CAMPAIGN_TYPE_MAPPING = {
  promotional: {
    folders: ['–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏', '–∑–∞–π—Ü—ã-–æ–±—â–∏–µ', '–ª–æ–≥–æ—Ç–∏–ø—ã-–∞–∫'],
    preferredEmotion: 'happy',
    tags: ['–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∏', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ']
  },
  informational: {
    folders: ['–∑–∞–π—Ü—ã-–Ω–æ–≤–æ—Å—Ç–∏', '–∑–∞–π—Ü—ã-–æ–±—â–∏–µ', '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏'],
    preferredEmotion: 'neutral',
    tags: ['–Ω–æ–≤–æ—Å—Ç–∏', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ']
  },
  seasonal: {
    folders: ['–∑–∞–π—Ü—ã-–ø–æ–¥–±–æ—Ä–∫–∞', '–∑–∞–π—Ü—ã-–æ–±—â–∏–µ', '–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏'],
    preferredEmotion: 'happy',
    tags: ['–ø–æ–¥–±–æ—Ä–∫–∞', '—Å–µ–∑–æ–Ω', '–ª–µ—Ç–æ', '–∑–∏–º–∞', '–æ—Ç–¥—ã—Ö']
  }
};

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Figma –∞—Å—Å–µ—Ç–æ–≤
 */
export async function getLocalFigmaAssets(params: LocalFigmaAssetParams): Promise<ToolResult> {
  try {
    console.log('üéØ –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Figma –∞—Å—Å–µ—Ç–æ–≤:', params);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!params.tags || params.tags.length === 0) {
      throw new Error('Tags array is required and cannot be empty');
    }

    const basePath = path.resolve(process.cwd(), 'src/agent/figma-all-pages-1750993353363');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏
    try {
      await fs.access(basePath);
    } catch {
      throw new Error('Local Figma assets directory not found');
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const searchStrategy = determineSearchStrategy(params);
    console.log('üìã –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∏—Å–∫–∞:', searchStrategy);

    // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–º –ø–∞–ø–∫–∞–º
    const searchResults = await searchInPriorityFolders(basePath, searchStrategy);
    
    if (searchResults.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞—Å—Å–µ—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º —à–∏—Ä–æ–∫–∏–π –ø–æ–∏—Å–∫...');
      const fallbackResults = await performFallbackSearch(basePath, params.tags);
      
      if (fallbackResults.length === 0) {
        throw new Error('No matching assets found in local Figma directory');
      }
      
      return formatResults(fallbackResults, 'fallback-search');
    }

    return formatResults(searchResults, searchStrategy.name);

  } catch (error) {
    return handleToolError('get_local_figma_assets', error);
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 */
function determineSearchStrategy(params: LocalFigmaAssetParams) {
  const { tags, context } = params;
  
  let strategy = {
    name: 'general-search',
    priorityFolders: Object.keys(LOCAL_FIGMA_FOLDERS),
    searchTags: [...tags],
    targetCount: context?.target_count || 2,
    diversityMode: context?.diversity_mode || false
  };

  // –£–º–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è - –∫–æ–º–±–∏–Ω–∏—Ä—É–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏
  let priorityFolders: string[] = [];
  let additionalTags: string[] = [];

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏
  if (context?.campaign_type && CAMPAIGN_TYPE_MAPPING[context.campaign_type]) {
    const campaignMapping = CAMPAIGN_TYPE_MAPPING[context.campaign_type];
    priorityFolders.push(...campaignMapping.folders);
    additionalTags.push(...campaignMapping.tags);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é —ç–º–æ—Ü–∏—é
    if (campaignMapping.preferredEmotion && !context.preferred_emotion) {
      context.preferred_emotion = campaignMapping.preferredEmotion as any;
    }
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞
  if (context?.preferred_emotion && EMOTION_MAPPING[context.preferred_emotion]) {
    const emotionMapping = EMOTION_MAPPING[context.preferred_emotion];
    priorityFolders.push(...emotionMapping.folders);
    additionalTags.push(...emotionMapping.tags);
  }

  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–ª—è –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π - –î–û–ë–ê–í–õ–Ø–ï–ú –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–∞–ø–∫–∞–º, –∞ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º
  if (context?.airline) {
    priorityFolders.push('–ª–æ–≥–æ—Ç–∏–ø—ã-–∞–∫');
    additionalTags.push(context.airline, '–∞–≤–∏–∞–ø–µ—Ä–µ–≤–æ–∑–∫–∏', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –æ—Ç—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const emotionPart = context.preferred_emotion ? `-${context.preferred_emotion}` : '';
    const campaignPart = context.campaign_type ? `-${context.campaign_type}` : '';
    strategy.name = `combined-airline-${context.airline}${emotionPart}${campaignPart}`;
  }

  // –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–∞–ø–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
  if (priorityFolders.length > 0) {
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
    const uniqueFolders = Array.from(new Set(priorityFolders));
    strategy.priorityFolders = uniqueFolders.sort((a, b) => {
      const priorityA = LOCAL_FIGMA_FOLDERS[a]?.priority || 0;
      const priorityB = LOCAL_FIGMA_FOLDERS[b]?.priority || 0;
      return priorityB - priorityA; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–µ—Ä–≤—ã–º
    });
  }

  // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Ç–µ–≥–∏
  strategy.searchTags = Array.from(new Set([...tags, ...additionalTags]));

  // –î–ª—è –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
  if (context?.airline && context?.preferred_emotion) {
    strategy.diversityMode = true;
  }

  return strategy;
}

/**
 * –ü–æ–∏—Å–∫ –≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
 */
async function searchInPriorityFolders(basePath: string, strategy: any): Promise<any[]> {
  const results: any[] = [];
  const folderResults: Record<string, any[]> = {};

  console.log(`üîç –ü–æ–∏—Å–∫ –≤ ${strategy.priorityFolders.length} –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö: ${strategy.priorityFolders.join(', ')}`);

  // –ò—â–µ–º –≤–æ –í–°–ï–• –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
  for (const folderName of strategy.priorityFolders) {
    const folderPath = path.join(basePath, folderName);
    
    try {
      await fs.access(folderPath);
      console.log(`üîç –ü–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ: ${folderName}`);
      
      const currentFolderResults = await searchInFolder(folderPath, folderName, strategy.searchTags);
      folderResults[folderName] = currentFolderResults;
      results.push(...currentFolderResults);
      
      console.log(`üìä –ü–∞–ø–∫–∞ ${folderName}: –Ω–∞–π–¥–µ–Ω–æ ${currentFolderResults.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
      
    } catch (error) {
      console.log(`‚ö†Ô∏è –ü–∞–ø–∫–∞ ${folderName} –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: ${error.message}`);
      continue;
    }
  }

  console.log(`üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞: ${results.length} —Ñ–∞–π–ª–æ–≤ –∏–∑ ${Object.keys(folderResults).length} –ø–∞–ø–æ–∫`);

  // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ª–æ, –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö
  if (results.length < strategy.targetCount) {
    console.log(`‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${results.length} –∏–∑ ${strategy.targetCount} —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤, —Ä–∞—Å—à–∏—Ä—è–µ–º –ø–æ–∏—Å–∫...`);
    
    const remainingFolders = Object.keys(LOCAL_FIGMA_FOLDERS).filter(
      folder => !strategy.priorityFolders.includes(folder)
    );
    
    for (const folderName of remainingFolders) {
      const folderPath = path.join(basePath, folderName);
      
      try {
        await fs.access(folderPath);
        console.log(`üîç –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ –ø–∞–ø–∫–µ: ${folderName}`);
        
        const additionalResults = await searchInFolder(folderPath, folderName, strategy.searchTags);
        results.push(...additionalResults);
        
        if (results.length >= strategy.targetCount * 2) {
          console.log(`‚úÖ –ù–∞–±—Ä–∞–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (${results.length}), –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–∏—Å–∫`);
          break;
        }
        
      } catch (error) {
        continue;
      }
    }
  }

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  results.sort((a, b) => b.relevanceScore - a.relevanceScore);
  
  console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Ç–æ–ø-5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏:`);
  results.slice(0, 5).forEach((result, index) => {
    console.log(`  ${index + 1}. ${result.fileName} (${result.folderName}) - Score: ${result.relevanceScore}, Tags: [${result.matchedTags.join(', ')}]`);
  });
  
  if (strategy.diversityMode) {
    const diverseResults = selectDiverseResults(results, strategy.targetCount);
    console.log(`üéØ –†–µ–∂–∏–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è: –≤—ã–±—Ä–∞–Ω–æ ${diverseResults.length} —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    return diverseResults;
  } else {
    const topResults = results.slice(0, strategy.targetCount);
    console.log(`üéØ –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º: –≤—ã–±—Ä–∞–Ω–æ ${topResults.length} –ª—É—á—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`);
    return topResults;
  }
}

/**
 * –ü–æ–∏—Å–∫ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ
 */
async function searchInFolder(folderPath: string, folderName: string, searchTags: string[]): Promise<any[]> {
  const results: any[] = [];

  try {
    // –ß–∏—Ç–∞–µ–º agent-file-mapping.json –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
    const mappingPath = path.join(folderPath, 'agent-file-mapping.json');
    const mappingData: AgentFileMapping = JSON.parse(await fs.readFile(mappingPath, 'utf-8'));

    // –ß–∏—Ç–∞–µ–º tag-dictionary.json –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const dictionaryPath = path.join(folderPath, 'tag-dictionary.json');
    const dictionaryData: TagDictionary = JSON.parse(await fs.readFile(dictionaryPath, 'utf-8'));

    console.log(`üìä –ê–Ω–∞–ª–∏–∑ –ø–∞–ø–∫–∏ ${folderName}: ${mappingData.totalFiles} —Ñ–∞–π–ª–æ–≤`);

    // –ü–æ–∏—Å–∫ –ø–æ agent-file-mapping
    for (const [fileName, fileInfo] of Object.entries(mappingData.fileMapping)) {
      const relevanceScore = calculateRelevanceScore(fileInfo.allTags, searchTags);
      
      if (relevanceScore > 0) {
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ tag-dictionary
        const dictionaryEntry = dictionaryData.entries[fileName];
        
        const result = {
          fileName: `${fileName}.png`,
          filePath: path.join(folderPath, `${fileName}.png`),
          folderName,
          relevanceScore,
          matchedTags: fileInfo.allTags.filter(tag => 
            searchTags.some(searchTag => 
              tag.toLowerCase().includes(searchTag.toLowerCase()) ||
              searchTag.toLowerCase().includes(tag.toLowerCase())
            )
          ),
          allTags: fileInfo.allTags,
          description: fileInfo.description,
          tone: fileInfo.tone,
          confidence: fileInfo.confidence,
          metadata: dictionaryEntry ? {
            technical: dictionaryEntry.imageMetadata.technical,
            aiAnalysis: dictionaryEntry.aiAnalysis,
            figmaNodeId: dictionaryEntry.metadata.figmaNodeId
          } : null
        };

        results.push(result);
      }
    }

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.length} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ ${folderName}`);

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–∞–ø–∫–∏ ${folderName}: ${error.message}`);
  }

  return results;
}

/**
 * –†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ–≥–æ–≤
 */
function calculateRelevanceScore(fileTags: string[], searchTags: string[]): number {
  let score = 0;
  let matchedTagsCount = 0;
  
  for (const searchTag of searchTags) {
    let bestMatchForThisTag = 0;
    
    for (const fileTag of fileTags) {
      let currentMatch = 0;
      
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
      if (fileTag.toLowerCase() === searchTag.toLowerCase()) {
        currentMatch = 15;
      }
      // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ - –æ–¥–∏–Ω —Ç–µ–≥ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥—Ä—É–≥–æ–π
      else if (fileTag.toLowerCase().includes(searchTag.toLowerCase()) ||
               searchTag.toLowerCase().includes(fileTag.toLowerCase())) {
        currentMatch = 10;
      }
      // –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      else if (areTagsRelated(fileTag, searchTag)) {
        currentMatch = 7;
      }
      // –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–Ω–æ–≤–æ–µ)
      else if (areTagsContextuallyRelated(fileTag, searchTag)) {
        currentMatch = 5;
      }
      
      bestMatchForThisTag = Math.max(bestMatchForThisTag, currentMatch);
    }
    
    if (bestMatchForThisTag > 0) {
      score += bestMatchForThisTag;
      matchedTagsCount++;
    }
  }
  
  // –ë–æ–Ω—É—Å –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ç–µ–≥–æ–≤
  const coverageBonus = (matchedTagsCount / searchTags.length) * 10;
  
  return score + coverageBonus;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
 */
function areTagsRelated(tag1: string, tag2: string): boolean {
  const synonyms = {
    '–∑–∞—è—Ü': ['–∫—Ä–æ–ª–∏–∫', 'rabbit', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–∂–∏–≤–æ—Ç–Ω—ã–µ'],
    '—Å—á–∞—Å—Ç—å–µ': ['—Ä–∞–¥–æ—Å—Ç—å', '–≤–µ—Å–µ–ª—å–µ', '–ø–æ–∑–∏—Ç–∏–≤', '—Å—á–∞—Å—Ç–ª–∏–≤', '–≤–µ—Å–µ–ª—ã–π'],
    '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ': ['–ø–æ–µ–∑–¥–∫–∞', '–æ—Ç–ø—É—Å–∫', '—Ç—É—Ä–∏–∑–º', '–æ—Ç–¥—ã—Ö'],
    '–∞–≤–∏–∞—Ü–∏—è': ['–∞–≤–∏–∞–ø–µ—Ä–µ–≤–æ–∑–∫–∏', '—Å–∞–º–æ–ª–µ—Ç', '–ø–æ–ª–µ—Ç', 'airline'],
    '–∞–∫—Ü–∏—è': ['—Å–∫–∏–¥–∫–∞', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–æ–º–æ', '—Å–∫–∏–¥–∫–∏'],
    '—Ç—É—Ä—Ü–∏—è': ['turkish', '—Ç—É—Ä–µ—Ü–∫–∏–π', '—Ç—É—Ä–µ—Ü–∫–∞—è'],
    '—ç–º–æ—Ü–∏–∏': ['–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', '—á—É–≤—Å—Ç–≤–∞', '—Å–æ—Å—Ç–æ—è–Ω–∏–µ'],
    '–≥—Ä—É—Å—Ç—å': ['–≥—Ä—É—Å—Ç–Ω—ã–π', '–ø–µ—á–∞–ª—å', '–∑–∞–±–æ—Ç–∞'],
    '–≥–Ω–µ–≤': ['–∑–ª–æ—Å—Ç—å', '–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', '—Ä–∞–∑–æ–∑–ª–µ–Ω'],
    '–ø–æ–º–æ—â—å': ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–∑–∞–±–æ—Ç–∞', '—Å–µ—Ä–≤–∏—Å']
  };

  const t1 = tag1.toLowerCase();
  const t2 = tag2.toLowerCase();

  for (const [main, syns] of Object.entries(synonyms)) {
    if ((main === t1 && syns.includes(t2)) || 
        (main === t2 && syns.includes(t1)) ||
        (syns.includes(t1) && syns.includes(t2))) {
      return true;
    }
  }

  return false;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
 */
function areTagsContextuallyRelated(tag1: string, tag2: string): boolean {
  const contextualGroups = {
    // –ê–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
    airlines: ['–∞—ç—Ä–æ—Ñ–ª–æ—Ç', 'turkish', 'emirates', 'utair', 'nordwind', '–∞–≤–∏–∞–ø–µ—Ä–µ–≤–æ–∑–∫–∏', '–∞–≤–∏–∞—Ü–∏—è', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ'],
    // –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    emotions: ['—Å—á–∞—Å—Ç—å–µ', '–≥—Ä—É—Å—Ç—å', '–≥–Ω–µ–≤', '—Ä–∞–¥–æ—Å—Ç—å', '–≤–µ—Å–µ–ª—å–µ', '–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', '—Å—á–∞—Å—Ç–ª–∏–≤', '–≥—Ä—É—Å—Ç–Ω—ã–π'],
    // –ö–∞–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–æ–º–æ
    promotional: ['–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∏', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–ø—Ä–æ–º–æ', '–ª–µ—Ç–æ', '–æ—Ç–¥—ã—Ö'],
    // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –∏ –∂–∏–≤–æ—Ç–Ω—ã–µ
    characters: ['–∑–∞—è—Ü', '–∫—Ä–æ–ª–∏–∫', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–∂–∏–≤–æ—Ç–Ω—ã–µ', 'rabbit']
  };

  const t1 = tag1.toLowerCase();
  const t2 = tag2.toLowerCase();

  for (const group of Object.values(contextualGroups)) {
    if (group.includes(t1) && group.includes(t2)) {
      return true;
    }
  }

  return false;
}

/**
 * –í—ã–±–æ—Ä —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 */
function selectDiverseResults(results: any[], targetCount: number): any[] {
  if (results.length <= targetCount) {
    return results;
  }

  const selected: any[] = [];
  const usedFolders = new Set<string>();
  const usedTones = new Set<string>();
  const usedEmotions = new Set<string>();

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  const resultsByFolder = results.reduce((acc, result) => {
    if (!acc[result.folderName]) acc[result.folderName] = [];
    acc[result.folderName].push(result);
    return acc;
  }, {});

  console.log(`üéØ –í—ã–±–æ—Ä —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ ${results.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:`);
  Object.entries(resultsByFolder).forEach(([folder, items]: [string, any]) => {
    console.log(`  ${folder}: ${items.length} —Ñ–∞–π–ª–æ–≤`);
  });

  // –§–∞–∑–∞ 1: –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ –∫–∞–∂–¥–æ–π –ø–∞–ø–∫–∏
  for (const folderName of Object.keys(resultsByFolder)) {
    if (selected.length >= targetCount) break;
    
    const folderResults = resultsByFolder[folderName].sort((a: any, b: any) => b.relevanceScore - a.relevanceScore);
    const bestFromFolder = folderResults[0];
    
    selected.push(bestFromFolder);
    usedFolders.add(bestFromFolder.folderName);
    usedTones.add(bestFromFolder.tone);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏—é –∏–∑ —Ç–µ–≥–æ–≤
    const emotion = detectEmotionFromTags(bestFromFolder.allTags);
    if (emotion) usedEmotions.add(emotion);
    
    console.log(`  ‚úÖ –í—ã–±—Ä–∞–Ω –∏–∑ ${folderName}: ${bestFromFolder.fileName} (Score: ${bestFromFolder.relevanceScore})`);
  }

  // –§–∞–∑–∞ 2: –î–æ–ø–æ–ª–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–æ–Ω–∞–º–∏ –∏ —ç–º–æ—Ü–∏—è–º–∏
  const remainingResults = results.filter(result => !selected.includes(result));
  
  for (const result of remainingResults.sort((a, b) => b.relevanceScore - a.relevanceScore)) {
    if (selected.length >= targetCount) break;
    
    const emotion = detectEmotionFromTags(result.allTags);
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –Ω–æ–≤—ã–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    const hasNewTone = !usedTones.has(result.tone);
    const hasNewEmotion = emotion && !usedEmotions.has(emotion);
    const isHighRelevance = result.relevanceScore >= 20;
    
    if (hasNewTone || hasNewEmotion || isHighRelevance) {
      selected.push(result);
      usedTones.add(result.tone);
      if (emotion) usedEmotions.add(emotion);
      
      console.log(`  ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω: ${result.fileName} (${result.folderName}) - Score: ${result.relevanceScore}, Tone: ${result.tone}, Emotion: ${emotion || 'none'}`);
    }
  }

  // –§–∞–∑–∞ 3: –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ª—É—á—à–∏–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
  if (selected.length < targetCount) {
    const stillNeeded = targetCount - selected.length;
    const remaining = results
      .filter(result => !selected.includes(result))
      .sort((a, b) => b.relevanceScore - a.relevanceScore)
      .slice(0, stillNeeded);
    
    selected.push(...remaining);
    
    console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${remaining.length} –ª—É—á—à–∏—Ö –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏`);
  }

  console.log(`üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä (${selected.length} –∏–∑ ${targetCount}):`);
  selected.forEach((result, index) => {
    console.log(`  ${index + 1}. ${result.fileName} (${result.folderName}) - Score: ${result.relevanceScore}`);
  });

  return selected.slice(0, targetCount);
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–∏ –∏–∑ —Ç–µ–≥–æ–≤ —Ñ–∞–π–ª–∞
 */
function detectEmotionFromTags(tags: string[]): string | null {
  const emotionKeywords = {
    'happy': ['—Å—á–∞—Å—Ç—å–µ', '—Å—á–∞—Å—Ç–ª–∏–≤', '—Ä–∞–¥–æ—Å—Ç—å', '–≤–µ—Å–µ–ª—å–µ', '–≤–µ—Å–µ–ª—ã–π', '–ø–æ–∑–∏—Ç–∏–≤', '–ª–µ—Ç–æ'],
    'sad': ['–≥—Ä—É—Å—Ç—å', '–≥—Ä—É—Å—Ç–Ω—ã–π', '–ø–µ—á–∞–ª—å', '–∑–∞–±–æ—Ç–∞'],
    'angry': ['–≥–Ω–µ–≤', '–∑–ª–æ—Å—Ç—å', '–Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ', '—Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ', '—Ä–∞–∑–æ–∑–ª–µ–Ω'],
    'confused': ['–æ–∑–∞–¥–∞—á–µ–Ω–Ω–æ—Å—Ç—å', '–≤–æ–ø—Ä–æ—Å—ã', '—Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è', '–∑–∞–¥—É–º—á–∏–≤–æ—Å—Ç—å'],
    'neutral': ['–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω', '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–∫—Ä–æ–ª–∏–∫']
  };

  for (const [emotion, keywords] of Object.entries(emotionKeywords)) {
    for (const tag of tags) {
      if (keywords.some(keyword => tag.toLowerCase().includes(keyword.toLowerCase()))) {
        return emotion;
      }
    }
  }

  return null;
}

/**
 * –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –ø–∞–ø–∫–∞–º
 */
async function performFallbackSearch(basePath: string, searchTags: string[]): Promise<any[]> {
  const results: any[] = [];

  for (const folderName of Object.keys(LOCAL_FIGMA_FOLDERS)) {
    const folderPath = path.join(basePath, folderName);
    
    try {
      const folderResults = await searchInFolder(folderPath, folderName, searchTags);
      results.push(...folderResults);
    } catch (error) {
      continue;
    }
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  results.sort((a, b) => b.relevanceScore - a.relevanceScore);
  return results.slice(0, 3);
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
 */
function formatResults(results: any[], strategy: string): ToolResult {
  const paths: string[] = [];
  const metadata: Record<string, AssetInfo> = {};

  for (const result of results) {
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –≤ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞
    const relativePath = path.relative(process.cwd(), result.filePath);
    paths.push(relativePath);

    metadata[result.fileName] = {
      path: relativePath,
      url: `/${relativePath}`,
      width: result.metadata?.technical?.width || 400,
      height: result.metadata?.technical?.height || 300,
      metadata: {
        fileName: result.fileName,
        folderName: result.folderName,
        relevanceScore: result.relevanceScore,
        matchedTags: result.matchedTags,
        allTags: result.allTags,
        description: result.description,
        tone: result.tone,
        confidence: result.confidence,
        source: 'figma-local-processor',
        strategy: strategy,
        technical: result.metadata?.technical,
        aiAnalysis: result.metadata?.aiAnalysis,
        figmaNodeId: result.metadata?.figmaNodeId
      }
    };
  }

  console.log(`üéâ –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: –Ω–∞–π–¥–µ–Ω–æ ${paths.length} –∞—Å—Å–µ—Ç–æ–≤`);
  console.log('üìÅ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:', paths.map(p => path.basename(p)));

  return {
    success: true,
    data: {
      paths,
      metadata,
      selection_strategy: {
        strategy_used: strategy,
        reasoning: `–õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${strategy}`,
        diversity_applied: strategy.includes('diverse'),
        randomization_factor: 0
      }
    },
    metadata: {
      source: 'figma-local-processor',
      total_found: results.length,
      strategy: strategy,
      timestamp: new Date().toISOString()
    }
  };
}

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–ø–∫–∞—Ö –∏ –∏—Ö —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
 */
export async function getLocalFigmaFoldersInfo(): Promise<ToolResult> {
  try {
    const basePath = path.resolve(process.cwd(), 'src/agent/figma-all-pages-1750993353363');
    const foldersInfo: any = {};

    for (const [folderName, folderConfig] of Object.entries(LOCAL_FIGMA_FOLDERS)) {
      const folderPath = path.join(basePath, folderName);
      
      try {
        await fs.access(folderPath);
        
        // –ß–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ agent-file-mapping.json
        const mappingPath = path.join(folderPath, 'agent-file-mapping.json');
        const mappingData: AgentFileMapping = JSON.parse(await fs.readFile(mappingPath, 'utf-8'));

        foldersInfo[folderName] = {
          ...folderConfig,
          totalFiles: mappingData.totalFiles,
          available: true,
          lastUpdated: mappingData.updatedAt
        };
      } catch (error) {
        foldersInfo[folderName] = {
          ...folderConfig,
          available: false,
          error: error.message
        };
      }
    }

    return {
      success: true,
      data: {
        folders: foldersInfo,
        totalFolders: Object.keys(LOCAL_FIGMA_FOLDERS).length,
        availableFolders: Object.values(foldersInfo).filter((f: any) => f.available).length
      }
    };

  } catch (error) {
    return handleToolError('get_local_figma_folders_info', error);
  }
} 