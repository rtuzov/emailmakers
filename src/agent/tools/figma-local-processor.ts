/**
 * üîç FIGMA LOCAL PROCESSOR
 * 
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Figma –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞
 */

import * as fs from 'fs/promises';
import * as path from 'path';

interface LocalFigmaAsset {
  fileName: string;
  filePath: string;
  metadata: {
    allTags: string[];
    description: string;
    folderName: string;
    aiAnalysis?: {
      emotionalTone?: string;
      category?: string;
    };
  };
}

interface LocalFigmaSearchParams {
  tags: string[];
  context: {
    campaign_type: 'promotional' | 'seasonal' | 'informational';
    emotional_tone: 'positive' | 'neutral' | 'urgent' | 'friendly';
    target_count: number;
    diversity_mode?: boolean;
    preferred_emotion?: 'neutral' | 'happy' | 'angry' | 'sad' | 'confused';
    airline?: string;
    use_local_only?: boolean;
  };
}

interface LocalFigmaSearchResult {
  success: boolean;
  data: {
    metadata: Record<string, {
      path: string;
      metadata: LocalFigmaAsset['metadata'];
    }>;
  };
  error?: string;
}

/**
 * –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Figma –∞—Å—Å–µ—Ç–æ–≤
 */
export async function getLocalFigmaAssets(params: LocalFigmaSearchParams): Promise<LocalFigmaSearchResult> {
  try {
    const basePath = path.resolve(process.cwd(), 'figma-all-pages-1750993353363');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏
    try {
      await fs.access(basePath);
    } catch (error) {
      return {
        success: false,
        error: `Figma assets directory not found: ${basePath}`,
        data: { metadata: {} }
      };
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
    const assets = await findAllAssets(basePath);
    
    if (assets.length === 0) {
      return {
        success: false,
        error: 'No assets found in Figma directory',
        data: { metadata: {} }
      };
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞—Å—Å–µ—Ç—ã –ø–æ —Ç–µ–≥–∞–º
    const filteredAssets = filterAssetsByTags(assets, params.tags);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const finalAssets = applyContextFilters(filteredAssets, params.context);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const limitedAssets = finalAssets.slice(0, params.context.target_count);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const metadata: Record<string, any> = {};
    limitedAssets.forEach(asset => {
      metadata[asset.fileName] = {
        path: asset.filePath,
        metadata: asset.metadata
      };
    });

    return {
      success: true,
      data: { metadata }
    };
    
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : 'Unknown error during asset search',
      data: { metadata: {} }
    };
  }
}

/**
 * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∞—Å—Å–µ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ
 */
async function findAllAssets(basePath: string): Promise<LocalFigmaAsset[]> {
  const assets: LocalFigmaAsset[] = [];
  
  try {
    const folders = await fs.readdir(basePath, { withFileTypes: true });
    
    for (const folder of folders) {
      if (folder.isDirectory()) {
        const folderPath = path.join(basePath, folder.name);
        const folderAssets = await findAssetsInFolder(folderPath, folder.name);
        assets.push(...folderAssets);
      }
    }
  } catch (error) {
    console.warn('Error reading figma assets directory:', error);
  }
  
  return assets;
}

/**
 * –ü–æ–∏—Å–∫ –∞—Å—Å–µ—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ
 */
async function findAssetsInFolder(folderPath: string, folderName: string): Promise<LocalFigmaAsset[]> {
  const assets: LocalFigmaAsset[] = [];
  
  try {
    const files = await fs.readdir(folderPath, { withFileTypes: true });
    
    for (const file of files) {
      if (file.isFile() && file.name.endsWith('.png')) {
        const asset = createAssetFromFile(file.name, folderPath, folderName);
        assets.push(asset);
      }
    }
  } catch (error) {
    console.warn(`Error reading folder ${folderName}:`, error);
  }
  
  return assets;
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∞—Å—Å–µ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞
 */
function createAssetFromFile(fileName: string, folderPath: string, folderName: string): LocalFigmaAsset {
  const filePath = path.join(folderPath, fileName);
  const tags = extractTagsFromFileName(fileName, folderName);
  
  return {
    fileName,
    filePath,
    metadata: {
      allTags: tags,
      description: generateDescription(fileName, folderName),
      folderName,
      aiAnalysis: {
        emotionalTone: determineEmotionalTone(fileName, folderName),
        category: determineCategoryFromFolder(folderName)
      }
    }
  };
}

/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
 */
function extractTagsFromFileName(fileName: string, folderName: string): string[] {
  const tags: string[] = [];
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
  if (folderName.includes('–∑–∞–π—Ü')) tags.push('–∑–∞—è—Ü', '–∫—Ä–æ–ª–∏–∫');
  if (folderName.includes('–Ω–æ–≤–æ—Å—Ç–∏')) tags.push('–Ω–æ–≤–æ—Å—Ç–∏', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è');
  if (folderName.includes('–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏')) tags.push('–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è', '–∫–∞—Ä—Ç–∏–Ω–∫–∞');
  if (folderName.includes('–ª–æ–≥–æ—Ç–∏–ø—ã')) tags.push('–ª–æ–≥–æ—Ç–∏–ø', '–ª–æ–≥–æ');
  if (folderName.includes('–∏–∫–æ–Ω–∫–∏')) tags.push('–∏–∫–æ–Ω–∫–∞', '–∑–Ω–∞—á–æ–∫');
  if (folderName.includes('–∞–π–¥–µ–Ω—Ç–∏–∫–∞')) tags.push('–±—Ä–µ–Ω–¥', '–∞–π–¥–µ–Ω—Ç–∏–∫–∞');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–≥–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  const fileNameLower = fileName.toLowerCase();
  if (fileNameLower.includes('—Å—á–∞—Å—Ç–ª–∏–≤') || fileNameLower.includes('—Ä–∞–¥–æ—Å—Ç')) tags.push('—Å—á–∞—Å—Ç–ª–∏–≤—ã–π', '—Ä–∞–¥–æ—Å—Ç–Ω—ã–π');
  if (fileNameLower.includes('–≥—Ä—É—Å—Ç–Ω') || fileNameLower.includes('–ø–µ—á–∞–ª—å')) tags.push('–≥—Ä—É—Å—Ç–Ω—ã–π', '–ø–µ—á–∞–ª—å–Ω—ã–π');
  if (fileNameLower.includes('—Å–µ—Ä–¥–∏—Ç') || fileNameLower.includes('–∑–ª–æ–π')) tags.push('—Å–µ—Ä–¥–∏—Ç—ã–π', '–∑–ª–æ–π');
  if (fileNameLower.includes('–ø—É—Ç–µ—à–µ—Å—Ç–≤')) tags.push('–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ', '–ø–æ–µ–∑–¥–∫–∞');
  if (fileNameLower.includes('—Å–∞–º–æ–ª–µ—Ç') || fileNameLower.includes('–∞–≤–∏–∞')) tags.push('—Å–∞–º–æ–ª–µ—Ç', '–∞–≤–∏–∞—Ü–∏—è');
  if (fileNameLower.includes('–±–∏–ª–µ—Ç')) tags.push('–±–∏–ª–µ—Ç', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
  
  // –û–±—â–∏–µ —Ç–µ–≥–∏
  tags.push('–∫—É–ø–∏–±–∏–ª–µ—Ç', '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è');
  
  return [...new Set(tags)]; // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∞—Å—Å–µ—Ç–∞
 */
function generateDescription(fileName: string, folderName: string): string {
  const category = determineCategoryFromFolder(folderName);
  const emotion = determineEmotionalTone(fileName, folderName);
  
  return `${category} –∏–∑ –ø–∞–ø–∫–∏ ${folderName}${emotion ? ` —Å —ç–º–æ—Ü–∏–µ–π ${emotion}` : ''}`;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞
 */
function determineEmotionalTone(fileName: string, folderName: string): string {
  const fileNameLower = fileName.toLowerCase();
  
  if (fileNameLower.includes('—Å—á–∞—Å—Ç–ª–∏–≤') || fileNameLower.includes('—Ä–∞–¥–æ—Å—Ç')) return 'happy';
  if (fileNameLower.includes('–≥—Ä—É—Å—Ç–Ω') || fileNameLower.includes('–ø–µ—á–∞–ª—å')) return 'sad';
  if (fileNameLower.includes('—Å–µ—Ä–¥–∏—Ç') || fileNameLower.includes('–∑–ª–æ–π')) return 'angry';
  if (fileNameLower.includes('—É–¥–∏–≤–ª–µ–Ω') || fileNameLower.includes('—Å–º—É—â–µ–Ω')) return 'confused';
  
  return 'neutral';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–∞–ø–∫–µ
 */
function determineCategoryFromFolder(folderName: string): string {
  if (folderName.includes('–∑–∞–π—Ü')) return 'character';
  if (folderName.includes('–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏')) return 'illustration';
  if (folderName.includes('–ª–æ–≥–æ—Ç–∏–ø—ã')) return 'logo';
  if (folderName.includes('–∏–∫–æ–Ω–∫–∏')) return 'icon';
  if (folderName.includes('–∞–π–¥–µ–Ω—Ç–∏–∫–∞')) return 'brand';
  
  return 'image';
}

/**
 * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º
 */
function filterAssetsByTags(assets: LocalFigmaAsset[], searchTags: string[]): LocalFigmaAsset[] {
  if (!searchTags || searchTags.length === 0) {
    return assets;
  }
  
  return assets.filter(asset => {
    const assetTags = asset.metadata.allTags.map(tag => tag.toLowerCase());
    return searchTags.some(searchTag => 
      assetTags.some(assetTag => 
        assetTag.includes(searchTag.toLowerCase()) || 
        searchTag.toLowerCase().includes(assetTag)
      )
    );
  });
}

/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
function applyContextFilters(assets: LocalFigmaAsset[], context: LocalFigmaSearchParams['context']): LocalFigmaAsset[] {
  let filtered = [...assets];
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π —ç–º–æ—Ü–∏–∏
  if (context.preferred_emotion) {
    const emotionFiltered = filtered.filter(asset => 
      asset.metadata.aiAnalysis?.emotionalTone === context.preferred_emotion
    );
    if (emotionFiltered.length > 0) {
      filtered = emotionFiltered;
    }
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
  if (context.airline) {
    const airlineFiltered = filtered.filter(asset => 
      asset.metadata.description.toLowerCase().includes(context.airline.toLowerCase()) ||
      asset.fileName.toLowerCase().includes(context.airline.toLowerCase())
    );
    if (airlineFiltered.length > 0) {
      filtered = airlineFiltered;
    }
  }
  
  return filtered;
} 