/**
 * üîç FIGMA LOCAL PROCESSOR
 * 
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Figma –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import { AITagMapper } from './ai-tag-mapper';

interface LocalFigmaAsset {
  fileName: string;
  filePath: string;
  metadata: {
    allTags: string[];
    description: string;
    folderName: string;
    aiAnalysis?: {
      emotionalTone?: string;
      category?: string;
    };
  };
}

interface LocalFigmaSearchParams {
  tags: string[];
  context: {
    campaign_type: 'promotional' | 'seasonal' | 'informational';
    emotional_tone: 'positive' | 'neutral' | 'urgent' | 'friendly';
    target_count: number;
    diversity_mode?: boolean;
    preferred_emotion?: 'neutral' | 'happy' | 'angry' | 'sad' | 'confused';
    airline?: string;
    use_local_only?: boolean;
  };
}

interface LocalFigmaSearchResult {
  success: boolean;
  data: {
    metadata: Record<string, {
      path: string;
      metadata: LocalFigmaAsset['metadata'];
    }>;
  };
  error?: string;
}

/**
 * –ü–æ–∏—Å–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö Figma –∞—Å—Å–µ—Ç–æ–≤ —Å AI-–º–∞–ø–ø–∏–Ω–≥–æ–º —Ç–µ–≥–æ–≤
 */
export async function getLocalFigmaAssets(params: LocalFigmaSearchParams): Promise<LocalFigmaSearchResult> {
  try {
    const basePath = path.resolve(process.cwd(), 'figma-all-pages-1750993353363');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø–∞–ø–∫–∏
    try {
      await fs.access(basePath);
    } catch (error) {
      return {
        success: false,
        error: `Figma assets directory not found: ${basePath}`,
        data: { metadata: {} }
      };
    }

    console.log(`üîç Figma search: ${params.tags.length} input tags, target: ${params.context.target_count}`);

    // ü§ñ AI-POWERED TAG MAPPING
    const aiTagMapper = new AITagMapper();
    const tagMappingResult = await aiTagMapper.mapTags({
      inputTags: params.tags,
      campaignType: params.context.campaign_type,
      emotionalTone: params.context.emotional_tone,
      contentContext: `Target count: ${params.context.target_count}, Diversity: ${params.context.diversity_mode}`
    });

    let searchTags: string[];
    if (tagMappingResult.success && tagMappingResult.mappedTags.length > 0) {
      searchTags = tagMappingResult.mappedTags;
      console.log(`‚úÖ AI Tag Mapping: [${params.tags.join(', ')}] ‚Üí [${searchTags.join(', ')}]`);
      console.log(`üìù Mapping reasoning: ${tagMappingResult.mappingReasoning}`);
    } else {
      searchTags = params.tags;
      console.log(`‚ö†Ô∏è AI Tag Mapping failed, using original tags: [${searchTags.join(', ')}]`);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PNG —Ñ–∞–π–ª–æ–≤
    const assets = await findAllAssetsWithAITags(basePath);
    
    if (assets.length === 0) {
      return {
        success: false,
        error: 'No assets found in Figma directory',
        data: { metadata: {} }
      };
    }

    // –§–∏–ª—å—Ç—Ä—É–µ–º –∞—Å—Å–µ—Ç—ã –ø–æ AI-–º–∞–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–≥–∞–º
    const filteredAssets = filterAssetsByAITags(assets, searchTags, tagMappingResult.selectedFolders);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
    const finalAssets = applyContextFilters(filteredAssets, params.context);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const limitedAssets = finalAssets.slice(0, params.context.target_count);
    
    console.log(`üéØ Found ${limitedAssets.length}/${assets.length} matching assets`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const metadata: Record<string, any> = {};
    limitedAssets.forEach(asset => {
      metadata[asset.fileName] = {
        path: asset.filePath,
        metadata: {
          ...asset.metadata,
          ai_mapping: {
            original_tags: params.tags,
            mapped_tags: searchTags,
            mapping_confidence: tagMappingResult.confidence,
            selected_folders: tagMappingResult.selectedFolders
          }
        }
      };
    });

    return {
      success: true,
      data: { metadata }
    };
    
  } catch (error) {
    return {
      success: false,
      error: error instanceof Error ? error.message : String(error),
      data: { metadata: {} }
    };
  }
}

/**
 * –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –∞—Å—Å–µ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ —Å AI-—Ç–µ–≥–∞–º–∏
 */
async function findAllAssetsWithAITags(basePath: string): Promise<LocalFigmaAsset[]> {
  const assets: LocalFigmaAsset[] = [];
  
  try {
    const folders = await fs.readdir(basePath, { withFileTypes: true });
    
    for (const folder of folders) {
      if (folder.isDirectory() && !folder.name.endsWith('.json')) {
        const folderPath = path.join(basePath, folder.name);
        const folderAssets = await findAssetsInFolderWithAITags(folderPath, folder.name);
        assets.push(...folderAssets);
      }
    }
  } catch (error) {
    console.warn('Error reading figma assets directory:', error);
  }
  
  return assets;
}

/**
 * Legacy function for backward compatibility
 */
// async function _findAllAssets(_basePath: string): Promise<LocalFigmaAsset[]> {
//   return findAllAssetsWithAITags(_basePath);
// }

/**
 * –ü–æ–∏—Å–∫ –∞—Å—Å–µ—Ç–æ–≤ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞–ø–∫–µ —Å AI-—Ç–µ–≥–∞–º–∏
 */
async function findAssetsInFolderWithAITags(folderPath: string, folderName: string): Promise<LocalFigmaAsset[]> {
  const assets: LocalFigmaAsset[] = [];
  
  try {
    const files = await fs.readdir(folderPath, { withFileTypes: true });
    
    for (const file of files) {
      if (file.isFile() && file.name.endsWith('.png')) {
        const asset = await createAssetFromFileWithAITags(file.name, folderPath, folderName);
        assets.push(asset);
      }
    }
  } catch (error) {
    console.warn(`Error reading folder ${folderName}:`, error);
  }
  
  return assets;
}



/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –∞—Å—Å–µ—Ç–∞ –∏–∑ —Ñ–∞–π–ª–∞ —Å AI-—Ç–µ–≥–∞–º–∏
 */
async function createAssetFromFileWithAITags(fileName: string, folderPath: string, folderName: string): Promise<LocalFigmaAsset> {
  const filePath = path.join(folderPath, fileName);
  const tags = await extractTagsFromAIOptimizedData(fileName, folderName);
  
  return {
    fileName,
    filePath,
    metadata: {
      allTags: tags,
      description: generateDescription(fileName, folderName),
      folderName,
      aiAnalysis: {
        emotionalTone: determineEmotionalTone(fileName, folderName),
        category: determineCategoryFromFolder(folderName)
      }
    }
  };
}



/**
 * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –∏–∑ AI-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
 */
async function extractTagsFromAIOptimizedData(fileName: string, folderName: string): Promise<string[]> {
  const aiTagMapper = new AITagMapper();
  
  // Create input tags from filename and folder
  const inputTags = [fileName.toLowerCase(), folderName];
  
  // Map tags using AI agent
  const mappingResult = await aiTagMapper.mapTags({
    inputTags,
    campaignType: 'promotional',
    emotionalTone: 'friendly',
    contentContext: `Figma asset: ${fileName} from folder ${folderName}`
  });
  
  if (!mappingResult.success) {
    throw new Error(`AI Tag Mapping failed: ${mappingResult.error}`);
  }
  
  return mappingResult.mappedTags;
}



/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∞—Å—Å–µ—Ç–∞
 */
function generateDescription(fileName: string, folderName: string): string {
  const category = determineCategoryFromFolder(folderName);
  const emotion = determineEmotionalTone(fileName, folderName);
  
  return `${category} –∏–∑ –ø–∞–ø–∫–∏ ${folderName}${emotion ? ` —Å —ç–º–æ—Ü–∏–µ–π ${emotion}` : ''}`;
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞
 */
function determineEmotionalTone(fileName: string, _folderName: string): string {
  const fileNameLower = fileName.toLowerCase();
  
  if (fileNameLower.includes('—Å—á–∞—Å—Ç–ª–∏–≤') || fileNameLower.includes('—Ä–∞–¥–æ—Å—Ç')) return 'happy';
  if (fileNameLower.includes('–≥—Ä—É—Å—Ç–Ω') || fileNameLower.includes('–ø–µ—á–∞–ª—å')) return 'sad';
  if (fileNameLower.includes('—Å–µ—Ä–¥–∏—Ç') || fileNameLower.includes('–∑–ª–æ–π')) return 'angry';
  if (fileNameLower.includes('—É–¥–∏–≤–ª–µ–Ω') || fileNameLower.includes('—Å–º—É—â–µ–Ω')) return 'confused';
  
  return 'neutral';
}

/**
 * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –ø–∞–ø–∫–µ
 */
function determineCategoryFromFolder(folderName: string): string {
  if (folderName.includes('–∑–∞–π—Ü')) return 'character';
  if (folderName.includes('–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏')) return 'illustration';
  if (folderName.includes('–ª–æ–≥–æ—Ç–∏–ø—ã')) return 'logo';
  if (folderName.includes('–∏–∫–æ–Ω–∫–∏')) return 'icon';
  if (folderName.includes('–∞–π–¥–µ–Ω—Ç–∏–∫–∞')) return 'brand';
  
  return 'image';
}

/**
 * AI-powered —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–∞–ø–æ–∫
 */
function filterAssetsByAITags(assets: LocalFigmaAsset[], searchTags: string[], priorityFolders: string[]): LocalFigmaAsset[] {
  if (!searchTags || searchTags.length === 0) {
    return assets;
  }
  
  console.log(`üîç Filtering ${assets.length} assets by AI tags: [${searchTags.join(', ')}]`);
  console.log(`üìÇ Priority folders: [${priorityFolders.join(', ')}]`);
  
  // Score and filter assets
  const scoredAssets = assets.map(asset => {
    const score = calculateAssetRelevanceScore(asset, searchTags, priorityFolders);
    return { asset, score };
  }).filter(item => item.score > 0);
  
  // Sort by score (highest first)
  scoredAssets.sort((a, b) => b.score - a.score);
  
  const filteredAssets = scoredAssets.map(item => item.asset);
  
  console.log(`‚úÖ Filtered to ${filteredAssets.length} relevant assets`);
  
  return filteredAssets;
}

/**
 * Calculate relevance score for an asset
 */
function calculateAssetRelevanceScore(asset: LocalFigmaAsset, searchTags: string[], priorityFolders: string[]): number {
  let score = 0;
  const assetTags = asset.metadata.allTags.map(tag => tag.toLowerCase());
  const folderName = asset.metadata.folderName;
  
  // Exact tag matches (high score)
  for (const searchTag of searchTags) {
    const searchTagLower = searchTag.toLowerCase();
    
    if (assetTags.includes(searchTagLower)) {
      score += 10; // Exact match
    } else {
      // Partial matches
      for (const assetTag of assetTags) {
        if (assetTag.includes(searchTagLower) || searchTagLower.includes(assetTag)) {
          score += 5; // Partial match
        }
      }
    }
  }
  
  // Priority folder bonus
  if (priorityFolders.includes(folderName)) {
    const folderIndex = priorityFolders.indexOf(folderName);
    score += (priorityFolders.length - folderIndex) * 2; // Higher bonus for higher priority folders
  }
  
  // Brand mascot bonus (always prefer rabbit/mascot assets)
  if (assetTags.some(tag => ['–∑–∞—è—Ü', '–∫—Ä–æ–ª–∏–∫'].includes(tag))) {
    score += 3;
  }
  
  return score;
}

/**
 * Legacy —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤ –ø–æ —Ç–µ–≥–∞–º
 */


/**
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
 */
function applyContextFilters(assets: LocalFigmaAsset[], context: LocalFigmaSearchParams['context']): LocalFigmaAsset[] {
  let filtered = [...assets];
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–π —ç–º–æ—Ü–∏–∏
  if (context?.preferred_emotion) {
    const emotionFiltered = filtered.filter(asset => 
      asset.metadata.aiAnalysis?.emotionalTone === context.preferred_emotion
    );
    if (emotionFiltered.length > 0) {
      filtered = emotionFiltered;
    }
  }
  
  // –§–∏–ª—å—Ç—Ä –ø–æ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏
  if (context?.airline) {
    const airlineFiltered = filtered.filter(asset => 
      asset.metadata.description.toLowerCase().includes(context.airline?.toLowerCase() || '') ||
      asset.fileName.toLowerCase().includes(context.airline?.toLowerCase() || '')
    );
    if (airlineFiltered.length > 0) {
      filtered = airlineFiltered;
    }
  }
  
  return filtered;
} 