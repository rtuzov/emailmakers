// Import only what we need to break circular dependency
import { handleToolErrorUnified } from '../core/error-handler';
import { logger } from '../core/logger';

// Define ToolResult locally to avoid circular import
interface ToolResult {
  success: boolean;
  data?: any;
  error?: string;
  metadata?: Record<string, any>;
}

// Local error handling function
function handleToolError(toolName: string, error: any): ToolResult {
  logger.error(`Tool ${toolName} failed`, { error });
  return handleToolErrorUnified(toolName, error);
}

interface DateParams {
  months_ahead?: number | null; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3)
  search_window?: number | null; // –û–∫–Ω–æ –ø–æ–∏—Å–∫–∞ –≤ –¥–Ω—è—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30)
  // –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç
  campaign_context?: {
    topic?: string; // –¢–µ–º–∞ –∫–∞–º–ø–∞–Ω–∏–∏
    urgency?: 'urgent' | 'standard' | 'seasonal'; // –°—Ä–æ—á–Ω–æ—Å—Ç—å
    campaign_type?: 'hot_deals' | 'newsletter' | 'seasonal' | 'announcement';
    destination?: string; // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
  } | null;
}

interface DateResult {
  today: string;
  search_start: string;
  search_end: string;
  suggested_ranges: Array<{
    from: string;
    to: string;
    period: string;
    reasoning: string; // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
  }>;
  intelligent_selection: {
    primary_range: {
      from: string;
      to: string;
      reasoning: string;
    };
    campaign_factors: string[];
  };
}

/**
 * Date Tool - –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑—É–º–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
 */
export async function getCurrentDate(params: DateParams = {}): Promise<ToolResult> {
  try {
    console.log('üìÖ Getting intelligent date ranges with context:', params);

    const now = new Date();
    const today = now.toISOString().split('T')[0];
    
    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const dateSelection = generateIntelligentDateSelection(now, params.campaign_context);
    
    // –ë–∞–∑–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    const monthsAhead = params.months_ahead ?? dateSelection.recommended_months_ahead;
    const searchWindow = params.search_window ?? dateSelection.recommended_search_window;
    
    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–π –¥–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    const searchStartDate = new Date(now);
    searchStartDate.setDate(now.getDate() + dateSelection.days_ahead_start);
    const searchStart = searchStartDate.toISOString().split('T')[0];
    
    // –ö–æ–Ω–µ—Ü –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–∏—Å–∫–∞
    const searchEndDate = new Date(searchStartDate);
    searchEndDate.setMonth(searchStartDate.getMonth() + monthsAhead);
    const searchEnd = searchEndDate.toISOString().split('T')[0];
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã
    const suggestedRanges = generateContextualRanges(searchStartDate, monthsAhead, params.campaign_context);
    
    const result: DateResult = {
      today: today || new Date().toISOString().split('T')[0]!,
      search_start: searchStart || new Date().toISOString().split('T')[0]!,
      search_end: searchEnd || new Date().toISOString().split('T')[0]!,
      suggested_ranges: suggestedRanges.filter((range): range is { from: string; to: string; period: string; reasoning: string } => 
        Boolean(range.from && range.to && range.period && range.reasoning)
      ),
      intelligent_selection: {
        primary_range: dateSelection.primary_range,
        campaign_factors: dateSelection.factors_considered
      }
    };

    console.log('‚úÖ Intelligent date ranges generated:', result);

    return {
      success: true,
      data: result,
      metadata: {
        timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,
        timestamp: now.toISOString(),
        months_ahead: monthsAhead,
        search_window: searchWindow,
        campaign_context: params.campaign_context,
        selection_strategy: dateSelection.strategy
      }
    };

  } catch (error) {
    return handleToolError('get_current_date', error);
  }
}

function generateIntelligentDateSelection(
  currentDate: Date, 
  context?: DateParams['campaign_context']
) {
  const factors: string[] = [];
  let strategy = 'standard';
  let daysAheadStart = 7; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
  let recommendedMonthsAhead = 3;
  let recommendedSearchWindow = 30;

  // –ê–Ω–∞–ª–∏–∑ —Ç–µ–º—ã –∫–∞–º–ø–∞–Ω–∏–∏
  if (context?.topic) {
    const topic = context.topic.toLowerCase();
    
    // –ì–æ—Ä—è—â–∏–µ –±–∏–ª–µ—Ç—ã –∏ —Å—Ä–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (topic.includes('–≥–æ—Ä—è—â') || topic.includes('—Å—Ä–æ—á–Ω') || topic.includes('—Å–∫–∏–¥–∫') || 
        topic.includes('–∞–∫—Ü–∏—è') || topic.includes('–ø–æ—Å–ª–µ–¥–Ω') || topic.includes('—É—Å–ø–µ–π')) {
      daysAheadStart = 1; // –í—ã–ª–µ—Ç —É–∂–µ –∑–∞–≤—Ç—Ä–∞
      recommendedMonthsAhead = 2; // –ö–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–∏–æ–¥
      recommendedSearchWindow = 14; // –£–∑–∫–æ–µ –æ–∫–Ω–æ
      strategy = 'urgent_deals';
      factors.push('–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ä–æ—á–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —Å–æ–∫—Ä–∞—â–µ–Ω –ø–µ—Ä–∏–æ–¥ –ø–æ–∏—Å–∫–∞');
  }
  
    // –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    if (topic.includes('–ª–µ—Ç') || topic.includes('–∑–∏–º') || topic.includes('–Ω–æ–≤—ã–π –≥–æ–¥') || 
        topic.includes('–ø—Ä–∞–∑–¥–Ω–∏–∫') || topic.includes('–æ—Ç–ø—É—Å–∫') || topic.includes('–æ—Å–µ–Ω')) {
      const season = detectSeason(currentDate, topic);
      const seasonDates = getSeasonOptimalDates(currentDate, season);
      daysAheadStart = seasonDates.daysAhead;
      recommendedMonthsAhead = seasonDates.monthsAhead;
      strategy = 'seasonal';
      factors.push(`–°–µ–∑–æ–Ω–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è (${season}) - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–∞—Ç—ã –ø–æ–¥ —Å–µ–∑–æ–Ω`);
    }
    
    // –î–µ–ª–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏
    if (topic.includes('–±–∏–∑–Ω–µ—Å') || topic.includes('–¥–µ–ª–æ–≤–∞—è') || topic.includes('–∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü') || 
        topic.includes('–≤—Å—Ç—Ä–µ—á–∞')) {
      daysAheadStart = 14; // –ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      recommendedMonthsAhead = 4; // –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
      strategy = 'business_travel';
      factors.push('–î–µ–ª–æ–≤—ã–µ –ø–æ–µ–∑–¥–∫–∏ - —É–≤–µ–ª–∏—á–µ–Ω –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏
  if (context?.campaign_type) {
    switch (context.campaign_type) {
      case 'hot_deals':
        daysAheadStart = Math.min(daysAheadStart, 3);
        recommendedMonthsAhead = 2;
        factors.push('–ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è - —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã');
        break;
      case 'seasonal':
        // –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –∑–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        daysAheadStart = Math.max(daysAheadStart, 21);
        recommendedMonthsAhead = 5;
        factors.push('–°–µ–∑–æ–Ω–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
        break;
      case 'newsletter':
        // –û–±—ã—á–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏
        daysAheadStart = 7;
        recommendedMonthsAhead = 3;
        factors.push('–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å—Ä–æ–∫–∏');
        break;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏
  if (context?.urgency) {
    switch (context.urgency) {
      case 'urgent':
        daysAheadStart = 1;
        recommendedMonthsAhead = 1;
        recommendedSearchWindow = 7;
        factors.push('–°—Ä–æ—á–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ä–æ–∫–∏');
        break;
      case 'seasonal':
        daysAheadStart = Math.max(daysAheadStart, 30);
        recommendedMonthsAhead = 6;
        factors.push('–°–µ–∑–æ–Ω–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ');
        break;
    }
  }

  // –ê–Ω–∞–ª–∏–∑ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏
  if (context?.destination) {
    const destinationInsights = getDestinationSeasonality(context.destination, currentDate);
    if (destinationInsights.optimal_booking_ahead_days) {
      daysAheadStart = Math.max(daysAheadStart, destinationInsights.optimal_booking_ahead_days);
      factors.push(`–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ${context.destination}: ${destinationInsights.reasoning}`);
    }
  }

  const primaryRange = generatePrimaryRange(currentDate, daysAheadStart, recommendedMonthsAhead);

  return {
    strategy,
    days_ahead_start: daysAheadStart,
    recommended_months_ahead: recommendedMonthsAhead,
    recommended_search_window: recommendedSearchWindow,
    primary_range: primaryRange,
    factors_considered: factors
  };
}

function generatePrimaryRange(currentDate: Date, daysAhead: number, monthsAhead: number) {
  const startDate = new Date(currentDate);
  startDate.setDate(currentDate.getDate() + daysAhead);
  
  const endDate = new Date(startDate);
  endDate.setMonth(startDate.getMonth() + monthsAhead);
  
  let reasoning = `–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Å ${daysAhead} –¥–Ω–µ–π –æ—Ç —Å–µ–≥–æ–¥–Ω—è –Ω–∞ ${monthsAhead} –º–µ—Å—è—Ü–µ–≤ –≤–ø–µ—Ä–µ–¥`;
  
  return {
    from: startDate.toISOString().split('T')[0] || startDate.toISOString().substring(0, 10),
    to: endDate.toISOString().split('T')[0] || endDate.toISOString().substring(0, 10),
    reasoning
  };
}

function generateContextualRanges(
  startDate: Date, 
  monthsAhead: number, 
  context?: DateParams['campaign_context']
) {
  const ranges = [];
  
  // –ë–ª–∏–∂–∞–π—à–∏–π –ø–µ—Ä–∏–æ–¥ (–≤—Å–µ–≥–¥–∞ –∞–∫—Ç—É–∞–ª–µ–Ω)
  const nearRange = getNearestOptimalRange(startDate);
  if (nearRange) {
    ranges.push(nearRange);
  }
  
  // –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞–º–ø–∞–Ω–∏–∏
  if (context?.campaign_type === 'hot_deals') {
            // –î–ª—è –≥–æ—Ä—è—â–∏—Ö –±–∏–ª–µ—Ç–æ–≤ - –±–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ —Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è
    const weekendRange = getUpcomingWeekend(startDate);
    if (weekendRange) {
      ranges.push({
        ...weekendRange,
                  reasoning: '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –≥–æ—Ä—è—â–∏—Ö –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ'
      });
    }
    
    const nextWeekRange = getNextWeekRange(startDate);
    ranges.push({
      ...nextWeekRange,
      reasoning: '–ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é'
    });
    
  } else if (context?.campaign_type === 'seasonal') {
    // –î–ª—è —Å–µ–∑–æ–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π - –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã
    const seasonalRanges = getSeasonalRanges(startDate, context.topic);
    ranges.push(...seasonalRanges);
    
  } else {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
    ranges.push(...getStandardRanges(startDate, monthsAhead));
  }
  
  return ranges;
}

function detectSeason(currentDate: Date, topic: string): string {
  const month = currentDate.getMonth();
  
  if (topic.includes('–ª–µ—Ç') || topic.includes('–ø–ª—è–∂') || topic.includes('–º–æ—Ä–µ')) {
    return 'summer';
  }
  if (topic.includes('–∑–∏–º') || topic.includes('–Ω–æ–≤—ã–π –≥–æ–¥') || topic.includes('—Ä–æ–∂–¥–µ—Å—Ç')) {
    return 'winter';
  }
  if (topic.includes('–≤–µ—Å–Ω') || topic.includes('8 –º–∞—Ä—Ç–∞')) {
    return 'spring';
  }
  if (topic.includes('–æ—Å–µ–Ω') || topic.includes('—Å–µ–Ω—Ç—è–±—Ä') || topic.includes('–æ–∫—Ç—è–±—Ä')) {
    return 'autumn';
  }
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞
  if (month >= 5 && month <= 7) return 'summer';
  if (month >= 11 || month <= 1) return 'winter';
  if (month >= 2 && month <= 4) return 'spring';
  return 'autumn';
}

function getSeasonOptimalDates(currentDate: Date, season: string) {
  const currentMonth = currentDate.getMonth(); // 0-11
  
  switch (season) {
    case 'summer':
      return { daysAhead: 45, monthsAhead: 4 }; // –õ–µ—Ç–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç –∑–∞—Ä–∞–Ω–µ–µ
    case 'winter':
      return { daysAhead: 60, monthsAhead: 5 }; // –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏ –ø–ª–∞–Ω–∏—Ä—É—é—Ç –æ—á–µ–Ω—å –∑–∞—Ä–∞–Ω–µ–µ
    case 'spring':
      return { daysAhead: 21, monthsAhead: 3 }; // –í–µ—Å–µ–Ω–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
    case 'autumn':
      // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –ª–µ—Ç–æ (–∏—é–Ω—å-–∞–≤–≥—É—Å—Ç), –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –æ—Å–µ–Ω—å –∑–∞—Ä–∞–Ω–µ–µ
      if (currentMonth >= 5 && currentMonth <= 7) {
        return { daysAhead: 60, monthsAhead: 4 }; // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ª–µ—Ç–∞ –Ω–∞ –æ—Å–µ–Ω—å
      }
      // –ï—Å–ª–∏ —É–∂–µ –æ—Å–µ–Ω—å, —Ç–æ –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã
      return { daysAhead: 7, monthsAhead: 3 }; // –û—Å–µ–Ω–Ω–∏–µ –ø–æ–µ–∑–¥–∫–∏
    default:
      return { daysAhead: 7, monthsAhead: 3 };
  }
}

function getDestinationSeasonality(destination: string, currentDate: Date) {
  const dest = destination.toLowerCase();
  
  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ª–µ—Ç–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  if (dest.includes('—Ç—É—Ä—Ü–∏—è') || dest.includes('–≥—Ä–µ—Ü–∏—è') || dest.includes('–∫–∏–ø—Ä') || 
      dest.includes('–∏—Å–ø–∞–Ω–∏—è') || dest.includes('–∏—Ç–∞–ª–∏—è')) {
    const month = currentDate.getMonth();
    if (month >= 1 && month <= 4) { // –§–µ–≤—Ä–∞–ª—å-–º–∞–π
      return {
        optimal_booking_ahead_days: 60,
        reasoning: '–õ–µ—Ç–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—É—á—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞—Ä–∞–Ω–µ–µ'
      };
    }
  }
  
  // –ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–µ –∫—É—Ä–æ—Ä—Ç—ã
  if (dest.includes('—Å–æ—á–∏') || dest.includes('—à–≤–µ–π—Ü–∞—Ä–∏—è') || dest.includes('–∞–≤—Å—Ç—Ä–∏—è') || 
      dest.includes('—Ñ—Ä–∞–Ω—Ü–∏—è') && dest.includes('–∞–ª—å–ø—ã')) {
    const month = currentDate.getMonth();
    if (month >= 8 && month <= 11) { // –°–µ–Ω—Ç—è–±—Ä—å-–¥–µ–∫–∞–±—Ä—å
      return {
        optimal_booking_ahead_days: 45,
        reasoning: '–ì–æ—Ä–Ω–æ–ª—ã–∂–Ω—ã–µ –∫—É—Ä–æ—Ä—Ç—ã –±—Ä–æ–Ω–∏—Ä—É—é—Ç –¥–æ –Ω–∞—á–∞–ª–∞ —Å–µ–∑–æ–Ω–∞'
      };
    }
  }
  
  return { optimal_booking_ahead_days: 14, reasoning: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' };
}

function getNearestOptimalRange(startDate: Date) {
  const nearStart = new Date(startDate);
  const nearEnd = new Date(startDate);
  nearEnd.setDate(startDate.getDate() + 14);
  
  return {
    from: nearStart.toISOString().split('T')[0] || nearStart.toISOString().substring(0, 10),
    to: nearEnd.toISOString().split('T')[0] || nearEnd.toISOString().substring(0, 10),
    period: '–ë–ª–∏–∂–∞–π—à–∏–µ 2 –Ω–µ–¥–µ–ª–∏',
    reasoning: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
  };
}

function getUpcomingWeekend(fromDate: Date): { from: string; to: string; period: string } | null {
  const date = new Date(fromDate);
  const dayOfWeek = date.getDay();
  
  // –ù–∞—Ö–æ–¥–∏–º –±–ª–∏–∂–∞–π—à—É—é –ø—è—Ç–Ω–∏—Ü—É
  let daysToFriday = 5 - dayOfWeek;
  if (daysToFriday <= 0) {
    daysToFriday += 7;
  }
  
  const friday = new Date(date);
  friday.setDate(date.getDate() + daysToFriday);
  
  const sunday = new Date(friday);
  sunday.setDate(friday.getDate() + 2);
  
  return {
    from: friday.toISOString().split('T')[0] || friday.toISOString().substring(0, 10),
    to: sunday.toISOString().split('T')[0] || sunday.toISOString().substring(0, 10),
    period: '–ë–ª–∏–∂–∞–π—à–∏–µ –≤—ã—Ö–æ–¥–Ω—ã–µ'
  };
}

function getNextWeekRange(startDate: Date) {
  const nextWeekStart = new Date(startDate);
  nextWeekStart.setDate(startDate.getDate() + 7);
  
  const nextWeekEnd = new Date(nextWeekStart);
  nextWeekEnd.setDate(nextWeekStart.getDate() + 7);
  
  return {
    from: nextWeekStart.toISOString().split('T')[0] || nextWeekStart.toISOString().substring(0, 10),
    to: nextWeekEnd.toISOString().split('T')[0] || nextWeekEnd.toISOString().substring(0, 10),
    period: '–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è',
    reasoning: '–ë—ã—Å—Ç—Ä–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
  };
}

function getSeasonalRanges(startDate: Date, topic?: string) {
  const ranges = [];
  const currentMonth = startDate.getMonth();
  if (!topic) {
    throw new Error('Topic parameter is required');
  }
  const topicLower = topic.toLowerCase();
  
  // –û—Å–µ–Ω–Ω–∏–π —Å–µ–∑–æ–Ω (—Å–µ–Ω—Ç—è–±—Ä—å-–Ω–æ—è–±—Ä—å)
  if (topicLower.includes('–æ—Å–µ–Ω')) {
    const autumnStart = new Date(startDate.getFullYear(), 8, 1); // –°–µ–Ω—Ç—è–±—Ä—å
    const autumnEnd = new Date(startDate.getFullYear(), 10, 30); // –ù–æ—è–±—Ä—å
    
    // –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –µ—â–µ –ª–µ—Ç–æ, –ø–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞ –æ—Å–µ–Ω—å
    if (currentMonth < 8) {
      ranges.push({
        from: autumnStart.toISOString().split('T')[0] || autumnStart.toISOString().substring(0, 10),
        to: autumnEnd.toISOString().split('T')[0] || autumnEnd.toISOString().substring(0, 10),
        period: '–û—Å–µ–Ω–Ω–∏–π —Å–µ–∑–æ–Ω',
        reasoning: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Å–µ–Ω–Ω–∏—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π (—Å–µ–Ω—Ç—è–±—Ä—å-–Ω–æ—è–±—Ä—å)'
      });
    } else if (currentMonth >= 8 && currentMonth <= 10) {
      // –£–∂–µ –æ—Å–µ–Ω—å - –±–ª–∏–∂–∞–π—à–∏–µ –¥–∞—Ç—ã
      const nearStart = new Date(startDate);
      nearStart.setDate(startDate.getDate() + 7);
      ranges.push({
        from: nearStart.toISOString().split('T')[0] || nearStart.toISOString().substring(0, 10),
        to: autumnEnd.toISOString().split('T')[0] || autumnEnd.toISOString().substring(0, 10),
        period: '–û—Å—Ç–∞–≤—à–∞—è—Å—è –æ—Å–µ–Ω—å',
        reasoning: '–¢–µ–∫—É—â–∏–π –æ—Å–µ–Ω–Ω–∏–π –ø–µ—Ä–∏–æ–¥'
      });
    }
  }
  
  // –õ–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω
  if (topicLower.includes('–ª–µ—Ç') && currentMonth <= 4) { // –î–æ –º–∞—è
    const summerStart = new Date(startDate.getFullYear(), 5, 1); // –ò—é–Ω—å
    const summerEnd = new Date(startDate.getFullYear(), 7, 31); // –ê–≤–≥—É—Å—Ç
    ranges.push({
      from: summerStart.toISOString().split('T')[0] || summerStart.toISOString().substring(0, 10),
      to: summerEnd.toISOString().split('T')[0] || summerEnd.toISOString().substring(0, 10),
      period: '–õ–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω',
      reasoning: '–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ª–µ—Ç–Ω–µ–≥–æ –æ—Ç–¥—ã—Ö–∞'
    });
  }
  
  // –ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
  if ((topicLower.includes('–∑–∏–º') || topicLower.includes('–Ω–æ–≤—ã–π –≥–æ–¥')) && currentMonth >= 8) { // –° —Å–µ–Ω—Ç—è–±—Ä—è
    const nyStart = new Date(startDate.getFullYear(), 11, 28); // 28 –¥–µ–∫–∞–±—Ä—è
    const nyEnd = new Date(startDate.getFullYear() + 1, 0, 8); // 8 —è–Ω–≤–∞—Ä—è
    ranges.push({
      from: nyStart.toISOString().split('T')[0] || nyStart.toISOString().substring(0, 10),
      to: nyEnd.toISOString().split('T')[0] || nyEnd.toISOString().substring(0, 10),
      period: '–ù–æ–≤–æ–≥–æ–¥–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏',
      reasoning: '–ü–æ–ø—É–ª—è—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'
    });
  }
  
  return ranges;
}

function getStandardRanges(startDate: Date, _monthsAhead: number) {
  const ranges = [];
  
  // –°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
  const nextMonth = new Date(startDate);
  nextMonth.setMonth(startDate.getMonth() + 1);
  nextMonth.setDate(1);
  const nextMonthEnd = new Date(nextMonth);
  nextMonthEnd.setMonth(nextMonth.getMonth() + 1);
  nextMonthEnd.setDate(0);
  
  ranges.push({
    from: nextMonth.toISOString().split('T')[0] || nextMonth.toISOString().substring(0, 10),
    to: nextMonthEnd.toISOString().split('T')[0] || nextMonthEnd.toISOString().substring(0, 10),
    period: '–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü',
    reasoning: '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
  });
  
  // –ß–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞
  const twoMonthsAhead = new Date(startDate);
  twoMonthsAhead.setMonth(startDate.getMonth() + 2);
  twoMonthsAhead.setDate(1);
  const twoMonthsEnd = new Date(twoMonthsAhead);
  twoMonthsEnd.setMonth(twoMonthsAhead.getMonth() + 1);
  twoMonthsEnd.setDate(0);
  
  ranges.push({
    from: twoMonthsAhead.toISOString().split('T')[0] || twoMonthsAhead.toISOString().substring(0, 10),
    to: twoMonthsEnd.toISOString().split('T')[0] || twoMonthsEnd.toISOString().substring(0, 10),
    period: '–ß–µ—Ä–µ–∑ 2 –º–µ—Å—è—Ü–∞',
    reasoning: '–ó–∞–±–ª–∞–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ'
  });
  
  return ranges;
} 