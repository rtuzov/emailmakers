import { config } from 'dotenv';
import * as path from 'path';
import * as fs from 'fs/promises';

// Load .env.local file
config({ path: path.resolve(process.cwd(), '.env.local') });

import { ToolResult, handleToolError } from './index';
import OpenAI from 'openai';
import { TagDictionaryManager, generateShortFileName, TagDictionary } from './figma-tag-dictionary';
import { TagOptimizationService } from './tag-optimization-service';
import { getUsageModel } from '../../shared/utils/model-config';

interface AllPagesProcessorParams {
  figmaUrl: string;
  outputDirectory?: string;
  context?: {
    campaign_type?: 'urgent' | 'newsletter' | 'seasonal' | 'promotional' | 'informational';
    content_theme?: string;
    target_audience?: string;
    brand_guidelines?: string[];
  };
}

interface ProcessedPage {
  id: string;
  name: string;
  folderName: string;
  totalAssets: number;
  processedAssets: number;
  outputDirectory: string;
  tagDictionary: TagDictionary;
  summary: {
    totalTags: number;
    uniqueTags: number;
    averageTagsPerFile: number;
  };
}

interface FigmaPageNode {
  id: string;
  name: string;
  type: string;
  children?: FigmaPageNode[];
  componentPropertyDefinitions?: Record<string, any>;
  variantProperties?: Record<string, string>;
}

interface ProcessedAsset {
  id: string;
  originalName: string;
  newName: string;
  tags: string[];
  variants?: VariantInfo[];
  selectedVariant?: VariantInfo;
  filePath: string;
  metadata: {
    figmaNodeId: string;
    componentType: string;
    hasVariants: boolean;
    aiAnalysis: AITagAnalysis;
  };
}

interface VariantInfo {
  id: string;
  name: string;
  newName: string;
  tags: string[];
  properties: Record<string, string>;
  filePath: string;
  confidence: number;
  aiAnalysis: AITagAnalysis;
}

interface AITagAnalysis {
  suggestedTags: string[];
  contentDescription: string;
  emotionalTone: string;
  usageContext: string[];
  confidence: number;
  reasoning: string;
}

// Initialize OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ Figma
 * –ö–∞–∂–¥—ã–π –ª–∏—Å—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ª–∏—Å—Ç–∞
 */
export async function processAllFigmaPages(params: AllPagesProcessorParams): Promise<ToolResult> {
  try {
    console.log('üåü All Pages Processor: –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ Figma');

    const figmaToken = process.env.FIGMA_ACCESS_TOKEN || process.env.FIGMA_TOKEN;
    
    if (!figmaToken) {
      throw new Error('FIGMA_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Figma URL
    const { fileId } = extractFigmaIds(params.figmaUrl);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Figma —Ñ–∞–π–ª–∞
    const pages = await getAllFigmaPages(figmaToken, fileId);
    
    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${pages.length} —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Figma —Ñ–∞–π–ª–µ`);
    pages.forEach((page, index) => {
      console.log(`  ${index + 1}. "${page.name}" (ID: ${page.id})`);
    });

    // –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const baseOutputDir = params.outputDirectory || path.join(process.cwd(), `figma-all-pages-${Date.now()}`);
    await fs.mkdir(baseOutputDir, { recursive: true });

    const processedPages: ProcessedPage[] = [];
    const tagOptimizer = new TagOptimizationService();

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç–¥–µ–ª—å–Ω–æ
    for (const page of pages) {
      console.log(`\nüéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É: "${page.name}"`);
      
      try {
        const processedPage = await processPageComponents(
          figmaToken,
          fileId,
          page,
          baseOutputDir,
          params.context,
          tagOptimizer
        );
        
        processedPages.push(processedPage);
        
        console.log(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ "${page.name}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: ${processedPage.processedAssets}/${processedPage.totalAssets} –∞—Å—Å–µ—Ç–æ–≤`);
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã "${page.name}":`, error.message);
      }
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—â–∏–π –æ—Ç—á–µ—Ç
    const globalReport = await generateGlobalReport(processedPages, baseOutputDir, params.context);

    console.log(`\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: ${baseOutputDir}`);
    console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: ${processedPages.length}`);
    console.log(`üìÅ –°–æ–∑–¥–∞–Ω–æ –ø–∞–ø–æ–∫: ${processedPages.length}`);

    return {
      success: true,
      data: {
        processedPages,
        outputDirectory: baseOutputDir,
        globalReport,
        summary: {
          totalPages: processedPages.length,
          totalAssets: processedPages.reduce((sum, page) => sum + page.processedAssets, 0),
          totalTags: processedPages.reduce((sum, page) => sum + page.summary.totalTags, 0),
          uniqueTagsGlobal: Array.from(new Set(
            processedPages.flatMap(page => page.tagDictionary.uniqueTags)
          )).length
        }
      },
      metadata: {
        tool: 'figma-all-pages-processor',
        timestamp: new Date().toISOString(),
        figmaFile: fileId
      }
    };

  } catch (error) {
    return handleToolError('processAllFigmaPages', error);
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç fileId –∏–∑ Figma URL
 */
function extractFigmaIds(figmaUrl: string): { fileId: string } {
  const urlMatch = figmaUrl.match(/figma\.com\/design\/([a-zA-Z0-9]+)/);
  if (!urlMatch) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Figma URL');
  }

  return { fileId: urlMatch[1] };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ Figma —Ñ–∞–π–ª–∞
 */
async function getAllFigmaPages(token: string, fileId: string): Promise<FigmaPageNode[]> {
  console.log('üîç –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ Figma...');

  const url = `https://api.figma.com/v1/files/${fileId}`;
  
  const response = await fetch(url, {
    headers: { 'X-Figma-Token': token }
  });

  if (!response.ok) {
    throw new Error(`Figma API error: ${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  
  if (!data.document || !data.document.children) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Figma API');
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–µ –≤–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —É–∑–ª–æ–≤)
  return data.document.children.filter((child: any) => child.type === 'CANVAS');
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function processPageComponents(
  token: string,
  fileId: string,
  page: FigmaPageNode,
  baseOutputDir: string,
  context?: AllPagesProcessorParams['context'],
  tagOptimizer?: TagOptimizationService
): Promise<ProcessedPage> {
  
  // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å–∞–Ω–∏—Ç–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ)
  const folderName = sanitizeFileName(page.name);
  const pageOutputDir = path.join(baseOutputDir, folderName);
  await fs.mkdir(pageOutputDir, { recursive: true });

  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞: ${folderName}`);

  // –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–ª–æ–≤–∞—Ä—è —Ç–µ–≥–æ–≤ –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const tagDictionaryManager = new TagDictionaryManager(pageOutputDir);
  const tagDictionary = await tagDictionaryManager.loadOrCreateDictionary();

  // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const pageStructure = await getFigmaPageStructure(token, fileId, page.id);
  
  // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const components = await findAllComponents(pageStructure);
  
  console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${components.length} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ "${page.name}"`);

  const processedAssets: ProcessedAsset[] = [];

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  for (const component of components) {
    console.log(`‚öôÔ∏è –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: "${component.name}"`);
    
    try {
      const processedAsset = await processComponent(
        token,
        fileId,
        component,
        pageOutputDir,
        context,
        tagDictionary,
        tagDictionaryManager,
        tagOptimizer
      );
      
      processedAssets.push(processedAsset);
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ${component.name}:`, error.message);
    }
  }

  // –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è
  await tagDictionaryManager.saveDictionary(tagDictionary);
  
  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
  const agentExportPath = `${pageOutputDir}/agent-file-mapping.json`;
  await tagDictionaryManager.exportForAgent(tagDictionary, agentExportPath);

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  await generatePageReport(processedAssets, pageOutputDir, page.name, context);

  return {
    id: page.id,
    name: page.name,
    folderName,
    totalAssets: components.length,
    processedAssets: processedAssets.length,
    outputDirectory: pageOutputDir,
    tagDictionary,
    summary: {
      totalTags: tagDictionary.totalTags,
      uniqueTags: tagDictionary.uniqueTags.length,
      averageTagsPerFile: tagDictionary.totalFiles > 0 ? tagDictionary.totalTags / tagDictionary.totalFiles : 0
    }
  };
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
async function getFigmaPageStructure(token: string, fileId: string, nodeId: string): Promise<FigmaPageNode> {
  const url = `https://api.figma.com/v1/files/${fileId}/nodes?ids=${encodeURIComponent(nodeId)}`;

  const response = await fetch(url, {
    headers: { 'X-Figma-Token': token }
  });

  if (!response.ok) {
    throw new Error(`Figma API error: ${response.status} ${response.statusText}`);
  }

  const data = await response.json();
  
  if (!data.nodes || !data.nodes[nodeId]) {
    throw new Error(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å ID ${nodeId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
  }

  return data.nodes[nodeId].document;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
 */
async function findAllComponents(pageNode: FigmaPageNode): Promise<FigmaPageNode[]> {
  const components: FigmaPageNode[] = [];
  
  function traverse(node: FigmaPageNode) {
    if (isProcessableComponent(node)) {
      components.push(node);
    }
    
    if (node.children) {
      node.children.forEach(traverse);
    }
  }
  
  traverse(pageNode);
  return components;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∑–µ–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–º
 */
function isProcessableComponent(node: FigmaPageNode): boolean {
  const isComponent = node.type === 'COMPONENT' || node.type === 'COMPONENT_SET' || node.type === 'INSTANCE';
  
  // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–∏—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã)
  const hasReasonableSize = true; // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–∞–∑–º–µ—Ä–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  
  return isComponent && hasReasonableSize;
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ processRabbitComponent)
 */
async function processComponent(
  token: string,
  fileId: string,
  component: FigmaPageNode,
  outputDir: string,
  context?: AllPagesProcessorParams['context'],
  tagDictionary?: TagDictionary,
  tagDictionaryManager?: TagDictionaryManager,
  tagOptimizer?: TagOptimizationService
): Promise<ProcessedAsset> {
  
  // –ï—Å–ª–∏ —ç—Ç–æ COMPONENT_SET —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
  if (component.type === 'COMPONENT_SET' && component.children) {
    console.log(`üé® –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è "${component.name}"`);
    const variants = await analyzeComponentVariants(token, fileId, component, outputDir, context, tagDictionary, tagDictionaryManager, tagOptimizer);
    
    return {
      id: component.id,
      originalName: component.name,
      newName: component.name,
      tags: [],
      variants,
      selectedVariant: selectBestVariant(variants, context),
      filePath: '',
      metadata: {
        figmaNodeId: component.id,
        componentType: component.type,
        hasVariants: true,
        aiAnalysis: {
          suggestedTags: [],
          contentDescription: `Component set: ${component.name}`,
          emotionalTone: '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
          usageContext: [],
          confidence: 1.0,
          reasoning: 'Component set processed as variants'
        }
      }
    };
  }

  // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ —Ä–∞–Ω—å—à–µ
  const imageData = await exportComponentImage(token, fileId, component.id);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  const mainImagePath = await saveComponentImage(
    imageData,
    component.name,
    outputDir,
    'main'
  );

  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é GPT-4 –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
  const aiAnalysis = await analyzeImageWithAI(
    mainImagePath,
    component.name,
    context
  );

  // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ç–µ–≥–∏ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
  let optimizedTags = aiAnalysis.suggestedTags;
  let shortName = '';
  
  if (tagOptimizer) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è—Ü –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    const hasRabbit = component.name.toLowerCase().includes('–∑–∞—è—Ü') || 
                     aiAnalysis.suggestedTags.some(tag => tag.toLowerCase().includes('–∑–∞—è—Ü')) ||
                     aiAnalysis.contentDescription.toLowerCase().includes('–∑–∞—è—Ü');
    
    const optimizationResult = tagOptimizer.optimizeTags(aiAnalysis.suggestedTags, hasRabbit);
    optimizedTags = optimizationResult.optimizedTags;
    shortName = optimizationResult.shortFileName;
    
    console.log(`üéØ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –¥–ª—è "${component.name}":`);
    console.log(`   –ò—Å—Ö–æ–¥–Ω—ã–µ —Ç–µ–≥–∏ (${optimizationResult.originalTags.length}): ${optimizationResult.originalTags.slice(0, 3).join(', ')}...`);
    console.log(`   –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–µ–≥–∏ (${optimizedTags.length}): ${optimizedTags.join(', ')}`);
  } else {
    // –§–æ–ª–ª–±—ç–∫ –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
    const result = generateShortFileName(aiAnalysis.suggestedTags);
    shortName = result.shortName;
  }

  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
  const newImagePath = await renameImageFile(mainImagePath, shortName);

  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ —Å–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤
  if (tagDictionary && tagDictionaryManager) {
    const dictionaryEntry = tagDictionaryManager.addEntry(
      shortName,
      component.name,
      aiAnalysis.suggestedTags,
      optimizedTags,
      {
        contentDescription: aiAnalysis.contentDescription,
        emotionalTone: aiAnalysis.emotionalTone,
        usageContext: aiAnalysis.usageContext,
        confidence: aiAnalysis.confidence,
        reasoning: aiAnalysis.reasoning
      },
      {
        figmaNodeId: component.id,
        componentType: component.type,
        hasVariants: false,
        createdAt: new Date().toISOString()
      }
    );

    tagDictionary.entries[shortName] = dictionaryEntry;
    
    // üîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –°–û–•–†–ê–ù–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
    await tagDictionaryManager.saveDictionary(tagDictionary);
    
    // üì§ –≠–ö–°–ü–û–†–¢ –î–õ–Ø –ê–ì–ï–ù–¢–ê: –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    const agentExportPath = `${outputDir}/agent-file-mapping.json`;
    await tagDictionaryManager.exportForAgent(tagDictionary, agentExportPath);
    
    console.log(`üíæ –°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${shortName}`);
  }

  return {
    id: component.id,
    originalName: component.name,
    newName: shortName,
    tags: optimizedTags,
    variants: [],
    selectedVariant: undefined,
    filePath: newImagePath,
    metadata: {
      figmaNodeId: component.id,
      componentType: component.type,
      hasVariants: false,
      aiAnalysis
    }
  };
}

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ news-rabbits-processor
async function exportComponentImage(token: string, fileId: string, nodeId: string): Promise<Buffer> {
  const exportUrl = `https://api.figma.com/v1/images/${encodeURIComponent(fileId)}?ids=${nodeId}&format=png&scale=2`;
  
  const response = await fetch(exportUrl, {
    headers: { 'X-Figma-Token': token }
  });

  const data = await response.json();
  
  if (data.err) {
    throw new Error(`Export failed: ${data.err}`);
  }

  const imageUrl = data.images[nodeId];
  if (!imageUrl) {
    throw new Error(`No image URL for node ${nodeId}`);
  }

  const imageResponse = await fetch(imageUrl);
  return Buffer.from(await imageResponse.arrayBuffer());
}

async function saveComponentImage(
  imageBuffer: Buffer,
  componentName: string,
  outputDir: string,
  suffix: string = ''
): Promise<string> {
  
  const fileName = suffix 
    ? `${sanitizeFileName(componentName)}-${suffix}.png`
    : `${sanitizeFileName(componentName)}.png`;
  
  const filePath = path.join(outputDir, fileName);
  await fs.writeFile(filePath, imageBuffer);
  
  return filePath;
}

async function analyzeImageWithAI(
  imagePath: string,
  componentName: string,
  context?: AllPagesProcessorParams['context']
): Promise<AITagAnalysis> {
  
  try {
    const imageBuffer = await fs.readFile(imagePath);
    const base64Image = imageBuffer.toString('base64');
    
    const contextPrompt = context?.content_theme 
      ? `–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context.content_theme}. –¢–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏: ${context.campaign_type || 'general'}.`
      : '';

    const response = await openai.chat.completions.create({
      model: getUsageModel(),
      messages: [
        {
          role: "user",
          content: [
            {
              type: "text",
              text: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–π —Ç–µ–≥–∏ –¥–ª—è email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞.
              
${contextPrompt}

–í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "suggestedTags": ["—Ç–µ–≥1", "—Ç–µ–≥2", "—Ç–µ–≥3"],
  "contentDescription": "–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
  "emotionalTone": "—Ç–æ–Ω (–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π/–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π/—Å—Ä–æ—á–Ω—ã–π/–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π)",
  "usageContext": ["–∫–æ–Ω—Ç–µ–∫—Å—Ç1", "–∫–æ–Ω—Ç–µ–∫—Å—Ç2"],
  "confidence": 0.95,
  "reasoning": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–µ–≥–æ–≤"
}

–ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: "${componentName}"
–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–∞—Ö, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –¥–ª—è email-–∫–∞–º–ø–∞–Ω–∏–π.`
            },
            {
              type: "image_url",
              image_url: {
                url: `data:image/png;base64,${base64Image}`
              }
            }
          ]
        }
      ],
      max_tokens: 1000,
      temperature: 0.3
    });

    const content = response.choices[0]?.message?.content;
    if (!content) {
      throw new Error('–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI');
    }

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    const jsonMatch = content.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('JSON –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ OpenAI');
    }

    const analysis = JSON.parse(jsonMatch[0]);
    
    return {
      suggestedTags: analysis.suggestedTags || [],
      contentDescription: analysis.contentDescription || '',
      emotionalTone: analysis.emotionalTone || '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
      usageContext: analysis.usageContext || [],
      confidence: analysis.confidence || 0.8,
      reasoning: analysis.reasoning || ''
    };

  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${componentName}:`, error.message);
    return generateFallbackTags(componentName, context);
  }
}

function generateFallbackTags(
  componentName: string,
  context?: AllPagesProcessorParams['context']
): AITagAnalysis {
  const baseTags = ['–∫–æ–º–ø–æ–Ω–µ–Ω—Ç', '–¥–∏–∑–∞–π–Ω'];
  
  if (context?.campaign_type) {
    baseTags.push(context.campaign_type);
  }
  
  if (context?.content_theme) {
    baseTags.push(...context.content_theme.split(' ').slice(0, 2));
  }
  
  return {
    suggestedTags: baseTags,
    contentDescription: `–ö–æ–º–ø–æ–Ω–µ–Ω—Ç: ${componentName}`,
    emotionalTone: '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
    usageContext: ['–æ–±—â–∏–π'],
    confidence: 0.6,
    reasoning: 'Fallback –∞–Ω–∞–ª–∏–∑ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ AI'
  };
}

async function renameImageFile(oldPath: string, newName: string): Promise<string> {
  const dir = path.dirname(oldPath);
  const ext = path.extname(oldPath);
  const newPath = path.join(dir, `${newName}${ext}`);
  
  await fs.rename(oldPath, newPath);
  return newPath;
}

function sanitizeFileName(name: string): string {
  return name
    .toLowerCase()
    .replace(/[^–∞-—è—ë\w\s-]/gi, '')
    .replace(/\s+/g, '-')
    .replace(/-+/g, '-')
    .replace(/^-|-$/g, '')
    .substring(0, 50);
}

async function analyzeComponentVariants(
  token: string,
  fileId: string,
  component: FigmaPageNode,
  outputDir: string,
  context?: AllPagesProcessorParams['context'],
  tagDictionary?: TagDictionary,
  tagDictionaryManager?: TagDictionaryManager,
  tagOptimizer?: TagOptimizationService
): Promise<VariantInfo[]> {
  
  if (!component.children) return [];

  const variants: VariantInfo[] = [];
  
  const variantIds = component.children.map(child => child.id);
  const exportUrl = `https://api.figma.com/v1/images/${encodeURIComponent(fileId)}?ids=${variantIds.join(',')}&format=png&scale=2`;
  
  const response = await fetch(exportUrl, {
    headers: { 'X-Figma-Token': token }
  });

  const data = await response.json();
  
  if (data.err) {
    throw new Error(`Variants export failed: ${data.err}`);
  }

  for (let i = 0; i < component.children.length; i++) {
    const child = component.children[i];
    const imageUrl = data.images[child.id];
    
    if (!imageUrl) continue;

    const imageResponse = await fetch(imageUrl);
    const imageBuffer = Buffer.from(await imageResponse.arrayBuffer());
    
    const variantPath = await saveComponentImage(
      imageBuffer,
      child.name,
      outputDir,
      `variant-${i + 1}`
    );

    const aiAnalysis = await analyzeImageWithAI(
      variantPath,
      child.name,
      context
    );

    let optimizedTags = aiAnalysis.suggestedTags;
    let shortName = '';
    
    if (tagOptimizer) {
      const hasRabbit = child.name.toLowerCase().includes('–∑–∞—è—Ü') || 
                       aiAnalysis.suggestedTags.some(tag => tag.toLowerCase().includes('–∑–∞—è—Ü')) ||
                       aiAnalysis.contentDescription.toLowerCase().includes('–∑–∞—è—Ü');
      
      const optimizationResult = tagOptimizer.optimizeTags(aiAnalysis.suggestedTags, hasRabbit);
      optimizedTags = optimizationResult.optimizedTags;
      shortName = optimizationResult.shortFileName;
    } else {
      const result = generateShortFileName(aiAnalysis.suggestedTags);
      shortName = result.shortName;
    }

    const newVariantPath = await renameImageFile(variantPath, shortName);

    if (tagDictionary && tagDictionaryManager) {
      const dictionaryEntry = tagDictionaryManager.addEntry(
        shortName,
        child.name,
        aiAnalysis.suggestedTags,
        optimizedTags,
        {
          contentDescription: aiAnalysis.contentDescription,
          emotionalTone: aiAnalysis.emotionalTone,
          usageContext: aiAnalysis.usageContext,
          confidence: aiAnalysis.confidence,
          reasoning: aiAnalysis.reasoning
        },
        {
          figmaNodeId: child.id,
          componentType: 'VARIANT',
          hasVariants: false,
          createdAt: new Date().toISOString()
        }
      );

      tagDictionary.entries[shortName] = dictionaryEntry;
      
      await tagDictionaryManager.saveDictionary(tagDictionary);
      const agentExportPath = `${outputDir}/agent-file-mapping.json`;
      await tagDictionaryManager.exportForAgent(tagDictionary, agentExportPath);
      
      console.log(`üíæ –°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞: ${shortName}`);
    }

    variants.push({
      id: child.id,
      name: child.name,
      newName: shortName,
      tags: optimizedTags,
      properties: child.variantProperties || {},
      filePath: newVariantPath,
      confidence: aiAnalysis.confidence,
      aiAnalysis
    });
  }

  return variants;
}

function selectBestVariant(
  variants: VariantInfo[],
  context?: AllPagesProcessorParams['context']
): VariantInfo | undefined {
  if (variants.length === 0) return undefined;
  
  return variants.reduce((best, current) => 
    current.confidence > best.confidence ? current : best
  );
}

async function generatePageReport(
  processedAssets: ProcessedAsset[],
  outputDir: string,
  pageName: string,
  context?: AllPagesProcessorParams['context']
): Promise<string> {
  
  const report = {
    pageName,
    timestamp: new Date().toISOString(),
    context,
    summary: {
      totalAssets: processedAssets.length,
      assetsWithVariants: processedAssets.filter(a => a.metadata.hasVariants).length,
      averageConfidence: processedAssets.reduce((sum, a) => sum + a.metadata.aiAnalysis.confidence, 0) / processedAssets.length,
      uniqueTags: Array.from(new Set(processedAssets.flatMap(a => a.tags))),
    },
    assets: processedAssets.map(asset => ({
      id: asset.id,
      originalName: asset.originalName,
      newName: asset.newName,
      tags: asset.tags,
      confidence: asset.metadata.aiAnalysis.confidence,
      hasVariants: asset.metadata.hasVariants,
      variantCount: asset.variants?.length || 0
    }))
  };

  const reportPath = path.join(outputDir, 'page-processing-report.json');
  await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
  
  return reportPath;
}

async function generateGlobalReport(
  processedPages: ProcessedPage[],
  outputDir: string,
  context?: AllPagesProcessorParams['context']
): Promise<string> {
  
  const report = {
    timestamp: new Date().toISOString(),
    context,
    summary: {
      totalPages: processedPages.length,
      totalAssets: processedPages.reduce((sum, page) => sum + page.processedAssets, 0),
      totalTags: processedPages.reduce((sum, page) => sum + page.summary.totalTags, 0),
      uniqueTagsGlobal: Array.from(new Set(
        processedPages.flatMap(page => page.tagDictionary.uniqueTags)
      )).length,
      averageAssetsPerPage: processedPages.length > 0 
        ? processedPages.reduce((sum, page) => sum + page.processedAssets, 0) / processedPages.length 
        : 0
    },
    pages: processedPages.map(page => ({
      name: page.name,
      folderName: page.folderName,
      totalAssets: page.totalAssets,
      processedAssets: page.processedAssets,
      uniqueTags: page.summary.uniqueTags,
      outputDirectory: page.outputDirectory
    }))
  };

  const reportPath = path.join(outputDir, 'global-processing-report.json');
  await fs.writeFile(reportPath, JSON.stringify(report, null, 2));
  
  return reportPath;
} 