import { ToolResult, handleToolError } from './index';
import EmailFolderManager, { EmailFolder } from './email-folder-manager';

interface InitializeFolderParams {
  topic: string;
  campaign_type?: 'urgent' | 'newsletter' | 'seasonal' | 'promotional' | 'informational';
}

/**
 * T0: Initialize Email Folder - —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π email –∫–∞–º–ø–∞–Ω–∏–∏
 * 
 * –≠—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ü–ï–†–í–´–ú –≤ –∫–∞–∂–¥–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ email.
 * –û–Ω —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç EmailFolder –æ–±—ä–µ–∫—Ç
 * –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ—Ö –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ö.
 */
export async function initializeEmailFolder(params: InitializeFolderParams): Promise<ToolResult> {
  try {
    console.log('T0: Initializing email folder structure for campaign:', params.topic);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!params.topic || params.topic.trim().length === 0) {
      throw new Error('Topic is required and cannot be empty');
    }

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É email –∫–∞–º–ø–∞–Ω–∏–∏
    const emailFolder = await EmailFolderManager.createEmailFolder(
      params.topic.trim(),
      params.campaign_type || 'promotional'
    );

    console.log(`‚úÖ T0: Email folder structure created successfully`);
    console.log(`üìÅ Campaign ID: ${emailFolder.campaignId}`);
    console.log(`üìÇ Base path: ${emailFolder.basePath}`);
    console.log(`üñºÔ∏è Assets path: ${emailFolder.assetsPath}`);
    console.log(`üî™ Sprite path: ${emailFolder.spritePath}`);

    return {
      success: true,
      data: {
        emailFolder,
        campaignId: emailFolder.campaignId,
        paths: {
          base: emailFolder.basePath,
          assets: emailFolder.assetsPath,
          sprites: emailFolder.spritePath,
          html: emailFolder.htmlPath,
          mjml: emailFolder.mjmlPath,
          metadata: emailFolder.metadataPath
        },
        structure_created: true
      },
      metadata: {
        tool: 'initialize_email_folder',
        topic: params.topic,
        campaign_type: params.campaign_type || 'promotional',
        timestamp: new Date().toISOString()
      }
    };

  } catch (error) {
    return handleToolError('initialize_email_folder', error);
  }
}

/**
 * T0b: Load Existing Email Folder - –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–∞–ø–∫—É email –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function loadEmailFolder(params: { campaignId: string }): Promise<ToolResult> {
  try {
    console.log('T0b: Loading existing email folder:', params.campaignId);

    if (!params.campaignId || params.campaignId.trim().length === 0) {
      throw new Error('Campaign ID is required and cannot be empty');
    }

    const emailFolder = await EmailFolderManager.loadEmailFolder(params.campaignId.trim());

          if (!emailFolder) {
        throw new Error(`Email folder not found: ${params.campaignId}`);
      }

    console.log(`‚úÖ T0b: Email folder loaded successfully`);
    console.log(`üìÅ Campaign ID: ${emailFolder.campaignId}`);
    console.log(`üìÇ Base path: ${emailFolder.basePath}`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π metadata
    const metadata = await EmailFolderManager.getMetadata(emailFolder);

    return {
      success: true,
      data: {
        emailFolder,
        campaignId: emailFolder.campaignId,
        paths: {
          base: emailFolder.basePath,
          assets: emailFolder.assetsPath,
          sprites: emailFolder.spritePath,
          html: emailFolder.htmlPath,
          mjml: emailFolder.mjmlPath,
          metadata: emailFolder.metadataPath
        },
        current_metadata: metadata,
        structure_loaded: true
      },
      metadata: {
        tool: 'load_email_folder',
        campaignId: params.campaignId,
        timestamp: new Date().toISOString()
      }
    };

  } catch (error) {
    return handleToolError('load_email_folder', error);
  }
}

export default { initializeEmailFolder, loadEmailFolder }; 