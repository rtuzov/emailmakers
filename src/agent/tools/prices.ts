// Load environment variables
import { config } from 'dotenv';
import path from 'path';

// Load .env.local file
config({ path: path.resolve(process.cwd(), '.env.local') });

import { ToolResult, PriceInfo, handleToolError } from './index';
import { convertAirportToCity, getDestinationInfo } from './airports-loader';

interface PricesParams {
  origin: string;
  destination: string;
  date_range?: string | null; // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–º–Ω—ã–µ –¥–∞—Ç—ã
  cabin_class?: 'economy' | 'business' | 'first' | null;
  filters?: {
    is_direct?: boolean | null;
    with_baggage?: boolean | null;
    airplane_only?: boolean | null;
  } | null;
}

interface KupibiletApiRequest {
  arrival: string;
  cabin_class: string;
  currency: string;
  departure: string;
  departure_date: {
    from: string;
    to: string;
  };
  filters: {
    airplane_only?: boolean | null;
    is_direct?: boolean | null;
    with_baggage?: boolean | null;
  };
}

interface KupibiletApiResponse {
  solutions?: Array<{
    price: {
      amount: number;
      currency: string;
    };
    departure_date: string;
    arrival_date?: string;
    airline?: string;
    flight_number?: string;
    duration?: number;
    stops?: number;
  }>;
  flights?: Array<{
    price: number;
    departure_date: string;
    arrival_date?: string;
    airline?: string;
    flight_number?: string;
    duration?: number;
    stops?: number;
  }>;
  min_price?: number;
  currency?: string;
  search_id?: string;
  status?: string;
}

interface PricesResult {
  prices: PriceInfo[];
  currency: string;
  cheapest: number;
  search_metadata: {
    route: string;
    date_range: string;
    cabin_class: string;
    total_found: number;
  };
}

/**
 * T2: Get Flight Prices Tool (Updated for Kupibilet API v2)
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API –ö—É–ø–∏–±–∏–ª–µ—Ç
 */
export async function getPrices(params: PricesParams): Promise<ToolResult> {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç unhandled promise rejections
  const safeExecute = async (): Promise<ToolResult> => {
    try {
      console.log('T2: Getting flight prices with new API:', params);

      // Add tracing
      const { logger } = await import('../core/logger');
      const traceId = `get_prices_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
      
      logger.startTrace(traceId, {
        tool: 'get_prices',
        origin: params.origin,
        destination: params.destination,
        date_range: params.date_range,
        cabin_class: params.cabin_class
      });

      logger.addTraceStep(traceId, {
        tool: 'get_prices',
        action: 'validate_parameters',
        params: { origin: params.origin, destination: params.destination }
      });

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!params.origin || !params.destination) {
      logger.addTraceStep(traceId, {
        tool: 'get_prices',
        action: 'validate_parameters',
        error: 'Origin and destination are required'
      });
      throw new Error('Origin and destination are required');
    }
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (typeof params.origin !== 'string' || typeof params.destination !== 'string') {
      logger.addTraceStep(traceId, {
        tool: 'get_prices',
        action: 'validate_parameters',
        error: 'Origin and destination must be strings'
      });
      throw new Error('Origin and destination must be strings');
    }

    logger.addTraceStep(traceId, {
      tool: 'get_prices',
      action: 'parameters_validated',
      result: { valid: true }
    });

    // –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º CSV –¥–∞–Ω–Ω—ã—Ö
    logger.addTraceStep(traceId, {
      tool: 'get_prices',
      action: 'correct_route',
      params: { original_origin: params.origin, original_destination: params.destination }
    });

    const { origin, destination, metadata: routeMetadata } = correctRoute(params.origin, params.destination);

    logger.addTraceStep(traceId, {
      tool: 'get_prices',
      action: 'route_corrected',
      result: { corrected_origin: origin, corrected_destination: destination, metadata: routeMetadata }
    });
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
    const dateRange = params.date_range || generateSmartDateRange();
    const [fromDate, toDate] = dateRange.split(',');

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API
    const apiRequest = buildApiRequest({
      origin,
      destination,
      fromDate,
      toDate,
      cabinClass: params.cabin_class || 'economy',
      filters: params.filters || {}
    });

    try {
      // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API
      logger.addTraceStep(traceId, {
        tool: 'get_prices',
        action: 'fetch_from_api',
        params: { api_request: apiRequest }
      });

      const apiStartTime = Date.now();
      const pricesResult = await fetchFromKupibiletV2(apiRequest);
      const apiDuration = Date.now() - apiStartTime;

      logger.addTraceStep(traceId, {
        tool: 'get_prices',
        action: 'api_response_received',
        result: { 
          prices_count: pricesResult.prices.length,
          cheapest_price: pricesResult.cheapest,
          currency: pricesResult.currency
        },
        duration: apiDuration
      });
      
      console.log('‚úÖ Kupibilet API success, returning real data');
      
      const result = {
        success: true,
        data: pricesResult,
        metadata: {
          source: 'kupibilet_api_v2',
          original_route: `${params.origin}->${params.destination}`,
          corrected_route: `${origin}->${destination}`,
          api_endpoint: 'https://lpc.kupibilet.ru/api/v2/one_way',
          timestamp: new Date().toISOString(),
          route_processing: routeMetadata,
          csv_integration: 'enabled'
        }
      };

      await logger.endTrace(traceId, result);
      return result;

    } catch (apiError) {
      logger.addTraceStep(traceId, {
        tool: 'get_prices',
        action: 'api_error',
        error: apiError instanceof Error ? apiError.message : String(apiError)
      });
      
      await logger.endTrace(traceId, undefined, apiError);
      throw new Error(`Kupibilet API failed: ${apiError instanceof Error ? apiError.message : String(apiError)}`);
    }

  } catch (error) {
    return handleToolError('get_prices', error);
  }
  };

  // –í—ã–ø–æ–ª–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫
  try {
    return await safeExecute();
  } catch (finalError) {
    console.error('‚ùå Final error in getPrices:', finalError);
    return {
      success: false,
      error: finalError instanceof Error ? finalError.message : 'Unknown error in getPrices',
      metadata: {
        source: 'final_error_handler',
        timestamp: new Date().toISOString()
      }
    };
  }
}

function correctRoute(origin: string, destination: string): { 
  origin: string; 
  destination: string;
  metadata: {
    originInfo?: any;
    destinationInfo?: any;
  };
} {
  // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
  if (origin === destination) {
    console.log(`‚ö†Ô∏è  Identical origin and destination (${origin}), applying smart correction`);
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const smartRoutes: Record<string, string> = {
      'MOW': 'LED', // –ú–æ—Å–∫–≤–∞ -> –ü–∏—Ç–µ—Ä
      'LED': 'MOW', // –ü–∏—Ç–µ—Ä -> –ú–æ—Å–∫–≤–∞  
      'SPB': 'MOW', // –ü–∏—Ç–µ—Ä -> –ú–æ—Å–∫–≤–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –∫–æ–¥)
      'SVO': 'LED', // –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ -> –ü–∏—Ç–µ—Ä
      'DME': 'LED', // –î–æ–º–æ–¥–µ–¥–æ–≤–æ -> –ü–∏—Ç–µ—Ä
    };
    
    const suggestedDestination = smartRoutes[origin] || 'LED';
    return { 
      origin, 
      destination: suggestedDestination,
      metadata: {
        originInfo: { correctionApplied: 'identical_origin_destination' },
        destinationInfo: { correctionApplied: 'smart_route_suggestion' }
      }
    };
  }

  console.log(`üîç Processing route: ${origin} ‚Üí ${destination}`);

  // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –∫–æ–¥–æ–≤ –∞—ç—Ä–æ–ø–æ—Ä—Ç–æ–≤ –¥–ª—è origin
  const russianAirportCodes: Record<string, string> = {
    'SPB': 'LED', // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥
    'MSK': 'MOW', // –ú–æ—Å–∫–≤–∞ (–æ–±—â–∏–π –∫–æ–¥)
    'SVO': 'MOW', // –®–µ—Ä–µ–º–µ—Ç—å–µ–≤–æ
    'DME': 'MOW', // –î–æ–º–æ–¥–µ–¥–æ–≤–æ
    'VKO': 'MOW', // –í–Ω—É–∫–æ–≤–æ
  };

  const correctedOrigin = russianAirportCodes[origin] || origin;
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º CSV –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ destination
  const destinationInfo = getDestinationInfo(destination);
  const correctedDestination = destinationInfo.finalCode;
  
  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
  if (destinationInfo.wasConverted) {
    console.log(`üåç CSV-based airport ‚Üí city conversion: ${destinationInfo.originalCode} ‚Üí ${destinationInfo.finalCode}`);
    console.log(`üìç Country: ${destinationInfo.countryCode}, International: ${destinationInfo.isInternational}`);
  }
  
  if (correctedOrigin !== origin) {
    console.log(`üè† Russian airport normalization: ${origin} ‚Üí ${correctedOrigin}`);
  }

  return {
    origin: correctedOrigin,
    destination: correctedDestination,
    metadata: {
      originInfo: correctedOrigin !== origin ? { 
        original: origin, 
        corrected: correctedOrigin,
        type: 'russian_airport_normalization'
      } : null,
      destinationInfo: destinationInfo
    }
  };
}

function generateSmartDateRange(): string {
  const now = new Date();
  
  // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∑–∞–≤—Ç—Ä–∞ (API –Ω–µ –ª—é–±–∏—Ç –¥–∞–ª–µ–∫–∏–µ –¥–∞—Ç—ã)
  const startDate = new Date(now);
  startDate.setDate(now.getDate() + 1);
  
  // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏ (–∫–æ—Ä–æ—Ç–∫–æ–µ –æ–∫–Ω–æ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ API)
  const endDate = new Date(startDate);
  endDate.setDate(startDate.getDate() + 14);
  
  console.log(`üìÖ Generated smart date range: ${startDate.toISOString().split('T')[0]} to ${endDate.toISOString().split('T')[0]}`);
  
  return `${startDate.toISOString().split('T')[0]},${endDate.toISOString().split('T')[0]}`;
}

function buildApiRequest(params: {
  origin: string;
  destination: string;
  fromDate: string;
  toDate: string;
  cabinClass: string;
  filters: any;
}): KupibiletApiRequest {
  return {
    arrival: params.destination,
    cabin_class: params.cabinClass,
    currency: 'RUB',
    departure: params.origin,
    departure_date: {
      from: params.fromDate,
      to: params.toDate
    },
    filters: {
      airplane_only: params.filters.airplane_only || null,
      // –ù–µ —Ç—Ä–µ–±—É–µ–º –ø—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
      is_direct: params.filters.is_direct === true ? true : null,
      with_baggage: params.filters.with_baggage || null
    }
  };
}

async function fetchFromKupibiletV2(request: KupibiletApiRequest): Promise<PricesResult> {
  console.log('üîÑ Calling Kupibilet API v2 with request:', JSON.stringify(request, null, 2));
  
  const response = await fetch('https://lpc.kupibilet.ru/api/v2/one_way', {
    method: 'POST',
    headers: {
      'accept': '*/*',
      'accept-language': 'ru-RU,ru;q=0.9,en;q=0.8',
      'content-type': 'application/json',
      'origin': 'https://kupibilet.ru',
      'referer': 'https://kupibilet.ru/',
      'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
    },
    body: JSON.stringify(request)
  });

  console.log('üìä Kupibilet API response status:', response.status, response.statusText);
  console.log('üìä Content-Type:', response.headers.get('content-type'));

  if (!response.ok) {
    throw new Error(`Kupibilet API v2 error: ${response.status} ${response.statusText}`);
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª—É—á–∞–π 204 No Content
  if (response.status === 204) {
    console.log('üì≠ API returned 204 No Content - no flights available for this route/dates');
    throw new Error('No flights available for the specified route and dates');
  }

  // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  const responseText = await response.text();
  console.log('üìÑ Raw response length:', responseText.length);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç
  if (!responseText || responseText.length === 0) {
    console.log('üì≠ Empty response received from API');
    throw new Error('Empty response from Kupibilet API v2');
  }

  let responseData: any;
  try {
    responseData = JSON.parse(responseText);
  } catch (parseError) {
    console.error('‚ùå JSON parsing failed:', parseError);
    console.log('üìÑ Raw response preview:', responseText.substring(0, 500));
    throw new Error('Invalid JSON response from Kupibilet API v2');
  }

  console.log('‚úÖ Kupibilet API response received:', {
    solutions_count: responseData.solutions?.length || 0,
    flights_count: responseData.flights?.length || 0,
    min_price: responseData.min_price,
    currency: responseData.currency,
    status: responseData.status
  });

  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ solutions (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API)
  if (responseData.solutions && Array.isArray(responseData.solutions) && responseData.solutions.length > 0) {
    console.log(`üéØ Processing ${responseData.solutions.length} solutions from API`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ—à–µ–Ω–∏—è—Ö
    const prices: PriceInfo[] = responseData.solutions.map((solution: any, index: number) => ({
      origin: request.departure,
      destination: request.arrival,
      price: Math.round((solution.price?.amount || 0) / 100), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–ø–µ–π–∫–∏ –≤ —Ä—É–±–ª–∏
      currency: solution.price?.currency || 'RUB',
      date: solution.departure_date,
      metadata: {
        airline: solution.airline || '',
        duration: solution.duration,
        stops: solution.stops || 0,
        flight_number: solution.flight_number
      }
    }));

    // –ù–∞–π–¥–µ–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é —Ü–µ–Ω—É
    const cheapest = Math.min(...prices.map(p => p.price));
    
    console.log(`üí∞ Processed prices: cheapest ${cheapest} ‚ÇΩ, total ${prices.length} options`);

    return {
      prices,
      currency: 'RUB', // –í—Å–µ–≥–¥–∞ RUB –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
      cheapest,
      search_metadata: {
        route: `${request.departure} ‚Üí ${request.arrival}`,
        date_range: `${request.departure_date.from} to ${request.departure_date.to}`,
        cabin_class: request.cabin_class,
        total_found: prices.length
      }
    };
  } 
        // Use old format flights
  else if (responseData.flights && Array.isArray(responseData.flights) && responseData.flights.length > 0) {
    console.log(`üéØ Processing ${responseData.flights.length} flights from API (legacy format)`);
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–π—Å–∞—Ö
    const prices: PriceInfo[] = responseData.flights.map((flight: any, index: number) => ({
      origin: request.departure,
      destination: request.arrival,
      price: flight.price || flight.amount || 0,
      currency: responseData.currency || flight.currency || 'RUB',
      date: flight.departure_date || flight.date,
      metadata: {
        airline: flight.airline || '',
        duration: flight.duration,
        stops: flight.stops || 0,
        flight_number: flight.flight_number
      }
    }));

    // –ù–∞–π–¥–µ–º —Å–∞–º—É—é –¥–µ—à–µ–≤—É—é —Ü–µ–Ω—É
    const cheapest = Math.min(...prices.map(p => p.price));

    return {
      prices,
      currency: responseData.currency || 'RUB',
      cheapest,
      search_metadata: {
        route: `${request.departure} ‚Üí ${request.arrival}`,
        date_range: `${request.departure_date.from} to ${request.departure_date.to}`,
        cabin_class: request.cabin_class,
        total_found: prices.length
      }
    };
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ solutions, –Ω–∏ flights - API –Ω–µ –Ω–∞—à–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('‚ùå No solutions or flights found in API response');
    throw new Error('No flights found for the specified route and dates');
  }
}

 