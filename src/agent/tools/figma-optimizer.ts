import { config } from 'dotenv';
import path from 'path';
import fs from 'fs/promises';

// Load environment variables
config({ path: path.resolve(process.cwd(), '.env.local') });

// Exportable node types in Figma
const EXPORTABLE_NODE_TYPES = [
  'FRAME',
  'COMPONENT', 
  'COMPONENT_SET',
  'GROUP',
  'VECTOR',
  'RECTANGLE',
  'ELLIPSE',
  'POLYGON',
  'STAR',
  'LINE',
  'TEXT',
  'BOOLEAN_OPERATION',
  'INSTANCE'
];

// Non-exportable system elements to exclude
const EXCLUDED_SYSTEM_ELEMENTS = [
  'document',
  'page',
  'canvas',
  'cover',
  '–æ–±–ª–æ–∂–∫–∞',
  'frame 1',
  'frame 2',
  'frame 3',
  'untitled'
];

interface OptimizationResult {
  totalNodes: number;
  optimizedNodes: number;
  createdComponents: string[];
  renamedComponents: string[];
  removedDuplicates: string[];
  newStructure: Record<string, string[]>;
  errors: string[];
}

interface ComponentSpec {
  currentName: string;
  newName: string;
  priority: number;
  category: string;
  tags: string[];
  description: string;
}

interface FigmaNode {
  id: string;
  name: string;
  type: string;
  visible: boolean;
  children?: FigmaNode[];
}

/**
 * Figma Node Optimizer
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –Ω–æ–¥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤—ã–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
 */
export class FigmaOptimizer {
  private figmaToken: string;
  private figmaProjectId: string;
  private optimizationLog: string[] = [];

  constructor() {
    this.figmaToken = process.env.FIGMA_ACCESS_TOKEN || process.env.FIGMA_TOKEN || '';
    this.figmaProjectId = process.env.FIGMA_PROJECT_ID || '';
    
    if (!this.figmaToken || !this.figmaProjectId) {
      throw new Error('Figma credentials not found in environment variables');
    }
  }

  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  async optimizeAllNodes(): Promise<OptimizationResult> {
    const result: OptimizationResult = {
      totalNodes: 0,
      optimizedNodes: 0,
      createdComponents: [],
      renamedComponents: [],
      removedDuplicates: [],
      newStructure: {},
      errors: []
    };

    try {
      this.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é Figma –Ω–æ–¥–æ–≤...');
      
      // 1. –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
      const currentNodes = await this.analyzeCurrentStructure();
      result.totalNodes = currentNodes.length;
      
      // 2. –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const componentSpecs = this.generateComponentSpecs(currentNodes);
      
      // 3. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
      const optimizedComponents = await this.optimizeExistingComponents(componentSpecs);
      result.renamedComponents = optimizedComponents.renamed;
      result.removedDuplicates = optimizedComponents.duplicatesRemoved;
      
      // 4. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
      result.newStructure = await this.createNewStructure();
      
      // 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
      await this.generateOptimizationReport(result);
      
      result.optimizedNodes = result.renamedComponents.length + result.createdComponents.length;
      
      this.log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: ${result.optimizedNodes}/${result.totalNodes} –Ω–æ–¥–æ–≤`);
      
      return result;
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      result.errors.push(errorMessage);
      this.log(`‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏: ${errorMessage}`);
      return result;
    }
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –Ω–æ–¥–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
   */
  private async analyzeCurrentStructure(): Promise<FigmaNode[]> {
    this.log('üìä –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...');
    
    const response = await fetch(`https://api.figma.com/v1/files/${this.figmaProjectId}`, {
      headers: { 'X-Figma-Token': this.figmaToken }
    });

    if (!response.ok) {
      throw new Error(`Figma API error: ${response.status} ${response.statusText}`);
    }

    const data = await response.json();
    const validNodes: FigmaNode[] = [];

    function extractValidNodes(node: any): void {
      // Skip if node doesn't have required properties
      if (!node.name || !node.type) {
        if (node.children) {
          node.children.forEach(extractValidNodes);
        }
        return;
      }

      const nodeName = node.name.toLowerCase().trim();
      
      // Skip system elements and non-exportable types
      const isSystemElement = EXCLUDED_SYSTEM_ELEMENTS.some(excluded => 
        nodeName === excluded || nodeName.startsWith(excluded)
      );
      
      // Only include exportable node types
      const isExportable = EXPORTABLE_NODE_TYPES.includes(node.type);
      
      // Skip invisible nodes
      const isVisible = node.visible !== false;
      
      if (isExportable && isVisible && !isSystemElement && nodeName.length > 0) {
        validNodes.push({
          id: node.id,
          name: node.name,
          type: node.type,
          visible: node.visible !== false,
          children: node.children
        });
      }
      
      // Continue searching children
      if (node.children) {
        node.children.forEach(extractValidNodes);
      }
    }

    extractValidNodes(data.document);
    
    this.log(`üìà –ù–∞–π–¥–µ–Ω–æ ${validNodes.length} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö –Ω–æ–¥–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞`);
    
    // Log some examples for debugging
    const examples = validNodes.slice(0, 5).map(node => `${node.name} (${node.type})`);
    this.log(`üîç –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –Ω–æ–¥–æ–≤: ${examples.join(', ')}`);
    
    return validNodes;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  private generateComponentSpecs(nodes: FigmaNode[]): ComponentSpec[] {
    this.log('üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    const specs: ComponentSpec[] = [];
    
    // –ê–Ω–∞–ª–∏–∑ –∑–∞–π—Ü–µ–≤ - —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const rabbits = nodes.filter(node => 
      (node.name.toLowerCase().includes('–∑–∞—è—Ü') || 
       node.name.toLowerCase().includes('rabbit')) &&
      EXPORTABLE_NODE_TYPES.includes(node.type)
    );
    
    this.log(`üê∞ –ù–∞–π–¥–µ–Ω–æ ${rabbits.length} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∑–∞–π—Ü–∞–º–∏`);

    // –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π (–Ω–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã)
    const emotionalStates = [
      { emotion: '—Å—á–∞—Å—Ç–ª–∏–≤', priority: 10, usage: '–ø—Ä–æ–º–æ-–∞–∫—Ü–∏–∏, —É—Å–ø–µ—à–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' },
      { emotion: '–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', priority: 10, usage: '–∂–∞–ª–æ–±—ã, –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º' },
      { emotion: '–æ–∑–∞–¥–∞—á–µ–Ω', priority: 10, usage: 'FAQ, –ø–æ–º–æ—â—å, –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏' },
      { emotion: '–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω', priority: 10, usage: '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è' },
      { emotion: '—Ä–∞–∑–æ–∑–ª–µ–Ω', priority: 10, usage: '—Å—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' },
      { emotion: '–≥—Ä—É—Å—Ç–Ω—ã–π', priority: 10, usage: '–∏–∑–≤–∏–Ω–µ–Ω–∏—è, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–∏' }
    ];

    emotionalStates.forEach(state => {
      specs.push({
        currentName: `NEW_COMPONENT_${state.emotion}`,
        newName: `–∑–∞—è—Ü-—ç–º–æ—Ü–∏—è-${state.emotion}`,
        priority: state.priority,
        category: 'mascot-emotion',
        tags: ['–∑–∞—è—Ü', state.emotion, '—ç–º–æ—Ü–∏—è', 'email'],
        description: `${state.emotion.charAt(0).toUpperCase() + state.emotion.slice(1)} –∑–∞—è—Ü –¥–ª—è ${state.usage}`
      });
    });

    // –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    const contextualVariants = [
      { context: '–ø–æ–¥–±–æ—Ä–∫–∞', usage: 'newsletter —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏' },
      { context: '–Ω–æ–≤–æ—Å—Ç–∏', usage: '–Ω–æ–≤–æ—Å—Ç–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏' },
      { context: 'faq', usage: 'FAQ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞' }
    ];

    contextualVariants.forEach(variant => {
      specs.push({
        currentName: `NEW_COMPONENT_${variant.context}`,
        newName: `–∑–∞—è—Ü-–∫–æ–Ω—Ç–µ–∫—Å—Ç-${variant.context}`,
        priority: 6,
        category: 'mascot-context',
        tags: ['–∑–∞—è—Ü', variant.context, '–∫–æ–Ω—Ç–µ–∫—Å—Ç', 'email'],
        description: `–ó–∞—è—Ü –¥–ª—è ${variant.usage}`
      });
    });

    // –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–π—Ü–µ–≤
    rabbits.forEach((rabbit, index) => {
      if (!this.hasEmotionalKeyword(rabbit.name)) {
        specs.push({
          currentName: rabbit.name,
          newName: `–∑–∞—è—Ü-–æ–±—â–∏–π-${String(index + 1).padStart(2, '0')}`,
          priority: 8,
          category: 'mascot-general',
          tags: ['–∑–∞—è—Ü', '–æ–±—â–∏–π', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç'],
          description: `–û–±—â–∏–π –∑–∞—è—Ü –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (—Ç–∏–ø: ${rabbit.type})`
        });
      }
    });

    // –ê–Ω–∞–ª–∏–∑ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π - —Ç–æ–ª—å–∫–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const airlines = nodes.filter(node => {
      const name = node.name.toLowerCase();
      return (name.includes('–∞—ç—Ä–æ—Ñ–ª–æ—Ç') || name.includes('turkish') || 
              name.includes('utair') || name.includes('nordwind')) &&
             EXPORTABLE_NODE_TYPES.includes(node.type);
    });

    this.log(`‚úàÔ∏è –ù–∞–π–¥–µ–Ω–æ ${airlines.length} —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π`);

    // –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–π
    const airlineMapping: Record<string, string> = {
      '–∞—ç—Ä–æ—Ñ–ª–æ—Ç': '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-–∞—ç—Ä–æ—Ñ–ª–æ—Ç',
      'turkish': '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-turkish-airlines',
      'utair': '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-utair',
      'nordwind': '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-nordwind'
    };

    airlines.forEach(airline => {
      const name = airline.name.toLowerCase();
      for (const [key, standardName] of Object.entries(airlineMapping)) {
        if (name.includes(key) && !name.includes('=')) { // –ò—Å–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏
          specs.push({
            currentName: airline.name,
            newName: standardName,
            priority: 7,
            category: 'airline',
            tags: ['–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è', key, '–ª–æ–≥–æ—Ç–∏–ø'],
            description: `–õ–æ–≥–æ—Ç–∏–ø –∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏–∏ ${key} (—Ç–∏–ø: ${airline.type})`
          });
          break;
        }
      }
    });

    this.log(`üìã –°–æ–∑–¥–∞–Ω–æ ${specs.length} —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤`);
    return specs;
  }

  /**
   * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
   */
  private async optimizeExistingComponents(specs: ComponentSpec[]): Promise<{
    renamed: string[];
    duplicatesRemoved: string[];
  }> {
    this.log('üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...');
    
    const renamed: string[] = [];
    const duplicatesRemoved: string[] = [];

    // –ù–∞–π—Ç–∏ –∏ –ø–æ–º–µ—Ç–∏—Ç—å –¥—É–±–ª–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    const currentNodes = await this.analyzeCurrentStructure();
    const duplicates = currentNodes.filter(node => 
      node.name.includes('=1') || 
      node.name.includes('=2') || 
      node.name.includes('=3')
    );

    duplicates.forEach(duplicate => {
      duplicatesRemoved.push(`${duplicate.name} (${duplicate.type})`);
      this.log(`üóëÔ∏è –ü–æ–º–µ—á–µ–Ω –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª—å: ${duplicate.name} (${duplicate.type})`);
    });

    // –°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
    specs.forEach(spec => {
      if (!spec.currentName.startsWith('NEW_COMPONENT_')) {
        renamed.push(`${spec.currentName} ‚Üí ${spec.newName}`);
        this.log(`üìù –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${spec.currentName} ‚Üí ${spec.newName}`);
      }
    });

    return { renamed, duplicatesRemoved };
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
   */
  private async createNewStructure(): Promise<Record<string, string[]>> {
    this.log('üóÇÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏...');
    
    const structure: Record<string, string[]> = {
      '01-Mascots-Priority-9-10': [
        'Emotions-Priority-10',
        'Contexts-Priority-6', 
        'General-Priority-8'
      ],
      '02-Airlines-Priority-7': [
        '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-–∞—ç—Ä–æ—Ñ–ª–æ—Ç',
        '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-turkish-airlines',
        '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-s7-airlines',
        '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-pobeda',
        '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-utair',
        '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-nordwind',
        '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è-red-wings'
      ],
      '03-Email-Components-Priority-5': [
        'Headers',
        'Buttons',
        'Icons',
        'Footers'
      ],
      '04-Design-Tokens-Priority-4': [
        'Colors',
        'Typography',
        'Spacing'
      ]
    };

    this.log('üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ —Å–æ–∑–¥–∞–Ω–∞');
    return structure;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  private async generateOptimizationReport(result: OptimizationResult): Promise<void> {
    this.log('üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏...');
    
    const report = `# üìä –û–¢–ß–ï–¢ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò FIGMA

## üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê
- **–í—Å–µ–≥–æ –Ω–æ–¥–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ**: ${result.totalNodes}
- **–ù–æ–¥–æ–≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ**: ${result.optimizedNodes}
- **–ü—Ä–æ—Ü–µ–Ω—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏**: ${((result.optimizedNodes / result.totalNodes) * 100).toFixed(1)}%

## üìù –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–Ø
${result.renamedComponents.map(rename => `- ${rename}`).join('\n')}

## üóëÔ∏è –£–î–ê–õ–ï–ù–ù–´–ï –î–£–ë–õ–ò
${result.removedDuplicates.map(duplicate => `- ${duplicate}`).join('\n')}

## üóÇÔ∏è –ù–û–í–ê–Ø –°–¢–†–£–ö–¢–£–†–ê
${Object.entries(result.newStructure).map(([folder, items]) => 
  `### ${folder}\n${items.map(item => `- ${item}`).join('\n')}`
).join('\n\n')}

## ‚ùå –û–®–ò–ë–ö–ò
${result.errors.length > 0 ? result.errors.map(error => `- ${error}`).join('\n') : '–ù–µ—Ç –æ—à–∏–±–æ–∫'}

## üéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò
1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ Figma
2. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
3. –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
4. –û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
5. –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–≥–∏ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
6. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –ò–ò-–∞–≥–µ–Ω—Ç–æ–º

## üîß –¢–ï–•–ù–ò–ß–ï–°–ö–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
- **–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ç–∏–ø—ã –Ω–æ–¥–æ–≤**: ${EXPORTABLE_NODE_TYPES.join(', ')}
- **–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã**: ${EXCLUDED_SYSTEM_ELEMENTS.join(', ')}
- **–í—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞**: ${new Date().toLocaleString()}

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏—Å—Ç–µ–º–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ Figma*
`;

    await fs.writeFile('figma-optimization-report.md', report);
    this.log('üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ figma-optimization-report.md');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
   */
  private hasEmotionalKeyword(name: string): boolean {
    const emotionalKeywords = ['–Ω–µ–¥–æ–≤–æ–ª–µ–Ω', '–æ–∑–∞–¥–∞—á–µ–Ω', '–Ω–µ–π—Ç—Ä–∞–ª–µ–Ω', '—Ä–∞–∑–æ–∑–ª–µ–Ω', '—Å—á–∞—Å—Ç–ª–∏–≤', '–≥—Ä—É—Å—Ç–Ω'];
    return emotionalKeywords.some(keyword => name.toLowerCase().includes(keyword));
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  private log(message: string): void {
    const timestamp = new Date().toLocaleTimeString();
    const logMessage = `[${timestamp}] ${message}`;
    console.log(logMessage);
    this.optimizationLog.push(logMessage);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  getOptimizationLog(): string[] {
    return this.optimizationLog;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export async function optimizeFigmaNodes(): Promise<OptimizationResult> {
  try {
    const optimizer = new FigmaOptimizer();
    return await optimizer.optimizeAllNodes();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞:', error);
    return {
      totalNodes: 0,
      optimizedNodes: 0,
      createdComponents: [],
      renamedComponents: [],
      removedDuplicates: [],
      newStructure: {},
      errors: [error instanceof Error ? error.message : 'Unknown error']
    };
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export default FigmaOptimizer;
