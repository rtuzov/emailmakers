/**
 * üåê EXTERNAL IMAGE AGENT
 * 
 * –ü–æ–∏—Å–∫ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è email-–∫–∞–º–ø–∞–Ω–∏–π
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –≤–Ω–µ—à–Ω–∏–º–∏ API –∏ AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
 */

export interface ExternalImageSearchParams {
  search_query: string;
  image_requirements: {
    type: 'hero' | 'illustration' | 'icon' | 'background' | 'product';
    size_priority: 'large' | 'medium' | 'small';
    style: 'photo' | 'illustration' | 'vector' | 'cartoon';
    color_scheme?: string[];
    emotional_tone: string;
  };
  technical_requirements: {
    max_size_kb: number;
    min_width: number;
    min_height: number;
    formats: string[];
    mobile_optimized: boolean;
  };
  fallback_generation?: {
    ai_prompt: string;
    style: string;
    fallback_enabled: boolean;
  };
}

export interface ExternalImageResult {
  success: boolean;
  images: Array<{
    url: string;
    source: 'unsplash' | 'pexels' | 'generated' | 'fallback';
    metadata: {
      width: number;
      height: number;
      size_kb: number;
      format: string;
      alt_text: string;
      license: string;
    };
    optimization: {
      mobile_friendly: boolean;
      retina_ready: boolean;
      email_optimized: boolean;
    };
  }>;
  generation_info?: {
    ai_generated: boolean;
    prompt_used: string;
    generation_time_ms: number;
  };
  error?: string;
}

export class ExternalImageAgent {
  private readonly unsplashApiKey: string;
  private readonly pexelsApiKey: string;
  private readonly openaiApiKey: string;

  constructor() {
    this.unsplashApiKey = process.env.UNSPLASH_API_KEY || '';
    this.pexelsApiKey = process.env.PEXELS_API_KEY || '';
    this.openaiApiKey = process.env.OPENAI_API_KEY || '';
  }

  /**
   * üîç –ü–û–ò–°–ö –í–ù–ï–®–ù–ò–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
   * –ò—â–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Unsplash, Pexels –∏ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
   */
  async searchExternalImages(params: ExternalImageSearchParams): Promise<ExternalImageResult> {
    try {
      console.log(`üîç –ü–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: "${params.search_query}"`);
      
      const results: ExternalImageResult = {
        success: false,
        images: []
      };

      // –ü–æ–∏—Å–∫ –≤ Unsplash
      if (this.unsplashApiKey) {
        const unsplashResults = await this.searchUnsplash(params);
        results.images.push(...unsplashResults);
      }

      // –ü–æ–∏—Å–∫ –≤ Pexels
      if (this.pexelsApiKey) {
        const pexelsResults = await this.searchPexels(params);
        results.images.push(...pexelsResults);
      }

      // ‚ùå FALLBACK POLICY: do not auto-generate images when none are found
      if (results.images.length === 0) {
        throw new Error('ExternalImageAgent: No external images found and auto-generation is disabled by policy.');
      }

      results.success = results.images.length > 0;
      
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${results.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
      return results;

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', error);
      return {
        success: false,
        images: [],
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
      };
    }
  }

  /**
   * üé® –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –° –ü–û–ú–û–©–¨–Æ AI
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç DALL-E –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  async generateAIImage(params: ExternalImageSearchParams): Promise<any | null> {
    try {
      if (!this.openaiApiKey) {
        console.log('‚ö†Ô∏è OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é');
        return null;
      }

      const prompt = this.buildAIPrompt(params);
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–æ–≤ DALL-E API
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      console.log(`üé® AI Prompt: ${prompt}`);
      
      return {
        url: 'https://placeholder.ai-generated-image.com/generated.jpg',
        source: 'generated',
        metadata: {
          width: 800,
          height: 600,
          size_kb: 85,
          format: 'jpg',
          alt_text: `AI-generated image: ${params.search_query}`,
          license: 'Generated'
        },
        optimization: {
          mobile_friendly: true,
          retina_ready: true,
          email_optimized: true
        }
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      return null;
    }
  }

  private buildAIPrompt(params: ExternalImageSearchParams): string {
    const { search_query, image_requirements } = params;
    
    let prompt = `Create a ${image_requirements.style} style image of ${search_query}`;
    
    if (image_requirements.emotional_tone) {
      prompt += ` with a ${image_requirements.emotional_tone} emotional tone`;
    }
    
    if (image_requirements.color_scheme) {
      prompt += ` using colors: ${image_requirements.color_scheme.join(', ')}`;
    }
    
    prompt += '. The image should be professional, high-quality, and suitable for email marketing.';
    
    return prompt;
  }

  /**
   * üì∏ –ü–û–ò–°–ö –í UNSPLASH
   */
  private async searchUnsplash(params: ExternalImageSearchParams): Promise<any[]> {
    try {
      if (!this.unsplashApiKey) {
        console.log('‚ö†Ô∏è Unsplash API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return [];
      }

      const query = this.translateQueryToEnglish(params.search_query);
      const url = `https://api.unsplash.com/search/photos?query=${encodeURIComponent(query)}&per_page=5&orientation=landscape`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': `Client-ID ${this.unsplashApiKey}`
        }
      });

      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Unsplash API:', response.status);
        return [];
      }

      const data = await response.json();
      
      return data.results.map((photo: any) => ({
        url: photo.urls.regular,
        source: 'unsplash',
        metadata: {
          width: photo.width,
          height: photo.height,
          size_kb: this.estimateImageSize(photo.width, photo.height),
          format: 'jpg',
          alt_text: photo.alt_description || params.search_query,
          license: 'Unsplash License'
        },
        optimization: {
          mobile_friendly: true,
          retina_ready: photo.width >= 800,
          email_optimized: this.estimateImageSize(photo.width, photo.height) <= params.technical_requirements.max_size_kb
        }
      }));

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Unsplash:', error);
      return [];
    }
  }

  /**
   * üì∑ –ü–û–ò–°–ö –í PEXELS
   */
  private async searchPexels(params: ExternalImageSearchParams): Promise<any[]> {
    try {
      if (!this.pexelsApiKey) {
        console.log('‚ö†Ô∏è Pexels API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
        return [];
      }

      const query = this.translateQueryToEnglish(params.search_query);
      const url = `https://api.pexels.com/v1/search?query=${encodeURIComponent(query)}&per_page=5&orientation=landscape`;
      
      const response = await fetch(url, {
        headers: {
          'Authorization': this.pexelsApiKey
        }
      });

      if (!response.ok) {
        console.error('‚ùå –û—à–∏–±–∫–∞ Pexels API:', response.status);
        return [];
      }

      const data = await response.json();
      
      return data.photos.map((photo: any) => ({
        url: photo.src.large,
        source: 'pexels',
        metadata: {
          width: photo.width,
          height: photo.height,
          size_kb: this.estimateImageSize(photo.width, photo.height),
          format: 'jpg',
          alt_text: `Photo by ${photo.photographer} from Pexels`,
          license: 'Pexels License'
        },
        optimization: {
          mobile_friendly: true,
          retina_ready: photo.width >= 800,
          email_optimized: this.estimateImageSize(photo.width, photo.height) <= params.technical_requirements.max_size_kb
        }
      }));

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ Pexels:', error);
      return [];
    }
  }

  /**
   * üåç –ü–ï–†–ï–í–û–î –ó–ê–ü–†–û–°–ê –ù–ê –ê–ù–ì–õ–ò–ô–°–ö–ò–ô
   */
  private translateQueryToEnglish(query: string): string {
    const translations: Record<string, string> = {
      '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ': 'travel',
      '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 'travel',
      '–∞–≤–∏–∞—Ü–∏—è': 'aviation',
      '—Å–∞–º–æ–ª–µ—Ç': 'airplane',
      '–±–∏–ª–µ—Ç—ã': 'tickets',
      '–æ—Ç–ø—É—Å–∫': 'vacation',
      '–º–æ—Ä–µ': 'ocean',
      '–≥–æ—Ä—ã': 'mountains',
      '–≥–æ—Ä–æ–¥': 'city',
      '–∑–∞—è—Ü': 'rabbit',
      '–∫—Ä–æ–ª–∏–∫': 'rabbit',
      '—á–µ–º–æ–¥–∞–Ω': 'suitcase',
      '–±–∞–≥–∞–∂': 'luggage',
      '–∞—ç—Ä–æ–ø–æ—Ä—Ç': 'airport',
      '–æ—Ç–µ–ª—å': 'hotel',
      '–ø–ª—è–∂': 'beach',
      '—Å–æ–ª–Ω—Ü–µ': 'sun',
      '—Å—á–∞—Å—Ç—å–µ': 'happiness',
      '—Ä–∞–¥–æ—Å—Ç—å': 'joy',
      '–≤–µ—Å–µ–ª—å–µ': 'fun',
      '—Å–µ–º—å—è': 'family',
      '–¥–µ—Ç–∏': 'children',
      '–±–∏–∑–Ω–µ—Å': 'business',
      '—Ä–∞–±–æ—Ç–∞': 'work'
    };

    let translatedQuery = query.toLowerCase();
    
    Object.entries(translations).forEach(([russian, english]) => {
      translatedQuery = translatedQuery.replace(new RegExp(russian, 'gi'), english);
    });

    return translatedQuery;
  }

  /**
   * üìè –û–¶–ï–ù–ö–ê –†–ê–ó–ú–ï–†–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
   */
  private estimateImageSize(width: number, height: number): number {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –≤ KB –¥–ª—è JPEG
    const pixels = width * height;
    const bytesPerPixel = 0.5; // –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ JPEG
    return Math.round((pixels * bytesPerPixel) / 1024);
  }

  /**
   * üîß –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø –î–õ–Ø EMAIL
   */
  async optimizeImageForEmail(
    imageUrl: string,
    targetSizeKb: number = 100
  ): Promise<{
    optimized_url: string;
    original_size_kb: number;
    optimized_size_kb: number;
    compression_ratio: number;
  }> {
    try {
      console.log(`üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è email: ${imageUrl}`);
      
      // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
      
      return {
        optimized_url: imageUrl + '?w=600&q=85', // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        original_size_kb: 150,
        optimized_size_kb: targetSizeKb,
        compression_ratio: 0.67
      };

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
      throw error;
    }
  }

  /**
   * üìä –ü–û–õ–£–ß–ï–ù–ò–ï –°–¢–ê–¢–ò–°–¢–ò–ö–ò
   */
  getCapabilities() {
    return {
      sources: {
        unsplash: !!this.unsplashApiKey,
        pexels: !!this.pexelsApiKey,
        ai_generation: !!this.openaiApiKey
      },
      features: [
        'external_image_search',
        'ai_image_generation',
        'image_optimization',
        'multi_source_search',
        'automatic_translation',
        'email_optimization'
      ],
      supported_formats: ['jpg', 'png', 'webp'],
      max_image_size_kb: 200,
      ai_generation_available: !!this.openaiApiKey
    };
  }
} 