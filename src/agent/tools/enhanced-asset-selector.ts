/**
 * üé® ENHANCED ASSET SELECTOR - OpenAI Agents SDK Compatible
 * 
 * –í—ã–±–∏—Ä–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è email —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –æ—Ç Content Specialist.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Figma –∏ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.
 * 
 * –ê–†–•–ò–¢–ï–ö–¢–£–†–ê:
 * ‚îú‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∞ –∞—Å—Å–µ—Ç–æ–≤ –æ—Ç Content Specialist
 * ‚îú‚îÄ‚îÄ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Figma –ø–æ —Ç–µ–≥–∞–º
 * ‚îú‚îÄ‚îÄ Try external image sources if Figma assets not found
 * ‚îú‚îÄ‚îÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤
 * ‚îî‚îÄ‚îÄ –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
 */

import { z } from 'zod';
import { tool } from '@openai/agents';
import { AssetManager } from '../core/asset-manager';

// ============================================================================
// SCHEMAS & TYPES
// ============================================================================

/**
 * –°—Ö–µ–º–∞ –ø–ª–∞–Ω–∞ –∞—Å—Å–µ—Ç–æ–≤ –æ—Ç Content Specialist
 */
export const AssetPlanSchema = z.object({
  success: z.boolean().describe('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'),
  asset_requirements: z.object({
    hero_image: z.object({
      tags: z.array(z.string()).describe('–¢–µ–≥–∏ –¥–ª—è hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
      description: z.string().describe('–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ hero –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é'),
      priority: z.enum(['high', 'medium', 'low']).describe('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç')
    }),
    content_images: z.array(z.object({
      tags: z.array(z.string()).describe('–¢–µ–≥–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
      description: z.string().describe('–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
      placement: z.string().describe('–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ —à–∞–±–ª–æ–Ω–µ')
    })).describe('–ö–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
    footer_elements: z.array(z.object({
      tags: z.array(z.string()).describe('–¢–µ–≥–∏ –¥–ª—è footer —ç–ª–µ–º–µ–Ω—Ç–æ–≤'),
      description: z.string().describe('–û–ø–∏—Å–∞–Ω–∏–µ footer —ç–ª–µ–º–µ–Ω—Ç–æ–≤'),
      type: z.enum(['icon', 'logo', 'decoration']).describe('–¢–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞')
    })).describe('Footer —ç–ª–µ–º–µ–Ω—Ç—ã')
  }).describe('–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –∞—Å—Å–µ—Ç–∞–º'),
  figma_search_tags: z.array(z.string()).describe('–¢–µ–≥–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ Figma'),
  external_search_tags: z.array(z.string()).describe('–¢–µ–≥–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞'),
  image_distribution: z.object({
    figma_images_count: z.number().describe('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ Figma'),
    external_images_count: z.number().describe('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'),
    total_images_needed: z.number().describe('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')
  }).describe('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'),
  reasoning: z.string().describe('–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏')
});

/**
 * –°—Ö–µ–º–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–±–æ—Ä–∞ –∞—Å—Å–µ—Ç–æ–≤
 */
export const AssetSelectionResultSchema = z.object({
  success: z.boolean().describe('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤—ã–±–æ—Ä–∞ –∞—Å—Å–µ—Ç–æ–≤'),
  selected_assets: z.object({
    hero_assets: z.array(z.any()).describe('–í—ã–±—Ä–∞–Ω–Ω—ã–µ hero –∞—Å—Å–µ—Ç—ã'),
    content_assets: z.array(z.any()).describe('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∞—Å—Å–µ—Ç—ã'),
    footer_assets: z.array(z.any()).describe('–í—ã–±—Ä–∞–Ω–Ω—ã–µ footer –∞—Å—Å–µ—Ç—ã')
  }).describe('–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∞—Å—Å–µ—Ç—ã'),
  distribution_achieved: z.object({
    figma_count: z.number().describe('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Å—Å–µ—Ç–æ–≤ –∏–∑ Figma'),
    external_count: z.number().describe('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–Ω–µ—à–Ω–∏—Ö –∞—Å—Å–µ—Ç–æ–≤'),
    total_count: z.number().describe('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Å—Å–µ—Ç–æ–≤')
  }).describe('–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'),
  search_metadata: z.object({
    figma_search_results: z.number().describe('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Figma'),
    external_search_results: z.number().describe('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–Ω–µ—à–Ω–µ–≥–æ –ø–æ–∏—Å–∫–∞'),
    selection_strategy: z.string().describe('–°—Ç—Ä–∞—Ç–µ–≥–∏—è –≤—ã–±–æ—Ä–∞'),
    processing_time_ms: z.number().describe('–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö')
  }).describe('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞'),
  reasoning: z.string().describe('–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞—Å—Å–µ—Ç–æ–≤')
});

// –¢–∏–ø—ã –±—É–¥—É—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ –∫–æ–Ω—Ü–µ —Ñ–∞–π–ª–∞

// ============================================================================
// OPENAI AGENTS SDK TOOL DEFINITION
// ============================================================================

/**
 * OpenAI Agents SDK —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞—Å—Å–µ—Ç–æ–≤
 */
export const enhancedAssetSelectorTool = tool({
  name: 'enhanced_asset_selector',
  description: '–í—ã–±–∏—Ä–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è email —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–ª–∞–Ω–∞ –æ—Ç Content Specialist. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ –≤ Figma –∏ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö.',
  parameters: AssetPlanSchema,
  execute: async (assetPlan: AssetPlan): Promise<AssetSelectionResult> => {
    console.log('üé® Enhanced Asset Selector: Starting asset selection...');
    console.log('üìã Asset Plan:', JSON.stringify(assetPlan, null, 2));
    
    const startTime = Date.now();
    
    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Asset Manager
      const assetManager = new AssetManager();
      
      // –í—ã–±–∏—Ä–∞–µ–º hero –∞—Å—Å–µ—Ç—ã
      const heroAssets = await selectHeroAssets(assetManager, assetPlan);
      console.log(`üéØ Selected ${heroAssets.length} hero assets`);
      
      // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∞—Å—Å–µ—Ç—ã
      const contentAssets = await selectContentAssets(assetManager, assetPlan);
      console.log(`üìÑ Selected ${contentAssets.length} content assets`);
      
      // –í—ã–±–∏—Ä–∞–µ–º footer –∞—Å—Å–µ—Ç—ã
      const footerAssets = await selectFooterAssets(assetManager, assetPlan);
      console.log(`üîó Selected ${footerAssets.length} footer assets`);
      
      // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
      const distributionAchieved = calculateDistribution(heroAssets, contentAssets, footerAssets);
      
      // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
      const searchMetadata = {
        figma_search_results: distributionAchieved.figma_count,
        external_search_results: distributionAchieved.external_count,
        selection_strategy: 'intelligent_priority_based',
        processing_time_ms: Date.now() - startTime
      };
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result: AssetSelectionResult = {
        success: true,
        selected_assets: {
          hero_assets: heroAssets,
          content_assets: contentAssets,
          footer_assets: footerAssets
        },
        distribution_achieved: distributionAchieved,
        search_metadata: searchMetadata,
        reasoning: `–í—ã–±—Ä–∞–Ω–æ ${distributionAchieved.total_count} –∞—Å—Å–µ—Ç–æ–≤: ${distributionAchieved.figma_count} –∏–∑ Figma –∏ ${distributionAchieved.external_count} –≤–Ω–µ—à–Ω–∏—Ö. ` +
                  `Hero: ${heroAssets.length}, Content: ${contentAssets.length}, Footer: ${footerAssets.length}. ` +
                  `–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${searchMetadata.processing_time_ms}–º—Å.`
      };
      
      console.log('‚úÖ Enhanced Asset Selector: Selection completed successfully');
      return result;
      
    } catch (error) {
      console.error('‚ùå Enhanced Asset Selector error:', error);
      throw new Error(`Enhanced Asset Selector failed: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
});

// ============================================================================
// ASSET SELECTION FUNCTIONS
// ============================================================================

/**
 * –í—ã–±–æ—Ä hero –∞—Å—Å–µ—Ç–æ–≤
 */
async function selectHeroAssets(assetManager: AssetManager, plan: AssetPlan): Promise<any[]> {
  const heroReq = plan.asset_requirements.hero_image;
  console.log('üéØ Selecting hero assets with tags:', heroReq.tags);
  
  try {
    // –ü–æ–∏—Å–∫ –≤ Figma
    const figmaSearchResult = await assetManager.searchAssets({
      tags: heroReq.tags,
      emotional_tone: 'positive',
      campaign_type: 'promotional',
      target_count: 3,
      preferred_emotion: 'happy'
    });
    
    if (figmaSearchResult.success && figmaSearchResult.assets.length > 0) {
      return figmaSearchResult.assets.slice(0, 1).map(asset => ({
        asset_id: `hero_${Date.now()}`,
        filename: (asset || {}).fileName || 'hero_image.png',
        url: (asset || {}).filePath || '',
        source: 'figma' as const,
        tags: heroReq.tags,
        metadata: {
          description: heroReq.description,
          priority: heroReq.priority,
          folder: 'unknown',
          figma_tags: (asset || {}).tags || []
        }
      }));
    }
    
    // Try external sources if no Figma assets found
    const externalSearchResult = await assetManager.searchAssets({
      tags: plan.external_search_tags.filter(tag => 
        ['hero', 'main', 'primary', 'character', 'mascot'].some(heroTag => 
          tag.toLowerCase().includes(heroTag)
        )
      ).slice(0, 3),
      emotional_tone: 'positive',
      campaign_type: 'promotional',
      target_count: 1,
      preferred_emotion: 'happy'
    });
    
    if (externalSearchResult.success && externalSearchResult.assets.length > 0) {
      return externalSearchResult.assets.map(asset => ({
        asset_id: `hero_ext_${Date.now()}`,
        filename: (asset || {}).fileName || 'hero_external.jpg',
        url: (asset || {}).filePath || '',
        source: 'external' as const,
        tags: heroReq.tags,
        metadata: {
          description: heroReq.description,
          priority: heroReq.priority,
          external_source: (asset || {}).source || 'internet'
        }
      }));
    }
    
    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
    return [];
    
  } catch (error) {
    console.error('‚ùå Hero asset selection failed:', error);
    
    // Fail fast - no fallback allowed
    if (error instanceof Error) {
      throw error;
    }
    
    throw new Error(`Hero asset selection failed: ${error instanceof Error ? error.message : String(error)}`);
  }
}

/**
 * –í—ã–±–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤
 */
async function selectContentAssets(assetManager: AssetManager, plan: AssetPlan): Promise<any[]> {
  const contentReqs = plan.asset_requirements.content_images;
  console.log(`üìÑ Selecting ${contentReqs.length} content assets`);
  
  const allContentAssets: any[] = [];
  
  for (let i = 0; i < contentReqs.length; i++) {
    const req = contentReqs[i];
    console.log(`üìÑ Processing content asset ${i + 1}:`, (req || {}).tags);
    
    try {
      // –ü–æ–∏—Å–∫ –≤ Figma
      const figmaSearchResult = await assetManager.searchAssets({
        tags: (req || {}).tags || [],
        emotional_tone: 'positive',
        campaign_type: 'promotional',
        target_count: 2,
        preferred_emotion: 'happy'
      });
      
      if (figmaSearchResult.success && figmaSearchResult.assets.length > 0) {
        const asset = figmaSearchResult.assets[0];
        allContentAssets.push({
          asset_id: `content_${i}_${Date.now()}`,
          filename: (asset || {}).fileName || `content_${i + 1}.png`,
          url: (asset || {}).filePath || '',
          source: 'figma' as const,
          placement: (req || {}).placement,
          tags: (req || {}).tags || [],
          metadata: {
            description: (req || {}).description,
            folder: 'unknown',
            figma_tags: (asset || {}).tags || []
          }
        });
        continue;
      }
      
      // Try external sources if no Figma assets found
      const externalSearchResult = await assetManager.searchAssets({
        tags: plan.external_search_tags.slice(0, 3),
        emotional_tone: 'positive',
        campaign_type: 'promotional',
        target_count: 1,
        preferred_emotion: 'happy'
      });
      
      if (externalSearchResult.success && externalSearchResult.assets.length > 0) {
        const asset = externalSearchResult.assets[0];
        allContentAssets.push({
          asset_id: `content_ext_${i}_${Date.now()}`,
          filename: (asset || {}).fileName || `content_external_${i + 1}.jpg`,
          url: (asset || {}).filePath || '',
          source: 'external' as const,
          placement: (req || {}).placement,
          tags: (req || {}).tags || [],
          metadata: {
            description: (req || {}).description,
            external_source: (asset || {}).source || 'internet'
          }
        });
      }
      
    } catch (error) {
      console.error(`‚ùå Content asset ${i + 1} selection failed:`, error);
      
      // Fail fast - no fallback allowed
      if (error instanceof Error) {
        throw error;
      }
      
      throw new Error(`Content asset selection failed for asset ${i + 1}: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
  
  return allContentAssets;
}

/**
 * –í—ã–±–æ—Ä footer –∞—Å—Å–µ—Ç–æ–≤
 */
async function selectFooterAssets(assetManager: AssetManager, plan: AssetPlan): Promise<any[]> {
  const footerReqs = plan.asset_requirements.footer_elements;
  console.log(`üîó Selecting ${footerReqs.length} footer assets`);
  
  const allFooterAssets: any[] = [];
  
  for (let i = 0; i < footerReqs.length; i++) {
    const req = footerReqs[i];
    console.log(`üîó Processing footer asset ${i + 1}:`, (req || {}).tags);
    
    try {
      // –ü–æ–∏—Å–∫ –≤ Figma (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∫–æ–Ω–∫–∞–º –∏ –ª–æ–≥–æ—Ç–∏–ø–∞–º)
      const figmaSearchResult = await assetManager.searchAssets({
        tags: (req || {}).tags || [],
        emotional_tone: 'positive',
        campaign_type: 'promotional',
        target_count: 2,
        preferred_emotion: 'happy'
      });
      
      if (figmaSearchResult.success && figmaSearchResult.assets.length > 0) {
        const asset = figmaSearchResult.assets[0];
        allFooterAssets.push({
          asset_id: `footer_${i}_${Date.now()}`,
          filename: (asset || {}).fileName || `footer_${i + 1}.png`,
          url: (asset || {}).filePath || '',
          source: 'figma' as const,
          type: (req || {}).type,
          tags: (req || {}).tags || [],
          metadata: {
            description: (req || {}).description,
            folder: 'unknown',
            figma_tags: (asset || {}).tags || []
          }
        });
        continue;
      }
      
      // If no assets found, fail fast
      throw new Error(`No footer assets found for ${(req || {}).type || 'unknown'} with tags: ${((req || {}).tags || []).join(', ')}`);
      
    } catch (error) {
      console.error(`‚ùå Footer asset ${i + 1} selection failed:`, error);
      
      // Fail fast - no fallback allowed
      if (error instanceof Error) {
        throw error;
      }
      
      throw new Error(`Footer asset selection failed for asset ${i + 1}: ${error instanceof Error ? error.message : String(error)}`);
    }
  }
  
  return allFooterAssets;
}

// ============================================================================
// HELPER FUNCTIONS
// ============================================================================

/**
 * –ü–æ–¥—Å—á–µ—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
 */
function calculateDistribution(heroAssets: any[], contentAssets: any[], footerAssets: any[]): {
  figma_count: number;
  external_count: number;
  total_count: number;
} {
  const allAssets = [...heroAssets, ...contentAssets, ...footerAssets];
  
  const figmaCount = allAssets.filter(asset => (asset || {}).source === 'figma').length;
  const externalCount = allAssets.filter(asset => (asset || {}).source === 'external').length;
  
  return {
    figma_count: figmaCount,
    external_count: externalCount,
    total_count: allAssets.length
  };
}

// No fallback results - all errors must be handled properly by throwing

// ============================================================================
// EXPORTS
// ============================================================================

// enhancedAssetSelectorTool —É–∂–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –Ω–∞ —Å—Ç—Ä–æ–∫–µ 111 –∫–∞–∫ export const
export type AssetPlan = z.infer<typeof AssetPlanSchema>;
export type AssetSelectionResult = z.infer<typeof AssetSelectionResultSchema>;

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ - –ø—Ä—è–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞
export const executeEnhancedAssetSelector = async (assetPlan: AssetPlan): Promise<AssetSelectionResult> => {
  // –ö–æ–ø–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É execute –∏–∑ tool definition
  console.log('üé® Enhanced Asset Selector: Starting asset selection...');
  console.log('üìã Asset Plan:', JSON.stringify(assetPlan, null, 2));
  
  const startTime = Date.now();
  
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Asset Manager
    const assetManager = new AssetManager();
    
    // –í—ã–±–∏—Ä–∞–µ–º hero –∞—Å—Å–µ—Ç—ã
    const heroAssets = await selectHeroAssets(assetManager, assetPlan);
    console.log(`üéØ Selected ${heroAssets.length} hero assets`);
    
    // –í—ã–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–Ω—ã–µ –∞—Å—Å–µ—Ç—ã
    const contentAssets = await selectContentAssets(assetManager, assetPlan);
    console.log(`üìÑ Selected ${contentAssets.length} content assets`);
    
    // –í—ã–±–∏—Ä–∞–µ–º footer –∞—Å—Å–µ—Ç—ã
    const footerAssets = await selectFooterAssets(assetManager, assetPlan);
    console.log(`üîó Selected ${footerAssets.length} footer assets`);
    
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
    const distributionAchieved = calculateDistribution(heroAssets, contentAssets, footerAssets);
    
    // –°–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
    const searchMetadata = {
      figma_search_results: distributionAchieved.figma_count,
      external_search_results: distributionAchieved.external_count,
      selection_strategy: 'intelligent_priority_based',
      processing_time_ms: Date.now() - startTime
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result: AssetSelectionResult = {
      success: true,
      selected_assets: {
        hero_assets: heroAssets,
        content_assets: contentAssets,
        footer_assets: footerAssets
      },
      distribution_achieved: distributionAchieved,
      search_metadata: searchMetadata,
      reasoning: `–í—ã–±—Ä–∞–Ω–æ ${distributionAchieved.total_count} –∞—Å—Å–µ—Ç–æ–≤: ${distributionAchieved.figma_count} –∏–∑ Figma –∏ ${distributionAchieved.external_count} –≤–Ω–µ—à–Ω–∏—Ö. ` +
                `Hero: ${heroAssets.length}, Content: ${contentAssets.length}, Footer: ${footerAssets.length}. ` +
                `–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${searchMetadata.processing_time_ms}–º—Å.`
    };
    
    console.log('‚úÖ Enhanced Asset Selector: Selection completed successfully');
    return result;
    
  } catch (error) {
    console.error('‚ùå Enhanced Asset Selector error:', error);
    
    // Fail fast - no fallback allowed
    if (error instanceof Error) {
      throw error;
    }
    
    throw new Error(`Enhanced asset selector failed: ${error instanceof Error ? error.message : String(error)}`);
  }
};
export default enhancedAssetSelectorTool; 