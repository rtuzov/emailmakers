/**
 * üéØ OPTIMIZATION SYSTEM - –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 * 
 * –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
 * –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
 */

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
export { OptimizationEngine } from './optimization-engine';
export { OptimizationAnalyzer } from './optimization-analyzer';
export { OptimizationIntegration } from './optimization-integration';
export { OptimizationService } from './optimization-service';

// Phase 2: Dynamic Thresholds + Human Oversight
export { DynamicThresholdsEngine } from './phase2/dynamic-thresholds-engine';
export { HumanOversightDashboard } from './phase2/human-oversight-dashboard';

// Phase 3: Auto-Scaling + Machine Learning
export { MachineLearningEngine } from './phase3/machine-learning-engine';
export { AutoScalingManager } from './phase3/auto-scaling-manager';

// –¢–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
export {
  // –ë–∞–∑–æ–≤—ã–µ —Ç–∏–ø—ã
  type MetricsSnapshot,
  type AgentMetrics,
  type SystemMetrics,
  type ValidationMetrics,
  type OptimizationRecommendation,
  type OptimizationResult,
  type SystemAnalysis,
  type OptimizationConfig,
  
  // –¢–∏–ø—ã –∞–Ω–∞–ª–∏–∑–∞
  type PerformanceTrend,
  type Bottleneck,
  type ErrorPattern,
  type PredictedIssue,
  
  // –¢–∏–ø—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  type IntegratedMetricsSnapshot,
  type OptimizationIntegrationConfig,
  
  // –¢–∏–ø—ã —Å–µ—Ä–≤–∏—Å–∞
  type OptimizationServiceConfig,
  type OptimizationServiceStatus,
  type OptimizationReport,
  
  // Enum –∏ union —Ç–∏–ø—ã
  type AgentType,
  type OptimizationType,
  type OptimizationPriority,
  type OptimizationStatus,
  type TrendDirection,
  type BottleneckSeverity,
  
  // –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
  type OptimizationEngineInterface,
  type PatternAnalyzer,
  
  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
  OPTIMIZATION_CONSTANTS
} from './optimization-types';

// Integration Tests
export { runPhase2IntegrationTest } from './phase2/integration-test';
export { runPhase3IntegrationTest } from './phase3/integration-test';
export { runMasterIntegrationTest, runMasterSmokeTest } from './master-integration-test';

// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
export { 
  demonstrateOptimizationSystem,
  simulateRealWorldOptimization,
  demonstrateSystemIntegration
} from './optimization-demo';

// Re-export –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
export type { 
  OptimizationEngine as Engine,
  OptimizationAnalyzer as Analyzer,
  OptimizationIntegration as Integration,
  OptimizationService as Service
} from './index';

/**
 * –ó–∞–≤–æ–¥—Å–∫–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ OptimizationService
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç production-ready –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
 */
export function createOptimizationService(config?: Partial<import('./optimization-service').OptimizationServiceConfig>) {
  // –ü–æ–ª—É—á–∞–µ–º production configuration
  const { getOptimizationConfig, validateOptimizationConfig, applyEnvironmentOverrides } = require('../../config/optimization-config');
  
  let productionConfig = getOptimizationConfig();
  productionConfig = applyEnvironmentOverrides(productionConfig);
  
  // Validate configuration
  if (!validateOptimizationConfig(productionConfig)) {
    console.warn('‚ö†Ô∏è Invalid optimization configuration, using safe defaults');
    productionConfig = {
      enabled: true,
      auto_optimization: false, // Safe default
      require_approval_for_critical: true,
      max_auto_optimizations_per_day: 5,
      min_confidence_threshold: 90,
      metrics_collection_interval_ms: 60000,
      analysis_interval_ms: 300000,
      emergency_stop_enabled: true,
      rollback_timeout_minutes: 30,
      max_concurrent_optimizations: 1,
      ml_enabled: false,
      auto_scaling_enabled: false,
      human_oversight_required: true,
      prediction_confidence_threshold: 95,
      dashboard_refresh_interval_ms: 30000,
      real_time_monitoring: true,
      alert_thresholds: {
        low_health_score: 60,
        high_error_rate: 20,
        slow_response_time_ms: 5000
      }
    };
  }
  
  // Merge user config with production config
  const finalConfig = {
    ...productionConfig,
    ...config, // User overrides
    integration: config?.integration || {},
    engine: config?.engine || {}
  };
  
  console.log('üöÄ Creating OptimizationService with production configuration:', {
    enabled: finalConfig.enabled,
    auto_optimization: finalConfig.auto_optimization,
    environment: process.env.NODE_ENV || 'development',
    ml_enabled: finalConfig.ml_enabled,
    auto_scaling_enabled: finalConfig.auto_scaling_enabled
  });
  
  return new (require('./optimization-service').OptimizationService)(finalConfig);
}

/**
 * –ó–∞–≤–æ–¥—Å–∫–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ OptimizationEngine
 */
export function createOptimizationEngine(config?: Partial<import('./optimization-types').OptimizationConfig>) {
  return new (require('./optimization-engine').OptimizationEngine)(config);
}

/**
 * –ó–∞–≤–æ–¥—Å–∫–æ–π –º–µ—Ç–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è OptimizationIntegration
 */
export function createOptimizationIntegration(config?: Partial<import('./optimization-integration').OptimizationIntegrationConfig>) {
  return new (require('./optimization-integration').OptimizationIntegration)(config);
}

/**
 * –í–µ—Ä—Å–∏—è –ø–∞–∫–µ—Ç–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export const OPTIMIZATION_VERSION = '1.0.0';

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
export const OPTIMIZATION_INFO = {
  version: OPTIMIZATION_VERSION,
  name: 'Email-Makers Optimization System',
  description: 'AI-powered optimization system for email template generation agents and validators',
  components: [
    'OptimizationEngine - Core optimization logic',
    'OptimizationAnalyzer - Pattern analysis and bottleneck detection', 
    'OptimizationIntegration - Integration with existing monitoring systems',
    'OptimizationService - Main coordination service'
  ],
  capabilities: [
    'Real-time performance monitoring',
    'Automatic bottleneck detection', 
    'AI-powered recommendation generation',
    'Safe optimization application with rollback',
    'Dynamic threshold adjustment',
    'Predictive issue detection',
    'Human oversight for critical decisions',
    'Machine learning with feedback loops',
    'Auto-scaling based on ML predictions',
    'Emergency scaling mechanisms',
    'Cross-phase integration testing',
    'Integration with ValidationMonitor, MetricsService, PerformanceMonitor'
  ],
  phases: [
    'Phase 1: Foundation + Safety - Core optimization engine with safety mechanisms',
    'Phase 2: Dynamic Thresholds + Human Oversight - Intelligent threshold adjustment with human approval workflows',
    'Phase 3: Auto-Scaling + Machine Learning - ML-powered auto-scaling with feedback loops and predictive analytics'
  ]
} as const;