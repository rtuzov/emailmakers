/**
 * üîó OPTIMIZATION INTEGRATION - –ú–æ—Å—Ç –º–µ–∂–¥—É OptimizationEngine –∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–∞–º–∏
 * 
 * –≠—Ç–æ—Ç –º–æ–¥—É–ª—å –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç OptimizationEngine —Å ValidationMonitor, MetricsService,
 * –∏ PerformanceMonitor –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–¥–∏–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
 */

import { EventEmitter } from 'events';
import { 
  MetricsSnapshot,
  OptimizationRecommendation,
  SystemAnalysis,
  OptimizationResult,
  AgentType,
  OPTIMIZATION_CONSTANTS 
} from './optimization-types';
import { OptimizationEngine } from './optimization-engine';
import { ValidationMonitor } from '../monitoring/validation-monitor';
import { MetricsService } from '../../shared/infrastructure/monitoring/metrics-service';
import { performanceMonitor } from '../../shared/infrastructure/performance/performance-monitoring-service';

export interface OptimizationIntegrationConfig {
  enabled: boolean;
  auto_optimization_enabled: boolean;
  metrics_collection_interval_ms: number;
  optimization_interval_ms: number;
  require_human_approval_for_critical: boolean;
  max_auto_optimizations_per_hour: number;
}

export interface IntegratedMetricsSnapshot extends MetricsSnapshot {
  // –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö
  data_sources: {
    validation_monitor: boolean;
    metrics_service: boolean;
    performance_monitor: boolean;
  };
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  optimization_metadata: {
    last_optimization_time: string;
    active_optimizations_count: number;
    optimization_success_rate: number;
    recommendations_applied_today: number;
  };
}

export class OptimizationIntegration extends EventEmitter {
  private optimizationEngine: OptimizationEngine;
  private validationMonitor: ValidationMonitor;
  private metricsService: MetricsService;
  private config: OptimizationIntegrationConfig;
  
  private isRunning: boolean = false;
  private metricsCollectionTimer?: NodeJS.Timeout;
  private optimizationTimer?: NodeJS.Timeout;
  private appliedOptimizationsToday: number = 0;
  private lastOptimizationReset: string = new Date().toDateString();

  // Add logging throttling for metrics collection
  private lastMetricsLogTime: number = 0;
  private metricsLogCount: number = 0;
  private readonly MIN_METRICS_LOG_INTERVAL = 600000; // 10 minutes between metrics logs
  private readonly MAX_METRICS_LOGS_PER_HOUR = 6; // Limit to 6 logs per hour

  constructor(config: Partial<OptimizationIntegrationConfig> = {}) {
    super();
    
    this.config = {
      enabled: true,
      auto_optimization_enabled: true,
      metrics_collection_interval_ms: 900000, // 15 minutes (was likely much shorter)
      optimization_interval_ms: 1800000, // 30 minutes (was likely much shorter)
      require_human_approval_for_critical: true,
      max_auto_optimizations_per_hour: 2, // Reduced from potentially higher number
      ...config
    };

    console.log('üîß OptimizationIntegration initialized with config:', {
      enabled: this.config.enabled,
      auto_optimization: this.config.auto_optimization_enabled,
      metrics_interval_minutes: this.config.metrics_collection_interval_ms / 60000,
      optimization_interval_minutes: this.config.optimization_interval_ms / 60000,
      max_optimizations_per_hour: this.config.max_auto_optimizations_per_hour
    });

    this.optimizationEngine = new OptimizationEngine();
    this.validationMonitor = ValidationMonitor.getInstance();
    this.metricsService = new MetricsService();

    this.setupEventListeners();
  }

  /**
   * –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  public async start(): Promise<void> {
    if (this.isRunning) {
      console.warn('‚ö†Ô∏è OptimizationIntegration already running');
      return;
    }

    if (!this.config.enabled) {
      console.log('üì¥ OptimizationIntegration disabled in config');
      return;
    }

    console.log('üöÄ Starting OptimizationIntegration...');
    this.isRunning = true;

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫
    this.startMetricsCollection();

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
    if (this.config.auto_optimization_enabled) {
      this.startPeriodicOptimization();
    }

    this.emit('started');
    console.log('‚úÖ OptimizationIntegration started successfully');
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
   */
  public async stop(): Promise<void> {
    if (!this.isRunning) return;

    console.log('üõë Stopping OptimizationIntegration...');
    this.isRunning = false;

    if (this.metricsCollectionTimer) {
      clearInterval(this.metricsCollectionTimer);
    }

    if (this.optimizationTimer) {
      clearInterval(this.optimizationTimer);
    }

    this.emit('stopped');
    console.log('‚úÖ OptimizationIntegration stopped');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–Ω—ç–ø—à–æ—Ç–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
   */
  public async getIntegratedMetricsSnapshot(): Promise<IntegratedMetricsSnapshot> {
    // Throttle logging to prevent spam
    const now = Date.now();
    const timeSinceLastLog = now - this.lastMetricsLogTime;
    const shouldLog = timeSinceLastLog > this.MIN_METRICS_LOG_INTERVAL && 
                     this.metricsLogCount < this.MAX_METRICS_LOGS_PER_HOUR;

    if (shouldLog) {
      console.log('üìä Collecting integrated metrics snapshot...');
      this.lastMetricsLogTime = now;
      this.metricsLogCount++;
      
      // Reset hourly counter
      if (this.metricsLogCount >= this.MAX_METRICS_LOGS_PER_HOUR) {
        setTimeout(() => {
          this.metricsLogCount = 0;
        }, 3600000); // Reset after 1 hour
      }
    }

    try {
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ ValidationMonitor
      const validationMetrics = this.validationMonitor.getMetrics();
      
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ MetricsService
      const infrastructureMetrics = this.metricsService.getSnapshot();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
      const systemStats = performanceMonitor.getPerformanceStats();
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç OptimizationEngine
      const integratedSnapshot: IntegratedMetricsSnapshot = {
        timestamp: new Date().toISOString(),
        
        // –ê–≥–µ–Ω—Ç—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ ValidationMonitor
        agent_metrics: this.convertAgentMetrics(validationMetrics),
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ PerformanceMonitor –∏ MetricsService
        system_metrics: {
          total_requests: this.extractTotalRequests(infrastructureMetrics),
          active_agents: Object.keys(validationMetrics.agentMetrics).length,
          average_response_time: this.calculateAverageResponseTime(infrastructureMetrics),
          overall_success_rate: validationMetrics.successRate,
          critical_events: validationMetrics.criticalEvents.length,
          system_health_score: this.calculateSystemHealthScore(validationMetrics, systemStats)
        },
        
        // –ú–µ—Ç—Ä–∏–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–∑ ValidationMonitor
        validation_metrics: {
          total_validations: validationMetrics.totalValidations,
          validation_success_rate: validationMetrics.successRate,
          average_validation_time: validationMetrics.averageValidationTime,
          failed_validations: validationMetrics.failedValidations,
          quality_score_average: this.calculateQualityScore(validationMetrics),
          compatibility_score_average: this.calculateCompatibilityScore(validationMetrics)
        },

        // –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        data_sources: {
          validation_monitor: true,
          metrics_service: true,
          performance_monitor: true
        },

        // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        optimization_metadata: {
          last_optimization_time: this.getLastOptimizationTime(),
          active_optimizations_count: await this.getActiveOptimizationsCount(),
          optimization_success_rate: await this.getOptimizationSuccessRate(),
          recommendations_applied_today: this.getRecommendationsAppliedToday()
        }
      };

      if (shouldLog) {
        console.log('‚úÖ Integrated metrics snapshot collected successfully');
      }
      return integratedSnapshot;

    } catch (error) {
      if (shouldLog) {
        console.error('‚ùå Failed to collect integrated metrics:', error);
      }
      throw new Error(`Integrated metrics collection failed: ${error.message}`);
    }
  }

  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–∏—Å—Ç–µ–º—ã —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
   */
  public async performFullOptimizationAnalysis(): Promise<SystemAnalysis> {
    console.log('üîç Performing full optimization analysis...');

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const metrics = await this.getIntegratedMetricsSnapshot();
    
    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ OptimizationEngine
    this.optimizationEngine['analyzer'].addMetricsSnapshot(metrics);
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    const analysis = await this.optimizationEngine.analyzeSystemPerformance();
    
    // –û–±–æ–≥–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏—Å—Ç–µ–º
    const enhancedAnalysis = this.enhanceAnalysisWithExistingData(analysis);
    
    this.emit('analysis_completed', enhancedAnalysis);
    return enhancedAnalysis;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π (—Å —É—á–µ—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
   */
  public async generateAndApplyOptimizations(): Promise<OptimizationResult[]> {
    console.log('‚öôÔ∏è Generating and applying optimizations...');

    if (!this.canApplyMoreOptimizations()) {
      console.log('‚è∏Ô∏è Optimization limit reached for today');
      return [];
    }

    try {
      // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
      await this.performFullOptimizationAnalysis();
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const recommendations = await this.optimizationEngine.generateOptimizations();
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ª–∏—Ç–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
      const safeRecommendations = this.filterRecommendationsBySafetyPolicy(recommendations);
      
      if (safeRecommendations.length === 0) {
        console.log('‚ÑπÔ∏è No safe recommendations available for auto-application');
        return [];
      }

      // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      const results = await this.optimizationEngine.applyOptimizations(safeRecommendations);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
      this.appliedOptimizationsToday += results.filter(r => r.status === 'completed').length;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
      this.emit('optimizations_applied', results);
      
      // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
      await this.integrateOptimizationResults(results);

      console.log(`‚úÖ Applied ${results.length} optimizations successfully`);
      return results;

    } catch (error) {
      console.error('‚ùå Failed to generate/apply optimizations:', error);
      this.emit('optimization_error', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
   */
  public async getOptimizationRecommendations(): Promise<OptimizationRecommendation[]> {
    console.log('üí° Getting optimization recommendations...');

    await this.performFullOptimizationAnalysis();
    const recommendations = await this.optimizationEngine.generateOptimizations();
    
    // –û–±–æ–≥–∞—â–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏—Å—Ç–µ–º
    const enhancedRecommendations = this.enhanceRecommendationsWithContext(recommendations);
    
    this.emit('recommendations_generated', enhancedRecommendations);
    return enhancedRecommendations;
  }

  // ===== PRIVATE METHODS =====

  private setupEventListeners(): void {
    // Add throttling for critical events to prevent cascading loops
    let lastCriticalEventAnalysis = 0;
    const CRITICAL_EVENT_THROTTLE = 120000; // 2 minutes between critical event analyses

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è ValidationMonitor
    this.validationMonitor.on('critical_event', (event) => {
      const timeSinceLastAnalysis = Date.now() - lastCriticalEventAnalysis;
      
      if (timeSinceLastAnalysis > CRITICAL_EVENT_THROTTLE) {
        console.log('üö® Critical event detected, triggering throttled optimization analysis');
        lastCriticalEventAnalysis = Date.now();
        
        // Use setTimeout to prevent blocking the event loop
        setTimeout(() => {
          this.performFullOptimizationAnalysis().catch(error => {
            console.error('‚ùå Critical event analysis failed:', error);
          });
        }, 1000); // 1 second delay
      } else {
        console.log('‚è≥ Critical event detected but analysis throttled');
      }
    });

    this.validationMonitor.on('validation_recorded', (event) => {
      // Only trigger analysis for critical failures, and with throttling
      if (event.result === 'failed' && event.severity === 'critical') {
        const timeSinceLastAnalysis = Date.now() - lastCriticalEventAnalysis;
        
        if (timeSinceLastAnalysis > CRITICAL_EVENT_THROTTLE) {
          console.log('‚ö†Ô∏è Critical validation failure, scheduling delayed optimization check');
          lastCriticalEventAnalysis = Date.now();
          
          // Delay the analysis to prevent immediate cascading
          setTimeout(() => {
            // Only perform lightweight analysis for validation failures
            console.log('üîç Performing lightweight analysis for validation failure');
          }, 5000); // 5 second delay
        }
      }
    });

    // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
    setInterval(() => {
      const today = new Date().toDateString();
      if (this.lastOptimizationReset !== today) {
        this.appliedOptimizationsToday = 0;
        this.lastOptimizationReset = today;
        console.log('üîÑ Daily optimization counter reset');
      }
    }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  }

  private startMetricsCollection(): void {
    this.metricsCollectionTimer = setInterval(async () => {
      try {
        const metrics = await this.getIntegratedMetricsSnapshot();
        this.optimizationEngine['analyzer'].addMetricsSnapshot(metrics);
        this.emit('metrics_collected', metrics);
      } catch (error) {
        console.error('‚ùå Metrics collection error:', error);
      }
    }, this.config.metrics_collection_interval_ms);

    console.log(`üìä Metrics collection started (interval: ${this.config.metrics_collection_interval_ms}ms)`);
  }

  private startPeriodicOptimization(): void {
    this.optimizationTimer = setInterval(async () => {
      try {
        if (this.canApplyMoreOptimizations()) {
          await this.generateAndApplyOptimizations();
        }
      } catch (error) {
        console.error('‚ùå Periodic optimization error:', error);
      }
    }, this.config.optimization_interval_ms);

    console.log(`‚öôÔ∏è Periodic optimization started (interval: ${this.config.optimization_interval_ms}ms)`);
  }

  private convertAgentMetrics(validationMetrics: any): any {
    const agentMetrics: any = {};
    
    for (const [agentId, metrics] of Object.entries(validationMetrics.agentMetrics) as [string, any][]) {
      agentMetrics[agentId as AgentType] = {
        agent_id: agentId as AgentType,
        response_time_ms: metrics.averageValidationTime || 1000,
        success_rate: metrics.successRate || 95,
        error_count: metrics.failedValidations || 0,
        throughput_per_minute: metrics.validationsPerMinute || 10,
        memory_usage_mb: this.getAgentMemoryUsage(agentId),
        cpu_usage_percent: this.getAgentCpuUsage(agentId),
        last_activity: new Date().toISOString()
      };
    }

    return agentMetrics;
  }

  private extractTotalRequests(infrastructureMetrics: any): number {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ Prometheus –º–µ—Ç—Ä–∏–∫
    const requestCounters = infrastructureMetrics.counters?.filter((c: any) => 
      c.name.includes('request') || c.name.includes('call')
    ) || [];
    
    return requestCounters.reduce((total: number, counter: any) => total + counter.value, 0);
  }

  private calculateAverageResponseTime(infrastructureMetrics: any): number {
    // –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –∏–∑ histogram –º–µ—Ç—Ä–∏–∫
    const durationHistograms = infrastructureMetrics.histograms?.filter((h: any) => 
      h.name.includes('duration') || h.name.includes('response_time')
    ) || [];
    
    if (durationHistograms.length === 0) throw new Error('No duration histograms available for median calculation');
    
    const totalDuration = durationHistograms.reduce((sum: number, hist: any) => sum + hist.sum, 0);
    const totalCount = durationHistograms.reduce((sum: number, hist: any) => sum + hist.count, 0);
    
    return totalCount > 0 ? totalDuration / totalCount : 1000;
  }

  private calculateSystemHealthScore(validationMetrics: any, systemStats: any): number {
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –æ–±—â–µ–≥–æ health score
    const successRateScore = validationMetrics.successRate;
    const memoryScore = Math.max(0, 100 - (systemStats.memoryUsage?.heapUsed || 0) / 1024 / 1024 / 100); // MB to %
    const criticalEventsScore = Math.max(0, 100 - validationMetrics.criticalEvents.length * 10);
    
    return Math.round((successRateScore + memoryScore + criticalEventsScore) / 3);
  }

  private calculateQualityScore(validationMetrics: any): number {
    // –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    return validationMetrics.successRate || 85;
  }

  private calculateCompatibilityScore(validationMetrics: any): number {
    // –û—Ü–µ–Ω–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–∑–∞–≥–ª—É—à–∫–∞, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    return Math.min(95, validationMetrics.successRate + 5);
  }

  private getAgentMemoryUsage(agentId: string): number {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞
    return Math.floor(Math.random() * 512) + 256; // 256-768 MB
  }

  private getAgentCpuUsage(agentId: string): number {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è CPU –∞–≥–µ–Ω—Ç–∞
    return Math.floor(Math.random() * 60) + 20; // 20-80%
  }

  private getLastOptimizationTime(): string {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–∑–∞–≥–ª—É—à–∫–∞)
    return new Date(Date.now() - Math.random() * 3600000).toISOString();
  }

  private async getActiveOptimizationsCount(): Promise<number> {
    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    return 0; // –ó–∞–≥–ª—É—à–∫–∞
  }

  private async getOptimizationSuccessRate(): Promise<number> {
    // –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
    return 95; // –ó–∞–≥–ª—É—à–∫–∞
  }

  private getRecommendationsAppliedToday(): number {
    return this.appliedOptimizationsToday;
  }

  private canApplyMoreOptimizations(): boolean {
    const hourlyLimit = this.config.max_auto_optimizations_per_hour;
    return this.appliedOptimizationsToday < hourlyLimit * 24; // –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç
  }

  private filterRecommendationsBySafetyPolicy(recommendations: OptimizationRecommendation[]): OptimizationRecommendation[] {
    return recommendations.filter(rec => {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      if (this.config.require_human_approval_for_critical && rec.requires_human_approval) {
        return false;
      }
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –≤—ã—Å–æ–∫–æ—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      if (rec.safety_assessment.risk_level === 'critical' || rec.safety_assessment.risk_level === 'high') {
        return false;
      }
      
      return true;
    });
  }

  private enhanceAnalysisWithExistingData(analysis: SystemAnalysis): SystemAnalysis {
    // –û–±–æ–≥–∞—â–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ ValidationMonitor
    const validationMetrics = this.validationMonitor.getMetrics();
    
    return {
      ...analysis,
      optimization_opportunities: [
        ...analysis.optimization_opportunities,
        ...this.generateContextualOpportunities(validationMetrics)
      ]
    };
  }

  private enhanceRecommendationsWithContext(recommendations: OptimizationRecommendation[]): OptimizationRecommendation[] {
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ ValidationMonitor –∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
    return recommendations.map(rec => ({
      ...rec,
      rationale: `${rec.rationale} (Based on ValidationMonitor insights: ${this.getValidationInsights()})`
    }));
  }

  private generateContextualOpportunities(validationMetrics: any): string[] {
    const opportunities: string[] = [];
    
    if (validationMetrics.successRate < 95) {
      opportunities.push('Enable AI auto-correction to improve validation success rate');
    }
    
    if (validationMetrics.averageValidationTime > 1000) {
      opportunities.push('Optimize validation pipeline to reduce processing time');
    }
    
    return opportunities;
  }

  private getValidationInsights(): string {
    const metrics = this.validationMonitor.getMetrics();
    return `Success rate: ${metrics.successRate}%, Avg time: ${metrics.averageValidationTime}ms`;
  }

  private async integrateOptimizationResults(results: OptimizationResult[]): Promise<void> {
    // –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∏—Å—Ç–µ–º—ã
    for (const result of results) {
      if (result.status === 'completed') {
        // –ú–æ–∂–µ–º –∑–∞–ø–∏—Å–∞—Ç—å –≤ MetricsService –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
        this.metricsService.incrementCounter('optimization_applied', {
          type: result.optimization_id,
          status: result.status
        });
      }
    }
  }
}