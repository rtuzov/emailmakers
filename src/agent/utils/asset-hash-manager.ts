import { createHash } from 'crypto';
import { promises as fs } from 'fs';
import * as path from 'path';

export interface AssetHash {
  fileName: string;
  filePath: string;
  hash: string;
  size: number;
  createdAt: string;
}

export interface SharedAssetRegistry {
  [hash: string]: AssetHash;
}

/**
 * Asset Hash Manager - —É–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—â–∏–º–∏ –∞—Å—Å–µ—Ç–∞–º–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
 */
export class AssetHashManager {
  private static readonly SHARED_ASSETS_DIR = path.resolve(process.cwd(), 'mails', 'shared-assets');
  private static readonly REGISTRY_FILE = path.join(AssetHashManager.SHARED_ASSETS_DIR, 'asset-registry.json');
  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ–±—â–∏—Ö –∞—Å—Å–µ—Ç–æ–≤
   */
  static async initialize(): Promise<void> {
    await fs.mkdir(AssetHashManager.SHARED_ASSETS_DIR, { recursive: true });
    
    // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Ä–µ–µ—Å—Ç—Ä–∞ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    try {
      await fs.access(AssetHashManager.REGISTRY_FILE);
    } catch {
      await fs.writeFile(AssetHashManager.REGISTRY_FILE, JSON.stringify({}, null, 2));
      console.log('üìù Created shared assets registry');
    }
  }
  
  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç —Ö–µ—à —Ñ–∞–π–ª–∞
   */
  static async calculateFileHash(filePath: string): Promise<string> {
    const fileBuffer = await fs.readFile(filePath);
    return createHash('sha256').update(fileBuffer).digest('hex').substring(0, 16); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 16 —Å–∏–º–≤–æ–ª–æ–≤
  }
  
  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–µ–µ—Å—Ç—Ä –∞—Å—Å–µ—Ç–æ–≤
   */
  static async loadRegistry(): Promise<SharedAssetRegistry> {
    try {
      const registryContent = await fs.readFile(AssetHashManager.REGISTRY_FILE, 'utf8');
      return JSON.parse(registryContent);
    } catch {
      return {};
    }
  }
  
  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–µ—Å—Ç—Ä –∞—Å—Å–µ—Ç–æ–≤
   */
  static async saveRegistry(registry: SharedAssetRegistry): Promise<void> {
    await fs.writeFile(AssetHashManager.REGISTRY_FILE, JSON.stringify(registry, null, 2));
  }
  
  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Å—Å–µ—Ç –≤ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π
   * @param sourceFilePath - –ø—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @param originalFileName - –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
   * @returns –ø—É—Ç—å –∫ –∞—Å—Å–µ—Ç—É –≤ –æ–±—â–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
   */
  static async addOrGetSharedAsset(sourceFilePath: string, originalFileName: string): Promise<{
    sharedPath: string;
    hash: string;
    wasExisting: boolean;
  }> {
    await AssetHashManager.initialize();
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à —Ñ–∞–π–ª–∞
    const hash = await AssetHashManager.calculateFileHash(sourceFilePath);
    const registry = await AssetHashManager.loadRegistry();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞—Å—Å–µ—Ç
    if (registry[hash]) {
      const existingAsset = registry[hash];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      try {
        await fs.access(existingAsset.filePath);
        console.log(`‚ôªÔ∏è Using existing shared asset: ${existingAsset.fileName} (${hash})`);
        return {
          sharedPath: existingAsset.filePath,
          hash,
          wasExisting: true
        };
      } catch {
        // –§–∞–π–ª –±—ã–ª —É–¥–∞–ª–µ–Ω, —É–±–∏—Ä–∞–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
        delete registry[hash];
        await AssetHashManager.saveRegistry(registry);
      }
    }
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å —Ö–µ—à–µ–º
    const fileExtension = path.extname(originalFileName);
    const baseName = path.basename(originalFileName, fileExtension);
    const sharedFileName = `${baseName}_${hash}${fileExtension}`;
    const sharedPath = path.join(AssetHashManager.SHARED_ASSETS_DIR, sharedFileName);
    
    // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –æ–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    await fs.copyFile(sourceFilePath, sharedPath);
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
    const stats = await fs.stat(sharedPath);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–µ—Å—Ç—Ä
    const assetInfo: AssetHash = {
      fileName: sharedFileName,
      filePath: sharedPath,
      hash,
      size: stats.size,
      createdAt: new Date().toISOString()
    };
    
    registry[hash] = assetInfo;
    await AssetHashManager.saveRegistry(registry);
    
    console.log(`üì¶ Added new shared asset: ${sharedFileName} (${hash})`);
    return {
      sharedPath,
      hash,
      wasExisting: false
    };
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∞—Å—Å–µ—Ç –ø–æ —Ö–µ—à—É
   */
  static async getAssetByHash(hash: string): Promise<AssetHash | null> {
    const registry = await AssetHashManager.loadRegistry();
    return registry[hash] || null;
  }
  
  /**
   * –û—á–∏—â–∞–µ—Ç –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –∞—Å—Å–µ—Ç—ã (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
   */
  static async cleanupUnusedAssets(keepDays: number = 30): Promise<number> {
    const registry = await AssetHashManager.loadRegistry();
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - keepDays);
    
    let deletedCount = 0;
    const updatedRegistry: SharedAssetRegistry = {};
    
    for (const [hash, asset] of (Object || {}).entries(registry)) {
      const assetDate = new Date(asset.createdAt);
      
      if (assetDate < cutoffDate) {
        try {
          await fs.unlink(asset.filePath);
          console.log(`üóëÔ∏è Deleted old asset: ${asset.fileName}`);
          deletedCount++;
        } catch (error) {
          // –§–∞–π–ª —É–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞
          console.log(`üóëÔ∏è Removed missing asset from registry: ${asset.fileName}`);
        }
      } else {
        updatedRegistry[hash] = asset;
      }
    }
    
    await AssetHashManager.saveRegistry(updatedRegistry);
    console.log(`üßπ Cleanup completed: removed ${deletedCount} old assets`);
    
    return deletedCount;
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—â–∏–º –∞—Å—Å–µ—Ç–∞–º
   */
  static async getStats(): Promise<{
    totalAssets: number;
    totalSizeBytes: number;
    oldestAsset: string;
    newestAsset: string;
  }> {
    const registry = await AssetHashManager.loadRegistry();
    const assets = (Object || {}).values(registry);
    
    if (assets.length === 0) {
      return {
        totalAssets: 0,
        totalSizeBytes: 0,
        oldestAsset: '',
        newestAsset: ''
      };
    }
    
    const totalSizeBytes = assets.reduce((sum, asset) => sum + asset.size, 0);
    const sortedByDate = assets.sort((a, b) => new Date(a.createdAt).getTime() - new Date((b || {}).createdAt).getTime());
    
    return {
      totalAssets: assets.length,
      totalSizeBytes,
      oldestAsset: sortedByDate[0].fileName,
      newestAsset: sortedByDate[sortedByDate.length - 1].fileName
    };
  }
  
  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL –¥–ª—è –∞—Å—Å–µ—Ç–∞
   */
  static getAssetUrl(hash: string, campaignId: string): string {
    return `../shared-assets/${hash}`;
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–±—â–∏–π –∞—Å—Å–µ—Ç –≤ –ø–∞–ø–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  static async linkAssetToCampaign(assetHash: string, campaignAssetsPath: string, linkName: string): Promise<string> {
    const registry = await AssetHashManager.loadRegistry();
    const asset = registry[assetHash];
    
    if (!asset) {
      throw new Error(`Asset with hash ${assetHash} not found in registry`);
    }
    
    const linkPath = path.join(campaignAssetsPath, linkName);
    const relativePath = path.relative(campaignAssetsPath, asset.filePath);
    
    try {
      await fs.symlink(relativePath, linkPath);
      console.log(`üîó Created asset link: ${linkName} -> ${asset.fileName}`);
    } catch (error) {
      // –ï—Å–ª–∏ —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
      await fs.copyFile(asset.filePath, linkPath);
      console.log(`üìã Copied asset: ${linkName} (symlink not supported)`);
    }
    
    return linkPath;
  }
}

export default AssetHashManager;