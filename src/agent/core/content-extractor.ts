/**
 * üìù CONTENT EXTRACTOR
 * 
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö:
 * - –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
 * - –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
 * - –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑ fallback
 */

export interface StandardContent {
  subject: string;
  preheader: string;
  body: string;
  cta: string;
  language: 'ru' | 'en';
  tone: string;
}

export interface ContentMetadata {
  language: 'ru' | 'en';
  tone: string;
  word_count: number;
  reading_time: number;
}

export interface BrandGuidelines {
  voice_tone: string;
  key_messages: string[];
  compliance_notes: string[];
  color_palette?: string[];
  typography?: string;
  visual_style?: string;
}

export interface ExtractedContentPackage {
  content: StandardContent;
  metadata: ContentMetadata;
  brand_guidelines: BrandGuidelines;
}

export class ContentExtractor {
  
  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   */
  extractContent(contentPackage: any): ExtractedContentPackage {
    if (!contentPackage) {
      throw new Error('ContentExtractor: Content package is required');
    }

    const content = this.extractStandardContent(contentPackage);
    const metadata = this.extractMetadata(contentPackage);
    const brandGuidelines = this.extractBrandGuidelines(contentPackage);

    return {
      content,
      metadata,
      brand_guidelines: brandGuidelines
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractStandardContent(contentPackage: any): StandardContent {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    const contentSource = contentPackage.content || contentPackage.content_package?.complete_content || contentPackage;
    
    const body = contentSource.body || contentSource.email_body || '';

    if (!body || body.trim() === '') {
      throw new Error('ContentExtractor: Body is required and cannot be empty');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    const subject = contentSource.subject?.trim();
    const preheader = contentSource.preheader?.trim();
    const cta = contentSource.cta?.trim();

    // –°—Ç—Ä–æ–≥–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ fallback
    if (!subject) {
      throw new Error('ContentExtractor: Subject is required and cannot be empty');
    }
    if (!preheader) {
      throw new Error('ContentExtractor: Preheader is required and cannot be empty');
    }
    if (!cta) {
      throw new Error('ContentExtractor: CTA is required and cannot be empty');
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if (subject.length < 3) {
      throw new Error('ContentExtractor: Subject must be at least 3 characters long');
    }
    if (preheader.length < 3) {
      throw new Error('ContentExtractor: Preheader must be at least 3 characters long');
    }
    if (body.length < 10) {
      throw new Error('ContentExtractor: Body must be at least 10 characters long');
    }
    if (cta.length < 2) {
      throw new Error('ContentExtractor: CTA must be at least 2 characters long');
    }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —è–∑—ã–∫ –∏ —Ç–æ–Ω
    const language = this.extractLanguage(contentPackage);
    const tone = this.extractTone(contentPackage);

    return {
      subject,
      preheader,
      body,
      cta,
      language,
      tone
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractMetadata(contentPackage: any): ContentMetadata {
    const metadataSource = contentPackage.content_package?.content_metadata ||
                          contentPackage.content_metadata || 
                          contentPackage.metadata || 
                          {};

    const language = this.extractLanguage(contentPackage);
    const tone = this.extractTone(contentPackage);
    
    // –í—ã—á–∏—Å–ª—è–µ–º word_count –µ—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
    let wordCount = metadataSource.word_count;
    if (!wordCount || wordCount === 0) {
      const body = contentPackage.complete_content?.body || 
                  contentPackage.content?.body || 
                  contentPackage.body || '';
      
      if (!body) {
        throw new Error('ContentExtractor: Cannot calculate word count - body content missing');
      }
      
      wordCount = this.calculateWordCount(body);
    }

    if (wordCount === 0) {
      throw new Error('ContentExtractor: Word count must be greater than 0');
    }

    // –í—ã—á–∏—Å–ª—è–µ–º reading_time
    const readingTime = metadataSource.reading_time || Math.ceil(wordCount / 200); // 200 words per minute

    return {
      language,
      tone,
      word_count: wordCount,
      reading_time: readingTime
    };
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  private extractBrandGuidelines(contentPackage: any): BrandGuidelines {
    const brandSource = contentPackage.content_package?.brand_guidelines ||
                       contentPackage.brand_guidelines || {};

    return {
      voice_tone: brandSource.voice_tone || 'professional',
      key_messages: Array.isArray(brandSource.key_messages) ? brandSource.key_messages : [],
      compliance_notes: Array.isArray(brandSource.compliance_notes) ? brandSource.compliance_notes : [],
      color_palette: Array.isArray(brandSource.color_palette) ? brandSource.color_palette : undefined,
      typography: brandSource.typography || undefined,
      visual_style: brandSource.visual_style || undefined
    };
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractLanguage(contentPackage: any): 'ru' | 'en' {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —è–∑—ã–∫–∞ (–≤–∫–ª—é—á–∞—è –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
    const languageFromMeta = contentPackage.content_package?.content_metadata?.language ||
                            contentPackage.content_metadata?.language || 
                            contentPackage.metadata?.language;
    const languageFromContent = contentPackage.content_package?.complete_content?.language ||
                               contentPackage.complete_content?.language || 
                               contentPackage.content?.language;
    const languageFromPackage = contentPackage.language;

    const language = languageFromMeta || languageFromContent || languageFromPackage;

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —è–∑—ã–∫
    if (language === 'ru' || language === 'russian') {
      return 'ru';
    }
    if (language === 'en' || language === 'english') {
      return 'en';
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —è–∑—ã–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    const content = contentPackage.complete_content?.subject || 
                   contentPackage.content?.subject || 
                   contentPackage.subject || '';

    if (this.isRussianText(content)) {
      return 'ru';
    }

    // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π –¥–ª—è –Ω–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    return 'ru';
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  private extractTone(contentPackage: any): string {
    const toneFromMeta = contentPackage.content_package?.content_metadata?.tone ||
                        contentPackage.content_metadata?.tone || 
                        contentPackage.metadata?.tone;
    const toneFromContent = contentPackage.content_package?.complete_content?.tone ||
                           contentPackage.complete_content?.tone || 
                           contentPackage.content?.tone;
    const toneFromPackage = contentPackage.tone;

    const tone = toneFromMeta || toneFromContent || toneFromPackage;

    if (!tone) {
      throw new Error('ContentExtractor: Tone is required but not found in content package');
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Ç–æ–Ω
    const validTones = ['friendly', 'professional', 'casual', 'formal', 'urgent', 'enthusiastic'];
    if (!validTones.includes(tone)) {
      throw new Error(`ContentExtractor: Invalid tone "${tone}". Must be one of: ${validTones.join(', ')}`);
    }

    return tone;
  }

  /**
   * –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
   */
  private calculateWordCount(text: string): number {
    if (!text || typeof text !== 'string') {
      return 0;
    }

    // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    const cleanText = text
      .replace(/<[^>]*>/g, '') // –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏
      .replace(/\s+/g, ' ')    // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ
      .trim();

    if (!cleanText) {
      return 0;
    }

    // –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø—Ä–æ–±–µ–ª–∞–º –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    const words = cleanText.split(' ').filter(word => word.length > 0);
    return words.length;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —Ç–µ–∫—Å—Ç
   */
  private isRussianText(text: string): boolean {
    if (!text) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    const cyrillicPattern = /[–∞-—è—ë]/i;
    return cyrillicPattern.test(text);
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  validateExtractedContent(extracted: ExtractedContentPackage): void {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    if (!extracted.content.subject || extracted.content.subject.length < 3) {
      throw new Error('ContentExtractor: Invalid subject in extracted content');
    }
    if (!extracted.content.preheader || extracted.content.preheader.length < 3) {
      throw new Error('ContentExtractor: Invalid preheader in extracted content');
    }
    if (!extracted.content.body || extracted.content.body.length < 10) {
      throw new Error('ContentExtractor: Invalid body in extracted content');
    }
    if (!extracted.content.cta || extracted.content.cta.length < 2) {
      throw new Error('ContentExtractor: Invalid CTA in extracted content');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    if (extracted.metadata.word_count <= 0) {
      throw new Error('ContentExtractor: Invalid word count in metadata');
    }
    if (extracted.metadata.reading_time <= 0) {
      throw new Error('ContentExtractor: Invalid reading time in metadata');
    }
    if (!['ru', 'en'].includes(extracted.metadata.language)) {
      throw new Error('ContentExtractor: Invalid language in metadata');
    }
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
   */
  getExtractionStats(extracted: ExtractedContentPackage) {
    return {
      content_length: {
        subject: extracted.content.subject.length,
        preheader: extracted.content.preheader.length,
        body: extracted.content.body.length,
        cta: extracted.content.cta.length
      },
      metadata: {
        language: extracted.metadata.language,
        tone: extracted.metadata.tone,
        word_count: extracted.metadata.word_count,
        reading_time: extracted.metadata.reading_time
      },
      brand_guidelines: {
        has_color_palette: !!extracted.brand_guidelines.color_palette,
        has_typography: !!extracted.brand_guidelines.typography,
        key_messages_count: extracted.brand_guidelines.key_messages.length,
        compliance_notes_count: extracted.brand_guidelines.compliance_notes.length
      }
    };
  }
} 