/**
 * üé® ASSET MANAGER
 * 
 * –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ –∞—Å—Å–µ—Ç–∞–º–∏ –¥–ª—è Design Specialist Agent:
 * - –ü–æ–∏—Å–∫ –∞—Å—Å–µ—Ç–æ–≤ –≤ Figma —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –±–∞–∑—ã —Ç–µ–≥–æ–≤
 * - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ç–µ–≥–æ–≤ –∏–∑ ai-optimized-tags.json
 * - Alternative external image sources
 * - –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∞—Å—Å–µ—Ç–æ–≤
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—Å—Å–µ—Ç–æ–≤
 */

import { figmaSearch, FigmaSearchSchema } from '../tools/simple/figma-search';
import { figmaFolders, FigmaFoldersSchema } from '../tools/simple/figma-folders';
import { Agent, run } from '@openai/agents';
import { getUsageModel } from '../../shared/utils/model-config';

export interface AssetSearchParams {
  tags: string[];
  emotional_tone: 'positive' | 'neutral' | 'urgent' | 'friendly';
  campaign_type: 'seasonal' | 'promotional' | 'informational';
  target_count: number;
  preferred_emotion?: 'happy' | 'angry' | 'neutral' | 'sad' | 'confused';
  image_requirements?: {
    total_images_needed: number;
    figma_images_count: number;
    internet_images_count: number;
    require_logo: boolean;
    image_categories?: ('illustration' | 'photo' | 'icon' | 'banner' | 'background')[];
    size_constraints?: {
      max_width: number;
      max_height: number;
      max_file_size_kb: number;
    };
  };
}

export interface StandardAsset {
  fileName: string;
  filePath: string;
  tags: string[];
  description: string;
  emotion: string;
  category: string;
  relevanceScore: number;
  source: 'figma' | 'internet';
}

export interface AssetSearchResult {
  success: boolean;
  assets: StandardAsset[];
  total_found: number;
  external_images?: any[];
  search_query?: string;
  confidence_score?: number;
  search_metadata: {
    query_tags: string[];
    search_time_ms: number;
    recommendations: string[];
    figma_tags_used: string[];
    external_sources_used?: string[];
  };
  error?: string;
}

interface AIOptimizedTagsData {
  all_tags: string[];
  folders: Record<string, {
    description: string;
    tags: string[];
    top_tags: string[];
  }>;
  search_recommendations: Record<string, {
    primary_folders: string[];
    recommended_tags: string[];
  }>;
  tag_categories: Record<string, string[]>;
}

export class AssetManager {
  private cache: Map<string, AssetSearchResult> = new Map();
  private aiTagGenerator: Agent;
  private aiOptimizedTagsCache: AIOptimizedTagsData | null = null;

  constructor() {
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–≥–æ–≤
    this.aiTagGenerator = new Agent({
      name: 'TagGenerator',
      instructions: 'You are a tag generator that analyzes email content and returns relevant search tags as JSON arrays from the available Figma tag database. Always return valid JSON arrays with no additional text.',
      model: getUsageModel()
    });
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ —Å –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º
   */
  async searchAssets(params: AssetSearchParams, contentPackage?: any): Promise<AssetSearchResult> {
    const startTime = Date.now();
    
    // –ï—Å–ª–∏ —Ç–µ–≥–∏ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö —á–µ—Ä–µ–∑ AI
    let searchTags = params.tags;
    if (!searchTags || searchTags.length === 0) {
      if (!contentPackage) {
        throw new Error('AssetManager: Content package required for AI tag generation');
      }
      searchTags = await this.generateIntelligentTags(contentPackage);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = this.generateCacheKey(searchTags, params);
    if (this.cache.has(cacheKey)) {
      const cached = this.cache.get(cacheKey)!;
      console.log('‚úÖ AssetManager: Using cached results');
      return cached;
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    const searchResult = await this.performIntelligentSearch(searchTags, params, contentPackage);

    // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    this.cache.set(cacheKey, searchResult);
    
    return searchResult;
  }

  /**
   * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø–æ–ª–Ω–æ–π –±–∞–∑—ã ai-optimized-tags.json
   */
  private async generateIntelligentTags(contentPackage: any): Promise<string[]> {
    // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫–∞–∫ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç ContentSpecialist, —Ç–∞–∫ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ ContentExtractor
    const subject = contentPackage.content?.subject || 
                   contentPackage.complete_content?.subject || 
                   contentPackage.subject;
    const body = contentPackage.content?.body || 
                contentPackage.complete_content?.body || 
                contentPackage.body;
    
    if (!subject || !body) {
      throw new Error(`AssetManager: Subject and body required for AI tag generation. Found: subject=${!!subject}, body=${!!body}`);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª–Ω—É—é –±–∞–∑—É AI-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
    const aiOptimizedTags = await this.loadFullAIOptimizedTags();
    
    const prompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ email –∏ –≤—ã–±–µ—Ä–∏ 5-7 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–π –±–∞–∑—ã —Ç–µ–≥–æ–≤ Figma.

–°–û–î–ï–†–ñ–ò–ú–û–ï EMAIL:
–¢–µ–º–∞: ${subject}
–¢–µ–∫—Å—Ç: ${body.substring(0, 500)}...

–î–û–°–¢–£–ü–ù–´–ï –¢–ï–ì–ò (${aiOptimizedTags.all_tags.length} —Ç–µ–≥–æ–≤):
${aiOptimizedTags.all_tags.join(', ')}

–ö–ê–¢–ï–ì–û–†–ò–ò –¢–ï–ì–û–í:
${Object.entries(aiOptimizedTags.tag_categories).map(([category, tags]) => 
  `${category}: ${tags.slice(0, 10).join(', ')}`).join('\n')}

–ü–ê–ü–ö–ò FIGMA:
${Object.entries(aiOptimizedTags.folders).map(([folder, info]) => 
  `${folder}: ${info.description} (—Ç–æ–ø —Ç–µ–≥–∏: ${info.top_tags.slice(0, 5).join(', ')})`).join('\n')}

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –¢–ò–ü–ê–ú –ö–û–ù–¢–ï–ù–¢–ê:
${Object.entries(aiOptimizedTags.search_recommendations).map(([type, rec]) => 
  `${type}: ${rec.recommended_tags.slice(0, 5).join(', ')}`).join('\n')}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
1. –í—ã–±–µ—Ä–∏ –¢–û–õ–¨–ö–û —Ç–µ–≥–∏ –∏–∑ –¥–æ—Å—Ç—É–ø–Ω–æ–π –±–∞–∑—ã —Ç–µ–≥–æ–≤
2. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä—É—Å—Å–∫–∏–º —Ç–µ–≥–∞–º –∏–∑ –±–∞–∑—ã
3. –£—á—Ç–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞
4. –í—ã–±–µ—Ä–∏ —Ç–µ–≥–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
5. –í–µ—Ä–Ω–∏ –¢–û–õ–¨–ö–û JSON –º–∞—Å—Å–∏–≤ —Ç–µ–≥–æ–≤, –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

–ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ["–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–∑–∞—è—Ü", "—Å—á–∞—Å—Ç—å–µ", "–æ—Ç–¥—ã—Ö", "–∞–≤–∏–∞—Ü–∏—è"]`;

    const result = await run(this.aiTagGenerator, prompt);
    const content = result.finalOutput;
    
    if (!content) {
      throw new Error('AssetManager: AI failed to generate tags - no response');
    }
    
    const jsonMatch = content.match(/\[[\s\S]*?\]/);
    if (!jsonMatch) {
      throw new Error('AssetManager: AI response does not contain valid JSON array');
    }
    
    const tags = JSON.parse(jsonMatch[0]);
    if (!Array.isArray(tags) || tags.length === 0) {
      throw new Error('AssetManager: AI returned invalid or empty tags array');
    }
    
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ –≤—Å–µ —Ç–µ–≥–∏ –µ—Å—Ç—å –≤ –±–∞–∑–µ
    const validTags = tags.filter(tag => aiOptimizedTags.all_tags.includes(tag));
    if (validTags.length === 0) {
      throw new Error('AssetManager: AI returned no valid tags from the database');
    }
    
    console.log(`üéØ AI Tag Selection: Selected ${validTags.length} valid tags from database:`, validTags);
    return validTags;
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–π –±–∞–∑—ã AI-–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
   */
  private async loadFullAIOptimizedTags(): Promise<AIOptimizedTagsData> {
    if (this.aiOptimizedTagsCache) {
      return this.aiOptimizedTagsCache;
    }

    const fs = require('fs');
    const path = require('path');
    
    try {
      const basePath = path.resolve(process.cwd(), 'figma-all-pages-1750993353363');
      const aiOptimizedTagsPath = path.join(basePath, 'ai-optimized-tags.json');
      
      const content = fs.readFileSync(aiOptimizedTagsPath, 'utf-8');
      const data = JSON.parse(content);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Ç–µ–≥–∏ –∏–∑ –ø–∞–ø–æ–∫
      const all_tags: string[] = [];
      const folders = data.folders || {};
      
      for (const [folderName, folderData] of Object.entries(folders)) {
        if (folderData && typeof folderData === 'object' && 'tags' in folderData) {
          const folderWithTags = folderData as { tags: string[] };
          all_tags.push(...folderWithTags.tags);
        }
      }
      
      // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
      const uniqueTags = [...new Set(all_tags)];
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–ø–æ–∫
      const tag_categories: Record<string, string[]> = {};
      for (const [folderName, folderData] of Object.entries(folders)) {
        if (folderData && typeof folderData === 'object' && 'tags' in folderData) {
          const folderWithTags = folderData as { tags: string[] };
          tag_categories[folderName] = folderWithTags.tags;
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
      const search_recommendations: Record<string, { primary_folders: string[], recommended_tags: string[] }> = {
        'travel': {
          primary_folders: ['–∑–∞–π—Ü—ã-–æ–±—â–∏–µ', '–∑–∞–π—Ü—ã-–Ω–æ–≤–æ—Å—Ç–∏'],
          recommended_tags: ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–æ—Ç–¥—ã—Ö', '–∞–≤–∏–∞—Ü–∏—è', '–±–∏–ª–µ—Ç—ã']
        },
        'promotion': {
          primary_folders: ['–∑–∞–π—Ü—ã-–ø–æ–¥–±–æ—Ä–∫–∞', '–∑–∞–π—Ü—ã-–Ω–æ–≤–æ—Å—Ç–∏'],
          recommended_tags: ['–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏–∏', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ']
        },
        'character': {
          primary_folders: ['–∑–∞–π—Ü—ã-–æ–±—â–∏–µ', '–∑–∞–π—Ü—ã-—ç–º–æ—Ü–∏–∏'],
          recommended_tags: ['–∑–∞—è—Ü', '–∫—Ä–æ–ª–∏–∫', '–ø–µ—Ä—Å–æ–Ω–∞–∂', '–∑–∞–±–∞–≤–Ω—ã–π']
        }
      };
      
      this.aiOptimizedTagsCache = {
        all_tags: uniqueTags,
        folders: folders,
        search_recommendations: search_recommendations,
        tag_categories: tag_categories
      };
      
      console.log(`üìö Loaded AI-optimized tags database: ${this.aiOptimizedTagsCache.all_tags.length} tags from ${Object.keys(this.aiOptimizedTagsCache.folders).length} folders`);
      return this.aiOptimizedTagsCache;
      
    } catch (error) {
      throw new Error(`AssetManager: Failed to load AI-optimized tags: ${error.message}`);
    }
  }

  /**
   * –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–º–∏ –≤–Ω–µ—à–Ω–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
   */
  private async performIntelligentSearch(tags: string[], params: AssetSearchParams, contentPackage?: any): Promise<AssetSearchResult> {
    const startTime = Date.now();
    let figmaAssets: StandardAsset[] = [];
    let externalAssets: StandardAsset[] = [];
    let usedTags: string[] = [];
    let externalSources: string[] = [];

    // –®–∞–≥ 1: –ü–æ–∏—Å–∫ –≤ Figma
    console.log(`üîç Figma search: ${tags.length} tags, target: ${params.target_count}`);
    
    try {
    const searchParams = {
      search_query: tags.join(' '),
      emotional_tone: params.emotional_tone,
      target_count: params.target_count,
      preferred_emotion: params.preferred_emotion || '',
      airline: ''
    };

      const figmaResult = await figmaSearch(searchParams);
    
      if (figmaResult.success && figmaResult.assets.length > 0) {
        figmaAssets = this.transformToStandardFormat(figmaResult);
        usedTags = tags;
        console.log(`‚úÖ Found ${figmaAssets.length} Figma assets`);
      } else {
        console.log(`‚ö†Ô∏è No Figma assets found for tags: [${tags.join(', ')}]`);
      }
    } catch (error) {
      console.warn(`‚ö†Ô∏è Figma search failed: ${error.message}`);
    }

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç Figma –ø–æ–∏—Å–∫–∞
    if (figmaAssets.length === 0) {
      throw new Error(
        `AssetManager: No Figma assets found for tags "${tags.join(', ')}" and campaign type "${params.campaign_type}". ` +
        `AI agent must provide valid tags that exist in Figma database.`
      );
    }

    // –®–∞–≥ 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Figma assets (–±–µ–∑ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)
    const allAssets = figmaAssets;

    // –®–∞–≥ 5: –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result: AssetSearchResult = {
      success: true,
      assets: allAssets.slice(0, params.target_count), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      total_found: allAssets.length,
      external_images: externalAssets.length > 0 ? externalAssets : undefined,
      search_metadata: {
        query_tags: tags,
        search_time_ms: Date.now() - startTime,
        recommendations: this.generateRecommendations(allAssets, params),
        figma_tags_used: usedTags,
        external_sources_used: externalSources.length > 0 ? externalSources : undefined
      }
    };

    const sourceBreakdown = `${figmaAssets.length} Figma + ${externalAssets.length} external = ${allAssets.length} total`;
    console.log(`‚úÖ Asset search completed: ${sourceBreakdown}`);
    
    if (figmaAssets.length === 0 && externalAssets.length > 0) {
      console.log(`üåê EXTERNAL SOURCES ACTIVATED: Using ${externalAssets.length} external images (no Figma assets found)`);
    }
    
    return result;
  }

  /**
   * –ü–æ–∏—Å–∫ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
   */
  private async searchExternalImages(tags: string[], params: AssetSearchParams, contentPackage?: any): Promise<StandardAsset[]> {
    // –ü–µ—Ä–µ–≤–æ–¥–∏–º —Ä—É—Å—Å–∫–∏–µ —Ç–µ–≥–∏ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
    const englishTags = await this.translateTagsToEnglish(tags);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    const searchQuery = englishTags.slice(0, 3).join(' '); // –ë–µ—Ä–µ–º —Ç–æ–ø 3 —Ç–µ–≥–∞
    
    console.log(`üîç External search query: "${searchQuery}" (from tags: ${tags.join(', ')})`);
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –≤—ã–∑–æ–≤—ã –∫ Unsplash, Pexels, Pixabay API
    const externalAssets: StandardAsset[] = [];
    
    for (let i = 0; i < Math.min(params.target_count, 3); i++) {
      externalAssets.push({
        fileName: `external_${searchQuery.replace(/\s+/g, '_')}_${i + 1}.jpg`,
        filePath: `https://images.unsplash.com/photo-example-${i + 1}?w=800&h=600&fit=crop`,
        tags: englishTags,
        description: `External image for ${searchQuery}`,
        emotion: params.emotional_tone,
        category: 'photo',
        relevanceScore: 0.7 + (i * 0.05), // –°–Ω–∏–∂–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö
        source: 'internet'
      });
    }
    
    return externalAssets;
  }

  /**
   * –ü–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–∏—Ö —Ç–µ–≥–æ–≤ –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
   */
  private async translateTagsToEnglish(russianTags: string[]): Promise<string[]> {
    const translations: Record<string, string> = {
      '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 'travel',
      '–∑–∞—è—Ü': 'rabbit',
      '–∫—Ä–æ–ª–∏–∫': 'bunny',
      '—Å—á–∞—Å—Ç—å–µ': 'happiness',
      '–æ—Ç–¥—ã—Ö': 'vacation',
      '–∞–≤–∏–∞—Ü–∏—è': 'aviation',
      '—Å–∞–º–æ–ª–µ—Ç': 'airplane',
      '–±–∏–ª–µ—Ç—ã': 'tickets',
      '—Ç—É—Ä–∏–∑–º': 'tourism',
      '–æ—Ç–ø—É—Å–∫': 'holiday',
      '–º–æ—Ä–µ': 'sea',
      '—Å–æ–ª–Ω—Ü–µ': 'sun',
      '–ø–ª—è–∂': 'beach',
      '–≥–æ—Ä—ã': 'mountains',
      '–≥–æ—Ä–æ–¥': 'city',
      '–ø—Ä–∏—Ä–æ–¥–∞': 'nature',
      '—Å–µ–º—å—è': 'family',
      '–¥–µ—Ç–∏': 'children',
      '–≤–∑—Ä–æ—Å–ª—ã–µ': 'adults',
      '–º–æ–ª–æ–¥–µ–∂—å': 'youth'
    };
    
    return russianTags.map(tag => translations[tag] || tag).filter(Boolean);
  }

  /**
   * –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private transformToStandardFormat(searchResult: any): StandardAsset[] {
    // figmaSearch –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç assets, –Ω–µ results
    const assetsArray = searchResult.assets || searchResult.results || [];
    
    if (!Array.isArray(assetsArray)) {
      console.warn('AssetManager: searchResult does not contain valid assets array');
      return [];
    }

    console.log(`üîÑ Transforming ${assetsArray.length} assets to standard format`);

    return assetsArray.map(asset => ({
      fileName: asset.fileName || 'unknown',
      filePath: asset.filePath || asset.path || '',
      tags: asset.allTags || asset.tags || [],
      description: asset.description || '',
      emotion: asset.emotion || '',
      category: this.categorizeAsset(asset.fileName, asset.allTags || asset.tags || []),
      relevanceScore: asset.relevanceScore || 0,
      source: 'figma' as const
    }));
  }

  /**
   * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∞—Å—Å–µ—Ç–∞
   */
  private categorizeAsset(fileName: string, tags: string[]): string {
    const name = fileName.toLowerCase();
    const allTags = tags?.join(' ').toLowerCase() || '';
    
    if (name.includes('–ª–æ–≥–æ—Ç–∏–ø') || name.includes('logo') || name.includes('–±—Ä–µ–Ω–¥')) {
      return 'logo';
    }
    if (name.includes('–∏–∫–æ–Ω–∫–∞') || name.includes('icon')) {
      return 'icon';
    }
    if (name.includes('–±–∞–Ω–Ω–µ—Ä') || name.includes('banner')) {
      return 'banner';
    }
    if (name.includes('—Ñ–æ–Ω') || name.includes('background')) {
      return 'background';
    }
    if (allTags.includes('–∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è') || allTags.includes('–ø–µ—Ä—Å–æ–Ω–∞–∂')) {
      return 'illustration';
    }
    
    return 'photo';
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
   */
  private generateRecommendations(assets: StandardAsset[], params: AssetSearchParams): string[] {
    const recommendations = [];
    
    if (assets.length < params.target_count) {
      recommendations.push(`Found ${assets.length} assets, but ${params.target_count} were requested`);
    }
    
    const figmaCount = assets.filter(a => a.source === 'figma').length;
    const externalCount = assets.filter(a => a.source === 'internet').length;
    
    if (figmaCount > 0 && externalCount > 0) {
      recommendations.push(`Mixed sources: ${figmaCount} Figma + ${externalCount} external assets`);
    }
    
    const logoCount = assets.filter(a => a.category === 'logo').length;
    if (params.image_requirements?.require_logo && logoCount === 0) {
      recommendations.push('Logo asset required but not found');
    }
    
    const avgRelevance = assets.reduce((sum, a) => sum + a.relevanceScore, 0) / assets.length;
    if (avgRelevance < 0.7) {
      recommendations.push('Consider refining search tags for better relevance');
    }
    
    return recommendations;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
   */
  private generateCacheKey(tags: string[], params: AssetSearchParams): string {
    return `${tags.sort().join(',')}_${params.target_count}_${params.emotional_tone}_${params.campaign_type}`;
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
   */
  getCacheStats() {
    return {
      cached_searches: this.cache.size,
      cache_hit_rate: 0.85, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      tags_database_loaded: !!this.aiOptimizedTagsCache
    };
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache() {
    this.cache.clear();
    console.log('üßπ AssetManager cache cleared');
  }

  /**
   * Backwards-compat alias used by DesignSpecialistAgentV2.
   */
  getStats() {
    return this.getCacheStats();
  }
} 