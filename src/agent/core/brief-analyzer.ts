/**
 * Brief Analyzer - –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ –±—Ä–∏—Ñ–∞
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ —É—Ç–æ—á–Ω–µ–Ω–∏—è
 */

import { EmailGenerationRequest } from '../types';
import { UltraThinkEngine } from '../ultrathink';

export interface AmbiguityIssue {
  type: 'missing_info' | 'unclear_intent' | 'conflicting_params' | 'optimization_opportunity';
  field: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  description: string;
  suggestions: string[];
  examples?: string[];
  impact: string;
}

export interface BriefAnalysisResult {
  score: number; // 0-100, –∫–∞—á–µ—Å—Ç–≤–æ –±—Ä–∏—Ñ–∞
  clarity: number; // 0-100, —è—Å–Ω–æ—Å—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π  
  completeness: number; // 0-100, –ø–æ–ª–Ω–æ—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
  feasibility: number; // 0-100, –≤—ã–ø–æ–ª–Ω–∏–º–æ—Å—Ç—å
  issues: AmbiguityIssue[];
  recommendations: string[];
  estimatedDuration: number; // –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
  confidence: number; // 0-100, —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ
}

export interface ClarificationRequest {
  id: string;
  question: string;
  type: 'single_choice' | 'multiple_choice' | 'text_input' | 'confirmation';
  options?: string[];
  defaultValue?: string;
  required: boolean;
  context: string;
  impact: string;
}

export interface BriefRefinementResult {
  originalRequest: EmailGenerationRequest;
  refinedRequest: EmailGenerationRequest;
  clarifications: Array<{
    question: string;
    answer: string;
    impact: string;
  }>;
  improvements: string[];
  confidenceBoost: number; // –Ω–∞ —Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤—ã—Ä–æ—Å–ª–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
}

export class BriefAnalyzer {
  private ultraThink?: UltraThinkEngine;

  constructor(ultraThink?: UltraThinkEngine) {
    this.ultraThink = ultraThink;
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –±—Ä–∏—Ñ–∞ –Ω–∞ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–±–ª–µ–º—ã
   */
  async analyzeBrief(request: EmailGenerationRequest): Promise<BriefAnalysisResult> {
    console.log('üîç Analyzing brief for ambiguities and issues...');
    
    const issues: AmbiguityIssue[] = [];
    let score = 100;
    
    // –ê–Ω–∞–ª–∏–∑ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π
    const topicAnalysis = this.analyzeTopicClarity(request.topic);
    if (topicAnalysis.issues.length > 0) {
      issues.push(...topicAnalysis.issues);
      score -= topicAnalysis.penalty;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –º–∞—Ä—à—Ä—É—Ç–∞
    const routeAnalysis = this.analyzeRouteSpecificity(request.origin, request.destination);
    if (routeAnalysis.issues.length > 0) {
      issues.push(...routeAnalysis.issues);
      score -= routeAnalysis.penalty;
    }
    
    // –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const dateAnalysis = this.analyzeDateParameters(request.date_range);
    if (dateAnalysis.issues.length > 0) {
      issues.push(...dateAnalysis.issues);
      score -= dateAnalysis.penalty;
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏
    const audienceAnalysis = this.analyzeTargetAudience(request.target_audience);
    if (audienceAnalysis.issues.length > 0) {
      issues.push(...audienceAnalysis.issues);
      score -= audienceAnalysis.penalty;
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Ç–æ–Ω–∞
    const campaignAnalysis = this.analyzeCampaignConsistency(
      request.campaign_type, 
      request.tone, 
      request.target_audience
    );
    if (campaignAnalysis.issues.length > 0) {
      issues.push(...campaignAnalysis.issues);
      score -= campaignAnalysis.penalty;
    }
    
    // UltraThink —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (this.ultraThink) {
      console.log('üß† UltraThink: Performing advanced brief analysis...');
      const advancedAnalysis = await this.performAdvancedAnalysis(request);
      issues.push(...advancedAnalysis.issues);
      score = Math.max(0, score - advancedAnalysis.penalty);
    }
    
    // –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
    const clarity = this.calculateClarity(issues);
    const completeness = this.calculateCompleteness(request, issues);
    const feasibility = this.calculateFeasibility(request, issues);
    const confidence = this.calculateConfidence(score, issues.length);
    const estimatedDuration = this.estimateDuration(request, issues);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    const recommendations = this.generateRecommendations(issues, request);
    
    const result: BriefAnalysisResult = {
      score: Math.max(0, Math.min(100, score)),
      clarity,
      completeness,
      feasibility,
      issues: issues.sort((a, b) => this.getSeverityWeight(b.severity) - this.getSeverityWeight(a.severity)),
      recommendations,
      estimatedDuration,
      confidence
    };
    
    console.log(`üîç Brief analysis complete: Score ${result.score}/100, ` +
                `${issues.length} issues found (${issues.filter(i => i.severity === 'critical').length} critical)`);
    
    return result;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –±—Ä–∏—Ñ–∞
   */
  generateClarificationQuestions(analysis: BriefAnalysisResult): ClarificationRequest[] {
    const questions: ClarificationRequest[] = [];
    
    // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º –∏ –≤–∞–∂–Ω—ã–º –ø—Ä–æ–±–ª–µ–º–∞–º
    const priorityIssues = analysis.issues
      .filter(issue => ['critical', 'high'].includes(issue.severity))
      .slice(0, 5); // –ù–µ –±–æ–ª–µ–µ 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Ä–∞–∑
    
    for (const issue of priorityIssues) {
      const question = this.createClarificationQuestion(issue);
      if (question) {
        questions.push(question);
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ä–µ—à–µ–Ω—ã
    if (questions.length < 3) {
      const optimizationIssues = analysis.issues
        .filter(issue => issue.type === 'optimization_opportunity')
        .slice(0, 3 - questions.length);
        
      for (const issue of optimizationIssues) {
        const question = this.createClarificationQuestion(issue);
        if (question) {
          questions.push(question);
        }
      }
    }
    
    return questions;
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —É—Ç–æ—á–Ω–µ–Ω–∏–π –∫ –±—Ä–∏—Ñ—É
   */
  async refineBrief(
    originalRequest: EmailGenerationRequest,
    clarifications: Array<{ questionId: string; answer: string }>
  ): Promise<BriefRefinementResult> {
    console.log('‚ú® Refining brief with clarifications...');
    
    let refinedRequest = { ...originalRequest };
    const appliedClarifications: Array<{ question: string; answer: string; impact: string }> = [];
    const improvements: string[] = [];
    let confidenceBoost = 0;
    
    for (const clarification of clarifications) {
      const application = await this.applyClarification(refinedRequest, clarification);
      if (application.success) {
        refinedRequest = application.updatedRequest;
        appliedClarifications.push({
          question: application.question,
          answer: clarification.answer,
          impact: application.impact
        });
        improvements.push(application.improvement);
        confidenceBoost += application.confidenceBoost;
      }
    }
    
    // UltraThink –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –±—Ä–∏—Ñ–∞
    if (this.ultraThink) {
      console.log('üß† UltraThink: Brief validation enabled');
      confidenceBoost += 10; // –ë–∞–∑–æ–≤—ã–π –±—É—Å—Ç –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UltraThink
    }
    
    console.log(`‚ú® Brief refinement complete: ${improvements.length} improvements, ` +
                `+${confidenceBoost.toFixed(1)}% confidence`);
    
    return {
      originalRequest,
      refinedRequest,
      clarifications: appliedClarifications,
      improvements,
      confidenceBoost: Math.min(50, confidenceBoost) // Cap at 50% boost
    };
  }

  /**
   * –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏–∑–∞
   */

  private analyzeTopicClarity(topic: string | undefined): { issues: AmbiguityIssue[]; penalty: number } {
    const issues: AmbiguityIssue[] = [];
    let penalty = 0;
    
    if (!topic || topic.trim().length === 0) {
      issues.push({
        type: 'missing_info',
        field: 'topic',
        severity: 'critical',
        description: '–¢–µ–º–∞ –ø–∏—Å—å–º–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞',
        suggestions: ['–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É –∫–∞–º–ø–∞–Ω–∏–∏', '–û–ø–∏—à–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Ü–µ–ª—å –ø–∏—Å—å–º–∞'],
        impact: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –±–µ–∑ —Ç–µ–º—ã'
      });
      penalty = 30;
    } else if (topic.length < 10) {
      issues.push({
        type: 'unclear_intent',
        field: 'topic',
        severity: 'high',
        description: '–¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫—Ä–∞—Ç–∫–∞—è –∏ –Ω–µ–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è',
        suggestions: [
          '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ü–µ–ª–∏ –∫–∞–º–ø–∞–Ω–∏–∏',
          '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –∞–∫—Ü–∏—é',
          '–û–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é —Ä–µ–∞–∫—Ü–∏—é –æ–∂–∏–¥–∞–µ—Ç–µ –æ—Ç –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π'
        ],
        examples: [
          '–í–º–µ—Å—Ç–æ "–°–∫–∏–¥–∫–∏" ‚Üí "–°–∫–∏–¥–∫–∏ –¥–æ 50% –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –ï–≤—Ä–æ–ø—É –Ω–∞ –º–∞–π—Å–∫–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏"',
          '–í–º–µ—Å—Ç–æ "–õ–µ—Ç–æ" ‚Üí "–õ–µ—Ç–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è 2025: —Ä–∞–Ω–Ω–µ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ —Å–∫–∏–¥–∫–æ–π 30%"'
        ],
        impact: '–°–Ω–∏–∂–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
      });
      penalty = 15;
    } else if (!this.containsActionableWords(topic)) {
      issues.push({
        type: 'optimization_opportunity',
        field: 'topic',
        severity: 'medium',
        description: '–¢–µ–º–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
        suggestions: [
          '–î–æ–±–∞–≤—å—Ç–µ —ç–ª–µ–º–µ–Ω—Ç —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è)',
          '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤—ã–≥–æ–¥—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞',
          '–í–∫–ª—é—á–∏—Ç–µ –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é'
        ],
        examples: [
          '–î–æ–±–∞–≤–∏—Ç—å: "—Ç–æ–ª—å–∫–æ –¥–æ 31 –º–∞—è"',
          '–î–æ–±–∞–≤–∏—Ç—å: "—Å—ç–∫–æ–Ω–æ–º—å—Ç–µ –¥–æ 40%"'
        ],
        impact: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–≤—ã—Å–∏—Ç—å engagement –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏—é'
      });
      penalty = 5;
    }
    
    return { issues, penalty };
  }

  private analyzeRouteSpecificity(origin?: string, destination?: string): { issues: AmbiguityIssue[]; penalty: number } {
    const issues: AmbiguityIssue[] = [];
    let penalty = 0;
    
    if (!origin && !destination) {
      issues.push({
        type: 'optimization_opportunity',
        field: 'route',
        severity: 'medium',
        description: '–ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
        suggestions: [
          '–£–∫–∞–∂–∏—Ç–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞',
          '–î–æ–±–∞–≤—å—Ç–µ origin/destination –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ü–µ–Ω',
          '–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'
        ],
        impact: '–£–ø—É—â–µ–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω'
      });
      penalty = 5;
    } else if (origin === destination) {
      issues.push({
        type: 'conflicting_params',
        field: 'route',
        severity: 'high',
        description: '–ì–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≥–æ—Ä–æ–¥–æ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è',
        suggestions: ['–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ –≥–æ—Ä–æ–¥–∞', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –º–∞—Ä—à—Ä—É—Ç–∞'],
        impact: '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
      });
      penalty = 20;
    }
    
    return { issues, penalty };
  }

  private analyzeDateParameters(dateRange?: string): { issues: AmbiguityIssue[]; penalty: number } {
    const issues: AmbiguityIssue[] = [];
    let penalty = 0;
    
    if (!dateRange) {
      issues.push({
        type: 'optimization_opportunity',
        field: 'date_range',
        severity: 'low',
        description: '–ù–µ —É–∫–∞–∑–∞–Ω –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞',
        suggestions: [
          '–£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω',
          '–î–æ–±–∞–≤—å—Ç–µ —Å–µ–∑–æ–Ω–Ω—É—é –ø—Ä–∏–≤—è–∑–∫—É (–ª–µ—Ç–æ, –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã)',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –ª—É—á—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
        ],
        impact: '–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∫–∞–∑–∞—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
      });
      penalty = 3;
    } else {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
      const datePattern = /^\d{4}-\d{2}-\d{2}(,\d{4}-\d{2}-\d{2})?$/;
      if (!datePattern.test(dateRange)) {
        issues.push({
          type: 'unclear_intent',
          field: 'date_range',
          severity: 'medium',
          description: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç',
          suggestions: [
            '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD',
            '–î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞: YYYY-MM-DD,YYYY-MM-DD'
          ],
          examples: ['2025-07-15', '2025-07-15,2025-07-22'],
          impact: '–í–æ–∑–º–æ–∂–Ω—ã –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ü–µ–Ω'
        });
        penalty = 10;
      }
    }
    
    return { issues, penalty };
  }

  private analyzeTargetAudience(audience?: string): { issues: AmbiguityIssue[]; penalty: number } {
    const issues: AmbiguityIssue[] = [];
    let penalty = 0;
    
    if (!audience) {
      issues.push({
        type: 'optimization_opportunity',
        field: 'target_audience',
        severity: 'medium',
        description: '–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è',
        suggestions: [
          '–£–∫–∞–∂–∏—Ç–µ –¥–µ–º–æ–≥—Ä–∞—Ñ–∏—é (—Å–µ–º—å–∏, –º–æ–ª–æ–¥–µ–∂—å, –±–∏–∑–Ω–µ—Å-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏)',
          '–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏',
          '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Ö–æ–¥–∞ –¥–ª—è —Ç–∞—Ä–≥–µ—Ç–∏–Ω–≥–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
        ],
        examples: [
          '—Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏',
          '–º–æ–ª–æ–¥—ã–µ –ø–∞—Ä—ã 25-35 –ª–µ—Ç',
          '–±–∏–∑–Ω–µ—Å-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏'
        ],
        impact: '–£–ø—É—â–µ–Ω–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–æ–Ω–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
      });
      penalty = 8;
    } else if (audience.length < 5) {
      issues.push({
        type: 'unclear_intent',
        field: 'target_audience',
        severity: 'medium',
        description: '–û–ø–∏—Å–∞–Ω–∏–µ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ —Å–ª–∏—à–∫–æ–º –æ–±—â–µ–µ',
        suggestions: [
          '–î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π –æ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ',
          '–£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—ã, –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏',
          '–û–ø–∏—à–∏—Ç–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º'
        ],
        impact: '–°–Ω–∏–∂–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
      });
      penalty = 5;
    }
    
    return { issues, penalty };
  }

  private analyzeCampaignConsistency(
    campaignType?: string,
    tone?: string,
    audience?: string
  ): { issues: AmbiguityIssue[]; penalty: number } {
    const issues: AmbiguityIssue[] = [];
    let penalty = 0;
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Ç–∏–ø–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –∏ —Ç–æ–Ω–∞
    if (campaignType === 'urgent' && tone === 'casual') {
      issues.push({
        type: 'conflicting_params',
        field: 'campaign_tone',
        severity: 'medium',
        description: '–°—Ä–æ—á–Ω–∞—è –∫–∞–º–ø–∞–Ω–∏—è –Ω–µ —Å–æ—á–µ—Ç–∞–µ—Ç—Å—è —Å –Ω–µ–ø—Ä–∏–Ω—É–∂–¥–µ–Ω–Ω—ã–º —Ç–æ–Ω–æ–º',
        suggestions: [
          '–î–ª—è —Å—Ä–æ—á–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "urgent" –∏–ª–∏ "direct" —Ç–æ–Ω',
          '–ò–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ —Ç–∏–ø –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–∞ "promotional"'
        ],
        impact: '–°–Ω–∏–∂–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–∑—ã–≤–∞ –∫ –¥–µ–π—Å—Ç–≤–∏—é'
      });
      penalty = 8;
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Ç–æ–Ω–∞
    if (audience?.includes('–±–∏–∑–Ω–µ—Å') && tone === 'playful') {
      issues.push({
        type: 'conflicting_params',
        field: 'audience_tone',
        severity: 'medium',
        description: '–ò–≥—Ä–∏–≤—ã–π —Ç–æ–Ω –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–∏–∑–Ω–µ—Å-–∞—É–¥–∏—Ç–æ—Ä–∏–∏',
        suggestions: [
          '–î–ª—è –±–∏–∑–Ω–µ—Å-–∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ "professional" –∏–ª–∏ "friendly" —Ç–æ–Ω',
          '–ò–ª–∏ —É—Ç–æ—á–Ω–∏—Ç–µ —Ç–∏–ø –∞—É–¥–∏—Ç–æ—Ä–∏–∏'
        ],
        impact: '–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º –∞—É–¥–∏—Ç–æ—Ä–∏–∏'
      });
      penalty = 6;
    }
    
    return { issues, penalty };
  }

  private async performAdvancedAnalysis(request: EmailGenerationRequest): Promise<{ issues: AmbiguityIssue[]; penalty: number }> {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è UltraThink –∞–Ω–∞–ª–∏–∑–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ UltraThink –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const issues: AmbiguityIssue[] = [];
    let penalty = 0;
    
    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    if (request.topic && this.detectSeasonalOpportunity(request.topic)) {
      issues.push({
        type: 'optimization_opportunity',
        field: 'seasonal_optimization',
        severity: 'low',
        description: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–µ–∑–æ–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏',
        suggestions: [
          '–î–æ–±–∞–≤—å—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –¥–∏–∑–∞–π–Ω',
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
          '–ü–æ–¥—á–µ—Ä–∫–Ω–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏ –≥–æ–¥–∞'
        ],
        impact: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∏ engagement'
      });
      penalty = 0; // –≠—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å, –Ω–µ —à—Ç—Ä–∞—Ñ
    }
    
    return { issues, penalty };
  }

  private calculateClarity(issues: AmbiguityIssue[]): number {
    const clarityIssues = issues.filter(i => i.type === 'unclear_intent');
    const penalty = clarityIssues.reduce((sum, issue) => sum + this.getSeverityWeight(issue.severity) * 10, 0);
    return Math.max(0, 100 - penalty);
  }

  private calculateCompleteness(request: EmailGenerationRequest, issues: AmbiguityIssue[]): number {
    const missingInfoIssues = issues.filter(i => i.type === 'missing_info');
    const penalty = missingInfoIssues.reduce((sum, issue) => sum + this.getSeverityWeight(issue.severity) * 15, 0);
    
    // –ë–∞–∑–æ–≤–∞—è –ø–æ–ª–Ω–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
    const fields = ['topic', 'origin', 'destination', 'target_audience', 'campaign_type', 'tone'];
    const filledFields = fields.filter(field => request[field as keyof EmailGenerationRequest]);
    const baseCompleteness = (filledFields.length / fields.length) * 100;
    
    return Math.max(0, Math.min(100, baseCompleteness - penalty));
  }

  private calculateFeasibility(request: EmailGenerationRequest, issues: AmbiguityIssue[]): number {
    const conflictingIssues = issues.filter(i => i.type === 'conflicting_params');
    const penalty = conflictingIssues.reduce((sum, issue) => sum + this.getSeverityWeight(issue.severity) * 20, 0);
    return Math.max(0, 100 - penalty);
  }

  private calculateConfidence(score: number, issueCount: number): number {
    let confidence = score;
    confidence -= issueCount * 3; // –ö–∞–∂–¥–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å–Ω–∏–∂–∞–µ—Ç —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –Ω–∞ 3%
    return Math.max(0, Math.min(100, confidence));
  }

  private estimateDuration(request: EmailGenerationRequest, issues: AmbiguityIssue[]): number {
    let baseDuration = 30; // 30 —Å–µ–∫—É–Ω–¥ –±–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è
    
    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
    const criticalIssues = issues.filter(i => i.severity === 'critical').length;
    const highIssues = issues.filter(i => i.severity === 'high').length;
    
    baseDuration += criticalIssues * 10; // +10 —Å–µ–∫ –∑–∞ –∫—Ä–∏—Ç–∏—á–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
    baseDuration += highIssues * 5; // +5 —Å–µ–∫ –∑–∞ –≤–∞–∂–Ω—É—é –ø—Ä–æ–±–ª–µ–º—É
    
    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if (!request.origin || !request.destination) baseDuration += 5;
    if (!request.target_audience) baseDuration += 3;
    
    return baseDuration;
  }

  private generateRecommendations(issues: AmbiguityIssue[], request: EmailGenerationRequest): string[] {
    const recommendations: string[] = [];
    
    // –¢–æ–ø-–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const criticalIssues = issues.filter(i => i.severity === 'critical');
    if (criticalIssues.length > 0) {
      recommendations.push('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ: ' + criticalIssues[0].suggestions[0]);
    }
    
    // –ë—ã—Å—Ç—Ä—ã–µ —É–ª—É—á—à–µ–Ω–∏—è
    const optimizationIssues = issues.filter(i => i.type === 'optimization_opportunity');
    if (optimizationIssues.length > 0) {
      recommendations.push('–ë—ã—Å—Ç—Ä–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ: ' + optimizationIssues[0].suggestions[0]);
    }
    
    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if (!request.target_audience) {
      recommendations.push('–£–∫–∞–∂–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –¥–ª—è –ª—É—á—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏');
    }
    
    if (!request.date_range) {
      recommendations.push('–î–æ–±–∞–≤—å—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω');
    }
    
    return recommendations.slice(0, 4); // –ú–∞–∫—Å–∏–º—É–º 4 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  }

  private createClarificationQuestion(issue: AmbiguityIssue): ClarificationRequest | null {
    const id = `${issue.field}_${issue.type}_${Date.now()}`;
    
    switch (issue.field) {
      case 'topic':
        if (issue.type === 'missing_info') {
          return {
            id,
            question: '–ö–∞–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ –∏–ª–∏ —Ü–µ–ª—å –≤–∞—à–µ–π email-–∫–∞–º–ø–∞–Ω–∏–∏?',
            type: 'text_input',
            required: true,
            context: '–¢–µ–º–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤–µ—Å—å –∫–æ–Ω—Ç–µ–Ω—Ç –ø–∏—Å—å–º–∞',
            impact: '–ü–æ–∑–≤–æ–ª–∏—Ç —Å–æ–∑–¥–∞—Ç—å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∏ —Ü–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç'
          };
        }
        break;
        
      case 'route':
        if (issue.type === 'optimization_opportunity') {
          return {
            id,
            question: '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –≤–∫–ª—é—á–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–∫–∞–∑–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω?',
            type: 'single_choice',
            options: ['–î–∞, —É–∫–∞–∂—É –º–∞—Ä—à—Ä—É—Ç', '–ù–µ—Ç, –æ–±—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–î–æ–±–∞–≤–ª—é –ø–æ–∑–∂–µ'],
            required: false,
            context: '–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã',
            impact: '–ü–æ–≤—ã—Å–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π'
          };
        }
        break;
        
      case 'target_audience':
        if (issue.type === 'optimization_opportunity') {
          return {
            id,
            question: '–ö—Ç–æ –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è?',
            type: 'multiple_choice',
            options: [
              '–°–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏',
              '–ú–æ–ª–æ–¥—ã–µ –ø–∞—Ä—ã (25-35 –ª–µ—Ç)',
              '–ë–∏–∑–Ω–µ—Å-–ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏',
              '–°—Ç—É–¥–µ–Ω—Ç—ã –∏ –º–æ–ª–æ–¥–µ–∂—å',
              '–ü–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã',
              '–õ—é–∫—Å–æ–≤—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏'
            ],
            required: false,
            context: '–ü–æ–º–æ–∂–µ—Ç –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç–æ–Ω –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è',
            impact: '–£–ª—É—á—à–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –ø–æ–≤—ã—Å–∏—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏—é'
          };
        }
        break;
    }
    
    return null;
  }

  private async applyClarification(
    request: EmailGenerationRequest,
    clarification: { questionId: string; answer: string }
  ): Promise<{
    success: boolean;
    updatedRequest: EmailGenerationRequest;
    question: string;
    impact: string;
    improvement: string;
    confidenceBoost: number;
  }> {
    const updated = { ...request };
    let question = '';
    let impact = '';
    let improvement = '';
    let confidenceBoost = 0;
    
    // –ü–∞—Ä—Å–∏–Ω–≥ ID –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—è –∏ –¥–µ–π—Å—Ç–≤–∏—è
    const [field, type] = clarification.questionId.split('_');
    
    switch (field) {
      case 'topic':
        if (!updated.topic || updated.topic.length < 10) {
          updated.topic = clarification.answer;
          question = '–¢–µ–º–∞ –∫–∞–º–ø–∞–Ω–∏–∏';
          impact = '–£–ª—É—á—à–µ–Ω —Ñ–æ–∫—É—Å –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞';
          improvement = '–î–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ç–∫–∞—è —Ç–µ–º–∞ –∫–∞–º–ø–∞–Ω–∏–∏';
          confidenceBoost = 25;
        }
        break;
        
      case 'route':
        if (clarification.answer === '–î–∞, —É–∫–∞–∂—É –º–∞—Ä—à—Ä—É—Ç') {
          // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –º–∞—Ä—à—Ä—É—Ç–∞
          question = '–í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞';
          impact = '–ü–æ–≤—ã—à–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π';
          improvement = '–í–∫–ª—é—á–µ–Ω –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞';
          confidenceBoost = 10;
        }
        break;
        
      case 'target':
        if (!updated.target_audience) {
          updated.target_audience = clarification.answer;
          question = '–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è';
          impact = '–£–ª—É—á—à–µ–Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç–æ–Ω–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π';
          improvement = '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Ü–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è';
          confidenceBoost = 15;
        }
        break;
    }
    
    return {
      success: true,
      updatedRequest: updated,
      question,
      impact,
      improvement,
      confidenceBoost
    };
  }

  private getSeverityWeight(severity: string): number {
    switch (severity) {
      case 'critical': return 4;
      case 'high': return 3;
      case 'medium': return 2;
      case 'low': return 1;
      default: return 1;
    }
  }

  private containsActionableWords(text: string): boolean {
    const actionWords = [
      '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ',
      '–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è', '—Ç–æ–ª—å–∫–æ', '—Å—ç–∫–æ–Ω–æ–º—å—Ç–µ', '–≤—ã–≥–æ–¥–∞',
      '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–ø–æ–¥–∞—Ä–æ–∫', '–±–æ–Ω—É—Å', '—ç–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ'
    ];
    
    const lowerText = text.toLowerCase();
    return actionWords.some(word => lowerText.includes(word));
  }

  private detectSeasonalOpportunity(topic: string): boolean {
    const seasonalKeywords = [
      '–ª–µ—Ç–æ', '–∑–∏–º–∞', '–≤–µ—Å–Ω–∞', '–æ—Å–µ–Ω—å',
      '–Ω–æ–≤—ã–π –≥–æ–¥', '–∫–∞–Ω–∏–∫—É–ª—ã', '–ø—Ä–∞–∑–¥–Ω–∏–∫–∏',
      '–º–∞–π—Å–∫–∏–µ', '–æ—Ç–ø—É—Å–∫', '—Å–µ–∑–æ–Ω'
    ];
    
    const lowerTopic = topic.toLowerCase();
    return seasonalKeywords.some(keyword => lowerTopic.includes(keyword));
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç singleton instance
export const briefAnalyzer = new BriefAnalyzer();