import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ API: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Figma (temporarily disabled)');

    const body = await request.json();
    
    const { figmaUrl, outputDirectory, context } = body;

    if (!figmaUrl) {
      return NextResponse.json(
        { error: 'figmaUrl is required' },
        { status: 400 }
      );
    }

    console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (mock):', {
      figmaUrl,
      outputDirectory: outputDirectory || 'auto-generated',
      context: context || 'default'
    });

    // Temporary mock response to avoid build errors
    const result = {
      success: true,
      disabled: true,
      message: 'Figma all pages processor temporarily disabled during system fixes',
      data: {
        summary: {
          totalPages: 0,
          totalAssets: 0,
          processedPages: 0,
          skippedPages: 0
        },
        pages: [],
        globalReport: {
          timestamp: new Date().toISOString(),
          disabled: true
        }
      }
    };

    console.log('‚úÖ Mock response generated');

    return NextResponse.json(result);

  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ API:', error);
    
    return NextResponse.json(
      { 
        error: 'Internal server error',
        details: error instanceof Error ? error.message : String(error)
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const action = searchParams.get('action');

    if (action === 'info') {
      return NextResponse.json({
        endpoint: '/api/figma/process-all-pages',
        description: '–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü Figma —Ñ–∞–π–ª–∞',
        methods: {
          POST: {
            description: '–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü',
            parameters: {
              figmaUrl: 'string (required) - URL Figma —Ñ–∞–π–ª–∞',
              outputDirectory: 'string (optional) - –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
              context: {
                campaign_type: 'urgent | newsletter | seasonal | promotional | informational',
                content_theme: 'string - –¢–µ–º–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞',
                target_audience: 'string - –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è', 
                brand_guidelines: 'string[] - –ë—Ä–µ–Ω–¥-–≥–∞–π–¥–ª–∞–π–Ω—ã'
              }
            }
          },
          GET: {
            description: '–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ API',
            parameters: {
              action: 'info - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± API'
            }
          }
        },
        features: [
          '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ Figma —Ñ–∞–π–ª–µ',
          '–°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
          '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤',
          '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–≥–æ–≤ —Å –ø–æ–º–æ—â—å—é GPT-4',
          '–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ç–µ–≥–æ–≤ –∏ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤',
          '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞',
          '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –∏ –æ–±—â–µ–≥–æ –æ—Ç—á–µ—Ç–∞'
        ],
        example: {
          figmaUrl: 'https://www.figma.com/design/YOUR_FILE_ID/...',
          outputDirectory: './figma-output',
          context: {
            campaign_type: 'promotional',
            content_theme: '–∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è',
            target_audience: '–º–æ–ª–æ–¥—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏',
            brand_guidelines: ['–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω', '—è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞']
          }
        }
      });
    }

    return NextResponse.json({
      message: 'Figma All Pages Processor API',
      usage: 'POST —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ figmaUrl, outputDirectory, context',
      info: 'GET ?action=info –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏'
    });

  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to get API info' },
      { status: 500 }
    );
  }
} 