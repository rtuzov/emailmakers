import { NextRequest, NextResponse } from 'next/server';
// import { processNewsRabbits } from '@/agent/tools/figma-news-rabbits-processor';

// Stub implementation
async function processNewsRabbits(params: any) {
  return { success: false, error: 'processNewsRabbits not implemented', data: { summary: { totalAssets: 0 }, processedAssets: [] } };
}
import { z } from 'zod';

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞
const ProcessNewsRabbitsSchema = z.object({
  figmaUrl: z.string().url('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Figma URL'),
  outputDirectory: z.string().optional().nullable(),
  context: z.object({
    campaign_type: z.enum(['urgent', 'newsletter', 'seasonal', 'promotional', 'informational']).optional().nullable(),
    content_theme: z.string().optional().nullable(),
    target_audience: z.string().optional().nullable(),
    brand_guidelines: z.array(z.string()).optional().nullable(),
  }).optional().nullable(),
  options: z.object({
    includeVariants: z.boolean().default(true),
    generateReport: z.boolean().default(true),
    aiAnalysis: z.boolean().default(true),
    maxAssets: z.number().min(1).max(50).default(20),
  }).optional().nullable(),
});

type ProcessNewsRabbitsRequest = z.infer<typeof ProcessNewsRabbitsSchema>;

interface ProcessingJob {
  id: string;
  status: 'pending' | 'processing' | 'completed' | 'failed';
  progress: number;
  startTime: Date;
  endTime?: Date;
  result?: any;
  error?: string;
  metadata: {
    figmaUrl: string;
    totalAssets?: number;
    processedAssets?: number;
  };
}

// –ü—Ä–æ—Å—Ç–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á –≤ –ø–∞–º—è—Ç–∏ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Redis/DB)
const processingJobs = new Map<string, ProcessingJob>();

/**
 * POST /api/figma/process-news-rabbits
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ "–ó–∞–π—Ü—ã –ù–æ–≤–æ—Å—Ç–∏" –∏–∑ Figma
 */
export async function POST(request: NextRequest) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const body = await request.json();
    const validatedData = ProcessNewsRabbitsSchema.parse(body);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const figmaToken = process.env.FIGMA_ACCESS_TOKEN || process.env.FIGMA_TOKEN;
    const openaiKey = process.env.OPENAI_API_KEY;

    if (!figmaToken) {
      return NextResponse.json(
        { error: 'FIGMA_ACCESS_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
        { status: 500 }
      );
    }

    if (!openaiKey && validatedData.options?.aiAnalysis !== false) {
      return NextResponse.json(
        { error: 'OPENAI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞' },
        { status: 500 }
      );
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const jobId = generateJobId();
    const job: ProcessingJob = {
      id: jobId,
      status: 'pending',
      progress: 0,
      startTime: new Date(),
      metadata: {
        figmaUrl: validatedData.figmaUrl,
      },
    };

    processingJobs.set(jobId, job);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    processInBackground(jobId, validatedData);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
    return NextResponse.json({
      success: true,
      jobId,
      status: 'pending',
      message: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ jobId –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.',
      trackingUrl: `/api/figma/process-news-rabbits/${jobId}`,
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞:', error);
    
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { 
          error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞',
          details: error.errors.map(e => ({
            field: e.path.join('.'),
            message: e.message
          }))
        },
        { status: 400 }
      );
    }

    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

/**
 * GET /api/figma/process-news-rabbits
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
export async function GET() {
  const jobs = Array.from(processingJobs.values())
    .sort((a, b) => b.startTime.getTime() - a.startTime.getTime())
    .slice(0, 50); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –∑–∞–¥–∞—á

  return NextResponse.json({
    success: true,
    jobs: jobs.map(job => ({
      id: job.id,
      status: job.status,
      progress: job.progress,
      startTime: job.startTime,
      endTime: job.endTime,
      metadata: job.metadata,
      hasError: !!job.error,
    })),
  });
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤ —Ñ–æ–Ω–µ
 */
async function processInBackground(jobId: string, params: ProcessNewsRabbitsRequest) {
  const job = processingJobs.get(jobId);
  if (!job) return;

  try {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    job.status = 'processing';
    job.progress = 10;
    processingJobs.set(jobId, job);

    console.log(`üê∞ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏ ${jobId}`);

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    const processorParams = {
      figmaUrl: params.figmaUrl,
      outputDirectory: params.outputDirectory || `./figma-output/${jobId}`,
      context: params.context,
    };

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    job.progress = 30;
    processingJobs.set(jobId, job);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    const result = await processNewsRabbits(processorParams);

    if (result.success) {
      job.status = 'completed';
      job.progress = 100;
      job.endTime = new Date();
      job.result = result.data;
      job.metadata.totalAssets = result.data.summary.totalAssets;
      job.metadata.processedAssets = result.data.processedAssets.length;

      console.log(`‚úÖ –ó–∞–¥–∞—á–∞ ${jobId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
    } else {
      throw new Error(result.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏ ${jobId}:`, error);
    
    job.status = 'failed';
    job.endTime = new Date();
    job.error = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  }

  processingJobs.set(jobId, job);
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∑–∞–¥–∞—á–∏
 */
function generateJobId(): string {
  const timestamp = Date.now();
  const random = Math.random().toString(36).substring(2, 8);
  return `figma-${timestamp}-${random}`;
} 