import { NextRequest, NextResponse } from 'next/server';
import { promises as fs } from 'fs';
import path from 'path';
import { TagDictionaryManager, generateShortFileName } from '../../../agent/tools/figma-tag-dictionary';

// –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ GPT-4 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function simulateGPTAnalysis(fileName: string) {
  const mockResponses: Record<string, any> = {
    '–∑–∞—è—Ü-–Ω–æ–≤–æ—Å—Ç–∏-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è-–±–∏–ª–µ—Ç—ã.png': {
      suggestedTags: [
        '–∑–∞—è—Ü', '–Ω–æ–≤–æ—Å—Ç–∏', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '–±–∏–ª–µ—Ç—ã', '–∞–≤–∏–∞–∫–æ–º–ø–∞–Ω–∏—è', '–¥–µ—à–µ–≤—ã–µ',
        '–±—ã—Å—Ç—Ä–æ', '—É–¥–æ–±–Ω–æ', '–±–µ–∑–æ–ø–∞—Å–Ω–æ', '–Ω–∞–¥–µ–∂–Ω–æ', '–∫–∞—á–µ—Å—Ç–≤–æ', '—Å–µ—Ä–≤–∏—Å',
        '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å', '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è', '–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ', '–æ–ø–ª–∞—Ç–∞',
        '–∫–∞—Ä—Ç–∞', '–±–∞–Ω–∫', '–±–µ–∑–Ω–∞–ª–∏—á–Ω—ã–π', '–Ω–∞–ª–∏—á–Ω—ã–µ', '—Ä–∞—Å—Å—Ä–æ—á–∫–∞', '–∫—Ä–µ–¥–∏—Ç',
        '–ª—å–≥–æ—Ç—ã', '–ø–µ–Ω—Å–∏–æ–Ω–µ—Ä—ã', '—Å—Ç—É–¥–µ–Ω—Ç—ã', '–º–æ–ª–æ–¥–µ–∂—å', '–≤–∑—Ä–æ—Å–ª—ã–µ', '—Å–µ–º–µ–π–Ω—ã–µ',
        '–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ', '–±–∏–∑–Ω–µ—Å', '—ç–∫–æ–Ω–æ–º', '–∫–æ–º—Ñ–æ—Ä—Ç', '–ø—Ä–µ–º–∏—É–º', '–∫–ª–∞—Å—Å',
        '—Å–∞–ª–æ–Ω', '–º–µ—Å—Ç–æ', '–æ–∫–Ω–æ', '–ø—Ä–æ—Ö–æ–¥', '–±–∞–≥–∞–∂', '—Ä—É—á–Ω–∞—è', '–∫–ª–∞–¥—å'
      ],
      contentDescription: '–†–µ–∫–ª–∞–º–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–π—Ü–µ–º –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö –∏ –±–∏–ª–µ—Ç–∞—Ö',
      emotionalTone: '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π',
      usageContext: ['email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–Ω–æ–≤–æ—Å—Ç–∏', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'],
      confidence: 0.95,
      reasoning: '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–∞-–∑–∞–π—Ü–∞ –∏ —Ç–µ–º–∞—Ç–∏–∫—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π'
    },
    '–¥–µ—à–µ–≤—ã–µ-–±–∏–ª–µ—Ç—ã-–º–æ—Å–∫–≤–∞-–±–∞—Ç—É–º–∏.png': {
      suggestedTags: [
        '–¥–µ—à–µ–≤—ã–µ', '–±–∏–ª–µ—Ç—ã', '–º–æ—Å–∫–≤–∞', '–±–∞—Ç—É–º–∏', '–∞–∫—Ü–∏—è', '—Å–∫–∏–¥–∫–∞',
        '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ', '–ª–µ—Ç–æ', '–æ—Ç–ø—É—Å–∫', '–º–æ—Ä–µ', '–ø–ª—è–∂', '—Å–æ–ª–Ω—Ü–µ',
        '–æ—Ç–¥—ã—Ö', '—Ä–µ–ª–∞–∫—Å', '—Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ', '–∫—Ä–∞—Å–æ—Ç–∞', '–ø—Ä–∏—Ä–æ–¥–∞',
        '–≥—Ä—É–∑–∏—è', '–∫–∞–≤–∫–∞–∑', '–≥–æ—Ä—ã', '–∫—É–ª—å—Ç—É—Ä–∞', '–∏—Å—Ç–æ—Ä–∏—è', '–≤–∏–Ω–æ',
        '–∫—É—Ö–Ω—è', '–≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ', '—Ç—Ä–∞–¥–∏—Ü–∏–∏', '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞', '—Ç–±–∏–ª–∏—Å–∏',
        '—Å—Ç–∞—Ä—ã–π', '–≥–æ—Ä–æ–¥', '–∫—Ä–µ–ø–æ—Å—Ç—å', '—Ü–µ—Ä–∫–æ–≤—å', '–º–æ–Ω–∞—Å—Ç—ã—Ä—å'
      ],
      contentDescription: '–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ—à–µ–≤—ã—Ö –±–∏–ª–µ—Ç–æ–≤ –ø–æ –º–∞—Ä—à—Ä—É—Ç—É –ú–æ—Å–∫–≤–∞-–ë–∞—Ç—É–º–∏',
      emotionalTone: '—Å—Ä–æ—á–Ω—ã–π',
      usageContext: ['email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–∞–∫—Ü–∏–∏', '–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'],
      confidence: 0.92,
      reasoning: '–ê–∫—Ü–∏–æ–Ω–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–æ–º'
    },
    '–ª–µ—Ç–Ω–∏–µ-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è-–æ—Ç–ø—É—Å–∫-—Å–µ–º—å—è.png': {
      suggestedTags: [
        '–ª–µ—Ç–Ω–∏–µ', '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', '–æ—Ç–ø—É—Å–∫', '—Å–µ–º—å—è', '–¥–µ—Ç–∏', '—Ä–æ–¥–∏—Ç–µ–ª–∏',
        '–∫–∞–Ω–∏–∫—É–ª—ã', '—à–∫–æ–ª—å–Ω–∏–∫–∏', '—Å—Ç—É–¥–µ–Ω—Ç—ã', '–æ—Ç–¥—ã—Ö', '—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è',
        '–∞—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω—ã', '–ø–∞—Ä–∫–∏', '–º—É–∑–µ–∏', '—ç–∫—Å–∫—É—Ä—Å–∏–∏', '—Ç—É—Ä—ã',
        '–≥–∏–¥—ã', '–ø—Ä–æ–≥—Ä–∞–º–º—ã', '–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', '—Å–ø–æ—Ä—Ç', '–∏–≥—Ä—ã',
        '—Ñ–µ—Å—Ç–∏–≤–∞–ª–∏', '–∫–æ–Ω—Ü–µ—Ä—Ç—ã', '—à–æ—É', '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è', '–∞–Ω–∏–º–∞—Ü–∏—è',
        '–¥–µ—Ç—Å–∫–∏–π', '–∫–ª—É–±', '–Ω—è–Ω—è', '–ø—Ä–∏—Å–º–æ—Ç—Ä', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å'
      ],
      contentDescription: '–õ–µ—Ç–Ω–∏–µ —Å–µ–º–µ–π–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—É—Å–∫–∞ —Å –¥–µ—Ç—å–º–∏',
      emotionalTone: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
      usageContext: ['email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '—Å–µ–º–µ–π–Ω—ã–µ —Ç—É—Ä—ã', '–ª–µ—Ç–æ'],
      confidence: 0.88,
      reasoning: '–°–µ–º–µ–π–Ω–∞—è —Ç–µ–º–∞—Ç–∏–∫–∞ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ª–µ—Ç–Ω–∏–π –æ—Ç–¥—ã—Ö'
    }
  };

  return mockResponses[fileName] || mockResponses['–∑–∞—è—Ü-–Ω–æ–≤–æ—Å—Ç–∏-–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è-–±–∏–ª–µ—Ç—ã.png'];
}

export async function POST(request: NextRequest) {
  try {
    console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–æ–≤...');

    const testDir = path.join(process.cwd(), 'test-images');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    try {
      await fs.access(testDir);
    } catch {
      return NextResponse.json({
        success: false,
        error: '–¢–µ—Å—Ç–æ–≤—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ create-test-images.js —Å–Ω–∞—á–∞–ª–∞.'
      }, { status: 400 });
    }

    const tagManager = new TagDictionaryManager(testDir);
    const dictionary = await tagManager.loadOrCreateDictionary();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PNG —Ñ–∞–π–ª–æ–≤
    const allFiles = await fs.readdir(testDir);
    const pngFiles = allFiles.filter(f => f.endsWith('.png') && !f.includes('tag-dictionary'));

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${pngFiles.length} PNG —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);

    const results = [];

    for (const fileName of pngFiles) {
      console.log(`\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: ${fileName}`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ GPT-4
      const aiAnalysis = simulateGPTAnalysis(fileName);
      
      console.log(`üè∑Ô∏è GPT-4 –ø—Ä–µ–¥–ª–æ–∂–∏–ª ${aiAnalysis.suggestedTags.length} —Ç–µ–≥–æ–≤`);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è
      const { shortName, selectedTags } = generateShortFileName(aiAnalysis.suggestedTags);
      
      console.log(`üìÑ –ö–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è: ${shortName}.png`);
      console.log(`üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ ${selectedTags.length} –∏–∑ ${aiAnalysis.suggestedTags.length} —Ç–µ–≥–æ–≤`);

      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
      const entry = tagManager.addEntry(
        shortName,
        fileName,
        aiAnalysis.suggestedTags,
        selectedTags,
        {
          contentDescription: aiAnalysis.contentDescription,
          emotionalTone: aiAnalysis.emotionalTone,
          usageContext: aiAnalysis.usageContext,
          confidence: aiAnalysis.confidence,
          reasoning: aiAnalysis.reasoning
        },
        {
          figmaNodeId: `test-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
          componentType: 'TEST_COMPONENT',
          hasVariants: false,
          createdAt: new Date().toISOString()
        }
      );

      dictionary.entries[shortName] = entry;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ–≤–∞—Ä—å –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      await tagManager.saveDictionary(dictionary);
      console.log(`üíæ –°–ª–æ–≤–∞—Ä—å –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${shortName}`);

      // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª
      const oldPath = path.join(testDir, fileName);
      const newPath = path.join(testDir, `${shortName}.png`);
      
      if (fileName !== `${shortName}.png`) {
        try {
          await fs.rename(oldPath, newPath);
          console.log(`üìÅ –§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: ${fileName} ‚Üí ${shortName}.png`);
        } catch (error) {
          console.log(`‚ö†Ô∏è –§–∞–π–ª —É–∂–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${fileName}`);
        }
      }

      results.push({
        originalName: fileName,
        shortName: shortName,
        allTagsCount: aiAnalysis.suggestedTags.length,
        selectedTagsCount: selectedTags.length,
        allTags: aiAnalysis.suggestedTags,
        selectedTags: selectedTags,
        confidence: aiAnalysis.confidence,
        emotionalTone: aiAnalysis.emotionalTone
      });
    }

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    const agentExportPath = path.join(testDir, 'agent-file-mapping.json');
    await tagManager.exportForAgent(dictionary, agentExportPath);

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    const finalFiles = await fs.readdir(testDir);

    return NextResponse.json({
      success: true,
      data: {
        processedFiles: results.length,
        totalTags: dictionary.totalTags,
        totalFiles: dictionary.totalFiles,
        results: results,
        outputDirectory: testDir,
        files: finalFiles,
        dictionary: {
          jsonPath: path.join(testDir, 'tag-dictionary.json'),
          csvPath: path.join(testDir, 'tag-dictionary.csv'),
          agentPath: agentExportPath
        }
      },
      message: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${results.length} —Ñ–∞–π–ª–æ–≤ —Å ${dictionary.totalTags} —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏`
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ–≥–æ–≤:', error);
    
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
}

export async function GET() {
  try {
    const testDir = path.join(process.cwd(), 'test-images');
    
    try {
      const files = await fs.readdir(testDir);
      const tagDictionaryPath = path.join(testDir, 'tag-dictionary.json');
      
      let dictionary = null;
      try {
        const dictionaryData = await fs.readFile(tagDictionaryPath, 'utf-8');
        dictionary = JSON.parse(dictionaryData);
      } catch {
        dictionary = { message: '–°–ª–æ–≤–∞—Ä—å —Ç–µ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω' };
      }

      return NextResponse.json({
        success: true,
        data: {
          testDirectory: testDir,
          files: files,
          dictionary: dictionary
        }
      });
    } catch {
      return NextResponse.json({
        success: false,
        error: '–¢–µ—Å—Ç–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
      }, { status: 404 });
    }
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
    }, { status: 500 });
  }
} 