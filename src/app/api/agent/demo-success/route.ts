import { NextRequest, NextResponse } from 'next/server';

/**
 * Demo API endpoint that provides a realistic success response
 * for testing the enhanced success notifications and download functionality
 */
export async function GET(request: NextRequest) {
  try {
    // Simulate processing delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    const mockSuccessResult = {
      status: 'success' as const,
      data: {
        template_id: 'tpl_' + Date.now(),
        html_content: `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–í–∞—à –æ—Ç–ø—É—Å–∫ –≤ –ü–∞—Ä–∏–∂–µ –∂–¥–µ—Ç –≤–∞—Å!</title>
  <style>
    .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
    .header { background-color: #ff6b6b; color: white; padding: 20px; text-align: center; }
    .content { padding: 30px 20px; }
    .cta-button { background-color: #4ecdc4; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 20px 0; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üá´üá∑ –í–æ–ª—à–µ–±–Ω—ã–π –ü–∞—Ä–∏–∂ –∂–¥–µ—Ç –≤–∞—Å!</h1>
    </div>
    <div class="content">
      <h2>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç Kupibilet</h2>
      <p>–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–æ–º–∞–Ω—Ç–∏–∫—É –∏ –∫—Ä–∞—Å–æ—Ç—É –ü–∞—Ä–∏–∂–∞ —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ 30%!</p>
      <a href="#" class="cta-button">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å</a>
      <p>‚úàÔ∏è –ü—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –∏–∑ –ú–æ—Å–∫–≤—ã<br>üè® –õ—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞<br>üé´ –ë–∏–ª–µ—Ç—ã –≤ –º—É–∑–µ–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫</p>
    </div>
  </div>
</body>
</html>`,
        mjml_content: `<mjml>
  <mj-head>
    <mj-title>–í–∞—à –æ—Ç–ø—É—Å–∫ –≤ –ü–∞—Ä–∏–∂–µ –∂–¥–µ—Ç –≤–∞—Å!</mj-title>
    <mj-preview>–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–æ–º–∞–Ω—Ç–∏–∫—É –∏ –∫—Ä–∞—Å–æ—Ç—É –ü–∞—Ä–∏–∂–∞</mj-preview>
    <mj-attributes>
      <mj-all font-family="Arial, sans-serif" />
    </mj-attributes>
  </mj-head>
  <mj-body>
    <mj-section background-color="#ff6b6b">
      <mj-column>
        <mj-text align="center" color="white" font-size="28px" font-weight="bold">
          üá´üá∑ –í–æ–ª—à–µ–±–Ω—ã–π –ü–∞—Ä–∏–∂ –∂–¥–µ—Ç –≤–∞—Å!
        </mj-text>
      </mj-column>
    </mj-section>
    <mj-section>
      <mj-column>
        <mj-text font-size="24px" color="#333333">
          –≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç Kupibilet
        </mj-text>
        <mj-text font-size="16px" line-height="1.6" color="#555555">
          –û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–æ–º–∞–Ω—Ç–∏–∫—É –∏ –∫—Ä–∞—Å–æ—Ç—É –ü–∞—Ä–∏–∂–∞ —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ 30%!
        </mj-text>
        <mj-button background-color="#4ecdc4" color="white" href="#" border-radius="5px">
          –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å
        </mj-button>
        <mj-text font-size="16px" line-height="1.8">
          ‚úàÔ∏è –ü—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –∏–∑ –ú–æ—Å–∫–≤—ã<br/>
          üè® –õ—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞<br/>
          üé´ –ë–∏–ª–µ—Ç—ã –≤ –º—É–∑–µ–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫
        </mj-text>
      </mj-column>
    </mj-section>
  </mj-body>
</mjml>`,
        text_content: `–í–û–õ–®–ï–ë–ù–´–ô –ü–ê–†–ò–ñ –ñ–î–ï–¢ –í–ê–°!

–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç Kupibilet

–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–æ–º–∞–Ω—Ç–∏–∫—É –∏ –∫—Ä–∞—Å–æ—Ç—É –ü–∞—Ä–∏–∂–∞ —Å –Ω–∞—à–∏–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏. –ó–∞–±—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ 30%!

–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å: [—Å—Å—ã–ª–∫–∞]

‚úàÔ∏è –ü—Ä—è–º—ã–µ —Ä–µ–π—Å—ã –∏–∑ –ú–æ—Å–∫–≤—ã
üè® –õ—É—á—à–∏–µ –æ—Ç–µ–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞
üé´ –ë–∏–ª–µ—Ç—ã –≤ –º—É–∑–µ–∏ –≤ –ø–æ–¥–∞—Ä–æ–∫

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Kupibilet`,
        subject_line: 'üá´üá∑ –í–∞—à –æ—Ç–ø—É—Å–∫ –≤ –ü–∞—Ä–∏–∂–µ –∂–¥–µ—Ç –≤–∞—Å! –°–∫–∏–¥–∫–∞ –¥–æ 30%',
        preview_text: '–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —Ä–æ–º–∞–Ω—Ç–∏–∫—É –∏ –∫—Ä–∞—Å–æ—Ç—É –ü–∞—Ä–∏–∂–∞ —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏',
        design_tokens: {
          colors: {
            primary: '#ff6b6b',
            secondary: '#4ecdc4',
            text: '#333333',
            background: '#ffffff'
          },
          fonts: {
            primary: 'Arial, sans-serif',
            size: {
              heading: '28px',
              subheading: '24px',
              body: '16px'
            }
          },
          spacing: {
            padding: '20px',
            margin: '30px'
          }
        },
        quality_scores: {
          content_quality: 92,
          design_quality: 88,
          deliverability_score: 95,
          overall_quality: 91
        },
        file_urls: {
          html_file: '/api/demo/download/template.html',
          mjml_file: '/api/demo/download/template.mjml',
          text_file: '/api/demo/download/template.txt',
          preview_image: '/api/demo/preview/template-preview.png'
        }
      },
      metadata: {
        generation_time: 1850,
        mode: 'production',
        apis_used: ['openai-gpt4o-mini', 'mjml-compiler', 'css-inline'],
        template_size: 2048,
        agent_confidence_scores: {
          content_specialist: 94,
          design_specialist: 87,
          quality_specialist: 95,
          delivery_specialist: 89
        }
      }
    };

    return NextResponse.json(mockSuccessResult, {
      headers: {
        'Cache-Control': 'no-cache, no-store, must-revalidate',
        'Pragma': 'no-cache',
        'Expires': '0'
      }
    });

  } catch (error) {
    console.error('‚ùå Demo success API error:', error);
    
    return NextResponse.json({
      status: 'error',
      error_message: 'Failed to generate demo success response',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    console.log('üéØ Demo success POST request:', body);

    // Simulate form submission with success
    await new Promise(resolve => setTimeout(resolve, 2000));

    const mockSuccessResult = {
      status: 'success' as const,
      data: {
        template_id: 'tpl_demo_' + Date.now(),
        html_content: generateDemoEmailContent(body),
        mjml_content: generateDemoMJMLContent(body),
        text_content: generateDemoTextContent(body),
        subject_line: generateSubjectLine(body),
        preview_text: generatePreviewText(body),
        design_tokens: {
          colors: { primary: '#ff6b6b', secondary: '#4ecdc4' },
          fonts: { primary: 'Arial, sans-serif' }
        },
        quality_scores: {
          content_quality: 88 + Math.random() * 12,
          design_quality: 85 + Math.random() * 15,
          deliverability_score: 90 + Math.random() * 10,
          overall_quality: 87 + Math.random() * 13
        }
      },
      metadata: {
        generation_time: 1500 + Math.random() * 1000,
        mode: 'demo',
        apis_used: ['openai-demo', 'mjml-compiler'],
        template_size: 1800 + Math.random() * 500,
        agent_confidence_scores: {
          content_specialist: 90 + Math.random() * 10,
          design_specialist: 85 + Math.random() * 15,
          quality_specialist: 92 + Math.random() * 8,
          delivery_specialist: 88 + Math.random() * 12
        }
      }
    };

    return NextResponse.json(mockSuccessResult);

  } catch (error) {
    return NextResponse.json({
      status: 'error',
      error_message: 'Demo generation failed',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}

// Helper functions for demo content generation
function generateDemoEmailContent(formData: any): string {
  const destination = formData.destination || '–ü–∞—Ä–∏–∂';
  const origin = formData.origin || '–ú–æ—Å–∫–≤–∞';
  
  return `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>–í–∞—à–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ ${destination}</title>
  <style>
    .container { max-width: 600px; margin: 0 auto; font-family: Arial, sans-serif; }
    .header { background: linear-gradient(135deg, #ff6b6b, #4ecdc4); color: white; padding: 30px; text-align: center; }
    .content { padding: 30px 20px; background: white; }
    .cta-button { background-color: #4ecdc4; color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; display: inline-block; margin: 20px 0; font-weight: bold; }
    .features { background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 8px; }
  </style>
</head>
<body>
  <div class="container">
    <div class="header">
      <h1>üåü –ù–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ ${destination}!</h1>
      <p>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç Kupibilet</p>
    </div>
    <div class="content">
      <h2>–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!</h2>
      <p>–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π ${destination} —Å –Ω–∞—à–∏–º–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏ –∏–∑ ${origin}. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ 35% —Å–∫–∏–¥–∫–∏ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 48 —á–∞—Å–æ–≤!</p>
      
      <div class="features">
        <h3>üéØ –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</h3>
        <ul>
          <li>‚úàÔ∏è –ü—Ä—è–º—ã–µ –ø–µ—Ä–µ–ª–µ—Ç—ã ${origin} ‚Üí ${destination}</li>
          <li>üè® –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏</li>
          <li>üó∫Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —Å –º–µ—Å—Ç–Ω—ã–º–∏ –≥–∏–¥–∞–º–∏</li>
          <li>üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å offline –∫–∞—Ä—Ç–∞–º–∏</li>
        </ul>
      </div>
      
      <a href="#" class="cta-button">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π 35%</a>
      
      <p><small>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ ${new Date(Date.now() + 48*60*60*1000).toLocaleDateString('ru-RU')}. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ.</small></p>
    </div>
  </div>
</body>
</html>`;
}

function generateDemoMJMLContent(formData: any): string {
  const destination = formData.destination || '–ü–∞—Ä–∏–∂';
  
  return `<mjml>
  <mj-head>
    <mj-title>–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ ${destination}</mj-title>
    <mj-preview>–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç Kupibilet</mj-preview>
  </mj-head>
  <mj-body>
    <mj-section background-color="#ff6b6b">
      <mj-column>
        <mj-text align="center" color="white" font-size="32px" font-weight="bold">
          üåü –ù–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ ${destination}!
        </mj-text>
      </mj-column>
    </mj-section>
    <mj-section>
      <mj-column>
        <mj-text font-size="20px">–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å!</mj-text>
        <mj-text>–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π ${destination} —Å –Ω–∞—à–∏–º–∏ —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏.</mj-text>
        <mj-button background-color="#4ecdc4" href="#">–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–æ —Å–∫–∏–¥–∫–æ–π 35%</mj-button>
      </mj-column>
    </mj-section>
  </mj-body>
</mjml>`;
}

function generateDemoTextContent(formData: any): string {
  const destination = formData.destination || '–ü–∞—Ä–∏–∂';
  const origin = formData.origin || '–ú–æ—Å–∫–≤–∞';
  
  return `–ù–ï–ó–ê–ë–´–í–ê–ï–ú–û–ï –ü–£–¢–ï–®–ï–°–¢–í–ò–ï –í ${destination.toUpperCase()}!

–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç Kupibilet

–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π ${destination} —Å –Ω–∞—à–∏–º–∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–∞–º–∏ –∏–∑ ${origin}. 

üéØ –ß–¢–û –í–ö–õ–Æ–ß–ï–ù–û:
‚úàÔ∏è –ü—Ä—è–º—ã–µ –ø–µ—Ä–µ–ª–µ—Ç—ã ${origin} ‚Üí ${destination}
üè® –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ç–µ–ª–∏ —Å –æ—Ç–ª–∏—á–Ω—ã–º–∏ –æ—Ç–∑—ã–≤–∞–º–∏  
üó∫Ô∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏ —Å –º–µ—Å—Ç–Ω—ã–º–∏ –≥–∏–¥–∞–º–∏
üì± –ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å offline –∫–∞—Ä—Ç–∞–º–∏

–ó–ê–ë–†–û–ù–ò–†–û–í–ê–¢–¨ –°–û –°–ö–ò–î–ö–û–ô 35%: [—Å—Å—ã–ª–∫–∞]

–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ö–æ–º–∞–Ω–¥–∞ Kupibilet`;
}

function generateSubjectLine(formData: any): string {
  const destination = formData.destination || '–ü–∞—Ä–∏–∂';
  const subjects = [
    `üåü ${destination}: —Å–∫–∏–¥–∫–∞ 35% —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è!`,
    `‚úàÔ∏è –ë–∏–ª–µ—Ç—ã –≤ ${destination} —Å–æ —Å–∫–∏–¥–∫–æ–π –¥–æ 35%`,
    `üéØ –≠–∫—Å–∫–ª—é–∑–∏–≤: ${destination} —Å Kupibilet (-35%)`,
    `üè® ${destination} –∂–¥–µ—Ç –≤–∞—Å! –°–∫–∏–¥–∫–∏ –¥–æ 35%`
  ];
  
  return subjects[Math.floor(Math.random() * subjects.length)];
}

function generatePreviewText(formData: any): string {
  const destination = formData.destination || '–ü–∞—Ä–∏–∂';
  
  return `–û—Ç–∫—Ä–æ–π—Ç–µ –¥–ª—è —Å–µ–±—è —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω—ã–π ${destination} —Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –æ—Ç Kupibilet. –°–∫–∏–¥–∫–∏ –¥–æ 35%!`;
}