import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { fileName, context } = body;

    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º Figma variant selection –¥–ª—è: ${fileName}`);
    console.log(`üé® –ö–æ–Ω—Ç–µ–∫—Å—Ç:`, context);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const figmaToken = process.env.FIGMA_ACCESS_TOKEN || process.env.FIGMA_TOKEN;
    const figmaProjectId = process.env.FIGMA_PROJECT_ID;

    if (!figmaToken) {
      return NextResponse.json({
        success: false,
        error: 'FIGMA_ACCESS_TOKEN –∏–ª–∏ FIGMA_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

    if (!figmaProjectId) {
      return NextResponse.json({
        success: false,
        error: 'FIGMA_PROJECT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'
      });
    }

    console.log(`‚úÖ Figma —Ç–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω: ${figmaToken.substring(0, 20)}...`);
    console.log(`‚úÖ Figma –ø—Ä–æ–µ–∫—Ç ID: ${figmaProjectId}`);

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
    const { findAndSelectFigmaVariant } = await import('../../../../../agent/tools/figma');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏ –≤—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞
    const result = await findAndSelectFigmaVariant(
      figmaToken,
      figmaProjectId,
      fileName,
      context
    );

    if (result) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –∏ –≤—ã–±—Ä–∞–Ω –≤–∞—Ä–∏–∞–Ω—Ç:`, result);
      
      return NextResponse.json({
        success: true,
        data: result
      });
    } else {
      console.log(`‚ö†Ô∏è –í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${fileName}`);
      
      return NextResponse.json({
        success: false,
        message: `–í–∞—Ä–∏–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ${fileName}`
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Figma variants:', error);
    
    return NextResponse.json({
      success: false,
      error: error.message
    });
  }
} 