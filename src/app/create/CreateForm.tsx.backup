'use client'

import { useState } from 'react'

interface FormData {
  templateName: string
  contentBrief: string
  campaignType: string
  tone: string
  targetAudience: string
}

interface GenerationResult {
  status: 'idle' | 'loading' | 'success' | 'error'
  data?: any
  error?: string
}

export default function CreateForm() {
  const [formData, setFormData] = useState<FormData>({
    templateName: '',
    contentBrief: '',
    campaignType: '',
    tone: '',
    targetAudience: ''
  })

  const [result, setResult] = useState<GenerationResult>({ status: 'idle' })

  const handleInputChange = (field: keyof FormData, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }))
  }

  const handleGenerate = async () => {
    console.log('üöÄ Generate button clicked! Form data:', formData);
    console.log('üîç Form validation:', {
      templateName: !!formData.templateName.trim(),
      contentBrief: !!formData.contentBrief.trim(),
      campaignType: !!formData.campaignType,
      tone: !!formData.tone,
      targetAudience: !!formData.targetAudience,
      isFormValid: isFormValid
    });
    
    // Validation
    if (!formData.templateName.trim()) {
      setResult({ status: 'error', error: 'Template name is required' })
      return
    }
    if (!formData.contentBrief.trim()) {
      setResult({ status: 'error', error: 'Content brief is required' })
      return
    }
    if (!formData.campaignType) {
      setResult({ status: 'error', error: 'Campaign type is required' })
      return
    }
    if (!formData.tone) {
      setResult({ status: 'error', error: 'Tone is required' })
      return
    }
    if (!formData.targetAudience) {
      setResult({ status: 'error', error: 'Target audience is required' })
      return
    }

    setResult({ status: 'loading' })

    try {
      console.log('üöÄ Generating template with data:', formData)

      const response = await fetch('/api/templates/generate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          template_name: formData.templateName,
          content_brief: formData.contentBrief,
          campaign_type: formData.campaignType,
          tone: formData.tone,
          target_audience: formData.targetAudience,
          // Additional parameters for better generation
          language: 'ru',
          email_type: 'marketing',
          brand: 'Kupibilet'
        }),
      })

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      console.log('‚úÖ Template generation response:', data)

      setResult({ status: 'success', data })

    } catch (error) {
      console.error('‚ùå Template generation error:', error)
      setResult({ 
        status: 'error', 
        error: error instanceof Error ? error.message : 'Failed to generate template' 
      })
    }
  }

  const handleSaveDraft = () => {
    console.log('üíæ Saving draft:', formData)
    // TODO: Implement draft saving
    alert('Draft saved locally! (Mock implementation)')
  }

  const isFormValid = formData.templateName.trim() && 
                     formData.contentBrief.trim() && 
                     formData.campaignType && 
                     formData.tone && 
                     formData.targetAudience

  // Debug logging to see form state
  console.log('üîç Form state debug:', {
    templateName: formData.templateName,
    contentBrief: formData.contentBrief,
    campaignType: formData.campaignType,
    tone: formData.tone,
    targetAudience: formData.targetAudience,
    isFormValid: isFormValid
  });

  return (
    <div className="min-h-screen bg-background">
      {/* Glass Header */}
      <header className="sticky top-0 z-50 backdrop-blur-lg border-b border-glass-border bg-background/80">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <h1 className="text-3xl font-bold text-white">
              Email<span className="text-primary">Makers</span>
            </h1>
            <nav className="hidden md:flex space-x-4">
              <a href="/" className="px-3 py-2 rounded-md text-sm font-medium text-white/80 hover:text-accent transition-colors">
                Dashboard
              </a>
              <a href="/templates" className="px-3 py-2 rounded-md text-sm font-medium text-white/80 hover:text-accent transition-colors">
                Templates
              </a>
              <a href="/create" className="px-3 py-2 rounded-md text-sm font-medium text-white hover:text-accent transition-colors">
                Create
              </a>
            </nav>
          </div>
        </div>
      </header>
      
      {/* Main Content */}
      <main className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Page Header */}
        <div className="mb-8">
          <h2 className="text-3xl font-bold text-white mb-2">Create Email Template</h2>
          <p className="text-white/70">‚úÖ Page loaded successfully without hydration errors!</p>
        </div>

        {/* Form */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Left Column - Form */}
          <div className="space-y-6">
            {/* Template Name */}
            <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-primary border-glass-border shadow-glass p-6">
              <label className="block text-sm font-medium text-white mb-2">
                Template Name
              </label>
              <input
                type="text"
                value={formData.templateName}
                onChange={(e) => handleInputChange('templateName', e.target.value)}
                placeholder="Enter template name..."
                className="w-full p-3 rounded-lg bg-white/10 border border-white/20 text-white placeholder-white/50 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50"
              />
            </div>

            {/* Content Brief */}
            <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-primary border-glass-border shadow-glass p-6">
              <label className="block text-sm font-medium text-white mb-2">
                Content Brief
              </label>
              <textarea
                value={formData.contentBrief}
                onChange={(e) => handleInputChange('contentBrief', e.target.value)}
                placeholder="Describe your email content..."
                rows={4}
                className="w-full p-3 rounded-lg bg-white/10 border border-white/20 text-white placeholder-white/50 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50"
              />
            </div>

            {/* Campaign Type */}
            <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-primary border-glass-border shadow-glass p-6">
              <label className="block text-sm font-medium text-white mb-2">
                Campaign Type
              </label>
              <select
                value={formData.campaignType}
                onChange={(e) => handleInputChange('campaignType', e.target.value)}
                className="w-full p-3 rounded-lg bg-white/10 border border-white/20 text-white focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50"
              >
                <option value="">Select type</option>
                <option value="newsletter">Newsletter</option>
                <option value="promotional">Promotional</option>
                <option value="transactional">Transactional</option>
                <option value="welcome">Welcome</option>
                <option value="abandoned_cart">Abandoned Cart</option>
              </select>
            </div>

            {/* Tone */}
            <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-primary border-glass-border shadow-glass p-6">
              <label className="block text-sm font-medium text-white mb-2">
                Tone
              </label>
              <select
                value={formData.tone}
                onChange={(e) => handleInputChange('tone', e.target.value)}
                className="w-full p-3 rounded-lg bg-white/10 border border-white/20 text-white focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50"
              >
                <option value="">Select tone</option>
                <option value="professional">Professional</option>
                <option value="friendly">Friendly</option>
                <option value="casual">Casual</option>
                <option value="urgent">Urgent</option>
                <option value="formal">Formal</option>
              </select>
            </div>

            {/* Target Audience */}
            <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-primary border-glass-border shadow-glass p-6">
              <label className="block text-sm font-medium text-white mb-2">
                Target Audience
              </label>
              <input
                type="text"
                value={formData.targetAudience}
                onChange={(e) => handleInputChange('targetAudience', e.target.value)}
                placeholder="e.g., Young professionals, Parents, etc."
                className="w-full p-3 rounded-lg bg-white/10 border border-white/20 text-white placeholder-white/50 focus:border-primary focus:outline-none focus:ring-2 focus:ring-primary/50"
              />
            </div>

            {/* Actions */}
            <div className="flex gap-4">
              <button
                onClick={handleGenerate}
                disabled={!isFormValid || result.status === 'loading'}
                className="flex-1 px-6 py-3 rounded-lg bg-primary/20 text-primary border border-primary/30 hover:bg-primary/30 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-medium"
              >
                {result.status === 'loading' ? 'Generating...' : 'Generate Template'}
              </button>
              <button
                onClick={handleSaveDraft}
                className="px-6 py-3 rounded-lg bg-white/10 text-white border border-white/20 hover:bg-white/20 transition-all font-medium"
              >
                Save Draft
              </button>
            </div>
          </div>

          {/* Right Column - Preview */}
          <div className="space-y-6">
            {/* Status */}
            {result.status === 'error' && (
              <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-secondary border-glass-border shadow-glass-sm p-6">
                <div className="text-red-400 font-medium mb-2">‚ùå Error</div>
                <div className="text-white/80">{result.error}</div>
              </div>
            )}

            {result.status === 'loading' && (
              <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-secondary border-glass-border shadow-glass-sm p-6">
                <div className="text-blue-400 font-medium mb-2">‚è≥ Generating...</div>
                <div className="text-white/80">Please wait while we generate your email template...</div>
              </div>
            )}

            {result.status === 'success' && result.data && (
              <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-primary border-glass-border shadow-glass p-6">
                <div className="text-green-400 font-medium mb-2">‚úÖ Success!</div>
                <div className="text-white/80 mb-4">Template generated successfully</div>
                
                {/* Basic Preview */}
                {result.data.html && (
                  <div className="mt-4">
                    <div className="border border-white/20 rounded-lg overflow-hidden">
                      <iframe
                        className="w-full h-96"
                        srcDoc={result.data.html}
                        title="Email Preview"
                        sandbox="allow-same-origin"
                        style={{ background: 'white' }}
                      />
                    </div>
                    
                    <div className="flex gap-2 mt-4">
                      <button 
                        onClick={() => {
                          const blob = new Blob([result.data.html], { type: 'text/html' })
                          const url = URL.createObjectURL(blob)
                          const a = document.createElement('a')
                          a.href = url
                          a.download = `email-template-${Date.now()}.html`
                          a.click()
                          URL.revokeObjectURL(url)
                        }}
                        className="px-4 py-2 rounded-lg bg-primary/20 text-primary border border-primary/30 hover:bg-primary/30 transition-all text-sm"
                      >
                        üíæ Download HTML
                      </button>
                      <button 
                        onClick={() => {
                          if (navigator.clipboard) {
                            navigator.clipboard.writeText(result.data.html)
                            alert('HTML copied to clipboard!')
                          }
                        }}
                        className="px-4 py-2 rounded-lg bg-accent/20 text-accent border border-accent/30 hover:bg-accent/30 transition-all text-sm"
                      >
                        üìã Copy HTML
                      </button>
                    </div>
                  </div>
                )}
              </div>
            )}

            {result.status === 'idle' && (
              <div className="rounded-xl border backdrop-blur transition-all duration-300 ease-in-out bg-glass-secondary border-glass-border shadow-glass-sm p-6">
                <div className="text-center text-white/60">
                  <div className="text-6xl mb-4">üìß</div>
                  <div className="text-lg font-medium mb-2">Ready to Generate</div>
                  <div>Fill out the form and click "Generate Template" to create your email</div>
                </div>
              </div>
            )}
          </div>
        </div>
      </main>
    </div>
  )
} 