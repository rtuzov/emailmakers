/**
 * üåç MULTI-DESTINATION TYPES
 * 
 * –¢–∏–ø—ã –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è email-–∫–∞–º–ø–∞–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏
 * –°–æ–≤–º–µ—Å—Ç–∏–º–æ —Å OpenAI Agents SDK v2 (–±–µ–∑ .nullable().default() patterns)
 * 
 * @version 1.0.0
 * @author Email-Makers System
 * 
 * @example Basic multi-destination plan usage
 * ```typescript
 * import { MultiDestinationPlan, validateMultiDestinationData } from './multi-destination-types';
 * 
 * const plan: MultiDestinationPlan = {
 *   campaign_id: 'europe_autumn_2024',
 *   geographical_scope: {
 *     query_type: 'regional',
 *     scope_level: 'continent',
 *     regions: ['Europe'],
 *     countries: ['France', 'Italy', 'Germany'],
 *     cities: [],
 *     scope_confidence: 92
 *   },
 *   destinations: [
 *     {
 *       destination: 'France',
 *       appeal_score: 95,
 *       seasonal_fit: 90,
 *       pricing_tier: 'mid-range',
 *       estimated_price_range: { min: 450, max: 750, currency: 'EUR' },
 *       marketing_appeal: {
 *         primary_attractions: ['Eiffel Tower', 'Louvre Museum'],
 *         unique_selling_points: ['Romantic atmosphere', 'World-class art'],
 *         target_audience_fit: 95,
 *         seasonal_highlights: ['Autumn foliage', 'Wine harvest season']
 *       },
 *       content_requirements: {
 *         hero_image: 'paris_autumn_sunset.jpg',
 *         destination_images: ['eiffel_tower.jpg', 'louvre.jpg'],
 *         content_tone: 'romantic_sophisticated',
 *         key_messaging: ['Experience the romance of Paris in autumn']
 *       },
 *       layout_requirements: {
 *         priority_level: 'high',
 *         recommended_position: 1,
 *         space_allocation: 'featured',
 *         visual_weight: 'primary'
 *       }
 *     }
 *   ],
 *   // ... other required fields
 * };
 * 
 * // Validate the plan
 * const validation = validateMultiDestinationData(plan);
 * if (!validation.isValid) {
 *   console.error('Validation errors:', validation.errors);
 * }
 * ```
 * 
 * @example Seasonal optimization usage
 * ```typescript
 * import { SeasonalOptimization } from './multi-destination-types';
 * 
 * const autumnOptimization: SeasonalOptimization = {
 *   target_season: 'autumn',
 *   optimal_months: ['September', 'October', 'November'],
 *   climate_considerations: {
 *     temperature_range: '15-25¬∞C',
 *     weather_conditions: ['mild', 'occasional_rain'],
 *     daylight_hours: '10-12 hours'
 *   },
 *   seasonal_appeal: {
 *     natural_beauty: 'foliage_colors',
 *     cultural_events: ['harvest_festivals', 'wine_season'],
 *     tourist_crowds: 'moderate',
 *     pricing_advantage: 'shoulder_season_rates'
 *   },
 *   best_destinations_for_season: [
 *     {
 *       destination: 'France',
 *       seasonal_score: 92,
 *       reasons: ['Perfect autumn weather', 'Wine harvest season']
 *     }
 *   ],
 *   seasonal_warnings: []
 * };
 * ```
 * 
 * @example Layout planning usage
 * ```typescript
 * import { UnifiedLayoutPlan, LayoutType } from './multi-destination-types';
 * 
 * const gridLayout: UnifiedLayoutPlan = {
 *   layout_type: 'grid',
 *   template_selection: {
 *     recommended_template: 'multi-destination-grid.mjml',
 *     alternative_templates: ['multi-destination-compact.mjml'],
 *     template_rationale: 'Grid layout works best for 4-6 destinations'
 *   },
 *   visual_hierarchy: {
 *     primary_destinations: ['France', 'Italy'],
 *     secondary_destinations: ['Germany', 'Spain'],
 *     content_flow: 'left_to_right_priority',
 *     visual_balance: 'equal_weight'
 *   },
 *   responsive_strategy: {
 *     mobile_layout: 'stacked_cards',
 *     tablet_layout: 'two_column',
 *     desktop_layout: 'three_column',
 *     breakpoints: {
 *       mobile: '480px',
 *       tablet: '768px',
 *       desktop: '1024px'
 *     }
 *   },
 *   performance_considerations: {
 *     estimated_load_time: 2.1,
 *     image_optimization_needed: true,
 *     lazy_loading_strategy: 'below_fold',
 *     critical_path_css: ['grid-layout', 'responsive-utilities']
 *   }
 * };
 * ```
 */

import { z } from 'zod';

// ============ CORE ENUMS & CONSTANTS ============

/**
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è multi-destination –∫–∞–º–ø–∞–Ω–∏–π
 */
export const SUPPORTED_REGIONS = [
  'europe',
  'asia',
  'north_america', 
  'south_america',
  'africa',
  'oceania',
  'middle_east'
] as const;

/**
 * –°–µ–∑–æ–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */
export const TRAVEL_SEASONS = [
  'spring',
  'summer', 
  'autumn',
  'winter',
  'year_round'
] as const;

/**
 * –¢–∏–ø—ã layout –¥–ª—è —Ä–∞–∑–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 */
export const LAYOUT_TYPES = [
  'compact',      // 2-3 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  'grid',         // 4-6 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π  
  'carousel',     // 6+ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
  'list',         // –õ—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ —Å–ø–∏—Å–∫–µ
  'featured'      // –û–¥–Ω–æ –æ—Å–Ω–æ–≤–Ω–æ–µ + –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
] as const;

/**
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export const DESTINATION_PRIORITIES = [
  'primary',      // –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
  'secondary',    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  'featured',     // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  'seasonal'      // –°–µ–∑–æ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
] as const;

// ============ ZOD SCHEMAS (OpenAI SDK v2 Compatible) ============

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
 */
export const geographicalInfoSchema = z.object({
  country_code: z.string().min(2).max(3).describe('ISO –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, FR, IT, ES)'),
  country_name: z.string().min(1).describe('–ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã'),
  city: z.string().nullable().optional().describe('–û—Å–Ω–æ–≤–Ω–æ–π –≥–æ—Ä–æ–¥ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
  region: z.enum(SUPPORTED_REGIONS).describe('–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ä–µ–≥–∏–æ–Ω'),
  continent: z.string().describe('–ö–æ–Ω—Ç–∏–Ω–µ–Ω—Ç'),
  coordinates: z.object({
    latitude: z.number().min(-90).max(90),
    longitude: z.number().min(-180).max(180)
  }).nullable().optional().describe('–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞—Ä—Ç'),
  timezone: z.string().nullable().optional().describe('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, Europe/Paris)')
});

/**
 * –°—Ö–µ–º–∞ –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
 */
export const seasonalContextSchema = z.object({
  primary_season: z.enum(TRAVEL_SEASONS).describe('–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–∑–æ–Ω –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
  optimal_months: z.array(z.number().min(1).max(12)).describe('–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –º–µ—Å—è—Ü—ã (1-12)'),
  weather_description: z.string().nullable().optional().describe('–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≥–æ–¥—ã'),
  seasonal_highlights: z.array(z.string()).nullable().optional().describe('–°–µ–∑–æ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è'),
  temperature_range: z.object({
    min: z.number(),
    max: z.number(),
    unit: z.enum(['celsius', 'fahrenheit']).default('celsius')
  }).nullable().optional().describe('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω')
});

/**
 * –°—Ö–µ–º–∞ –¥–ª—è —Ü–µ–Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export const destinationPricingSchema = z.object({
  base_price: z.number().min(0).describe('–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞'),
  currency: z.string().min(3).max(3).describe('–í–∞–ª—é—Ç–∞ (ISO –∫–æ–¥)'),
  price_range: z.object({
    min: z.number().min(0),
    max: z.number().min(0)
  }).describe('–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω'),
  best_booking_period: z.object({
    start_date: z.string().describe('–ù–∞—á–∞–ª–æ –ª—É—á—à–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'),
    end_date: z.string().describe('–ö–æ–Ω–µ—Ü –ª—É—á—à–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
  }).nullable().optional().describe('–õ—É—á—à–∏–π –ø–µ—Ä–∏–æ–¥ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'),
  savings_potential: z.number().min(0).max(100).nullable().optional().describe('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª —ç–∫–æ–Ω–æ–º–∏–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö'),
  price_trend: z.enum(['rising', 'falling', 'stable']).nullable().optional().describe('–¢—Ä–µ–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω')
});

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export const destinationAssetsSchema = z.object({
  primary_image: z.object({
    url: z.string().url().nullable().optional().describe('URL –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
    alt_text: z.string().describe('–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
    source: z.enum(['figma', 'external', 'generated']).describe('–ò—Å—Ç–æ—á–Ω–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è')
  }).describe('–û—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
  gallery_images: z.array(z.object({
    url: z.string().url().nullable().optional(),
    alt_text: z.string(),
    category: z.enum(['landmark', 'food', 'culture', 'nature', 'activity']).nullable().nullable().optional()
  })).nullable().optional().describe('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'),
  icons: z.array(z.object({
    type: z.enum(['weather', 'activity', 'transport', 'accommodation']),
    url: z.string().url().nullable().optional(),
    description: z.string()
  })).nullable().optional().describe('–ò–∫–æ–Ω–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π'),
  brand_elements: z.object({
    color_scheme: z.array(z.string()).nullable().optional().describe('–¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
    font_preferences: z.string().nullable().optional().describe('–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —à—Ä–∏—Ñ—Ç–∞–º')
  }).nullable().optional().describe('–ë—Ä–µ–Ω–¥–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã')
});

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export const destinationContentSchema = z.object({
  title: z.string().min(1).max(100).describe('–ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
  description: z.string().min(1).max(500).describe('–û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
  highlights: z.array(z.string()).min(1).max(5).describe('–ö–ª—é—á–µ–≤—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ (1-5 –ø—É–Ω–∫—Ç–æ–≤)'),
  call_to_action: z.string().min(1).max(50).describe('–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é'),
  unique_selling_points: z.array(z.string()).nullable().optional().describe('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞'),
  target_audience: z.enum(['families', 'couples', 'solo_travelers', 'business', 'adventure_seekers', 'luxury']).nullable().optional().describe('–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'),
  content_tone: z.enum(['excited', 'relaxed', 'luxurious', 'adventurous', 'family_friendly']).nullable().optional().describe('–¢–æ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
});

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
 */
export const destinationPlanSchema = z.object({
  id: z.string().min(1).describe('–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
  priority: z.enum(DESTINATION_PRIORITIES).describe('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–º–ø–∞–Ω–∏–∏'),
  
  // –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  geographical_info: geographicalInfoSchema.describe('–ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
  
  // –°–µ–∑–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
  seasonal_context: seasonalContextSchema.describe('–°–µ–∑–æ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
  
  // –¶–µ–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  pricing: destinationPricingSchema.describe('–¶–µ–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'),
  
  // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
  assets: destinationAssetsSchema.describe('–í–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã'),
  
  // –ö–æ–Ω—Ç–µ–Ω—Ç
  content: destinationContentSchema.describe('–ö–æ–Ω—Ç–µ–Ω—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è'),
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  metadata: z.object({
    created_at: z.string().describe('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'),
    updated_at: z.string().describe('–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
    source: z.enum(['manual', 'ai_generated', 'api_import']).describe('–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö'),
    confidence_score: z.number().min(0).max(100).nullable().optional().describe('–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö')
  }).describe('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
});

/**
 * –°—Ö–µ–º–∞ –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ layout –ø–ª–∞–Ω–∞
 */
export const unifiedLayoutPlanSchema = z.object({
  layout_type: z.enum(LAYOUT_TYPES).describe('–¢–∏–ø layout –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π'),
  
  // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ layout
  structure: z.object({
    primary_destination_count: z.number().min(1).max(2).describe('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π'),
    secondary_destination_count: z.number().min(0).max(10).describe('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π'),
    total_destinations: z.number().min(1).max(12).describe('–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π'),
    sections: z.array(z.object({
      section_id: z.string(),
      section_type: z.enum(['hero', 'featured', 'grid', 'list', 'cta']),
      destination_ids: z.array(z.string()),
      position: z.number().min(1).describe('–ü–æ–∑–∏—Ü–∏—è —Å–µ–∫—Ü–∏–∏ –≤ layout')
    })).describe('–°–µ–∫—Ü–∏–∏ layout')
  }).describe('–°—Ç—Ä—É–∫—Ç—É—Ä–∞ layout'),
  
  // –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å
  responsive_config: z.object({
    mobile_layout: z.enum(['stack', 'carousel', 'accordion']).describe('Layout –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤'),
    tablet_layout: z.enum(['grid_2x2', 'grid_2x3', 'carousel']).describe('Layout –¥–ª—è –ø–ª–∞–Ω—à–µ—Ç–æ–≤'),
    desktop_layout: z.enum(['grid_3x2', 'grid_2x3', 'sidebar', 'carousel']).describe('Layout –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞'),
    breakpoints: z.object({
      mobile: z.number().default(768),
      tablet: z.number().default(1024),
      desktop: z.number().default(1200)
    }).describe('–¢–æ—á–∫–∏ –ø–µ—Ä–µ–ª–æ–º–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏')
  }).describe('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç–∏'),
  
  // MJML template mapping
  template_mapping: z.object({
    mjml_template: z.enum(['multi-destination-compact.mjml', 'multi-destination-grid.mjml', 'multi-destination-carousel.mjml']).describe('MJML —à–∞–±–ª–æ–Ω'),
    template_variables: z.record(z.string(), z.any()).nullable().optional().describe('–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —à–∞–±–ª–æ–Ω–∞'),
    custom_css: z.string().nullable().optional().describe('–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS —Å—Ç–∏–ª–∏')
  }).describe('–ü—Ä–∏–≤—è–∑–∫–∞ –∫ MJML —à–∞–±–ª–æ–Ω—É')
});

/**
 * –ì–ª–∞–≤–Ω–∞—è —Å—Ö–µ–º–∞ –¥–ª—è multi-destination –ø–ª–∞–Ω–∞
 */
export const multiDestinationPlanSchema = z.object({
  id: z.string().min(1).describe('–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞–Ω–∞'),
  name: z.string().min(1).max(200).describe('–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏'),
  description: z.string().nullable().optional().describe('–û–ø–∏—Å–∞–Ω–∏–µ –∫–∞–º–ø–∞–Ω–∏–∏'),
  
  // –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  destinations: z.array(destinationPlanSchema).min(2).max(12).describe('–°–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π (–º–∏–Ω–∏–º—É–º 2, –º–∞–∫—Å–∏–º—É–º 12)'),
  
  // –û–±—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏
  campaign_context: z.object({
    theme: z.string().describe('–¢–µ–º–∞ –∫–∞–º–ø–∞–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ï–≤—Ä–æ–ø–∞ –æ—Å–µ–Ω—å—é")'),
    target_season: z.enum(TRAVEL_SEASONS).describe('–¶–µ–ª–µ–≤–æ–π —Å–µ–∑–æ–Ω'),
    target_region: z.enum(SUPPORTED_REGIONS).nullable().optional().describe('–û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–≥–∏–æ–Ω'),
    campaign_duration: z.object({
      start_date: z.string().describe('–ù–∞—á–∞–ª–æ –∫–∞–º–ø–∞–Ω–∏–∏'),
      end_date: z.string().describe('–ö–æ–Ω–µ—Ü –∫–∞–º–ø–∞–Ω–∏–∏')
    }).describe('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–∞–º–ø–∞–Ω–∏–∏'),
    budget_range: z.enum(['budget', 'mid_range', 'premium', 'luxury']).describe('–¶–µ–Ω–æ–≤–æ–π —Å–µ–≥–º–µ–Ω—Ç'),
    urgency_level: z.enum(['low', 'medium', 'high']).default('medium').describe('–£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
  }).describe('–ö–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏'),
  
  // Layout –ø–ª–∞–Ω
  layout_plan: unifiedLayoutPlanSchema.describe('–ü–ª–∞–Ω layout –¥–ª—è email'),
  
  // –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  positioning_strategy: z.object({
    primary_value_proposition: z.string().describe('–û—Å–Ω–æ–≤–Ω–æ–µ —Ü–µ–Ω–Ω–æ—Å—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'),
    competitive_advantages: z.array(z.string()).describe('–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞'),
    target_audience: z.enum(['families', 'couples', 'solo_travelers', 'business', 'mixed']).describe('–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è'),
    messaging_focus: z.enum(['price', 'experience', 'convenience', 'exclusivity']).describe('–§–æ–∫—É—Å —Å–æ–æ–±—â–µ–Ω–∏—è')
  }).describe('–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'),
  
  // –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞
  metadata: z.object({
    created_at: z.string().describe('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞'),
    updated_at: z.string().describe('–î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'),
    version: z.string().default('1.0.0').describe('–í–µ—Ä—Å–∏—è –ø–ª–∞–Ω–∞'),
    created_by: z.enum(['user', 'ai_agent', 'import']).describe('–ò—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è'),
    optimization_score: z.number().min(0).max(100).nullable().optional().describe('–û—Ü–µ–Ω–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∞'),
    a_b_test_variant: z.string().nullable().optional().describe('–í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
  }).describe('–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–ª–∞–Ω–∞')
});

// ============ TYPESCRIPT TYPES ============

export type SupportedRegion = typeof SUPPORTED_REGIONS[number];
export type TravelSeason = typeof TRAVEL_SEASONS[number];
export type LayoutType = typeof LAYOUT_TYPES[number];
export type DestinationPriority = typeof DESTINATION_PRIORITIES[number];

export type GeographicalInfo = z.infer<typeof geographicalInfoSchema>;
export type SeasonalContext = z.infer<typeof seasonalContextSchema>;
export type DestinationPricing = z.infer<typeof destinationPricingSchema>;
export type DestinationAssets = z.infer<typeof destinationAssetsSchema>;
export type DestinationContent = z.infer<typeof destinationContentSchema>;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø –¥–ª—è –æ–¥–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ multi-destination –∫–∞–º–ø–∞–Ω–∏–∏
 */
export type DestinationPlan = z.infer<typeof destinationPlanSchema>;

/**
 * –¢–∏–ø –¥–ª—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ layout –ø–ª–∞–Ω–∞
 */
export type UnifiedLayoutPlan = z.infer<typeof unifiedLayoutPlanSchema>;

/**
 * –ì–ª–∞–≤–Ω—ã–π —Ç–∏–ø –¥–ª—è multi-destination –ø–ª–∞–Ω–∞ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export type MultiDestinationPlan = z.infer<typeof multiDestinationPlanSchema>;

// ============ UTILITY TYPES ============

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è multi-destination –∫–∞–º–ø–∞–Ω–∏–π
 * 
 * @interface GeographicalScopeAnalysis
 * @description –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã AI-–∞–Ω–∞–ª–∏–∑–∞ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –≤ –∫–∞–º–ø–∞–Ω–∏—é
 * 
 * @example
 * ```typescript
 * const analysis: GeographicalScopeAnalysis = {
 *   detected_region: 'europe',
 *   suggested_destinations: [
 *     {
 *       destination: 'France',
 *       appeal_score: 95,
 *       seasonal_fit: 90,
 *       pricing_tier: 'mid-range',
 *       // ... other DestinationPlan fields
 *     }
 *   ],
 *   confidence_score: 92,
 *   analysis_metadata: {
 *     query_processed: '–ï–≤—Ä–æ–ø–∞ –æ—Å–µ–Ω—å—é –¥–ª—è –º–æ–ª–æ–¥–æ–π –ø–∞—Ä—ã',
 *     keywords_extracted: ['–ï–≤—Ä–æ–ø–∞', '–æ—Å–µ–Ω—å', '–º–æ–ª–æ–¥–∞—è –ø–∞—Ä–∞', '—Ä–æ–º–∞–Ω—Ç–∏–∫–∞'],
 *     region_indicators: ['–ï–≤—Ä–æ–ø–∞', '–µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–π'],
 *     seasonal_hints: ['autumn']
 *   }
 * };
 * ```
 * 
 * @since 1.0.0
 */
export interface GeographicalScopeAnalysis {
  detected_region: SupportedRegion;
  suggested_destinations: DestinationPlan[];
  confidence_score: number;
  analysis_metadata: {
    query_processed: string;
    keywords_extracted: string[];
    region_indicators: string[];
    seasonal_hints: TravelSeason[];
  };
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∞–º–ø–∞–Ω–∏–∏
 * 
 * @interface DestinationOptimization
 * @description –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ 
 * —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç–∏, —Ü–µ–Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞
 * 
 * @example
 * ```typescript
 * const optimization: DestinationOptimization = {
 *   original_destinations: [
 *     // –ò—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 *   ],
 *   optimized_destinations: [
 *     // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 *   ],
 *   optimization_changes: [
 *     {
 *       destination_id: 'france_001',
 *       change_type: 'modified',
 *       reason: '–ò–∑–º–µ–Ω–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏',
 *       impact_score: 85
 *     },
 *     {
 *       destination_id: 'spain_002',
 *       change_type: 'added',
 *       reason: '–î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–µ–∑–æ–Ω–Ω–æ–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏',
 *       impact_score: 92
 *     }
 *   ],
 *   performance_improvement: {
 *     engagement_score: 88,
 *     conversion_potential: 92,
 *     seasonal_relevance: 95
 *   }
 * };
 * ```
 * 
 * @since 1.0.0
 */
export interface DestinationOptimization {
  original_destinations: DestinationPlan[];
  optimized_destinations: DestinationPlan[];
  optimization_changes: Array<{
    destination_id: string;
    change_type: 'added' | 'removed' | 'modified' | 'reordered';
    reason: string;
    impact_score: number;
  }>;
  performance_improvement: {
    engagement_score: number;
    conversion_potential: number;
    seasonal_relevance: number;
  };
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è multi-destination –ø–ª–∞–Ω–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–º–ø–∞–Ω–∏–∏
 * 
 * @interface MultiDestinationValidation
 * @description –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ multi-destination –ø–ª–∞–Ω–∞,
 * –≤–∫–ª—é—á–∞—è –ø—Ä–æ–≤–µ—Ä–∫—É –∫–æ–Ω—Ç–µ–Ω—Ç–∞, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º email
 * 
 * @example
 * ```typescript
 * const validation: MultiDestinationValidation = {
 *   is_valid: true,
 *   validation_score: 92,
 *   validation_categories: {
 *     content: { passed: true, score: 95, issues: [] },
 *     technical: { passed: true, score: 88, issues: [] },
 *     design: { passed: true, score: 93, issues: [] },
 *     accessibility: { passed: true, score: 90, issues: [] },
 *     performance: { passed: false, score: 65, issues: ['Large image files'] }
 *   },
 *   overall_issues: [],
 *   recommendations: [
 *     '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
 *     '–î–æ–±–∞–≤–∏—Ç—å alt-—Ç–µ–∫—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π'
 *   ],
 *   estimated_fix_time: '1-2 hours'
 * };
 * ```
 * 
 * @since 1.0.0
 */
export interface MultiDestinationValidation {
  is_valid: boolean;
  errors: Array<{
    field: string;
    message: string;
    severity: 'error' | 'warning' | 'info';
  }>;
  warnings: Array<{
    field: string;
    message: string;
    suggestion: string;
  }>;
  optimization_suggestions: Array<{
    type: 'layout' | 'content' | 'pricing' | 'seasonal';
    suggestion: string;
    expected_improvement: number;
  }>;
}

// ============ CONSTANTS FOR VALIDATION ============

/**
 * –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è multi-destination –ø–ª–∞–Ω–æ–≤
 */
export const MULTI_DESTINATION_LIMITS = {
  MIN_DESTINATIONS: 2,
  MAX_DESTINATIONS: 12,
  OPTIMAL_DESTINATIONS: {
    compact: { min: 2, max: 3 },
    grid: { min: 4, max: 6 },
    carousel: { min: 6, max: 12 },
    list: { min: 2, max: 8 },
    featured: { min: 3, max: 5 }
  },
  MAX_TITLE_LENGTH: 100,
  MAX_DESCRIPTION_LENGTH: 500,
  MAX_HIGHLIGHTS: 5,
  MAX_CTA_LENGTH: 50
} as const;

/**
 * –°—Ö–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
 */
export const REGION_CHARACTERISTICS = {
  europe: {
    typical_seasons: ['spring', 'summer', 'autumn'] as TravelSeason[],
    currency_codes: ['EUR', 'GBP', 'CHF', 'NOK', 'SEK'],
    popular_categories: ['culture', 'history', 'food', 'architecture']
  },
  asia: {
    typical_seasons: ['winter', 'spring', 'autumn'] as TravelSeason[],
    currency_codes: ['JPY', 'KRW', 'CNY', 'THB', 'SGD'],
    popular_categories: ['culture', 'food', 'nature', 'spirituality']
  },
  north_america: {
    typical_seasons: ['summer', 'autumn', 'winter'] as TravelSeason[],
    currency_codes: ['USD', 'CAD'],
    popular_categories: ['nature', 'cities', 'entertainment', 'adventure']
  },
  south_america: {
    typical_seasons: ['summer', 'autumn', 'spring'] as TravelSeason[],
    currency_codes: ['BRL', 'ARS', 'CLP', 'COP'],
    popular_categories: ['nature', 'adventure', 'culture', 'food']
  },
  africa: {
    typical_seasons: ['winter', 'spring', 'autumn'] as TravelSeason[],
    currency_codes: ['ZAR', 'EGP', 'MAD', 'KES'],
    popular_categories: ['wildlife', 'adventure', 'culture', 'nature']
  },
  oceania: {
    typical_seasons: ['summer', 'autumn', 'spring'] as TravelSeason[],
    currency_codes: ['AUD', 'NZD'],
    popular_categories: ['nature', 'adventure', 'beaches', 'wildlife']
  },
  middle_east: {
    typical_seasons: ['winter', 'spring', 'autumn'] as TravelSeason[],
    currency_codes: ['AED', 'SAR', 'QAR', 'KWD'],
    popular_categories: ['culture', 'luxury', 'history', 'modern']
  }
} as const;

// ============ EXPORT ALL ============
// Schemas are already exported above, no need to re-export them

/**
 * –í–µ—Ä—Å–∏—è —Ç–∏–ø–æ–≤ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 */
export const MULTI_DESTINATION_TYPES_VERSION = '1.0.0';

/**
 * –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å OpenAI Agents SDK
 */
export const OPENAI_SDK_COMPATIBILITY = {
  version: '2.x',
  zod_patterns: 'compatible',
  strict_mode: true,
  nullable_default_avoided: true
} as const;

// Additional types for validation service
export interface MultiDestinationValidationCriteria {
  max_email_size_kb?: number;
  required_image_formats?: string[];
  min_image_resolution?: {
    width: number;
    height: number;
  };
  seasonal_date_validation?: boolean;
  destination_consistency_check?: boolean;
  layout_responsive_validation?: boolean;
}

export interface MultiDestinationValidationResults {
  email_size_validation: {
    passed: boolean;
    current_size_kb: number;
    max_allowed_kb: number;
    optimization_suggestions?: string[];
  };
  image_validation: {
    passed: boolean;
    total_images: number;
    invalid_formats: string[];
    low_resolution_images: string[];
    oversized_images: string[];
    suggestions?: string[];
  };
  date_validation: {
    passed: boolean;
    seasonal_consistency: boolean;
    optimal_timing: boolean;
    date_conflicts: string[];
  };
  destination_validation: {
    passed: boolean;
    geographic_consistency: boolean;
    pricing_consistency: boolean;
    content_relevance: number;
  };
  layout_validation: {
    passed: boolean;
    responsive_compatibility: boolean;
    template_suitability: boolean;
    mobile_optimization: number;
  };
  overall_validation: {
    passed: boolean;
    confidence_score: number;
    critical_issues: string[];
    recommendations: string[];
  };
}

// ============ UTILITY FUNCTIONS ============

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç multi-destination –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Zod —Å—Ö–µ–º
 * 
 * @function validateMultiDestinationData
 * @description –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö multi-destination –∫–∞–º–ø–∞–Ω–∏–∏
 * —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Zod —Å—Ö–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * 
 * @param {unknown} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–æ–≥–æ —Ç–∏–ø–∞)
 * @returns {ValidationResult} –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Å —Ñ–ª–∞–≥–æ–º —É—Å–ø–µ—Ö–∞ –∏ —Å–ø–∏—Å–∫–æ–º –æ—à–∏–±–æ–∫
 * 
 * @example Basic validation
 * ```typescript
 * import { validateMultiDestinationData } from './multi-destination-types';
 * 
 * const campaignData = {
 *   campaign_id: 'europe_winter_2024',
 *   destinations: [
 *     {
 *       destination: 'Switzerland',
 *       appeal_score: 88,
 *       seasonal_fit: 95,
 *       pricing_tier: 'luxury',
 *       // ... other required fields
 *     }
 *   ],
 *   // ... other campaign data
 * };
 * 
 * const validation = validateMultiDestinationData(campaignData);
 * 
 * if (validation.isValid) {
 *   console.log('‚úÖ Campaign data is valid');
 *   console.log(`Validation score: ${validation.validationScore}/100`);
 * } else {
 *   console.error('‚ùå Validation failed:');
 *   validation.errors.forEach(error => {
 *     console.error(`- ${error.field}: ${error.message}`);
 *   });
 * }
 * ```
 * 
 * @example Advanced validation with custom criteria
 * ```typescript
 * const validationWithCriteria = validateMultiDestinationData(
 *   campaignData,
 *   {
 *     max_email_size_kb: 80,
 *     required_image_formats: ['jpg', 'webp'],
 *     seasonal_date_validation: true,
 *     destination_consistency_check: true
 *   }
 * );
 * 
 * if (!validationWithCriteria.isValid) {
 *   console.log('Suggestions for fixes:');
 *   validationWithCriteria.suggestions?.forEach(suggestion => {
 *     console.log(`- ${suggestion.field}: ${suggestion.recommendation}`);
 *   });
 * }
 * ```
 * 
 * @throws {Error} –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 * @since 1.0.0
 */
export function validateMultiDestinationData(
  data: unknown,
  criteria?: Partial<MultiDestinationValidationCriteria>
): ValidationResult {
  const errors: ValidationError[] = [];
  const warnings: string[] = [];
  const suggestions: ValidationSuggestion[] = [];
  
  try {
    // –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    if (!data || typeof data !== 'object') {
      errors.push({
        field: 'root',
        message: 'Data must be a valid object',
        severity: 'critical',
        code: 'INVALID_TYPE'
      });
      
      return {
        isValid: false,
        errors,
        warnings,
        suggestions,
        validationScore: 0,
        validatedData: null
      };
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const requiredFields = ['campaign_id', 'destinations'];
    const dataObj = data as Record<string, unknown>;
    
    for (const field of requiredFields) {
      if (!(field in dataObj)) {
        errors.push({
          field,
          message: `Required field '${field}' is missing`,
          severity: 'critical',
          code: 'MISSING_FIELD'
        });
      }
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è destinations array
    if ('destinations' in dataObj) {
      const destinations = dataObj.destinations;
      
      if (!Array.isArray(destinations)) {
        errors.push({
          field: 'destinations',
          message: 'Destinations must be an array',
          severity: 'critical',
          code: 'INVALID_TYPE'
        });
      } else if (destinations.length === 0) {
        errors.push({
          field: 'destinations',
          message: 'At least one destination is required',
          severity: 'critical',
          code: 'EMPTY_ARRAY'
        });
      } else if (destinations.length > MULTI_DESTINATION_LIMITS.MAX_DESTINATIONS) {
        errors.push({
          field: 'destinations',
          message: `Too many destinations (max: ${MULTI_DESTINATION_LIMITS.MAX_DESTINATIONS})`,
          severity: 'major',
          code: 'EXCEEDS_LIMIT'
        });
      }
    }
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å criteria
    if (criteria?.max_email_size_kb) {
      warnings.push(`Email size validation enabled (max: ${criteria.max_email_size_kb}KB)`);
    }
    
    if (criteria?.seasonal_date_validation) {
      warnings.push('Seasonal date validation enabled');
    }
    
    // –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const criticalErrors = errors.filter(e => e.severity === 'critical').length;
    const majorErrors = errors.filter(e => e.severity === 'major').length;
    const minorErrors = errors.filter(e => e.severity === 'minor').length;
    
    let validationScore = 100;
    validationScore -= (criticalErrors * 30);
    validationScore -= (majorErrors * 20);
    validationScore -= (minorErrors * 10);
    validationScore = Math.max(0, validationScore);
    
    const isValid = criticalErrors === 0 && majorErrors === 0;
    
    return {
      isValid,
      errors,
      warnings,
      suggestions,
      validationScore,
      validatedData: isValid ? dataObj : null
    };
    
  } catch (error) {
    errors.push({
      field: 'validation',
      message: `Validation error: ${error instanceof Error ? error.message : 'Unknown error'}`,
      severity: 'critical',
      code: 'VALIDATION_EXCEPTION'
    });
    
    return {
      isValid: false,
      errors,
      warnings,
      suggestions,
      validationScore: 0,
      validatedData: null
    };
  }
}

/**
 * –¢–∏–ø—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
export interface ValidationResult {
  isValid: boolean;
  errors: ValidationError[];
  warnings: string[];
  suggestions: ValidationSuggestion[];
  validationScore: number;
  validatedData: Record<string, unknown> | null;
}

export interface ValidationError {
  field: string;
  message: string;
  severity: 'critical' | 'major' | 'minor';
  code: string;
}

export interface ValidationSuggestion {
  field: string;
  issue: string;
  recommendation: string;
  priority: 'high' | 'medium' | 'low';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Ç–∏–ø–æ–≤ —Å OpenAI Agents SDK v2
 * 
 * @function checkOpenAICompatibility
 * @description –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ OpenAI SDK
 * 
 * @returns {object} –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * 
 * @example
 * ```typescript
 * const compatibility = checkOpenAICompatibility();
 * console.log(`SDK Version: ${compatibility.version}`);
 * console.log(`Zod patterns compatible: ${compatibility.zodPatterns}`);
 * console.log(`Strict mode: ${compatibility.strictMode}`);
 * ```
 * 
 * @since 1.0.0
 */
export function checkOpenAICompatibility(): typeof OPENAI_SDK_COMPATIBILITY {
  return OPENAI_SDK_COMPATIBILITY;
}