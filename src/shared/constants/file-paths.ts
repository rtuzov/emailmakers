/**
 * üìÅ FILE PATH CONSTANTS
 * 
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã
 * –ó–∞–º–µ–Ω—è–µ—Ç hardcoded –ø—É—Ç–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å fail-fast –ø–æ–ª–∏—Ç–∏–∫–æ–π
 */

import * as path from 'path';

/**
 * –ë–∞–∑–æ–≤—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
 */
export const BASE_PATHS = {
  PROJECT_ROOT: process.cwd(),
  MAILS_DIR: path.join(process.cwd(), 'mails'),
  TEMP_DIR: path.join(process.cwd(), 'temp'),
  LOGS_DIR: path.join(process.cwd(), 'logs'),
  ASSETS_DIR: path.join(process.cwd(), 'assets'),
  TEST_RESULTS_DIR: path.join(process.cwd(), 'test-results'),
  TEST_OUTPUTS_DIR: path.join(process.cwd(), 'test-outputs')
} as const;

/**
 * –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export const CAMPAIGN_STRUCTURE = {
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–∑–æ–≤—É—é –ø–∞–ø–∫—É –∫–∞–º–ø–∞–Ω–∏–∏
   */
  getCampaignDir: (campaignId: string) => path.join(BASE_PATHS.MAILS_DIR, campaignId),
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
   */
  getFinalDeliveryDir: (campaignId: string) => path.join(BASE_PATHS.MAILS_DIR, campaignId, 'final-delivery'),
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
   */
  getScreenshotsDir: (campaignId: string) => path.join(BASE_PATHS.MAILS_DIR, campaignId, 'screenshots'),
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø–∞–ø–∫—É –∞—Å—Å–µ—Ç–æ–≤
   */
  getAssetsDir: (campaignId: string) => path.join(BASE_PATHS.MAILS_DIR, campaignId, 'assets')
} as const;

/**
 * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
 */
export const FILE_NAMES = {
  EMAIL_HTML: 'email.html',
  EMAIL_MJML: 'email.mjml',
  EMAIL_FINAL_HTML: 'email-final.html',
  EMAIL_FINAL_MJML: 'email-final.mjml',
  CAMPAIGN_METADATA: 'campaign-metadata.json',
  CONTENT_DATA: 'content-data.json',
  DELIVERY_MANIFEST: 'delivery-manifest.json'
} as const;

/**
 * –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø—É—Ç–∏ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ email
 * –í–ê–ñ–ù–û: –°–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ fail –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –ù–ï–¢ FALLBACK
 */
export class EmailFilePaths {
  private readonly campaignId: string;
  
  constructor(campaignId: string) {
    if (!campaignId || typeof campaignId !== 'string') {
      throw new Error('Campaign ID is required and must be a valid string');
    }
    this.campaignId = campaignId;
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è HTML —Ñ–∞–π–ª–∞
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  getHtmlFilePaths(): string[] {
    return [
      path.join(CAMPAIGN_STRUCTURE.getCampaignDir(this.campaignId), FILE_NAMES.EMAIL_HTML),
      path.join(CAMPAIGN_STRUCTURE.getFinalDeliveryDir(this.campaignId), FILE_NAMES.EMAIL_FINAL_HTML),
      path.join(CAMPAIGN_STRUCTURE.getFinalDeliveryDir(this.campaignId), FILE_NAMES.EMAIL_HTML)
    ];
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—É—Ç–∏ –¥–ª—è MJML —Ñ–∞–π–ª–∞
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   */
  getMjmlFilePaths(): string[] {
    return [
      path.join(CAMPAIGN_STRUCTURE.getCampaignDir(this.campaignId), FILE_NAMES.EMAIL_MJML),
      path.join(CAMPAIGN_STRUCTURE.getFinalDeliveryDir(this.campaignId), FILE_NAMES.EMAIL_FINAL_MJML),
      path.join(CAMPAIGN_STRUCTURE.getFinalDeliveryDir(this.campaignId), FILE_NAMES.EMAIL_MJML)
    ];
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
   */
  getScreenshotsDir(): string {
    return CAMPAIGN_STRUCTURE.getScreenshotsDir(this.campaignId);
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –∞—Å—Å–µ—Ç–æ–≤
   */
  getAssetsDir(): string {
    return CAMPAIGN_STRUCTURE.getAssetsDir(this.campaignId);
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–∏
   */
  getMetadataFilePath(): string {
    return path.join(CAMPAIGN_STRUCTURE.getCampaignDir(this.campaignId), FILE_NAMES.CAMPAIGN_METADATA);
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
   */
  getContentDataFilePath(): string {
    return path.join(CAMPAIGN_STRUCTURE.getCampaignDir(this.campaignId), FILE_NAMES.CONTENT_DATA);
  }
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –º–∞–Ω–∏—Ñ–µ—Å—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
   */
  getDeliveryManifestPath(): string {
    return path.join(CAMPAIGN_STRUCTURE.getFinalDeliveryDir(this.campaignId), FILE_NAMES.DELIVERY_MANIFEST);
  }
}

/**
 * –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
 * FAIL-FAST: –ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç fallback –∑–Ω–∞—á–µ–Ω–∏—è
 */
export class FileValidator {
  /**
   * –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—É—Ç–µ–π
   * @param filePaths –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns –ü—É—Ç—å –∫ –ø–µ—Ä–≤–æ–º—É –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
   * @throws Error –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  static async findExistingFile(filePaths: string[]): Promise<string> {
    const fs = await import('fs/promises');
    
    for (const filePath of filePaths) {
      try {
        await fs.access(filePath);
        return filePath;
      } catch {
        // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫
      }
    }
    
    throw new Error(`No file found in any of the specified paths: ${filePaths.join(', ')}`);
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
   * @param filePath –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
   * @returns true –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   * @throws Error –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
   */
  static async validateFileExists(filePath: string): Promise<boolean> {
    const fs = await import('fs/promises');
    
    try {
      await fs.access(filePath);
      return true;
    } catch {
      throw new Error(`Required file not found: ${filePath}`);
    }
  }
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   * @param dirPath –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
   * @returns true –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   * @throws Error –µ—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
   */
  static async validateDirectoryExists(dirPath: string): Promise<boolean> {
    const fs = await import('fs/promises');
    
    try {
      const stat = await fs.stat(dirPath);
      if (!stat.isDirectory()) {
        throw new Error(`Path exists but is not a directory: ${dirPath}`);
      }
      return true;
    } catch {
      throw new Error(`Required directory not found: ${dirPath}`);
    }
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø—É—Ç–µ–π –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
 */
export class FilePathGenerator {
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp
   */
  static generateTimestampedFileName(baseName: string, extension: string): string {
    const timestamp = Date.now();
    return `${baseName}-${timestamp}.${extension}`;
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
   */
  static generateScreenshotPath(campaignId: string, viewport: 'desktop' | 'mobile', timestamp?: number): string {
    const ts = timestamp || Date.now();
    const fileName = `email-${viewport}-${ts}.png`;
    return path.join(CAMPAIGN_STRUCTURE.getScreenshotsDir(campaignId), fileName);
  }
  
  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—É—Ç—å –¥–ª—è –∞—Ä—Ö–∏–≤–∞
   */
  static generateArchivePath(campaignId: string, format: 'zip' | 'tar' = 'zip'): string {
    const timestamp = Date.now();
    const fileName = `${campaignId}-archive-${timestamp}.${format}`;
    return path.join(BASE_PATHS.TEMP_DIR, fileName);
  }
} 