/**
 * Campaign Logger - Campaign-scoped logging system that isolates logs between parallel campaigns
 * 
 * ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã, –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è, –¥–µ–≥—Ä–∞–¥–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * ‚úÖ –ù–û–í–û–ï: –ò–∑–æ–ª—è—Ü–∏—è –ª–æ–≥–æ–≤ –º–µ–∂–¥—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–º–∏ –∫–∞–º–ø–∞–Ω–∏—è–º–∏ —á–µ—Ä–µ–∑ AsyncLocalStorage
 */

import { promises as fs } from 'fs';
import * as path from 'path';
import { AsyncLocalStorage } from 'async_hooks';

interface LogEntry {
  timestamp: string;
  level: 'info' | 'warn' | 'error' | 'debug';
  message: string;
  source?: string;
  trace_id?: string;
  campaign_id?: string;
}

interface CampaignContext {
  campaignId: string;
  campaignPath: string;
}

// ‚úÖ –ù–û–í–û–ï: AsyncLocalStorage –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–º–ø–∞–Ω–∏–∏
const campaignContext = new AsyncLocalStorage<CampaignContext>();

class CampaignLogger {
  private campaignId: string;
  private campaignPath: string;
  private logBuffer: LogEntry[] = [];
  private isEnabled = true;
  private flushInterval: NodeJS.Timeout | null = null;
  private lastLogMessage: string | null = null;
  private duplicateCount = 0;
  private isLogging = false;

  constructor(campaignId: string, campaignPath: string) {
    this.campaignId = campaignId;
    this.campaignPath = campaignPath;
  }

  /**
   * ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  async initialize(): Promise<void> {
    // Create logs directory
    const logsDir = path.join(this.campaignPath, 'logs');
    await fs.mkdir(logsDir, { recursive: true });

    // ‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –∑–∞–ø–∏—Å—å
    if (!this.flushInterval) {
      this.flushInterval = setInterval(() => {
        if (this.logBuffer.length > 0) {
          this.flushLogs().catch(error => {
            console.error('‚ùå Failed to flush logs for campaign:', this.campaignId, error);
          });
        }
      }, 5000);
    }

    // ‚úÖ –ó–∞–ø–∏—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    this.safeAddLogEntry('info', `üîß Campaign logger initialized for: ${this.campaignId}`, 'CampaignLogger');
    console.log(`üìã Campaign Logger: Successfully initialized for ${this.campaignId}`);
  }

  /**
   * ‚úÖ –ë–ï–ó–û–ü–ê–°–ù–û–ï –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–µ–π
   */
  private safeAddLogEntry(level: LogEntry['level'], message: string, source?: string, trace_id?: string): void {
    if (!this.isEnabled || this.isLogging) return;

    // ‚úÖ –ê–ì–†–ï–°–°–ò–í–ù–ê–Ø –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const messageKey = message.slice(0, 100); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∫–ª—é—á–∞
    
    if (this.lastLogMessage === messageKey) {
      this.duplicateCount++;
      return; // ‚úÖ –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª—å –≤ –±—É—Ñ–µ—Ä - —ç–∫–æ–Ω–æ–º–∏–º –º–µ—Å—Ç–æ
    }

    // ‚úÖ –ï—Å–ª–∏ –±—ã–ª–∏ –¥—É–±–ª–∏, –¥–æ–±–∞–≤–ª—è–µ–º summary –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –∏—Ö –º–Ω–æ–≥–æ
    if (this.duplicateCount > 5) {
      const duplicateEntry: LogEntry = {
        timestamp: new Date().toISOString(),
        level: 'debug', // ‚úÖ debug –≤–º–µ—Å—Ç–æ info –¥–ª—è –º–µ–Ω—å—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
        message: `‚Ü©Ô∏è Last message repeated ${this.duplicateCount} times`,
        source: 'CampaignLogger',
        campaign_id: this.campaignId
      };
      this.logBuffer.push(duplicateEntry);
    }

    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
    const entry: LogEntry = {
      timestamp: new Date().toISOString(),
      level,
      message,
      campaign_id: this.campaignId,
      ...(source && { source }),
      ...(trace_id && { trace_id })
    };

    this.logBuffer.push(entry);
    this.lastLogMessage = messageKey;
    this.duplicateCount = 0;

    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô auto-flush: —É–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥ –¥–æ 20 –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if (this.logBuffer.length >= 20) {
      this.flushLogs().catch(error => {
        console.error('‚ùå Failed to auto-flush logs:', error);
      });
    }
  }

  /**
   * ‚úÖ –ü—É–±–ª–∏—á–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤
   */
  log(level: LogEntry['level'], message: string, source?: string, trace_id?: string): void {
    this.safeAddLogEntry(level, message, source, trace_id);

    // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô immediate flush: —Ç–æ–ª—å–∫–æ –¥–ª—è critical errors –æ—Ç Specialist
    if (level === 'error' || (source?.includes('Specialist') && level === 'warn')) {
      this.flushLogs().catch(error => {
        console.error('‚ùå Failed to immediate flush logs:', error);
      });
    }
  }

  /**
   * ‚úÖ –ó–∞–ø–∏—Å—å –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª —Å –∞–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
   */
  private async flushLogs(): Promise<void> {
    if (this.logBuffer.length === 0 || !this.campaignPath) return;

    try {
      const logsDir = path.join(this.campaignPath, 'logs');
      const logFile = path.join(logsDir, `campaign-${new Date().toISOString().split('T')[0]}.log`);
      
      // üõ°Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ó–ê–©–ò–¢–ê: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞–ø–∫—É logs –µ—Å–ª–∏ –æ–Ω–∞ –∏—Å—á–µ–∑–ª–∞
      try {
        await fs.access(logsDir);
      } catch {
        console.warn('‚ö†Ô∏è Logs directory missing, recreating:', logsDir);
        await fs.mkdir(logsDir, { recursive: true });
      }
      
      const logEntries = this.logBuffer.splice(0); // ‚úÖ –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä
      const logLines = logEntries.map(entry => {
        const parts = [entry.timestamp, `[${entry.level.toUpperCase()}]`];
        if (entry.source) parts.push(`[${entry.source}]`);
        parts.push(entry.message);
        return parts.join(' ');
      });

      await fs.appendFile(logFile, logLines.join('\n') + '\n');
    } catch (error) {
      console.error('‚ùå Failed to write logs to file:', error);
      // üõ°Ô∏è –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –±—É—Ñ–µ—Ä
      if (this.logBuffer.length === 0) {
        console.error('‚ùå CRITICAL: Log entries lost due to file system error');
      }
    }
  }

  /**
   * ‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ –∫–∞–º–ø–∞–Ω–∏–∏
   */
  async finalize(): Promise<void> {
    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥—É–±–ª–∏
    if (this.duplicateCount > 0) {
      const duplicateEntry: LogEntry = {
        timestamp: new Date().toISOString(),
        level: 'debug',
        message: `‚Ü©Ô∏è Last message repeated ${this.duplicateCount} times`,
        source: 'CampaignLogger',
        campaign_id: this.campaignId
      };
      this.logBuffer.push(duplicateEntry);
    }

    // Stop periodic flush
    if (this.flushInterval) {
      clearInterval(this.flushInterval);
      this.flushInterval = null;
    }

    // Flush any remaining logs
    await this.flushLogs();

    // Reset state
    this.logBuffer = [];
    this.lastLogMessage = null;
    this.duplicateCount = 0;

    console.log(`üìã Campaign Logger: Finalized for ${this.campaignId}`);
  }


  getLogBuffer(): LogEntry[] {
    return [...this.logBuffer];
  }
}

/**
 * ‚úÖ –ù–û–í–û–ï: Campaign Logger Manager - —É–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–≥–µ—Ä–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
 */
class CampaignLoggerManager {
  private static loggers: Map<string, CampaignLogger> = new Map();
  private static consoleOverridden = false;
  private static originalConsole: {
    log: any;
    warn: any;
    error: any;
    info: any;
    debug: any;
  } | null = null;

  /**
   * ‚úÖ –ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
   */
  static getLoggerForCampaign(campaignId: string, campaignPath: string): CampaignLogger {
    if (!this.loggers.has(campaignId)) {
      const logger = new CampaignLogger(campaignId, campaignPath);
      this.loggers.set(campaignId, logger);
    }
    return this.loggers.get(campaignId)!;
  }

  /**
   * ‚úÖ –£–ú–ù–û–ï –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ console —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º
   */
  static setupGlobalConsoleOverride(): void {
    if (this.consoleOverridden) return;

    // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    this.originalConsole = {
      log: console.log.bind(console),
      warn: console.warn.bind(console),
      error: console.error.bind(console),
      info: console.info.bind(console),
      debug: console.debug.bind(console)
    };

    const self = this;

    // ‚úÖ –£–ú–ù–û–ï –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º —Ä–æ—É—Ç–∏–Ω–≥–æ–º
    console.log = (...args: any[]) => {
      self.originalConsole!.log(...args); // ‚úÖ –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏
      self.routeToCurrentCampaignLogger('info', self.formatArgs(args), 'console.log');
    };

    console.warn = (...args: any[]) => {
      self.originalConsole!.warn(...args);
      self.routeToCurrentCampaignLogger('warn', self.formatArgs(args), 'console.warn');
    };

    console.error = (...args: any[]) => {
      self.originalConsole!.error(...args);
      self.routeToCurrentCampaignLogger('error', self.formatArgs(args), 'console.error');
    };

    console.info = (...args: any[]) => {
      self.originalConsole!.info(...args);
      self.routeToCurrentCampaignLogger('info', self.formatArgs(args), 'console.info');
    };

    console.debug = (...args: any[]) => {
      self.originalConsole!.debug(...args);
      self.routeToCurrentCampaignLogger('debug', self.formatArgs(args), 'console.debug');
    };

    this.consoleOverridden = true;
    console.log('‚úÖ Global console override with campaign routing enabled');
  }

  /**
   * ‚úÖ –†–æ—É—Ç–∏–Ω–≥ –ª–æ–≥–æ–≤ –≤ –ª–æ–≥–≥–µ—Ä —Ç–µ–∫—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏
   */
  private static routeToCurrentCampaignLogger(level: LogEntry['level'], message: string, source: string): void {
    // ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏
    const context = campaignContext.getStore();
    if (context) {
      const logger = this.loggers.get(context.campaignId);
      if (logger) {
        logger.log(level, message, source);
      }
    }
    // ‚úÖ –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–µ –ª–æ–≥–∏—Ä—É–µ–º –≤ —Ñ–∞–π–ª)
  }

  /**
   * ‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ console
   */
  private static formatArgs(args: any[]): string {
    return args.map(arg => {
      if (typeof arg === 'string') return arg;
      if (typeof arg === 'object') {
        try {
          return JSON.stringify(arg, null, 2);
        } catch {
          return '[Object]';
        }
      }
      return String(arg);
    }).join(' ');
  }

  /**
   * ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ console
   */
  static restoreConsole(): void {
    if (!this.consoleOverridden || !this.originalConsole) return;

    console.log = this.originalConsole.log;
    console.warn = this.originalConsole.warn;
    console.error = this.originalConsole.error;
    console.info = this.originalConsole.info;
    console.debug = this.originalConsole.debug;

    this.consoleOverridden = false;
    this.originalConsole = null;
    console.log('üìã Console methods restored to original');
  }

  /**
   * ‚úÖ –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
   */
  static async finalizeCampaign(campaignId: string): Promise<void> {
    const logger = this.loggers.get(campaignId);
    if (logger) {
      await logger.finalize();
      this.loggers.delete(campaignId);
      console.log(`üóëÔ∏è Campaign logger removed: ${campaignId}`);
    }
  }

  /**
   * ‚úÖ –ü–æ–ª–Ω—ã–π reset –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
   */
  static async resetAll(): Promise<void> {
    // –§–∏–Ω–∞–ª–∏–∑—É–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã
    const finalizePromises = Array.from(this.loggers.values()).map(logger => logger.finalize());
    await Promise.all(finalizePromises);
    
    // –û—á–∏—â–∞–µ–º Map
    this.loggers.clear();
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º console
    this.restoreConsole();
    
    console.log('üîÑ All campaign loggers reset');
  }

  /**
   * ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
   */
  static getActiveCampaigns(): string[] {
    return Array.from(this.loggers.keys());
  }
}

// ‚úÖ Export helper functions with campaign context support
export async function initializeCampaignLogging(campaignPath: string, campaignId?: string): Promise<void> {
  const campaignIdentifier = campaignId || path.basename(campaignPath);
  
  // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ console (–æ–¥–∏–Ω —Ä–∞–∑)
  CampaignLoggerManager.setupGlobalConsoleOverride();
  
  // ‚úÖ –°–æ–∑–¥–∞–µ–º/–ø–æ–ª—É—á–∞–µ–º –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–∞–º–ø–∞–Ω–∏–∏
  const logger = CampaignLoggerManager.getLoggerForCampaign(campaignIdentifier, campaignPath);
  await logger.initialize();
  
  // ‚úÖ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ async context
  const context: CampaignContext = {
    campaignId: campaignIdentifier,
    campaignPath
  };
  
  // ‚úÖ –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏
  await campaignContext.run(context, async () => {
    console.log(`üìã Campaign logging context established for: ${campaignIdentifier}`);
  });
}

export async function finalizeCampaignLogging(campaignId?: string): Promise<void> {
  if (campaignId) {
    await CampaignLoggerManager.finalizeCampaign(campaignId);
  } else {
    // ‚úÖ –ï—Å–ª–∏ campaignId –Ω–µ —É–∫–∞–∑–∞–Ω, —Ñ–∏–Ω–∞–ª–∏–∑—É–µ–º –≤—Å–µ
    await CampaignLoggerManager.resetAll();
  }
}

export function logToFile(level: 'info' | 'warn' | 'error' | 'debug', message: string, source?: string, trace_id?: string): void {
  const context = campaignContext.getStore();
  if (context) {
    const logger = CampaignLoggerManager.getLoggerForCampaign(context.campaignId, context.campaignPath);
    logger.log(level, message, source, trace_id);
  }
}

export function resetCampaignLogger(): void {
  CampaignLoggerManager.resetAll().catch(console.error);
}

/**
 * ‚úÖ –ù–û–í–û–ï: –í—ã–ø–æ–ª–Ω–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏
 */
export async function runInCampaignContext<T>(
  campaignId: string, 
  campaignPath: string, 
  fn: () => Promise<T>
): Promise<T> {
  const context: CampaignContext = { campaignId, campaignPath };
  return campaignContext.run(context, fn);
}

/**
 * ‚úÖ –ù–û–í–û–ï: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∫–∞–º–ø–∞–Ω–∏–∏
 */
export function getCurrentCampaignContext(): CampaignContext | undefined {
  return campaignContext.getStore();
}

/**
 * ‚úÖ –ù–û–í–û–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å campaign context –∏–∑ OpenAI SDK context –¥–ª—è specialist-–∞–≥–µ–Ω—Ç–æ–≤
 */
export function restoreCampaignContext(openAiContext: any): { campaignId: string | null, campaignPath: string | null } {
  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º campaign info –∏–∑ OpenAI SDK context
    let campaignId: string | null = null;
    let campaignPath: string | null = null;

    if (openAiContext?.campaign?.id) {
      campaignId = openAiContext.campaign.id;
      campaignPath = openAiContext.campaign.path;
    } else if (openAiContext?.context?.campaign?.id) {
      campaignId = openAiContext.context.campaign.id;
      campaignPath = openAiContext.context.campaign.path;
    }

    if (campaignId && campaignPath) {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º AsyncLocalStorage context
      const context: CampaignContext = { campaignId, campaignPath };
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∫–∞–º–ø–∞–Ω–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
      campaignContext.enterWith(context);
      
      console.log(`üîß Campaign context restored for specialist: ${campaignId}`);
      return { campaignId, campaignPath };
    } else {
      console.warn('‚ö†Ô∏è Could not extract campaign info from OpenAI SDK context');
      return { campaignId: null, campaignPath: null };
    }
  } catch (error) {
    console.error('‚ùå Failed to restore campaign context:', error);
    return { campaignId: null, campaignPath: null };
  }
}

/**
 * ‚úÖ –ù–û–í–û–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ campaign context –¥–ª—è specialist tools
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ specialist tool –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 */
export function autoRestoreCampaignLogging(openAiContext: any, toolName: string): void {
  try {
    const { campaignId, campaignPath } = restoreCampaignContext(openAiContext);
    
    if (campaignId && campaignPath) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –ª–æ–≥–≥–µ—Ä –¥–ª—è —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏
      const activeCampaigns = CampaignLoggerManager.getActiveCampaigns();
      if (!activeCampaigns.includes(campaignId)) {
        console.log(`üîß Creating missing campaign logger for: ${campaignId}`);
        
        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const logger = CampaignLoggerManager.getLoggerForCampaign(campaignId, campaignPath);
        logger.initialize().catch(error => {
          console.error('‚ùå Failed to initialize campaign logger:', error);
        });
      }
      
      // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ tool execution
      logToFile('info', `üîß ${toolName} started`, 'Specialist', undefined);
      console.log(`üìã Campaign logging restored for ${toolName} in campaign: ${campaignId}`);
    } else {
      console.warn(`‚ö†Ô∏è ${toolName}: No campaign context available - logs will not be saved`);
    }
  } catch (error) {
    console.error(`‚ùå ${toolName}: Failed to restore campaign logging:`, error);
  }
}

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const campaignLogger = {
  log: logToFile,
  getActiveCampaigns: () => CampaignLoggerManager.getActiveCampaigns()
};

export default campaignLogger; 