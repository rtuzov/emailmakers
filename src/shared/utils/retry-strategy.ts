/**
 * üîÑ UNIFIED RETRY STRATEGY
 * 
 * –ï–¥–∏–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è retry —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 */

import { getLogger } from '../logger';

const logger = getLogger({ component: 'retry-strategy' });

/**
 * –û–ø—Ü–∏–∏ –¥–ª—è retry —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
 */
export interface RetryOptions {
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ */
  maxAttempts?: number;
  /** –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
  baseDelay?: number;
  /** –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö */
  maxDelay?: number;
  /** –ú–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff */
  backoffMultiplier?: number;
  /** Jitter –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–∫–∏ */
  jitter?: boolean;
  /** –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É */
  shouldRetry?: (error: any, attempt: number) => boolean;
  /** Callback –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ø—ã—Ç–æ–∫ */
  onRetry?: (error: any, attempt: number, delay: number) => void;
}

/**
 * –†–µ–∑—É–ª—å—Ç–∞—Ç retry –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
export interface RetryResult<T> {
  success: boolean;
  result?: T;
  error?: any;
  attempts: number;
  totalTime: number;
}

/**
 * –¢–∏–ø—ã –æ—à–∏–±–æ–∫ –¥–ª—è retry –ª–æ–≥–∏–∫–∏
 */
export enum RetryableErrorType {
  NETWORK = 'network',
  RATE_LIMIT = 'rate_limit',
  TIMEOUT = 'timeout',
  SERVER_ERROR = 'server_error',
  OPENAI_API = 'openai_api',
  FIGMA_API = 'figma_api',
  TEMPORARY = 'temporary'
}

/**
 * üöÄ UNIFIED RETRY STRATEGY CLASS
 */
export class UnifiedRetryStrategy {
  private defaultOptions: Required<RetryOptions> = {
    maxAttempts: 3,
    baseDelay: 1000,
    maxDelay: 30000,
    backoffMultiplier: 2,
    jitter: true,
    shouldRetry: this.defaultShouldRetry.bind(this),
    onRetry: this.defaultOnRetry.bind(this)
  };

  constructor(private options: Partial<RetryOptions> = {}) {
    this.options = { ...this.defaultOptions, ...options };
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å retry –ª–æ–≥–∏–∫–æ–π
   */
  async execute<T>(
    operation: () => Promise<T>,
    options: Partial<RetryOptions> = {}
  ): Promise<T> {
    const config = { ...this.options, ...options } as Required<RetryOptions>;
    const startTime = Date.now();
    let lastError: any;

    logger.info('üîÑ Starting retry operation', {
      maxAttempts: config.maxAttempts,
      baseDelay: config.baseDelay
    });

    for (let attempt = 1; attempt <= config.maxAttempts; attempt++) {
      try {
        const result = await operation();
        
        const totalTime = Date.now() - startTime;
        logger.info('‚úÖ Operation succeeded', {
          attempt,
          totalTime,
          success: true
        });

        return result;

      } catch (error) {
        lastError = error;
        
        logger.warn('‚ùå Operation failed', {
          attempt,
          maxAttempts: config.maxAttempts,
          error: error instanceof Error ? error.message : error
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É
        if (attempt === config.maxAttempts || !config.shouldRetry(error, attempt)) {
          break;
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        const delay = this.calculateDelay(attempt, config);
        
        // –í—ã–∑—ã–≤–∞–µ–º callback
        config.onRetry(error, attempt, delay);

        // –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
        await this.delay(delay);
      }
    }

    const totalTime = Date.now() - startTime;
    logger.error('üí• All retry attempts failed', {
      attempts: config.maxAttempts,
      totalTime,
      finalError: lastError instanceof Error ? lastError.message : lastError
    });

    throw lastError;
  }

  /**
   * –í—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
   */
  async executeWithResult<T>(
    operation: () => Promise<T>,
    options: Partial<RetryOptions> = {}
  ): Promise<RetryResult<T>> {
    const startTime = Date.now();
    let attempts = 0;

    try {
      const result = await this.execute(operation, {
        ...options,
        onRetry: (error, attempt, delay) => {
          attempts = attempt;
          options.onRetry?.(error, attempt, delay);
        }
      });

      return {
        success: true,
        result,
        attempts: attempts || 1,
        totalTime: Date.now() - startTime
      };

    } catch (error) {
      return {
        success: false,
        error,
        attempts: attempts || 1,
        totalTime: Date.now() - startTime
      };
    }
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  static forOperation(type: RetryableErrorType): UnifiedRetryStrategy {
    const configs = {
      [RetryableErrorType.NETWORK]: {
        maxAttempts: 3,
        baseDelay: 1000,
        maxDelay: 10000
      },
      [RetryableErrorType.RATE_LIMIT]: {
        maxAttempts: 5,
        baseDelay: 2000,
        maxDelay: 60000,
        backoffMultiplier: 3
      },
      [RetryableErrorType.TIMEOUT]: {
        maxAttempts: 2,
        baseDelay: 500,
        maxDelay: 5000
      },
      [RetryableErrorType.SERVER_ERROR]: {
        maxAttempts: 4,
        baseDelay: 1500,
        maxDelay: 20000
      },
      [RetryableErrorType.OPENAI_API]: {
        maxAttempts: 3,
        baseDelay: 2000,
        maxDelay: 30000,
        shouldRetry: (error: any) => {
          // Retry –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö OpenAI –æ—à–∏–±–æ–∫
          if (error?.status === 429) return true; // Rate limit
          if (error?.status >= 500) return true; // Server errors
          if (error?.code === 'ECONNRESET') return true; // Network issues
          return false;
        }
      },
      [RetryableErrorType.FIGMA_API]: {
        maxAttempts: 3,
        baseDelay: 1000,
        maxDelay: 15000,
        shouldRetry: (error: any) => {
          // Retry –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö Figma –æ—à–∏–±–æ–∫
          if (error?.status === 429) return true; // Rate limit
          if (error?.status >= 500) return true; // Server errors
          return false;
        }
      },
      [RetryableErrorType.TEMPORARY]: {
        maxAttempts: 2,
        baseDelay: 500,
        maxDelay: 5000
      }
    };

    return new UnifiedRetryStrategy(configs[type]);
  }

  /**
   * –í—ã—á–∏—Å–ª—è–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ backoff
   */
  private calculateDelay(attempt: number, config: Required<RetryOptions>): number {
    let delay = config.baseDelay * Math.pow(config.backoffMultiplier, attempt - 1);
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É
    delay = Math.min(delay, config.maxDelay);
    
    // –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏
    if (config.jitter) {
      delay = delay * (0.5 + Math.random() * 0.5);
    }
    
    return Math.round(delay);
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private delay(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è retry
   */
  private defaultShouldRetry(error: any, attempt: number): boolean {
    // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if (error?.status === 400 || error?.status === 401 || error?.status === 403) {
      return false;
    }

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
    if (error?.code === 'ECONNRESET' || 
        error?.code === 'ENOTFOUND' || 
        error?.code === 'ETIMEDOUT') {
      return true;
    }

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è server errors
    if (error?.status >= 500) {
      return true;
    }

    // –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è rate limits
    if (error?.status === 429) {
      return true;
    }

    return false;
  }

  /**
   * –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π callback –¥–ª—è retry
   */
  private defaultOnRetry(error: any, attempt: number, delay: number): void {
    logger.warn('üîÑ Retrying operation', {
      attempt,
      delay,
      errorType: error?.constructor?.name || 'Unknown',
      errorMessage: error instanceof Error ? error.message : String(error)
    });
  }
}

/**
 * üéØ CONVENIENCE FUNCTIONS
 */

/**
 * –ë—ã—Å—Ç—Ä—ã–π retry –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function withRetry<T>(
  operation: () => Promise<T>,
  options: Partial<RetryOptions> = {}
): Promise<T> {
  const strategy = new UnifiedRetryStrategy(options);
  return strategy.execute(operation);
}

/**
 * Retry –¥–ª—è OpenAI –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function withOpenAIRetry<T>(
  operation: () => Promise<T>
): Promise<T> {
  const strategy = UnifiedRetryStrategy.forOperation(RetryableErrorType.OPENAI_API);
  return strategy.execute(operation);
}

/**
 * Retry –¥–ª—è Figma –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function withFigmaRetry<T>(
  operation: () => Promise<T>
): Promise<T> {
  const strategy = UnifiedRetryStrategy.forOperation(RetryableErrorType.FIGMA_API);
  return strategy.execute(operation);
}

/**
 * Retry –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 */
export async function withNetworkRetry<T>(
  operation: () => Promise<T>
): Promise<T> {
  const strategy = UnifiedRetryStrategy.forOperation(RetryableErrorType.NETWORK);
  return strategy.execute(operation);
}

/**
 * üìä METRICS COLLECTION
 */
export class RetryMetrics {
  private static metrics = new Map<string, {
    totalAttempts: number;
    totalSuccesses: number;
    totalFailures: number;
    averageAttempts: number;
    averageTime: number;
  }>();

  static recordResult<T>(operationName: string, result: RetryResult<T>): void {
    const existing = this.metrics.get(operationName) || {
      totalAttempts: 0,
      totalSuccesses: 0,
      totalFailures: 0,
      averageAttempts: 0,
      averageTime: 0
    };

    existing.totalAttempts += result.attempts;
    if (result.success) {
      existing.totalSuccesses++;
    } else {
      existing.totalFailures++;
    }

    const totalOperations = existing.totalSuccesses + existing.totalFailures;
    existing.averageAttempts = existing.totalAttempts / totalOperations;
    existing.averageTime = (existing.averageTime * (totalOperations - 1) + result.totalTime) / totalOperations;

    this.metrics.set(operationName, existing);
  }

  static getMetrics(): Record<string, any> {
    return Object.fromEntries(this.metrics.entries());
  }

  static reset(): void {
    this.metrics.clear();
  }
}

export default UnifiedRetryStrategy; 