/**
 * üß™ –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ OPENAI SDK HANDOFFS
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≥–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ:
 * - –ë–µ–∑ transfer tools
 * - –ë–µ–∑ finalization tools
 * - –° –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Agent.create() –∏ handoffs
 * - –° –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º context passing
 */

const API_BASE = 'http://localhost:3000';

async function testFixedSDKSystem() {
  console.log('\\nüß™ === –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô SDK –°–ò–°–¢–ï–ú–´ ===');
  console.log('üîß –ü—Ä–æ–≤–µ—Ä–∫–∞: OpenAI Agents SDK handoffs –±–µ–∑ transfer tools');
  console.log(`‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: ${new Date().toISOString()}\\n`);

  try {
    // 1. Health check
    console.log('üîç 1. Health check API...');
    const healthResponse = await fetch(`${API_BASE}/api/agent/run-improved`, {
      method: 'GET'
    });
    
    if (!healthResponse.ok) {
      throw new Error(`Health check failed: ${healthResponse.status}`);
    }
    
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check passed:', healthData.status);
    console.log('üìä Available agents:', Object.keys(healthData.agents || {}).length);

    // 2. Test simple request with fixed system
    console.log('\\nüöÄ 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞...');
    const testPayload = {
      task_type: 'generate_campaign',
      input: {
        topic: '–ö–æ—Ä–æ—Ç–∫–∞—è –ø–æ–µ–∑–¥–∫–∞ –≤ –ü–∞—Ä–∏–∂ –∑–∏–º–æ–π - —Ç–µ—Å—Ç SDK handoffs'
      }
    };

    console.log('üì§ Payload:', JSON.stringify(testPayload, null, 2));

    const startTime = Date.now();
    const response = await fetch(`${API_BASE}/api/agent/run-improved`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testPayload)
    });

    const duration = Date.now() - startTime;
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${duration}ms`);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`API request failed: ${response.status} - ${errorText}`);
    }

    const result = await response.json();
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', result.status || 'unknown');

    // 3. Analyze result for SDK handoffs
    console.log('\\nüîç 3. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    
    if (result.state) {
      console.log('üìä State –¥–æ—Å—Ç—É–ø–µ–Ω:', typeof result.state);
      
      // Check for handoff evidence
      if (result.state.specialist || result.state.current_agent || result.state.handoffs) {
        console.log('‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ handoffs –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã');
      }
      
      // Check workflow progression
      if (result.state.workflow_phase || result.state.completed_phases) {
        console.log('‚úÖ Workflow –ø—Ä–æ–≥—Ä–µ—Å—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞');
      }
    }

    // 4. Check created files
    console.log('\\nüìÅ 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...');
    
    const campaignsResponse = await fetch(`${API_BASE}/api/campaigns/list`);
    if (campaignsResponse.ok) {
      const campaigns = await campaignsResponse.json();
      if (campaigns.campaigns && campaigns.campaigns.length > 0) {
        const latestCampaign = campaigns.campaigns[campaigns.campaigns.length - 1];
        console.log('‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–∞–º–ø–∞–Ω–∏—è:', latestCampaign.id || 'unknown');
        console.log('üìù –°—Ç–∞—Ç—É—Å:', latestCampaign.status || 'unknown');
      }
    }

    // 5. Final assessment
    console.log('\\nüìã === –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ê ===');
    console.log('‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç');
    console.log('‚úÖ Agents system –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('‚úÖ Handoffs —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞');
    console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}ms`);
    console.log('üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å OpenAI SDK handoffs');

    return {
      success: true,
      duration,
      result,
      timestamp: new Date().toISOString()
    };

  } catch (error) {
    console.error('\\n‚ùå === –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê ===');
    console.error('‚ùå –ü—Ä–∏—á–∏–Ω–∞:', error.message);
    console.error('üìÖ –í—Ä–µ–º—è:', new Date().toISOString());
    
    return {
      success: false,
      error: error.message,
      timestamp: new Date().toISOString()
    };
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testFixedSDKSystem()
  .then(result => {
    if (result.success) {
      console.log('\\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ OpenAI SDK handoffs —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } else {
      console.log('\\nüí• –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù');
      console.log('‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞');
    }
  })
  .catch(console.error); 