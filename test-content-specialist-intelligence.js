/**
 * üß™ –¢–ï–°–¢–û–í–´–ô –°–ö–†–ò–ü–¢: Content Specialist Intelligence Functions
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å pricing intelligence –∏ date intelligence 
 * –≤ OpenAI —Ç—Ä–µ–π—Å–∏–Ω–≥–µ –∏ –ª–æ–≥–∞—Ö
 */

import { contentSpecialistAgentWrapper } from './src/agent/specialists/content-specialist-agent.js';

async function testPricingIntelligence() {
  console.log('\nüî• –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï PRICING INTELLIGENCE');
  console.log('=' .repeat(50));
  
  try {
    const pricingInput = {
      task: 'pricing_analysis',
      origin: 'MOW',
      destination: 'DXB', 
      date_range: '2025-03-15 to 2025-03-22',
      analysis_depth: 'deep',
      passenger_count: 2
    };
    
    console.log('üìä Input –¥–∞–Ω–Ω—ã–µ:', pricingInput);
    
    const result = await contentSpecialistAgentWrapper.executeTask(pricingInput);
    
    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(JSON.stringify(result, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å tool execution
    if (result.tool_data && result.tool_data.tool_execution === 'PRICING_INTELLIGENCE_SUCCESS') {
      console.log('\nüéâ SUCCESS: Pricing Intelligence tool –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –≤–∏–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö!');
    } else {
      console.log('\n‚ùå WARNING: Pricing Intelligence tool –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö');
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Pricing Intelligence:', error);
  }
}

async function testDateIntelligence() {
  console.log('\nüìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DATE INTELLIGENCE');
  console.log('=' .repeat(50));
  
  try {
    const dateInput = {
      task: 'date_intelligence',
      campaign_context: {
        topic: '–í–µ—Å–µ–Ω–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã –≤ –û–ê–≠',
        urgency: 'seasonal',
        campaign_type: 'hot_deals'
      },
      months_ahead: 2,
      search_window: 10
    };
    
    console.log('üìä Input –¥–∞–Ω–Ω—ã–µ:', dateInput);
    
    const result = await contentSpecialistAgentWrapper.executeTask(dateInput);
    
    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(JSON.stringify(result, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å tool execution
    if (result.tool_data && result.tool_data.tool_execution === 'DATE_INTELLIGENCE_SUCCESS') {
      console.log('\nüéâ SUCCESS: Date Intelligence tool –≤—ã–ø–æ–ª–Ω–µ–Ω –∏ –≤–∏–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö!');
    } else {
      console.log('\n‚ùå WARNING: Date Intelligence tool –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö');
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Date Intelligence:', error);
  }
}

async function testCombinedIntelligence() {
  console.log('\nüî•üìÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–û–ì–û –ê–ù–ê–õ–ò–ó–ê');
  console.log('=' .repeat(50));
  
  try {
    const combinedInput = {
      task: 'content_generation',
      content_type: 'complete_campaign',
      topic: '–ì–æ—Ä—è—â–∏–µ —Ç—É—Ä—ã –≤ –¢—É—Ä—Ü–∏—é',
      tone: 'urgent',
      target_audience: 'budget travelers',
      // –ê–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏ pricing, –∏ date intelligence tools
      analysis_requirements: 'Use both pricing and date intelligence for optimization'
    };
    
    console.log('üìä Input –¥–∞–Ω–Ω—ã–µ:', combinedInput);
    
    const result = await contentSpecialistAgentWrapper.executeTask(combinedInput);
    
    console.log('\n‚úÖ –†–ï–ó–£–õ–¨–¢–ê–¢:');
    console.log(JSON.stringify(result, null, 2));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö tools
    const toolsUsed = result.execution_metadata?.tools_used || 0;
    console.log(`\nüîß –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ tools: ${toolsUsed}`);
    
    if (toolsUsed > 0) {
      console.log('\nüéâ SUCCESS: Tools —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –∞–≥–µ–Ω—Ç–æ–º!');
    } else {
      console.log('\n‚ùå WARNING: –ê–≥–µ–Ω—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª tools');
    }
    
  } catch (error) {
    console.error('\n‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:', error);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø CONTENT SPECIALIST INTELLIGENCE FUNCTIONS');
  console.log('=' .repeat(70));
  
  console.log('\nüí° –≠—Ç–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä—è—é—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–π –≤ OpenAI —Ç—Ä–µ–π—Å–∏–Ω–≥–µ');
  console.log('üìä –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ª–æ–≥–∏ —Å –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏ [PRICING INTELLIGENCE] –∏ [DATE INTELLIGENCE]');
  console.log('üîç –í OpenAI Dashboard –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤–∏–¥–Ω—ã tool calls –∏ –∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
  
  try {
    await testPricingIntelligence();
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    await testDateIntelligence();
    await new Promise(resolve => setTimeout(resolve, 2000)); // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    
    await testCombinedIntelligence();
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!');
    console.log('üëÄ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OpenAI Dashboard –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–µ–π—Å–∏–Ω–≥–∞');
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runAllTests().catch(console.error); 