#!/usr/bin/env node

/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ê–ì–ï–ù–¢–ê
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏, AI-driven MJML, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
 */

const fs = require('fs');
const path = require('path');

// Test configuration
const API_BASE_URL = 'http://localhost:3000';
const TEST_OUTPUT_DIR = './test-outputs';

console.log('\nüîß –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –ê–ì–ï–ù–¢–ê');
console.log('==================================================');
console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ + AI MJML + —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n');

// –°–æ–∑–¥–∞–µ–º –≤—ã—Ö–æ–¥–Ω—É—é –ø–∞–ø–∫—É
if (!fs.existsSync(TEST_OUTPUT_DIR)) {
  fs.mkdirSync(TEST_OUTPUT_DIR, { recursive: true });
}

// –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
const testRequest = {
  task_type: 'generate_content',
  input: {
    brief: '–°–æ–∑–¥–∞–π –∫—Ä–∞—Å–∏–≤—ã–π email –¥–ª—è –∑–∏–º–Ω–∏—Ö –∫–∞–Ω–∏–∫—É–ª –≤ –Ø–ø–æ–Ω–∏–∏ —Å –≥–æ—Ä—è—á–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ —Å–∞–∫—É—Ä–æ–π. –í–∫–ª—é—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö –¥–ª—è —Å–µ–º–µ–π —Å –¥–µ—Ç—å–º–∏.',
    tone: '–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
    target_audience: '—Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏',
    campaign_type: 'seasonal',
    language: 'ru'
  },
  context: {
    urgency_level: 'medium',
    test_mode: true,
    trace_validation: true
  }
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
async function validateCampaignFolder() {
  console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏...');
  
  try {
    const mailsDirs = fs.readdirSync('mails/');
    const latestDir = mailsDirs
      .filter(dir => dir.includes('japan') || dir.includes('winter'))
      .sort((a, b) => {
        const statA = fs.statSync(path.join('mails', a));
        const statB = fs.statSync(path.join('mails', b));
        return statB.mtime.getTime() - statA.mtime.getTime();
      })[0];
    
    if (latestDir) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–∞–ø–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏: ${latestDir}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
      const campaignPath = path.join('mails', latestDir);
      const files = fs.readdirSync(campaignPath);
      
      console.log('üìÇ –§–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏:');
      files.forEach(file => {
        const filePath = path.join(campaignPath, file);
        const stats = fs.statSync(filePath);
        console.log(`  - ${file} (${stats.size} –±–∞–π—Ç)`);
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–π–ª—ã
      const hasHtml = files.some(f => f.includes('.html'));
      const hasMjml = files.some(f => f.includes('.mjml'));
      const hasMetadata = files.some(f => f.includes('metadata.json'));
      
      console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤:`);
      console.log(`  HTML —Ñ–∞–π–ª—ã: ${hasHtml ? '‚úÖ' : '‚ùå'}`);
      console.log(`  MJML —Ñ–∞–π–ª—ã: ${hasMjml ? '‚úÖ' : '‚ùå'}`);
      console.log(`  –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: ${hasMetadata ? '‚úÖ' : '‚ùå'}`);
      
      if (hasHtml && hasMjml) {
        console.log('üéâ –í–°–ï –§–ê–ô–õ–´ –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!');
        return true;
      } else {
        console.log('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
        return false;
      }
    } else {
      console.log('‚ùå –ü–∞–ø–∫–∞ –∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–∞–ø–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏:', error);
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
async function runTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...');
  
  try {
    const response = await fetch(`${API_BASE_URL}/api/agent/run-improved`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(testRequest)
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const result = await response.json();
    const timestamp = Date.now();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const outputFile = path.join(TEST_OUTPUT_DIR, `final_test_fixed_${timestamp}.json`);
    fs.writeFileSync(outputFile, JSON.stringify(result, null, 2));
    
    console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
    console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${JSON.stringify(result).length} —Å–∏–º–≤–æ–ª–æ–≤`);
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: ${outputFile}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    const responseText = JSON.stringify(result);
    
    console.log('\nüîç –í–ê–õ–ò–î–ê–¶–ò–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô:');
    
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞–ø–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏
    const folderCreated = responseText.includes('create_campaign_folder') || 
                         responseText.includes('Campaign folder created') ||
                         responseText.includes('üìÅ');
    console.log(`1. –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –∫–∞–º–ø–∞–Ω–∏–∏: ${folderCreated ? '‚úÖ' : '‚ùå'}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ consolidated content generator
    const consolidatedContent = responseText.includes('content_generator') && 
                               !responseText.includes('simpleContentGenerator');
    console.log(`2. Consolidated Content Generator: ${consolidatedContent ? '‚úÖ' : '‚ùå'}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ AI-driven MJML
    const aiMjml = responseText.includes('generateAIDrivenMjmlTemplate') ||
                   responseText.includes('AI-driven MJML') ||
                   responseText.includes('AI-generated MJML');
    console.log(`3. AI-driven MJML Generation: ${aiMjml ? '‚úÖ' : '‚ùå'}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const imagePlanning = responseText.includes('figma_asset_selector') ||
                         responseText.includes('image_plan') ||
                         responseText.includes('Planning images');
    console.log(`4. Image Planning: ${imagePlanning ? '‚úÖ' : '‚ùå'}`);
    
    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const fileSaving = responseText.includes('saveHtml') ||
                      responseText.includes('saveMjml') ||
                      responseText.includes('Saved HTML');
    console.log(`5. File Saving: ${fileSaving ? '‚úÖ' : '‚ùå'}`);
    
    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–Ω–æ–≥–æ workflow
    const workflowComplete = responseText.includes('success') &&
                            responseText.includes('campaign') &&
                            responseText.includes('email');
    console.log(`6. Workflow Complete: ${workflowComplete ? '‚úÖ' : '‚ùå'}`);
    
    // –ü–æ–¥–æ–∂–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä–∏–º —Ñ–∞–π–ª—ã
    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const filesCreated = await validateCampaignFolder();
    console.log(`7. Files Actually Created: ${filesCreated ? '‚úÖ' : '‚ùå'}`);
    
    // –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç
    const validations = [folderCreated, consolidatedContent, aiMjml, imagePlanning, fileSaving, workflowComplete, filesCreated];
    const passed = validations.filter(v => v).length;
    const total = validations.length;
    
    console.log(`\nüéØ –ò–¢–û–ì–û–í–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${passed}/${total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ (${Math.round(passed/total*100)}%)`);
    
    if (passed === total) {
      console.log('üéâ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢ –ò–î–ï–ê–õ–¨–ù–û!');
    } else if (passed >= total * 0.8) {
      console.log('‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–±–æ—Ç–∞—é—Ç, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã');
    } else {
      console.log('‚ö†Ô∏è –ï—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  }
}

// –ó–∞–ø—É—Å–∫
runTest().catch(console.error); 