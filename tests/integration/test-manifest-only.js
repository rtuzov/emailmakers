const { generateAssetManifest } = require('./src/agent/tools/asset-preparation/asset-manifest-generator.ts');

console.log('\nüìã === TESTING ASSET MANIFEST GENERATOR ONLY ===');
console.log(`üìÖ Started at: ${new Date().toISOString()}`);

async function testAssetManifestGenerator() {
  try {
    // Mock content context for Spain campaign
    const contentContext = {
      generated_content: {
        subject: '–û—Ç–∫—Ä–æ–π—Ç–µ –º–∞–≥–∏—é –ò—Å–ø–∞–Ω–∏–∏ —ç—Ç–æ–π –≤–µ—Å–Ω–æ–π',
        preheader: '–ú–∞–¥—Ä–∏–¥, –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –°–µ–≤–∏–ª—å—è –∂–¥—É—Ç –≤–∞—Å',
        body: '–ü–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ì–∞—É–¥–∏, –Ω–∞—Å–ª–∞–¥–∏—Ç–µ—Å—å —Ñ–ª–∞–º–µ–Ω–∫–æ –≤ –°–µ–≤–∏–ª—å–µ –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Å–æ–∫—Ä–æ–≤–∏—â–∞ –ü—Ä–∞–¥–æ –≤ –ú–∞–¥—Ä–∏–¥–µ. –í–µ—Å–µ–Ω–Ω—è—è –ò—Å–ø–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤–∞—Å –≤ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º–æ–µ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ.',
        dates: {
          destination: '–ò—Å–ø–∞–Ω–∏—è (–ú–∞–¥—Ä–∏–¥, –ë–∞—Ä—Å–µ–ª–æ–Ω–∞, –°–µ–≤–∏–ª—å—è)',
          season: '–≤–µ—Å–Ω–∞',
          seasonal_factors: '—Ç–µ–ø–ª–∞—è –ø–æ–≥–æ–¥–∞, —Ñ–µ—Å—Ç–∏–≤–∞–ª–∏, —Ü–≤–µ—Ç–µ–Ω–∏–µ'
        },
        context: {
          destination: '–ò—Å–ø–∞–Ω–∏—è',
          emotional_triggers: '–∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞, –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ñ–ª–∞–º–µ–Ω–∫–æ, –≥–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è, –∏—Å—Ç–æ—Ä–∏—è'
        },
        pricing: {
          best_price: 60000,
          currency: 'RUB',
          route: '–ú–æ—Å–∫–≤–∞-–ú–∞–¥—Ä–∏–¥'
        }
      },
      asset_requirements: {
        hero_image: true,
        content_images: 3,
        icons: 2,
        logos: true
      },
      campaign_type: 'travel_promotion',
      language: 'ru',
      target_audience: 'cultural_tourists_couples_30_50'
    };
    
    const assetSources = [
      {
        type: 'local',
        path: 'figma-all-pages-1750993353363',
        priority: 'primary'
      },
      {
        type: 'url',
        path: 'external_fallback',
        priority: 'fallback'
      }
    ];
    
    const campaignPath = 'campaigns/test_spain_campaign';
    
    console.log('üé® Testing AI-powered asset manifest generation...');
    
    const result = await generateAssetManifest.execute({
      campaignId: 'spain_test_campaign',
      campaignPath: campaignPath,
      contentContext: contentContext,
      assetSources: assetSources,
      options: {
        analyzeContentContext: true,
        collectFromSources: true,
        generateUsageInstructions: true,
        includePerformanceMetrics: true
      },
      context: {
        campaignId: 'spain_test_campaign',
        language: 'ru',
        campaign_type: 'travel_promotion'
      },
      trace_id: `refactored_test_${Date.now()}`
    });
    
    console.log('‚úÖ Asset manifest generation completed');
    console.log('üìä Result:', result);
    
    // Check if files were created
    const fs = require('fs');
    const path = require('path');
    
    const manifestFile = path.join(campaignPath, 'assets', 'manifests', 'asset-manifest.json');
    const instructionsFile = path.join(campaignPath, 'assets', 'manifests', 'usage-instructions.json');
    
    if (fs.existsSync(manifestFile)) {
      console.log(`‚úÖ Asset manifest file created: ${manifestFile}`);
      const manifestContent = JSON.parse(fs.readFileSync(manifestFile, 'utf8'));
      console.log(`üìä Manifest contains: ${manifestContent.assetManifest?.images?.length || 0} images, ${manifestContent.assetManifest?.icons?.length || 0} icons`);
    } else {
      console.log('‚ö†Ô∏è Asset manifest file not found');
    }
    
    if (fs.existsSync(instructionsFile)) {
      console.log(`‚úÖ Usage instructions file created: ${instructionsFile}`);
      const instructionsContent = JSON.parse(fs.readFileSync(instructionsFile, 'utf8'));
      console.log(`üìù Generated ${instructionsContent.length} usage instructions`);
    } else {
      console.log('‚ö†Ô∏è Usage instructions file not found');
    }
    
    console.log('\nüéâ === TEST COMPLETED SUCCESSFULLY ===');
    console.log('‚úÖ Refactored asset manifest generator working correctly');
    console.log('üîß System properly modularized with AI-powered asset selection');
    
  } catch (error) {
    console.error('\n‚ùå === TEST FAILED ===');
    console.error('Error:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

testAssetManifestGenerator(); 