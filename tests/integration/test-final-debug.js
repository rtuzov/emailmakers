const http = require('http');
const fs = require('fs').promises;
const path = require('path');

// –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–∞–π–ª–æ–≤
const testData = {
  task_type: "generate_content",
  input: {
    brief: "–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤",
    tone: "–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π",
    target_audience: "—Ç–µ—Å—Ç–æ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è",
    brand_guidelines: {
      style: "–ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π",
      language: "ru",
      content_type: "promotional"
    }
  },
  context: {
    figma_url: "https://www.figma.com/design/gJBHVJSHhOJdVLcXQEELpy/Email-Makers?node-id=4-9&t=uPmvpJMJLXPzfNVK-1",
    user_id: "debug_user"
  }
};

const postData = JSON.stringify(testData);
const options = {
  hostname: 'localhost',
  port: 3000,
  path: '/api/agent/run-improved',
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
    'Content-Length': Buffer.byteLength(postData)
  }
};

console.log('üîç Final Debug Test: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤');
console.log('üìù Brief:', testData.input.brief);
console.log('üìÖ –í—Ä–µ–º—è:', new Date().toLocaleString());
console.log('==========================================');

const startTime = Date.now();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
async function checkFilesInFolder(folderPath) {
  try {
    const files = await fs.readdir(folderPath);
    console.log(`üìÅ –§–∞–π–ª—ã –≤ ${folderPath}:`, files);
    
    const htmlPath = path.join(folderPath, 'email.html');
    const mjmlPath = path.join(folderPath, 'email.mjml');
    
    try {
      await fs.access(htmlPath);
      console.log(`‚úÖ email.html –Ω–∞–π–¥–µ–Ω –≤ ${folderPath}`);
      
      const htmlContent = await fs.readFile(htmlPath, 'utf8');
      console.log(`üìÑ –†–∞–∑–º–µ—Ä HTML: ${htmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`üìÑ –ù–∞—á–∞–ª–æ HTML: ${htmlContent.substring(0, 100)}...`);
    } catch {
      console.log(`‚ùå email.html –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ ${folderPath}`);
    }
    
    try {
      await fs.access(mjmlPath);
      console.log(`‚úÖ email.mjml –Ω–∞–π–¥–µ–Ω –≤ ${folderPath}`);
      
      const mjmlContent = await fs.readFile(mjmlPath, 'utf8');
      console.log(`üìÑ –†–∞–∑–º–µ—Ä MJML: ${mjmlContent.length} —Å–∏–º–≤–æ–ª–æ–≤`);
      console.log(`üìÑ –ù–∞—á–∞–ª–æ MJML: ${mjmlContent.substring(0, 100)}...`);
    } catch {
      console.log(`‚ùå email.mjml –û–¢–°–£–¢–°–¢–í–£–ï–¢ –≤ ${folderPath}`);
    }
    
    return { hasHtml: files.includes('email.html'), hasMjml: files.includes('email.mjml') };
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–ø–∫–∏ ${folderPath}:`, error.message);
    return { hasHtml: false, hasMjml: false };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π
async function findNewCampaigns() {
  try {
    const mailsPath = path.join(process.cwd(), 'mails');
    const folders = await fs.readdir(mailsPath);
    
    const stats = await Promise.all(
      folders.map(async (folder) => {
        if (folder === 'shared-assets') return null;
        
        const folderPath = path.join(mailsPath, folder);
        const stat = await fs.stat(folderPath);
        
        return {
          name: folder,
          path: folderPath,
          created: stat.birthtime,
          modified: stat.mtime
        };
      })
    );
    
    return stats.filter(Boolean).sort((a, b) => b.created - a.created);
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–∞–º–ø–∞–Ω–∏–π:`, error.message);
    return [];
  }
}

const req = http.request(options, (res) => {
  console.log(`üìä –°—Ç–∞—Ç—É—Å: ${res.statusCode}`);
  
  let data = '';
  res.on('data', (chunk) => {
    data += chunk;
  });
  
  res.on('end', async () => {
    const endTime = Date.now();
    console.log('==========================================');
    console.log(`üì¶ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${endTime - startTime}ms`);
    console.log(`üìä –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: ${data.length} –±–∞–π—Ç`);
    
    try {
      const result = JSON.parse(data);
      console.log('‚úÖ JSON –ø–∞—Ä—Å–∏–Ω–≥ —É—Å–ø–µ—à–µ–Ω');
      console.log('üèÅ –°—Ç–∞—Ç—É—Å:', result.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
      console.log('üÜî Trace ID:', result.traceId || '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
      
      if (result.error) {
        console.log('‚ùå –û—à–∏–±–∫–∞:', result.error);
        return;
      }
      
      // –ò—â–µ–º –Ω–æ–≤—ã–µ –∫–∞–º–ø–∞–Ω–∏–∏
      console.log('\nüîç –ü–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π...');
      const campaigns = await findNewCampaigns();
      
      if (campaigns.length > 0) {
        console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${campaigns.length} –∫–∞–º–ø–∞–Ω–∏–π:`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∫–∞–º–ø–∞–Ω–∏–∏
        for (let i = 0; i < Math.min(3, campaigns.length); i++) {
          const campaign = campaigns[i];
          console.log(`\n${i + 1}. ${campaign.name} (—Å–æ–∑–¥–∞–Ω–∞: ${campaign.created.toLocaleString()})`);
          
          const fileCheck = await checkFilesInFolder(campaign.path);
          
          if (fileCheck.hasHtml && fileCheck.hasMjml) {
            console.log(`‚úÖ –ö–∞–º–ø–∞–Ω–∏—è ${campaign.name} - —Ñ–∞–π–ª—ã –ù–ê–ô–î–ï–ù–´`);
          } else {
            console.log(`‚ùå –ö–∞–º–ø–∞–Ω–∏—è ${campaign.name} - —Ñ–∞–π–ª—ã –û–¢–°–£–¢–°–¢–í–£–Æ–¢`);
          }
        }
      } else {
        console.log('‚ùå –ö–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      }
      
    } catch (e) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', e.message);
      console.log('üìÑ –ü–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤:', data.substring(0, 500));
    }
  });
});

req.on('error', (e) => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', e.message);
});

req.write(postData);
req.end(); 