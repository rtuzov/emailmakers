const { execSync } = require('child_process');

console.log('\nüß™ === TURKEY SUMMER CAMPAIGN TESTING ===');
console.log(`üìÖ Started at: ${new Date().toISOString()}`);

// Test input for Turkey summer campaign
const turkeyInput = `–°–æ–∑–¥–∞–π email-–∫–∞–º–ø–∞–Ω–∏—é –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤ –≤ –¢—É—Ä—Ü–∏—é –ª–µ—Ç–æ–º:

üèñÔ∏è –ù–ê–ü–†–ê–í–õ–ï–ù–ò–ï: –¢—É—Ä—Ü–∏—è (–°—Ç–∞–º–±—É–ª, –ê–Ω—Ç–∞–ª—å—è, –ö–∞–ø–ø–∞–¥–æ–∫–∏—è)
üåÖ –°–ï–ó–û–ù: –õ–µ—Ç–æ 2025 (–∏—é–Ω—å-–∞–≤–≥—É—Å—Ç)
üí∞ –ë–Æ–î–ñ–ï–¢: 40,000-100,000 —Ä—É–±–ª–µ–π
üë• –ê–£–î–ò–¢–û–†–ò–Ø: –ú–æ–ª–æ–¥—ã–µ –ø–∞—Ä—ã –∏ —Å–µ–º—å–∏ 25-40 –ª–µ—Ç
üéØ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–†–ò–ì–ì–ï–†–´: –ö—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ, –ø–ª—è–∂–∏, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è, –≤–æ—Å—Ç–æ—á–Ω–∞—è —ç–∫–∑–æ—Ç–∏–∫–∞
üìß –¢–ò–ü: –ü—Ä–æ–º–æ-–∫–∞–º–ø–∞–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º
üé® –°–¢–ò–õ–¨: –Ø—Ä–∫–∏–π, –∫—É–ª—å—Ç—É—Ä–Ω—ã–π, —Ç–µ–ø–ª—ã–π

–û–°–û–ë–ï–ù–ù–û–°–¢–ò:
- –ê–∫—Ü–µ–Ω—Ç –Ω–∞ –∫—É–ª—å—Ç—É—Ä–Ω–æ–µ –Ω–∞—Å–ª–µ–¥–∏–µ –°—Ç–∞–º–±—É–ª–∞
- –ü–ª—è–∂–Ω—ã–π –æ—Ç–¥—ã—Ö –≤ –ê–Ω—Ç–∞–ª—å–µ
- –í–æ–∑–¥—É—à–Ω—ã–µ —à–∞—Ä—ã –≤ –ö–∞–ø–ø–∞–¥–æ–∫–∏–∏
- –¢—É—Ä–µ—Ü–∫–∞—è –∫—É—Ö–Ω—è –∏ –≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ
- –í—ã–≥–æ–¥–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –ª–µ—Ç–Ω–∏–π —Å–µ–∑–æ–Ω`;

async function testTurkeyCampaign() {
  console.log('\nüöÄ === TURKEY SUMMER CAMPAIGN TEST ===');
  console.log('‚è±Ô∏è Starting Turkey campaign agent execution...');
  
  try {
    const startTime = Date.now();
    
    // Run the agent with Turkey campaign
    const result = execSync(`node test-api-agent.js`, {
      input: JSON.stringify({
        task: 'email-campaign-creation',
        input: turkeyInput,
        context: {
          language: 'ru',
          campaign_type: 'promotional',
          industry: 'travel',
          urgency: 'medium',
          target_audience: 'couples_families_25_40',
          destination: 'Turkey',
          season: 'summer'
        }
      }),
      encoding: 'utf8',
      timeout: 300000, // 5 minutes timeout
      stdio: ['pipe', 'pipe', 'inherit']
    });
    
    const endTime = Date.now();
    const executionTime = endTime - startTime;
    
    console.log(`‚úÖ Agent Execution: PASSED in ${executionTime}ms`);
    console.log(`üéØ Agent: Email Campaign Orchestrator`);
    console.log(`‚è±Ô∏è Execution Time: ${executionTime}ms`);
    console.log(`üìä Response Time: ${executionTime}ms`);
    
    // Parse and analyze result
    const parsedResult = JSON.parse(result);
    console.log('\nüìà RESULT ANALYSIS:');
    console.log(`üì§ Result: ${JSON.stringify(parsedResult).substring(0, 200)}...`);
    
    // Check for Turkey-specific content
    const resultStr = JSON.stringify(parsedResult).toLowerCase();
    const turkeyKeywords = ['—Ç—É—Ä—Ü–∏—è', 'turkey', '—Å—Ç–∞–º–±—É–ª', 'istanbul', '–∞–Ω—Ç–∞–ª—å—è', 'antalya', '–∫–∞–ø–ø–∞–¥–æ–∫–∏—è', 'cappadocia', '–ª–µ—Ç–æ', 'summer', '–∏—é–Ω—å', '–∏—é–ª—å', '–∞–≤–≥—É—Å—Ç'];
    const foundKeywords = turkeyKeywords.filter(keyword => resultStr.includes(keyword));
    
    if (foundKeywords.length > 0) {
      console.log(`üéØ Turkey Campaign Content Detected: ${foundKeywords.join(', ')}`);
      return { success: true, executionTime, foundKeywords };
    } else {
      console.log('‚ùå Turkey-specific content not detected');
      return { success: false, executionTime, foundKeywords: [] };
    }
    
  } catch (error) {
    console.error('‚ùå Turkey Campaign Test Failed:', error.message);
    return { success: false, error: error.message };
  }
}

async function runTests() {
  // Health check first
  console.log('\nüîç === HEALTH CHECK TEST ===');
  try {
    const healthResult = execSync('curl -s http://localhost:3000/api/health', { encoding: 'utf8' });
    const health = JSON.parse(healthResult);
    
    if (health.status === 'healthy') {
      console.log('‚úÖ Health Check: PASSED');
      console.log(`üìä Status: ${health.status}`);
      console.log(`ü§ñ Agents: ${health.agents?.length || 0} available`);
      console.log(`üîÑ Handoffs: ${health.handoffs?.length || 0} configured`);
      
      if (health.agents) {
        console.log('üìã Agent Details:');
        health.agents.forEach(agent => {
          console.log(`   ‚úÖ ${agent.name}: ${agent.status}`);
        });
      }
      
      if (health.handoffs) {
        console.log('üîó Handoff Details:');
        health.handoffs.forEach(handoff => {
          console.log(`   ‚úÖ ${handoff.from}To${handoff.to.charAt(0).toUpperCase() + handoff.to.slice(1)}: ${handoff.status}`);
        });
      }
    } else {
      throw new Error(`Health check failed: ${health.status}`);
    }
  } catch (error) {
    console.error('‚ùå Health Check: FAILED -', error.message);
    process.exit(1);
  }
  
  // Run Turkey campaign test
  const turkeyResult = await testTurkeyCampaign();
  
  // Final summary
  console.log('\nüìä === FINAL TEST SUMMARY ===');
  console.log(`üìÖ Completed at: ${new Date().toISOString()}`);
  console.log('‚úÖ Health Check: PASSED');
  console.log(`${turkeyResult.success ? '‚úÖ' : '‚ùå'} Turkey Campaign: ${turkeyResult.success ? 'PASSED' : 'FAILED'}`);
  
  if (turkeyResult.success) {
    console.log('üáπüá∑ Turkey-specific content successfully generated!');
    console.log(`üéØ Keywords found: ${turkeyResult.foundKeywords?.join(', ')}`);
  } else {
    console.log('‚ùå Turkey campaign test failed');
    if (turkeyResult.error) {
      console.log(`‚ùå Error: ${turkeyResult.error}`);
    }
  }
  
  console.log(`${turkeyResult.success ? '‚úÖ' : '‚ùå'} OVERALL RESULT: ${turkeyResult.success ? 'PASSED' : 'FAILED'}`);
}

runTests().catch(error => {
  console.error('‚ùå Test execution failed:', error);
  process.exit(1);
}); 