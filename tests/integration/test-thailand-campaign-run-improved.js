/**
 * –¢–µ—Å—Ç API endpoint /api/agent/run-improved 
 * –¢–µ–º–∞: –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –¢–∞–π–ª–∞–Ω–¥ –æ—Å–µ–Ω—å—é
 */

const API_BASE = 'http://localhost:3000';

async function testRunImprovedEndpoint() {
  console.log('\nüöÄ === –¢–ï–°–¢ API /api/agent/run-improved ===');
  console.log('üå¥ –¢–µ–º–∞: –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –¢–∞–π–ª–∞–Ω–¥ –æ—Å–µ–Ω—å—é');
  console.log(`‚è∞ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞: ${new Date().toISOString()}\n`);

  // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º health check
  console.log('üîç 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ health check...');
  try {
    const healthResponse = await fetch(`${API_BASE}/api/agent/run-improved`, {
      method: 'GET'
    });
    
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health check —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', {
      status: healthData.status,
      agents_available: Object.keys(healthData.agents || {}).length,
      handoffs_working: Object.values(healthData.handoffs || {}).filter(h => h === true).length
    });
    
    if (healthData.status !== 'healthy') {
      console.warn('‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç...');
    }
  } catch (error) {
    console.error('‚ùå Health check failed:', error.message);
    console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç...');
  }

  // 2. –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç - –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
  console.log('\nü§ñ 2. –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ —Å —Ç–µ–º–æ–π "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –¢–∞–π–ª–∞–Ω–¥ –æ—Å–µ–Ω—å—é"...');
  
  const requestBody = {
    task_type: 'create_email_campaign',
    input: '–°–æ–∑–¥–∞—Ç—å email –∫–∞–º–ø–∞–Ω–∏—é –Ω–∞ —Ç–µ–º—É "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –¢–∞–π–ª–∞–Ω–¥ –æ—Å–µ–Ω—å—é". –í–∫–ª—é—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –æ—Å–µ–Ω—å—é, –ª—É—á—à–∏—Ö –º–µ—Å—Ç–∞—Ö –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è, –∫—É–ª—å—Ç—É—Ä–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è—Ö, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–≤–µ—Ç–∞—Ö –¥–ª—è —Ç—É—Ä–∏—Å—Ç–æ–≤. –¢–æ–Ω –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π.',
    context: {
      campaign_type: 'travel_promotion',
      season: 'autumn',
      destination: 'Thailand',
      language: 'ru',
      tone: 'friendly_informative',
      target_audience: 'russian_travelers',
      include_practical_tips: true,
      include_cultural_info: true
    }
  };

  console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
  console.log('   task_type:', requestBody.task_type);
  console.log('   input:', requestBody.input.slice(0, 100) + '...');
  console.log('   context:', JSON.stringify(requestBody.context, null, 2));

  const startTime = Date.now();

  try {
    console.log('\nüì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
    const response = await fetch(`${API_BASE}/api/agent/run-improved`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    });

    console.log(`üìä HTTP Status: ${response.status} ${response.statusText}`);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    const executionTime = Date.now() - startTime;

    console.log('\n‚úÖ === –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===');
    console.log(`‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);
    console.log(`üéØ –ê–≥–µ–Ω—Ç: ${result.agent}`);
    console.log(`üìã –¢–∏–ø –∑–∞–¥–∞—á–∏: ${result.taskType}`);
    console.log(`‚úÖ –£—Å–ø–µ—Ö: ${result.success}`);
    console.log(`üìä –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞: ${result.executionTime}ms`);
    console.log(`‚è∞ Timestamp: ${result.timestamp}`);

    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if (result.result) {
      console.log('\nüìà –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
      
      if (typeof result.result === 'object') {
        console.log(`üîß –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞: ${Object.keys(result.result).join(', ')}`);
        
        if (result.result.finalOutput) {
          const output = result.result.finalOutput;
          console.log(`üì§ Final output —Ç–∏–ø: ${typeof output}`);
          
          if (typeof output === 'string') {
            console.log(`üìù –î–ª–∏–Ω–∞ output: ${output.length} —Å–∏–º–≤–æ–ª–æ–≤`);
            console.log(`üìÑ –ü—Ä–µ–≤—å—é: ${output.slice(0, 200)}...`);
          }
        }

        if (result.result.messages && Array.isArray(result.result.messages)) {
          console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${result.result.messages.length}`);
        }

        if (result.result.usage) {
          console.log(`üî¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤: ${JSON.stringify(result.result.usage)}`);
        }
      } else {
        console.log(`üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç (${typeof result.result}): ${result.result}`);
      }
    }

    console.log('\nüéâ === –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û ===');
    return {
      success: true,
      executionTime,
      agentExecutionTime: result.executionTime,
      agent: result.agent,
      taskType: result.taskType,
      hasResult: !!result.result
    };

  } catch (error) {
    const executionTime = Date.now() - startTime;
    console.error('\n‚ùå === –û–®–ò–ë–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø ===');
    console.error(`üí• –û—à–∏–±–∫–∞: ${error.message}`);
    console.error(`‚è±Ô∏è  –í—Ä–µ–º—è –¥–æ –æ—à–∏–±–∫–∏: ${executionTime}ms`);
    
    if (error.stack) {
      console.error(`üìç Stack trace:\n${error.stack}`);
    }

    return {
      success: false,
      error: error.message,
      executionTime
    };
  }
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤
async function checkAgentStatus() {
  console.log('\nüîç === –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –ê–ì–ï–ù–¢–û–í ===');
  
  try {
    const response = await fetch(`${API_BASE}/api/agent/status`);
    const data = await response.json();
    
    if (data.success) {
      console.log('‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–≥–µ–Ω—Ç–æ–≤:');
      console.log(`üìä –í—Å–µ–≥–æ –∞–≥–µ–Ω—Ç–æ–≤: ${data.agents?.length || 0}`);
      
      if (data.agents) {
        data.agents.forEach(agent => {
          const statusIcon = agent.status === 'healthy' ? '‚úÖ' : 
                           agent.status === 'warning' ? '‚ö†Ô∏è' : '‚ùå';
          console.log(`   ${statusIcon} ${agent.id}: ${agent.status}`);
        });
      }

      if (data.system_status) {
        console.log('üñ•Ô∏è  –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:', data.system_status.overall_status);
      }
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  console.log('üß™ === –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í run-improved API ===\n');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–æ–≤
  await checkAgentStatus();
  
  // –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
  const testResult = await testRunImprovedEndpoint();
  
  // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
  console.log('\nüìã === –ò–¢–û–ì–û–í–ê–Ø –°–í–û–î–ö–ê ===');
  console.log(`‚úÖ –£—Å–ø–µ—Ö: ${testResult.success}`);
  console.log(`‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: ${testResult.executionTime}ms`);
  
  if (testResult.success) {
    console.log(`ü§ñ –ê–≥–µ–Ω—Ç: ${testResult.agent}`);
    console.log(`üìã –¢–∏–ø –∑–∞–¥–∞—á–∏: ${testResult.taskType}`);
    console.log(`‚ö° –í—Ä–µ–º—è –∞–≥–µ–Ω—Ç–∞: ${testResult.agentExecutionTime}ms`);
    console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω: ${testResult.hasResult ? '–î–∞' : '–ù–µ—Ç'}`);
  } else {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${testResult.error}`);
  }
  
  console.log('\nüèÅ === –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´ ===');
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞
if (require.main === module) {
  runTests().catch(error => {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
  });
}

module.exports = { testRunImprovedEndpoint, checkAgentStatus }; 