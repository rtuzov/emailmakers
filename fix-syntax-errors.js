#!/usr/bin/env node

/**
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏–º —Å–∫—Ä–∏–ø—Ç–æ–º
 */

const fs = require('fs');
const { execSync } = require('child_process');

class SyntaxErrorFixer {
  constructor() {
    this.fixedFiles = new Set();
  }

  // –ü–æ–ª—É—á–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
  getSyntaxErrors() {
    try {
      execSync('npm run type-check', { stdio: 'pipe' });
      return [];
    } catch (error) {
      const output = error.stdout?.toString() || error.stderr?.toString() || '';
      const errorLines = output.split('\n').filter(line => line.includes('error TS1'));
      return errorLines.map(line => this.parseErrorLine(line)).filter(Boolean);
    }
  }

  parseErrorLine(line) {
    const match = line.match(/^(.+?)\((\d+),(\d+)\): error (TS\d+): (.+)$/);
    if (!match) return null;
    
    return {
      file: match[1],
      line: parseInt(match[2]),
      column: parseInt(match[3]),
      code: match[4],
      message: match[5]
    };
  }

  // –ò—Å–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª —Å —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–º–∏ –æ—à–∏–±–∫–∞–º–∏
  fixSyntaxErrors(filePath, errors) {
    const content = fs.readFileSync(filePath, 'utf8');
    let lines = content.split('\n');
    let modified = false;

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    errors.forEach(error => {
      const lineIndex = error.line - 1;
      if (lineIndex >= 0 && lineIndex < lines.length) {
        const line = lines[lineIndex];
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if (line.includes('// Currently unused =')) {
          // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º "const _var // Currently unused = value;" –≤ "const _var = value; // Currently unused"
          const fixed = line
            .replace(/(\w+)\s+\/\/ Currently unused\s*=/, '$1 =')
            .replace(/;$/, '; // Currently unused');
          lines[lineIndex] = fixed;
          modified = true;
        }
        
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        if (line.includes('const __') && line.includes('// Currently unused')) {
          if (line.includes('= ')) {
            // –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            lines[lineIndex] = line.replace('// Currently unused', '/* Currently unused */');
            modified = true;
          } else {
            // –≠—Ç–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
            const varName = line.match(/const (__\w+)/)?.[1];
            if (varName) {
              lines[lineIndex] = `  const ${varName} = null; // Currently unused (was broken)`;
              modified = true;
            }
          }
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º–∏ —Ñ—É–Ω–∫—Ü–∏–π
        if (line.includes('): never { // Currently unused') && line.includes('(')) {
          // –ù–∞—Ö–æ–¥–∏–º –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
          const functionMatch = line.match(/(\w+)\([^)]*\): never \{ \/\/ Currently unused/);
          if (functionMatch) {
            const functionName = '_' + functionMatch[1];
            lines[lineIndex] = line.replace(functionMatch[1], functionName);
            modified = true;
          }
        }

        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if ((error.code === 'TS1005' || error.code === 'TS1128') && line.trim() !== '') {
          // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
          if (line.includes('(') && !line.includes(')')) {
            lines[lineIndex] = line + ')';
            modified = true;
          } else if (line.includes('{') && !line.includes('}')) {
            lines[lineIndex] = line + '}';
            modified = true;
          } else if (!line.trim().endsWith(';') && !line.trim().endsWith('{') && !line.trim().endsWith('}')) {
            lines[lineIndex] = line + ';';
            modified = true;
          }
        }
      }
    });

    if (modified) {
      fs.writeFileSync(filePath, lines.join('\n'), 'utf8');
      this.fixedFiles.add(filePath);
      return true;
    }
    return false;
  }

  // –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
  async run() {
    console.log('üîß Fixing syntax errors from previous mass fixing...');
    
    const errors = this.getSyntaxErrors();
    console.log(`üìä Found ${errors.length} syntax errors`);

    if (errors.length === 0) {
      console.log('‚úÖ No syntax errors found!');
      return;
    }

    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Ñ–∞–π–ª–∞–º
    const fileGroups = {};
    errors.forEach(error => {
      if (!fileGroups[error.file]) {
        fileGroups[error.file] = [];
      }
      fileGroups[error.file].push(error);
    });

    console.log(`üìÅ Processing ${Object.keys(fileGroups).length} files with syntax errors...`);

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã
    let fixedFilesCount = 0;
    for (const [filePath, fileErrors] of Object.entries(fileGroups)) {
      try {
        if (this.fixSyntaxErrors(filePath, fileErrors)) {
          fixedFilesCount++;
          console.log(`‚úÖ Fixed syntax in: ${filePath}`);
        }
      } catch (error) {
        console.log(`‚ùå Error fixing ${filePath}: ${error.message}`);
      }
    }

    console.log(`\nüéØ Syntax fixing completed!`);
    console.log(`üìÅ Files fixed: ${fixedFilesCount}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingErrors = this.getSyntaxErrors();
    console.log(`üìâ Remaining syntax errors: ${remainingErrors.length}`);
    
    if (remainingErrors.length > 0) {
      console.log('\n‚ö†Ô∏è Some syntax errors remain. Running TypeScript check...');
      try {
        execSync('npm run type-check | head -10', { stdio: 'inherit' });
      } catch (e) {
        // Expected to fail, we just want to see the output
      }
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  const fixer = new SyntaxErrorFixer();
  fixer.run().catch(console.error);
}

module.exports = SyntaxErrorFixer;