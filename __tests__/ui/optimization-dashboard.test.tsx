/**
 * @jest-environment jsdom
 */

import React from 'react';
import { render, screen, waitFor, fireEvent, act } from '@testing-library/react';
import '@testing-library/jest-dom';
import OptimizationDashboard from '@/app/optimization-dashboard/page';

// Mock fetch function for API calls
global.fetch = jest.fn();

const mockAnalysisResponse = {
  success: true,
  timestamp: new Date().toISOString(),
  analysis: {
    current_state: {
      health_score: 87,
      active_agents: 4,
      success_rate: 94.2,
      average_response_time: 1200
    },
    insights: {
      trends_detected: 3,
      bottlenecks_found: 1,
      error_patterns: 2,
      predicted_issues: 0
    },
    assessment: "–°–∏—Å—Ç–µ–º–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ —Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏",
    opportunities: [
      "–£–ª—É—á—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–∫–ª–∏–∫–∞ Content Specialist",
      "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"
    ]
  }
};

const mockRecommendationsResponse = {
  success: true,
  timestamp: new Date().toISOString(),
  recommendations: {
    total_count: 5,
    items: [
      {
        id: "rec1",
        title: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è",
        description: "–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ",
        type: "performance",
        priority: "high",
        expected_impact: {
          performance_improvement: 15,
          success_rate_improvement: 5,
          response_time_reduction: 300
        },
        safety: {
          risk_level: "low",
          requires_approval: false,
          potential_impacts: ["–í—Ä–µ–º–µ–Ω–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"]
        },
        estimated_duration: "2-4 —á–∞—Å–∞"
      },
      {
        id: "rec2",
        title: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–∞",
        description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤ –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π",
        type: "scalability",
        priority: "medium",
        expected_impact: {
          performance_improvement: 25,
          success_rate_improvement: 10,
          response_time_reduction: 500
        },
        safety: {
          risk_level: "medium",
          requires_approval: true,
          potential_impacts: ["–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã —Å–∏—Å—Ç–µ–º—ã"]
        },
        estimated_duration: "1-2 –¥–Ω—è"
      }
    ],
    summary: {
      by_priority: { high: 2, medium: 2, low: 1 },
      by_risk_level: { low: 3, medium: 2 },
      safe_to_auto_apply: 3
    }
  }
};

const mockDemoResponse = {
  success: true,
  timestamp: new Date().toISOString(),
  demo: {
    type: 'basic',
    description: 'Complete optimization system demonstration',
    features: [
      'System analysis and health assessment',
      'Recommendation generation with safety evaluation',
      'Safe optimization application',
      'Rollback capability demonstration',
      'Dynamic threshold generation',
      'Comprehensive reporting'
    ]
  },
  logs: [
    'üöÄ Starting optimization system demonstration...',
    '‚úÖ System analysis completed',
    'üìä Recommendations generated: 5 items',
    'üîí Safety checks passed',
    '‚úÖ Demonstration completed successfully'
  ],
  summary: {
    total_log_entries: 5,
    demo_duration: 'Variable based on demo type',
    status: 'completed_successfully'
  }
};

describe('Optimization Dashboard Tests', () => {
  beforeEach(() => {
    jest.clearAllMocks();
    
    // Mock successful API responses by default
    (global.fetch as jest.Mock).mockImplementation((url: string, options?: any) => {
      if (url.includes('/api/optimization/demo')) {
        if (options?.method === 'POST') {
          const body = JSON.parse(options.body);
          if (body.action === 'analyze_system') {
            return Promise.resolve({
              ok: true,
              json: () => Promise.resolve(mockAnalysisResponse),
            });
          }
          if (body.action === 'get_recommendations') {
            return Promise.resolve({
              ok: true,
              json: () => Promise.resolve(mockRecommendationsResponse),
            });
          }
        }
        if (options?.method === 'GET' || !options?.method) {
          return Promise.resolve({
            ok: true,
            json: () => Promise.resolve(mockDemoResponse),
          });
        }
      }
      return Promise.reject(new Error('Unknown URL'));
    });
  });

  describe('Initial Rendering', () => {
    it('should render the optimization dashboard header', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      expect(screen.getByText('–ü–∞–Ω–µ–ª—å –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')).toBeInTheDocument();
      expect(screen.getByText('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')).toBeInTheDocument();
    });

    it('should render all metric cards', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      expect(screen.getByText('–ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã')).toBeInTheDocument();
      expect(screen.getByText('–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã')).toBeInTheDocument();
      expect(screen.getByText('–£—Å–ø–µ—à–Ω–æ—Å—Ç—å')).toBeInTheDocument();
      expect(screen.getByText('–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞')).toBeInTheDocument();
    });

    it('should render real-time monitoring section', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      expect(screen.getByText('–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')).toBeInTheDocument();
      expect(screen.getByText('–û–±—â–∏–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')).toBeInTheDocument();
      expect(screen.getByText('–û–∂–∏–¥–∞—é—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏')).toBeInTheDocument();
      expect(screen.getByText('–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')).toBeInTheDocument();
    });

    it('should render system analysis section', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      expect(screen.getByText('–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã')).toBeInTheDocument();
      expect(screen.getByText('–û–±—â–∏–π –±–∞–ª–ª –∑–¥–æ—Ä–æ–≤—å—è')).toBeInTheDocument();
      expect(screen.getByText('–£–∑–∫–∏–µ –º–µ—Å—Ç–∞')).toBeInTheDocument();
      expect(screen.getByText('–ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫')).toBeInTheDocument();
    });
  });

  describe('Data Loading', () => {
    it('should load optimization data on mount', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalledWith('/api/optimization/demo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'analyze_system' }),
          cache: 'no-store'
        });
      });

      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalledWith('/api/optimization/demo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'get_recommendations' }),
          cache: 'no-store'
        });
      });
    });

    it('should display loaded analysis data', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(screen.getByText('87')).toBeInTheDocument(); // Health score
        expect(screen.getByText('4')).toBeInTheDocument(); // Active agents
        expect(screen.getByText('94%')).toBeInTheDocument(); // Success rate
        expect(screen.getByText('1.2s')).toBeInTheDocument(); // Response time
      });
    });

    it('should display system status correctly', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(screen.getByText('–ê–∫—Ç–∏–≤–Ω–∞')).toBeInTheDocument();
        expect(screen.getByText('–°–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞')).toBeInTheDocument();
      });
    });

    it('should show last update timestamp', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(screen.getByText('–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ')).toBeInTheDocument();
      });
    });
  });

  describe('Recommendations Display', () => {
    it('should display recommendations when available', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(screen.getByText('–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏')).toBeInTheDocument();
        expect(screen.getByText('–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è')).toBeInTheDocument();
        expect(screen.getByText('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Å–∫–µ–π–ª–∏–Ω–≥–∞')).toBeInTheDocument();
      });
    });

    it('should display recommendation priorities and risk levels', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(screen.getByText('high')).toBeInTheDocument();
        expect(screen.getByText('medium')).toBeInTheDocument();
        expect(screen.getByText('low risk')).toBeInTheDocument();
        expect(screen.getByText('medium risk')).toBeInTheDocument();
      });
    });

    it('should display expected performance improvements', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(screen.getByText('–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: +15%')).toBeInTheDocument();
        expect(screen.getByText('–£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: +25%')).toBeInTheDocument();
      });
    });
  });

  describe('Analysis Button', () => {
    it('should run analysis when button is clicked', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      const analysisButton = screen.getByText('üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑');
      
      await act(async () => {
        fireEvent.click(analysisButton);
      });

      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalledWith('/api/optimization/demo?type=basic', {
          method: 'GET',
          headers: { 'Content-Type': 'application/json' },
          cache: 'no-store'
        });
      });
    });

    it('should show loading state during analysis', async () => {
      let resolveAnalysis: Function;
      (global.fetch as jest.Mock).mockImplementation((url: string, options?: any) => {
        if (url.includes('type=basic')) {
          return new Promise((resolve) => {
            resolveAnalysis = () => resolve({
              ok: true,
              json: () => Promise.resolve(mockDemoResponse),
            });
          });
        }
        // Return default mocks for other calls
        return Promise.resolve({
          ok: true,
          json: () => Promise.resolve(mockAnalysisResponse),
        });
      });

      await act(async () => {
        render(<OptimizationDashboard />);
      });

      const analysisButton = screen.getByText('üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑');
      
      await act(async () => {
        fireEvent.click(analysisButton);
      });

      expect(screen.getByText('üîÑ –ê–Ω–∞–ª–∏–∑...')).toBeInTheDocument();
      expect(analysisButton).toBeDisabled();

      // Resolve the analysis
      await act(async () => {
        resolveAnalysis();
      });
    });

    it('should display demo results after analysis', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      const analysisButton = screen.getByText('üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑');
      
      await act(async () => {
        fireEvent.click(analysisButton);
      });

      await waitFor(() => {
        expect(screen.getByText('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏')).toBeInTheDocument();
        expect(screen.getByText('5')).toBeInTheDocument(); // Log entries
        expect(screen.getByText('6')).toBeInTheDocument(); // Features tested
        expect(screen.getByText('‚úÖ')).toBeInTheDocument(); // Status
      });
    });
  });

  describe('Refresh Button', () => {
    it('should refresh data when refresh button is clicked', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      // Wait for initial load
      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalled();
      });

      // Clear the mock to count new calls
      jest.clearAllMocks();

      const refreshButton = screen.getByText('üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ');
      
      await act(async () => {
        fireEvent.click(refreshButton);
      });

      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalledWith('/api/optimization/demo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'analyze_system' }),
          cache: 'no-store'
        });
      });
    });
  });

  describe('Error Handling', () => {
    it('should handle API errors gracefully', async () => {
      (global.fetch as jest.Mock).mockImplementation(() => {
        return Promise.resolve({
          ok: false,
          status: 500,
        });
      });

      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(screen.getByText('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')).toBeInTheDocument();
      });
    });

    it('should handle network errors gracefully', async () => {
      (global.fetch as jest.Mock).mockImplementation(() => {
        return Promise.reject(new Error('Network error'));
      });

      await act(async () => {
        render(<OptimizationDashboard />);
      });

      await waitFor(() => {
        expect(screen.getByText('–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')).toBeInTheDocument();
      });
    });

    it('should show error status when analysis fails', async () => {
      // Allow initial data load to succeed
      let callCount = 0;
      (global.fetch as jest.Mock).mockImplementation((url: string, options?: any) => {
        callCount++;
        if (callCount <= 2) {
          // First two calls succeed (initial data load)
          if (options?.method === 'POST') {
            const body = JSON.parse(options.body);
            if (body.action === 'analyze_system') {
              return Promise.resolve({
                ok: true,
                json: () => Promise.resolve(mockAnalysisResponse),
              });
            }
            if (body.action === 'get_recommendations') {
              return Promise.resolve({
                ok: true,
                json: () => Promise.resolve(mockRecommendationsResponse),
              });
            }
          }
        }
        // Analysis call fails
        return Promise.resolve({
          ok: false,
          status: 500,
        });
      });

      await act(async () => {
        render(<OptimizationDashboard />);
      });

      // Wait for initial data to load
      await waitFor(() => {
        expect(screen.getByText('–ê–∫—Ç–∏–≤–Ω–∞')).toBeInTheDocument();
      });

      const analysisButton = screen.getByText('üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑');
      
      await act(async () => {
        fireEvent.click(analysisButton);
      });

      // Should still show running status from initial load
      await waitFor(() => {
        expect(screen.getByText('–ê–∫—Ç–∏–≤–Ω–∞')).toBeInTheDocument();
      });
    });
  });

  describe('Responsive Design', () => {
    it('should render grid layouts correctly', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      const statusCards = document.querySelector('.grid.grid-cols-1.md\\:grid-cols-2.lg\\:grid-cols-4');
      expect(statusCards).toBeInTheDocument();

      const performanceGrid = document.querySelector('.grid.grid-cols-1.lg\\:grid-cols-2');
      expect(performanceGrid).toBeInTheDocument();
    });

    it('should render glassmorphism cards', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      const glassCards = document.querySelectorAll('.glass-card');
      expect(glassCards.length).toBeGreaterThan(0);
    });
  });

  describe('Auto-refresh', () => {
    beforeEach(() => {
      jest.useFakeTimers();
    });

    afterEach(() => {
      jest.useRealTimers();
    });

    it('should auto-refresh data every 30 seconds', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      // Wait for initial data load
      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalled();
      });

      // Clear mocks to count new calls
      jest.clearAllMocks();

      // Fast-forward 30 seconds
      await act(async () => {
        jest.advanceTimersByTime(30000);
      });

      await waitFor(() => {
        expect(global.fetch).toHaveBeenCalledWith('/api/optimization/demo', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ action: 'analyze_system' }),
          cache: 'no-store'
        });
      });
    });
  });

  describe('Settings Button', () => {
    it('should show notification when settings button is clicked', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      const settingsButton = screen.getByText('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏');
      
      await act(async () => {
        fireEvent.click(settingsButton);
      });

      // Note: We can't test toast notifications in JSDOM environment easily
      // This would require additional setup for react-hot-toast
    });
  });

  describe('Clear Results Button', () => {
    it('should show clear results button after demo is run', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      const analysisButton = screen.getByText('üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑');
      
      await act(async () => {
        fireEvent.click(analysisButton);
      });

      await waitFor(() => {
        expect(screen.getByText('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã')).toBeInTheDocument();
      });
    });

    it('should clear demo results when clear button is clicked', async () => {
      await act(async () => {
        render(<OptimizationDashboard />);
      });

      // Run analysis first
      const analysisButton = screen.getByText('üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑');
      
      await act(async () => {
        fireEvent.click(analysisButton);
      });

      await waitFor(() => {
        expect(screen.getByText('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏')).toBeInTheDocument();
      });

      // Clear results
      const clearButton = screen.getByText('üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã');
      
      await act(async () => {
        fireEvent.click(clearButton);
      });

      expect(screen.queryByText('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏')).not.toBeInTheDocument();
      expect(screen.getByText('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')).toBeInTheDocument();
    });
  });
});