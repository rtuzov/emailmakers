/**
 * üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û DESIGN SPECIALIST AGENT
 * 
 * –†–µ–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–∏–µ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∞—É–¥–∏—Ç–µ:
 * - Deprecated —Ñ—É–Ω–∫—Ü–∏–∏
 * - –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞
 * - –ù–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - –ü—Ä–æ–±–ª–µ–º—ã –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 */

import { DesignSpecialistAgent, DesignSpecialistInput } from '../../src/agent/specialists/design-specialist-agent';

describe('ORIGINAL DesignSpecialistAgent - REAL PROBLEMS TESTING', () => {
  let agent: DesignSpecialistAgent;

  beforeEach(() => {
    agent = new DesignSpecialistAgent();
  });

  describe('üî• CRITICAL BUGS - Found in Audit', () => {
    
    it('should FAIL with generateSmartTags deprecated function', async () => {
      console.log('üîç Testing deprecated generateSmartTags function...');
      
      const input: DesignSpecialistInput = {
        task_type: 'select_assets',
        content_package: {
          content: {
            subject: '–¢–µ—Å—Ç deprecated —Ñ—É–Ω–∫—Ü–∏–∏',
            preheader: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–º–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é',
            body: '–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É',
            cta: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å',
            language: 'ru',
            tone: 'professional'
          }
        }
      };

      // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–∑–≤–∞—Ç—å –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç generateSmartTags
      try {
        const result = await agent.executeTask(input);
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: deprecated —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –≤—ã–∑–≤–∞–ª–∞ –æ—à–∏–±–∫—É!', result.success);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        if (result.success) {
          console.log('‚ö†Ô∏è –°–ö–†–´–¢–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–∞–≥–∏');
        }
      } catch (error) {
        console.log('‚úÖ –û–®–ò–ë–ö–ê –ù–ê–ô–î–ï–ù–ê:', error.message);
        expect(error.message).toContain('deprecated');
      }
    });

    it('should demonstrate DUPLICATE LOGIC in asset searching', async () => {
      console.log('üîç Testing duplicate asset search logic...');
      
      const input: DesignSpecialistInput = {
        task_type: 'render_email', // –≠—Ç–æ—Ç —Ç–∏–ø –∑–∞–¥–∞—á–∏ –≤—ã–∑—ã–≤–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞
        content_package: {
          content: {
            subject: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –ø–æ–∏—Å–∫–∞ –∞—Å—Å–µ—Ç–æ–≤',
            preheader: '–ü–æ–∏—Å–∫ –∞—Å—Å–µ—Ç–æ–≤ –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –¥–≤–∞–∂–¥—ã',
            body: '–≠—Ç–æ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤ handleFullEmailGeneration',
            cta: '–ù–∞–π—Ç–∏ –ø—Ä–æ–±–ª–µ–º—É',
            language: 'ru',
            tone: 'professional'
          }
        },
        asset_requirements: {
          tags: ['—Ç–µ—Å—Ç', '–ø—Ä–æ–±–ª–µ–º–∞'],
          target_count: 2
        }
      };

      const startTime = Date.now();
      let searchCallCount = 0;

      // –ú–æ–∫–∞–µ–º –ø–æ–∏—Å–∫ –∞—Å—Å–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –≤—ã–∑–æ–≤–æ–≤
      const originalConsoleLog = console.log;
      console.log = (...args) => {
        if (args.join(' ').includes('figma_search') || args.join(' ').includes('asset search')) {
          searchCallCount++;
        }
        originalConsoleLog(...args);
      };

      try {
        const result = await agent.executeTask(input);
        const executionTime = Date.now() - startTime;
        
        console.log = originalConsoleLog;
        
        console.log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);
        console.log(`üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∏—Å–∫–æ–≤ –∞—Å—Å–µ—Ç–æ–≤: ${searchCallCount}`);
        
        if (searchCallCount > 1) {
          console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–∏—Å–∫ –∞—Å—Å–µ—Ç–æ–≤ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑!');
          console.log('   - handleFullEmailGeneration() –∏—â–µ—Ç –∞—Å—Å–µ—Ç—ã');
          console.log('   - handleEmailRendering() –º–æ–∂–µ—Ç –∏—Å–∫–∞—Ç—å –∞—Å—Å–µ—Ç—ã —Å–Ω–æ–≤–∞');
        }
        
        expect(result).toBeDefined();
      } catch (error) {
        console.log = originalConsoleLog;
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
      }
    });

    it('should show INCONSISTENT error handling', async () => {
      console.log('üîç Testing inconsistent error handling...');
      
      // –¢–µ—Å—Ç 1: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –ø–æ-—Ä–∞–∑–Ω–æ–º—É –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö)
      const emptyInput: DesignSpecialistInput = {
        task_type: 'select_assets',
        content_package: {
          content: {
            subject: '', // –ü—É—Å—Ç–æ–π subject
            preheader: '',
            body: '',
            cta: '',
            language: 'ru',
            tone: 'professional'
          }
        }
      };

      try {
        console.log('   –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø—É—Å—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        const result1 = await agent.executeTask(emptyInput);
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: success=${result1.success}`);
        
        if (result1.success) {
          console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—è—Ç—ã –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!');
        }
      } catch (error) {
        console.log(`   –û—à–∏–±–∫–∞ —Å –ø—É—Å—Ç—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏: ${error.message}`);
      }

      // –¢–µ—Å—Ç 2: –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–¥–∞—á–∏
      const invalidTaskInput = {
        task_type: 'invalid_task' as any,
        content_package: {
          content: {
            subject: 'Valid subject',
            preheader: 'Valid preheader', 
            body: 'Valid body',
            cta: 'Valid CTA',
            language: 'ru',
            tone: 'professional'
          }
        }
      };

      try {
        console.log('   –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–¥–∞—á–∏...');
        const result2 = await agent.executeTask(invalidTaskInput);
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º: success=${result2.success}`);
      } catch (error) {
        console.log(`   –û—à–∏–±–∫–∞ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–∏–ø–æ–º: ${error.message}`);
      }

      // –¢–µ—Å—Ç 3: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      const missingFieldsInput: DesignSpecialistInput = {
        task_type: 'render_email',
        content_package: {
          content: {
            subject: 'Valid subject',
            // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç preheader, body, cta
            language: 'ru',
            tone: 'professional'
          } as any
        }
      };

      try {
        console.log('   –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π...');
        const result3 = await agent.executeTask(missingFieldsInput);
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏: success=${result3.success}`);
      } catch (error) {
        console.log(`   –û—à–∏–±–∫–∞ —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏: ${error.message}`);
      }

      console.log('‚úÖ –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –Ω–µ–∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫');
    });
  });

  describe('üêå PERFORMANCE PROBLEMS', () => {
    
    it('should demonstrate SLOW execution due to no caching', async () => {
      console.log('üîç Testing performance without caching...');
      
      const testInput: DesignSpecialistInput = {
        task_type: 'select_assets',
        content_package: {
          content: {
            subject: '–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è',
            preheader: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–∞–±–æ—Ç—ã',
            body: '–ö–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤',
            cta: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å',
            language: 'ru',
            tone: 'professional'
          }
        },
        asset_requirements: {
          tags: ['–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '—Ç–µ—Å—Ç'],
          target_count: 3
        }
      };

      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
      console.log('   –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å...');
      const start1 = Date.now();
      try {
        const result1 = await agent.executeTask(testInput);
        const time1 = Date.now() - start1;
        console.log(`   –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å: ${time1}ms, success: ${result1.success}`);

        // –í—Ç–æ—Ä–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–∞–∫–æ–π –∂–µ –º–µ–¥–ª–µ–Ω–Ω—ã–π)
        console.log('   –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å...');
        const start2 = Date.now();
        const result2 = await agent.executeTask(testInput);
        const time2 = Date.now() - start2;
        console.log(`   –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å: ${time2}ms, success: ${result2.success}`);

        const improvement = time1 > 0 ? ((time1 - time2) / time1 * 100).toFixed(1) : '0';
        console.log(`   –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${improvement}%`);
        
        if (Math.abs(time1 - time2) < time1 * 0.1) {
          console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è! –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ—á—Ç–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ');
          console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í–Ω–µ–¥—Ä–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞');
        }
      } catch (error) {
        console.log(`   –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`);
      }
    });

    it('should show MEMORY INEFFICIENCY', async () => {
      console.log('üîç Testing memory usage patterns...');
      
      const heapBefore = process.memoryUsage().heapUsed;
      console.log(`   –ü–∞–º—è—Ç—å –¥–æ —Ç–µ—Å—Ç–æ–≤: ${Math.round(heapBefore / 1024 / 1024)}MB`);

      const largeInput: DesignSpecialistInput = {
        task_type: 'render_email',
        content_package: {
          content: {
            subject: '–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ —Å –±–æ–ª—å—à–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º',
            preheader: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏',
            body: '–≠—Ç–æ—Ç —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–µ—Ç –±–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏. '.repeat(100),
            cta: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞–º—è—Ç—å',
            language: 'ru',
            tone: 'professional'
          }
        },
        asset_requirements: {
          tags: ['–ø–∞–º—è—Ç—å', '—Ç–µ—Å—Ç', '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
          target_count: 5
        }
      };

      try {
        const result = await agent.executeTask(largeInput);
        
        const heapAfter = process.memoryUsage().heapUsed;
        const memoryDiff = heapAfter - heapBefore;
        console.log(`   –ü–∞–º—è—Ç—å –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤: ${Math.round(heapAfter / 1024 / 1024)}MB`);
        console.log(`   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: ${Math.round(memoryDiff / 1024 / 1024)}MB`);
        
        if (memoryDiff > 50 * 1024 * 1024) { // –ë–æ–ª—å—à–µ 50MB
          console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏!');
          console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
          console.log('   - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤');
          console.log('   - –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
          console.log('   - –ù–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö');
        }
        
        console.log(`   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏: ${result.success}`);
      } catch (error) {
        console.log(`   –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞–º—è—Ç–∏: ${error.message}`);
      }
    });
  });

  describe('üîÄ COMPLEX LOGIC PROBLEMS', () => {
    
    it('should demonstrate OVERLAPPING task types', async () => {
      console.log('üîç Testing overlapping task type logic...');
      
      const baseInput = {
        content_package: {
          content: {
            subject: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á',
            preheader: '–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º—ã –ª–æ–≥–∏–∫–∏',
            body: '–†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–µ–ª–∞—é—Ç –ø–æ—Ö–æ–∂–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
            cta: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É',
            language: 'ru',
            tone: 'professional'
          }
        },
        asset_requirements: {
          tags: ['–ª–æ–≥–∏–∫–∞', '–ø—Ä–æ–±–ª–µ–º—ã'],
          target_count: 2
        }
      };

      const taskTypes = ['select_assets', 'render_email', 'create_templates', 'optimize_design'] as const;
      const results: Record<string, any> = {};

      for (const taskType of taskTypes) {
        console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–∏–ø –∑–∞–¥–∞—á–∏: ${taskType}`);
        
        try {
          const input: DesignSpecialistInput = {
            ...baseInput,
            task_type: taskType
          };

          const startTime = Date.now();
          const result = await agent.executeTask(input);
          const executionTime = Date.now() - startTime;
          
          results[taskType] = {
            success: result.success,
            executionTime,
            operations: result.analytics?.operations_performed || 0,
            hasAssets: !!result.results?.assets_data,
            hasRendering: !!result.results?.rendered_email,
            hasTemplates: !!result.results?.template_data
          };
          
          console.log(`     –†–µ–∑—É–ª—å—Ç–∞—Ç: success=${result.success}, –≤—Ä–µ–º—è=${executionTime}ms`);
        } catch (error) {
          console.log(`     –û—à–∏–±–∫–∞: ${error.message}`);
          results[taskType] = { error: error.message };
        }
      }

      console.log('\n   –ê–ù–ê–õ–ò–ó –ü–ï–†–ï–ö–†–´–¢–ò–ô:');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Ç–∏–ø—ã –∑–∞–¥–∞—á –¥–µ–ª–∞—é—Ç –ø–æ—Ö–æ–∂–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
      const assetTasks = Object.entries(results).filter(([_, result]) => result.hasAssets);
      const renderingTasks = Object.entries(results).filter(([_, result]) => result.hasRendering);
      
      if (assetTasks.length > 1) {
        console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: ${assetTasks.length} —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á —Ä–∞–±–æ—Ç–∞—é—Ç —Å –∞—Å—Å–µ—Ç–∞–º–∏:`);
        assetTasks.forEach(([taskType]) => console.log(`     - ${taskType}`));
      }
      
      if (renderingTasks.length > 1) {
        console.log(`‚ùå –ü–†–û–ë–õ–ï–ú–ê: ${renderingTasks.length} —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –¥–µ–ª–∞—é—Ç —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥:`);
        renderingTasks.forEach(([taskType]) => console.log(`     - ${taskType}`));
      }

      console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–ø—Ä–æ—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á');
    });

    it('should show COMPLEX data transformations', async () => {
      console.log('üîç Testing complex data transformation chains...');
      
      const complexInput: DesignSpecialistInput = {
        task_type: 'render_email',
        content_package: {
          content: {
            subject: '–¢–µ—Å—Ç —Å–ª–æ–∂–Ω—ã—Ö —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö',
            preheader: '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤',
            body: '–¢–µ—Å—Ç–∏—Ä—É–µ–º extractContentData -> combineAssetResults -> formatDesignToQualityData',
            cta: '–ü—Ä–æ—Å–ª–µ–¥–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏',
            language: 'ru',
            tone: 'professional'
          },
          design_requirements: {
            tone: 'modern',
            style: 'minimal',
            color_scheme: 'blue',
            imagery_focus: 'photography',
            layout_priority: 'readability'
          },
          brand_guidelines: {
            brand_voice: 'friendly',
            visual_style: 'clean',
            color_palette: ['#4BFF7E', '#1DA857'],
            typography: 'Arial, sans-serif'
          }
        },
        asset_requirements: {
          tags: ['—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏', '–¥–∞–Ω–Ω—ã–µ'],
          emotional_tone: 'positive',
          campaign_type: 'promotional',
          target_count: 3,
          image_requirements: {
            total_images_needed: 3,
            figma_images_count: 2,
            internet_images_count: 1,
            require_logo: true,
            image_categories: ['illustration', 'photo']
          }
        },
        rendering_requirements: {
          output_format: 'html',
          template_type: 'promotional',
          email_client_optimization: 'universal',
          responsive_design: true,
          seasonal_theme: false
        }
      };

      try {
        console.log('   –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–æ–∂–Ω—É—é —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...');
        const result = await agent.executeTask(complexInput);
        
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: success=${result.success}`);
        
        if (result.success) {
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
          const dataLayers = [];
          if (result.results?.assets_data) dataLayers.push('assets processing');
          if (result.results?.rendered_email) dataLayers.push('email rendering');
          if (result.design_artifacts) dataLayers.push('design artifacts');
          if (result.recommendations?.handoff_data) dataLayers.push('handoff formatting');
          
          console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–µ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${dataLayers.length}`);
          dataLayers.forEach(layer => console.log(`     - ${layer}`));
          
          if (dataLayers.length > 3) {
            console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ª–æ–µ–≤ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö!');
            console.log('   –≠—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫:');
            console.log('   - –°–ª–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–ª–∞–¥–∫–∏');
            console.log('   - –ü–æ—Ç–µ—Ä–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
            console.log('   - –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ—Ç–µ—Ä–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–ª–æ—è–º–∏');
          }
        }
      } catch (error) {
        console.log(`   –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ª–æ–∂–Ω–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏: ${error.message}`);
        
        if (error.message.includes('validation') || error.message.includes('format')) {
          console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Ä—É—à–∞—é—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é!');
        }
      }
    });
  });

  describe('üìä COMPARISON WITH AUDIT FINDINGS', () => {
    
    it('should confirm ALL audit problems in real execution', async () => {
      console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º...');
      
      const problemsFound = {
        deprecatedFunctions: false,
        duplicateLogic: false,
        inconsistentErrors: false,
        noCache: false,
        complexTransformations: false,
        overlappingTasks: false
      };

      // –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
      const testInput: DesignSpecialistInput = {
        task_type: 'render_email',
        content_package: {
          content: {
            subject: '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º –∞—É–¥–∏—Ç–∞',
            preheader: '–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ',
            body: '–≠—Ç–æ—Ç —Ç–µ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤—ã—è–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∞—É–¥–∏—Ç–µ –∫–æ–¥–∞',
            cta: '–ù–∞–π—Ç–∏ –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã',
            language: 'ru',
            tone: 'professional'
          }
        },
        asset_requirements: {
          tags: ['–∞—É–¥–∏—Ç', '–ø—Ä–æ–±–ª–µ–º—ã', '—Ç–µ—Å—Ç'],
          target_count: 3
        }
      };

      try {
        const startTime = Date.now();
        const result = await agent.executeTask(testInput);
        const executionTime = Date.now() - startTime;
        
        console.log('\n   üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ü–†–û–ë–õ–ï–ú–ê–•:');
        console.log(`   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`);
        console.log(`   –†–µ–∑—É–ª—å—Ç–∞—Ç: success=${result.success}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–µ–¥–ª–µ–Ω–Ω–æ = –Ω–µ—Ç –∫—ç—à–∞)
        if (executionTime > 10000) { // –ë–æ–ª—å—à–µ 10 —Å–µ–∫—É–Ω–¥
          problemsFound.noCache = true;
          console.log('   ‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è (–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ)');
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        const dataComplexity = JSON.stringify(result).length;
        if (dataComplexity > 10000) { // –ë–æ–ª—å—à–æ–π –æ–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö
          problemsFound.complexTransformations = true;
          console.log('   ‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: –°–ª–æ–∂–Ω—ã–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        console.log('\n   üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:');
        Object.entries(problemsFound).forEach(([problem, found]) => {
          const status = found ? '‚ùå –ù–ê–ô–î–ï–ù–û' : '‚úÖ –ù–ï –û–ë–ù–ê–†–£–ñ–ï–ù–û';
          console.log(`   ${problem}: ${status}`);
        });
        
        const totalProblems = Object.values(problemsFound).filter(Boolean).length;
        console.log(`\n   –ò–¢–û–ì–û –ü–†–û–ë–õ–ï–ú –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û: ${totalProblems}/6`);
        
        if (totalProblems > 0) {
          console.log('\n   üö® –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –∞–≥–µ–Ω—Ç–∞!');
          console.log('   –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –≤–ª–∏—è—é—Ç –Ω–∞:');
          console.log('   - –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã');
          console.log('   - –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
          console.log('   - –°–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–¥–∞');
        }
        
      } catch (error) {
        console.log(`   ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: ${error.message}`);
        console.log('   –ê–≥–µ–Ω—Ç –Ω–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω–∏—Ç—å –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏!');
      }
    });
  });

  describe('üîß ARCHITECTURE ANALYSIS', () => {
    
    it('should analyze class complexity', () => {
      console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∫–ª–∞—Å—Å–∞
      const agentMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(agent))
        .filter(name => typeof agent[name] === 'function' && name !== 'constructor');
      
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤ –≤ –∫–ª–∞—Å—Å–µ: ${agentMethods.length}`);
      
      // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π
      const responsibilities = {
        asset_related: agentMethods.filter(m => m.includes('Asset') || m.includes('asset')),
        rendering_related: agentMethods.filter(m => m.includes('Render') || m.includes('render') || m.includes('template')),
        validation_related: agentMethods.filter(m => m.includes('validate') || m.includes('Validate')),
        data_transformation: agentMethods.filter(m => m.includes('extract') || m.includes('format') || m.includes('transform')),
        error_handling: agentMethods.filter(m => m.includes('error') || m.includes('Error'))
      };
      
      console.log('\n   üìä –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–ï –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ï–ô:');
      Object.entries(responsibilities).forEach(([category, methods]) => {
        console.log(`   ${category}: ${methods.length} –º–µ—Ç–æ–¥–æ–≤`);
        if (methods.length > 0) {
          methods.slice(0, 3).forEach(method => console.log(`     - ${method}`));
          if (methods.length > 3) console.log(`     ... –∏ –µ—â–µ ${methods.length - 3}`);
        }
      });
      
      const totalSpecialized = Object.values(responsibilities).reduce((sum, methods) => sum + methods.length, 0);
      const unspecialized = agentMethods.length - totalSpecialized;
      
      console.log(`\n   –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: ${totalSpecialized}`);
      console.log(`   –ù–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤: ${unspecialized}`);
      
      if (Object.values(responsibilities).filter(methods => methods.length > 5).length > 2) {
        console.log('\n   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ö–ª–∞—Å—Å –∏–º–µ–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π!');
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã');
      }
    });
  });
}); 