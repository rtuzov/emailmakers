/**
 * üîç –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ì–û DESIGN SPECIALIST AGENT
 * 
 * –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –≤ –∫–æ–¥–µ –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
 * - –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
 * - –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –∫–æ–¥–∞
 * - –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –º–µ—Ç–æ–¥–æ–≤
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
 */

import * as fs from 'fs';
import * as path from 'path';

describe('ORIGINAL DesignSpecialistAgent - STATIC CODE ANALYSIS', () => {
  const agentFilePath = path.resolve(__dirname, '../../src/agent/specialists/design-specialist-agent.ts');
  let agentCode: string;

  beforeAll(() => {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª: ${agentFilePath}`);
    try {
      agentCode = fs.readFileSync(agentFilePath, 'utf-8');
      console.log(`‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—Ä: ${agentCode.length} —Å–∏–º–≤–æ–ª–æ–≤`);
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${error.message}`);
      throw error;
    }
  });

  describe('üìè CODE SIZE & COMPLEXITY ANALYSIS', () => {
    
    it('should analyze file size and complexity metrics', () => {
      console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–º–µ—Ä–∞ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞...');
      
      const lines = agentCode.split('\n');
      const nonEmptyLines = lines.filter(line => line.trim().length > 0);
      const codeLines = lines.filter(line => {
        const trimmed = line.trim();
        return trimmed.length > 0 && !trimmed.startsWith('//') && !trimmed.startsWith('/*') && !trimmed.startsWith('*');
      });
      
      const fileSize = Buffer.byteLength(agentCode, 'utf8');
      const totalLines = lines.length;
      const commentLines = lines.filter(line => {
        const trimmed = line.trim();
        return trimmed.startsWith('//') || trimmed.startsWith('/*') || trimmed.startsWith('*');
      }).length;
      
      console.log(`üìä –ú–ï–¢–†–ò–ö–ò –†–ê–ó–ú–ï–†–ê:`);
      console.log(`   –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${Math.round(fileSize / 1024)}KB`);
      console.log(`   –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫: ${totalLines}`);
      console.log(`   –°—Ç—Ä–æ–∫ –∫–æ–¥–∞: ${codeLines.length}`);
      console.log(`   –ü—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫: ${totalLines - nonEmptyLines.length}`);
      console.log(`   –°—Ç—Ä–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: ${commentLines}`);
      
      // –ê–Ω–∞–ª–∏–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
      const methods = agentCode.match(/(?:private|public|async)\s+[\w\s]*\(/g) || [];
      const ifStatements = agentCode.match(/\bif\s*\(/g) || [];
      const forLoops = agentCode.match(/\bfor\s*\(/g) || [];
      const whileLoops = agentCode.match(/\bwhile\s*\(/g) || [];
      const tryCatchBlocks = agentCode.match(/\btry\s*\{/g) || [];
      
      console.log(`\nüîß –ú–ï–¢–†–ò–ö–ò –°–õ–û–ñ–ù–û–°–¢–ò:`);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç–æ–¥–æ–≤: ${methods.length}`);
      console.log(`   If-—É—Å–ª–æ–≤–∏–π: ${ifStatements.length}`);
      console.log(`   –¶–∏–∫–ª–æ–≤ for: ${forLoops.length}`);
      console.log(`   –¶–∏–∫–ª–æ–≤ while: ${whileLoops.length}`);
      console.log(`   Try-catch –±–ª–æ–∫–æ–≤: ${tryCatchBlocks.length}`);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å–ª–æ–∂–Ω–æ—Å—Ç—å (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)
      const cyclomaticComplexity = 1 + ifStatements.length + forLoops.length + whileLoops.length + tryCatchBlocks.length;
      console.log(`   –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: ${cyclomaticComplexity}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
      if (totalLines > 1000) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>1000 —Å—Ç—Ä–æ–∫)');
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –º–µ–Ω—å—à–∏–µ –º–æ–¥—É–ª–∏');
      }
      
      if (methods.length > 20) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –º–µ—Ç–æ–¥–æ–≤ –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ');
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏');
      }
      
      if (cyclomaticComplexity > 50) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í—ã—Å–æ–∫–∞—è —Ü–∏–∫–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å');
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –£–ø—Ä–æ—Å—Ç–∏—Ç—å –ª–æ–≥–∏–∫—É –∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏');
      }
      
      expect(totalLines).toBeGreaterThan(1000); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–æ–π
    });

    it('should analyze method size distribution', () => {
      console.log('üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –º–µ—Ç–æ–¥–æ–≤...');
      
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –º–µ—Ç–æ–¥—ã –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä—ã
      const methodRegex = /(?:private|public|async)[\s\w]*\([^)]*\)[^{]*\{/g;
      const methods: Array<{name: string, startLine: number, size: number}> = [];
      
      const lines = agentCode.split('\n');
      let match;
      
      while ((match = methodRegex.exec(agentCode)) !== null) {
        const methodStart = agentCode.substring(0, match.index).split('\n').length;
        const methodDeclaration = match[0];
        const methodName = methodDeclaration.match(/(?:private|public|async)\s+([\w\s]*)\s*\(/)?.[1]?.trim() || 'unknown';
        
        // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫)
        let braceCount = 0;
        let methodEnd = methodStart;
        let startBraceFound = false;
        
        for (let i = methodStart - 1; i < lines.length; i++) {
          const line = lines[i];
          if (line.includes('{')) {
            startBraceFound = true;
            braceCount += (line.match(/\{/g) || []).length;
          }
          if (line.includes('}')) {
            braceCount -= (line.match(/\}/g) || []).length;
          }
          
          if (startBraceFound && braceCount === 0) {
            methodEnd = i + 1;
            break;
          }
        }
        
        const methodSize = methodEnd - methodStart + 1;
        methods.push({
          name: methodName,
          startLine: methodStart,
          size: methodSize
        });
      }
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Ç–æ–¥—ã –ø–æ —Ä–∞–∑–º–µ—Ä—É
      methods.sort((a, b) => b.size - a.size);
      
      console.log(`üìä –¢–û–ü-10 –°–ê–ú–´–• –ë–û–õ–¨–®–ò–• –ú–ï–¢–û–î–û–í:`);
      methods.slice(0, 10).forEach((method, index) => {
        console.log(`   ${index + 1}. ${method.name}: ${method.size} —Å—Ç—Ä–æ–∫ (—Å—Ç—Ä–æ–∫–∞ ${method.startLine})`);
      });
      
      const averageMethodSize = methods.reduce((sum, method) => sum + method.size, 0) / methods.length;
      const largeMethods = methods.filter(method => method.size > 50);
      
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ï–¢–û–î–û–í:`);
      console.log(`   –í—Å–µ–≥–æ –º–µ—Ç–æ–¥–æ–≤: ${methods.length}`);
      console.log(`   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –º–µ—Ç–æ–¥–∞: ${Math.round(averageMethodSize)} —Å—Ç—Ä–æ–∫`);
      console.log(`   –ú–µ—Ç–æ–¥–æ–≤ >50 —Å—Ç—Ä–æ–∫: ${largeMethods.length}`);
      
      if (largeMethods.length > 0) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ù–∞–π–¥–µ–Ω—ã —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ –º–µ—Ç–æ–¥—ã!');
        console.log('   –ú–µ—Ç–æ–¥—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å <30 —Å—Ç—Ä–æ–∫ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏');
        console.log('   –ë–æ–ª—å—à–∏–µ –º–µ—Ç–æ–¥—ã:');
        largeMethods.slice(0, 5).forEach(method => {
          console.log(`     - ${method.name}: ${method.size} —Å—Ç—Ä–æ–∫`);
        });
      }
      
      expect(methods.length).toBeGreaterThan(0);
    });
  });

  describe('üîÑ CODE DUPLICATION ANALYSIS', () => {
    
    it('should detect duplicate code patterns', () => {
      console.log('üîç –ü–æ–∏—Å–∫ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –∫–æ–¥–∞...');
      
      const duplicatePatterns = [
        {
          name: 'Try-catch blocks',
          pattern: /try\s*\{[\s\S]*?\}\s*catch[\s\S]*?\{[\s\S]*?\}/g,
          description: '–ë–ª–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫'
        },
        {
          name: 'Console.log statements',
          pattern: /console\.log\([^)]*\)/g,
          description: '–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è'
        },
        {
          name: 'generateTraceId calls',
          pattern: /generateTraceId\(\)/g,
          description: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏'
        },
        {
          name: 'Content extraction patterns',
          pattern: /\.subject|\.preheader|\.body|\.cta/g,
          description: '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞'
        },
        {
          name: 'Asset search patterns',
          pattern: /figma.*search|asset.*search/gi,
          description: '–ü–æ–∏—Å–∫ –∞—Å—Å–µ—Ç–æ–≤'
        },
        {
          name: 'Error handling patterns',
          pattern: /error.*message|\.message/gi,
          description: '–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫'
        }
      ];
      
      console.log('üìä –ê–ù–ê–õ–ò–ó –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ô:');
      
      duplicatePatterns.forEach(pattern => {
        const matches = agentCode.match(pattern.pattern) || [];
        console.log(`   ${pattern.name}: ${matches.length} –≤—Ö–æ–∂–¥–µ–Ω–∏–π`);
        
        if (matches.length > 5) {
          console.log(`     ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è "${pattern.description}"`);
          console.log(`     –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –∏–ª–∏ —É—Ç–∏–ª–∏—Ç—É`);
        }
      });
      
      // –ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞
      const lines = agentCode.split('\n').map(line => line.trim()).filter(line => line.length > 10);
      const lineOccurrences: {[key: string]: number} = {};
      
      lines.forEach(line => {
        if (line.length > 20) { // –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–∏–º—ã–µ —Å—Ç—Ä–æ–∫–∏
          lineOccurrences[line] = (lineOccurrences[line] || 0) + 1;
        }
      });
      
      const duplicateLines = Object.entries(lineOccurrences)
        .filter(([line, count]) => count > 2)
        .sort(([,a], [,b]) => b - a)
        .slice(0, 10);
      
      if (duplicateLines.length > 0) {
        console.log('\nüîÑ –¢–û–ü –î–£–ë–õ–ò–†–£–Æ–©–ò–•–°–Ø –°–¢–†–û–ö:');
        duplicateLines.forEach(([line, count]) => {
          console.log(`   ${count}x: ${line.substring(0, 60)}...`);
        });
        
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Å—Ç—Ä–æ–∫–∏ –∫–æ–¥–∞!');
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è');
      }
      
      expect(duplicatePatterns).toBeDefined();
    });

    it('should analyze code structure and responsibilities', () => {
      console.log('üîç –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ–¥–∞ –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π...');
      
      const responsibilities = {
        'Asset Management': [
          /asset.*search/gi,
          /figma.*search/gi,
          /combineAssetResults/gi,
          /extractAssetPaths/gi
        ],
        'Email Rendering': [
          /render.*email/gi,
          /mjml.*template/gi,
          /generateMjmlTemplate/gi,
          /handleEmailRendering/gi
        ],
        'Data Validation': [
          /validate.*data/gi,
          /validateAndCorrect/gi,
          /HandoffValidator/gi,
          /DesignSpecialistValidator/gi
        ],
        'Error Handling': [
          /try.*catch/gi,
          /error.*handling/gi,
          /throw.*error/gi,
          /catch.*error/gi
        ],
        'Data Transformation': [
          /extractContentData/gi,
          /formatDesignToQualityData/gi,
          /parseAssistantFigmaResponse/gi,
          /transform.*data/gi
        ]
      };
      
      console.log('üìä –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ï–ô:');
      
      let totalMatches = 0;
      Object.entries(responsibilities).forEach(([category, patterns]) => {
        let categoryMatches = 0;
        patterns.forEach(pattern => {
          const matches = agentCode.match(pattern) || [];
          categoryMatches += matches.length;
        });
        
        console.log(`   ${category}: ${categoryMatches} —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤`);
        totalMatches += categoryMatches;
      });
      
      const responsibilityCount = Object.keys(responsibilities).length;
      console.log(`\nüìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–¢–í–ï–¢–°–¢–í–ï–ù–ù–û–°–¢–ï–ô:`);
      console.log(`   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π: ${responsibilityCount}`);
      console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${totalMatches}`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: ${Math.round(totalMatches / responsibilityCount)}`);
      
      if (responsibilityCount > 3) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ –æ–¥–Ω–æ–º –∫–ª–∞—Å—Å–µ!');
        console.log('   –ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ (SRP)');
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –†–∞–∑–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:');
        console.log('     - AssetManager –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Å—Å–µ—Ç–∞–º–∏');
        console.log('     - EmailRenderer –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –ø–∏—Å–µ–º');
        console.log('     - DataValidator –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        console.log('     - ErrorHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫');
      }
      
      expect(responsibilityCount).toBeGreaterThan(3); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø—Ä–æ–±–ª–µ–º—É
    });
  });

  describe('üîß ARCHITECTURAL PROBLEMS', () => {
    
    it('should identify architectural anti-patterns', () => {
      console.log('üîç –ü–æ–∏—Å–∫ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –∞–Ω—Ç–∏-–ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...');
      
      const antiPatterns = [
        {
          name: 'God Class',
          indicators: [
            agentCode.split('\n').length > 1000,
            (agentCode.match(/(?:private|public|async)\s+[\w\s]*\(/g) || []).length > 20,
            agentCode.includes('handleFullEmailGeneration') && agentCode.includes('handleAssetSelection') && agentCode.includes('handleEmailRendering')
          ],
          description: '–ö–ª–∞—Å—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π'
        },
        {
          name: 'Long Parameter List',
          indicators: [
            /\([^)]{100,}\)/g.test(agentCode), // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª–∏–Ω–Ω–µ–µ 100 —Å–∏–º–≤–æ–ª–æ–≤
            /\([^)]*,\s*[^)]*,\s*[^)]*,\s*[^)]*,\s*[^)]*,\s*[^)]*\)/g.test(agentCode) // 6+ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
          ],
          description: '–ú–µ—Ç–æ–¥—ã —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤'
        },
        {
          name: 'Shotgun Surgery',
          indicators: [
            (agentCode.match(/executeTask/g) || []).length > 1,
            (agentCode.match(/handleFullEmailGeneration|handleAssetSelection|handleEmailRendering|handleTemplateCreation/g) || []).length > 3
          ],
          description: '–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ç—Ä–µ–±—É—é—Ç –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –º–µ—Å—Ç'
        },
        {
          name: 'Feature Envy',
          indicators: [
            (agentCode.match(/\.figma/g) || []).length > 10,
            (agentCode.match(/\.assets/g) || []).length > 10,
            (agentCode.match(/\.content/g) || []).length > 15
          ],
          description: '–ö–ª–∞—Å—Å —Å–ª–∏—à–∫–æ–º –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –∫–ª–∞—Å—Å–æ–≤'
        },
        {
          name: 'Duplicate Code',
          indicators: [
            (agentCode.match(/try\s*\{/g) || []).length > 8,
            (agentCode.match(/console\.log/g) || []).length > 20,
            (agentCode.match(/generateTraceId\(\)/g) || []).length > 5
          ],
          description: '–î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö'
        }
      ];
      
      console.log('üö® –ù–ê–ô–î–ï–ù–ù–´–ï –ê–ù–¢–ò-–ü–ê–¢–¢–ï–†–ù–´:');
      
      let foundAntiPatterns = 0;
      antiPatterns.forEach(antiPattern => {
        const indicatorsPassed = antiPattern.indicators.filter(Boolean).length;
        const totalIndicators = antiPattern.indicators.length;
        
        if (indicatorsPassed > totalIndicators / 2) {
          foundAntiPatterns++;
          console.log(`   ‚ùå ${antiPattern.name}:`);
          console.log(`     ${antiPattern.description}`);
          console.log(`     –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: ${indicatorsPassed}/${totalIndicators}`);
        }
      });
      
      console.log(`\n–ò–¢–û–ì–û –ê–ù–¢–ò-–ü–ê–¢–¢–ï–†–ù–û–í: ${foundAntiPatterns}/${antiPatterns.length}`);
      
      if (foundAntiPatterns > 0) {
        console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ò–°–ü–†–ê–í–õ–ï–ù–ò–Æ:');
        console.log('   1. –†–∞–∑–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å –Ω–∞ –º–µ–Ω—å—à–∏–µ, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
        console.log('   2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω Strategy –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á');
        console.log('   3. –í—ã–Ω–µ—Å—Ç–∏ –æ–±—â—É—é –ª–æ–≥–∏–∫—É –≤ –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏–ª–∏ —É—Ç–∏–ª–∏—Ç—ã');
        console.log('   4. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Dependency Injection –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏');
        console.log('   5. –ü—Ä–∏–º–µ–Ω–∏—Ç—å Command pattern –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
      }
      
      expect(foundAntiPatterns).toBeGreaterThan(0); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º
    });

    it('should analyze dependencies and coupling', () => {
      console.log('üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏...');
      
      const imports = agentCode.match(/import\s+.*?from\s+['"][^'"]*['"]/g) || [];
      const externalDependencies = imports.filter(imp => 
        !imp.includes('../') && !imp.includes('./') && !imp.includes('src/')
      );
      const internalDependencies = imports.filter(imp => 
        imp.includes('../') || imp.includes('./') || imp.includes('src/')
      );
      
      console.log('üì¶ –ê–ù–ê–õ–ò–ó –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô:');
      console.log(`   –í—Å–µ–≥–æ –∏–º–ø–æ—Ä—Ç–æ–≤: ${imports.length}`);
      console.log(`   –í–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${externalDependencies.length}`);
      console.log(`   –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π: ${internalDependencies.length}`);
      
      // –ê–Ω–∞–ª–∏–∑ —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç–∏
      const classReferences = [
        { name: 'HandoffValidator', count: (agentCode.match(/HandoffValidator/g) || []).length },
        { name: 'DesignSpecialistValidator', count: (agentCode.match(/DesignSpecialistValidator/g) || []).length },
        { name: 'AICorrector', count: (agentCode.match(/AICorrector/g) || []).length },
        { name: 'OptimizationService', count: (agentCode.match(/OptimizationService/g) || []).length },
        { name: 'EmailFolderManager', count: (agentCode.match(/EmailFolderManager/g) || []).length }
      ];
      
      console.log('\nüîó –°–í–Ø–ó–ê–ù–ù–û–°–¢–¨ –° –î–†–£–ì–ò–ú–ò –ö–õ–ê–°–°–ê–ú–ò:');
      classReferences.forEach(ref => {
        console.log(`   ${ref.name}: ${ref.count} —Å—Å—ã–ª–æ–∫`);
      });
      
      const totalReferences = classReferences.reduce((sum, ref) => sum + ref.count, 0);
      const averageReferences = totalReferences / classReferences.length;
      
      console.log(`\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–í–Ø–ó–ê–ù–ù–û–°–¢–ò:`);
      console.log(`   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫: ${totalReferences}`);
      console.log(`   –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –∫–ª–∞—Å—Å: ${Math.round(averageReferences)}`);
      
      if (internalDependencies.length > 10) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!');
        console.log('   –í—ã—Å–æ–∫–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫—É');
      }
      
      if (averageReferences > 5) {
        console.log('‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í—ã—Å–æ–∫–∞—è —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –∫–ª–∞—Å—Å–∞–º–∏!');
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Dependency Injection –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã');
      }
      
      expect(imports.length).toBeGreaterThan(0);
    });
  });

  describe('üìà SUMMARY REPORT', () => {
    
    it('should generate comprehensive problem summary', () => {
      console.log('üîç –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö...');
      
      const lines = agentCode.split('\n');
      const methods = agentCode.match(/(?:private|public|async)\s+[\w\s]*\(/g) || [];
      const tryCatchBlocks = agentCode.match(/try\s*\{/g) || [];
      const imports = agentCode.match(/import\s+.*?from/g) || [];
      
      const problemSummary = {
        codeSize: {
          score: lines.length > 2000 ? 'CRITICAL' : lines.length > 1000 ? 'HIGH' : 'MEDIUM',
          details: `${lines.length} —Å—Ç—Ä–æ–∫ –∫–æ–¥–∞`
        },
        complexity: {
          score: methods.length > 30 ? 'CRITICAL' : methods.length > 20 ? 'HIGH' : 'MEDIUM',
          details: `${methods.length} –º–µ—Ç–æ–¥–æ–≤ –≤ –∫–ª–∞—Å—Å–µ`
        },
        errorHandling: {
          score: tryCatchBlocks.length > 10 ? 'HIGH' : tryCatchBlocks.length > 5 ? 'MEDIUM' : 'LOW',
          details: `${tryCatchBlocks.length} –±–ª–æ–∫–æ–≤ try-catch`
        },
        dependencies: {
          score: imports.length > 15 ? 'HIGH' : imports.length > 10 ? 'MEDIUM' : 'LOW',
          details: `${imports.length} –∏–º–ø–æ—Ä—Ç–æ–≤`
        }
      };
      
      console.log('\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ü–†–û–ë–õ–ï–ú–ê–•:');
      console.log('=' .repeat(50));
      
      Object.entries(problemSummary).forEach(([category, problem]) => {
        const severity = problem.score === 'CRITICAL' ? 'üî¥' : 
                        problem.score === 'HIGH' ? 'üü†' : 
                        problem.score === 'MEDIUM' ? 'üü°' : 'üü¢';
        
        console.log(`${severity} ${category.toUpperCase()}: ${problem.score}`);
        console.log(`   ${problem.details}`);
      });
      
      const criticalIssues = Object.values(problemSummary).filter(p => p.score === 'CRITICAL').length;
      const highIssues = Object.values(problemSummary).filter(p => p.score === 'HIGH').length;
      const totalIssues = criticalIssues + highIssues;
      
      console.log('\nüéØ –ü–†–ò–û–†–ò–¢–ï–¢–´ –†–ï–§–ê–ö–¢–û–†–ò–ù–ì–ê:');
      console.log(`   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º: ${criticalIssues}`);
      console.log(`   –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: ${highIssues}`);
      console.log(`   –í—Å–µ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: ${totalIssues}`);
      
      if (totalIssues > 0) {
        console.log('\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –†–ï–§–ê–ö–¢–û–†–ò–ù–ì!');
        console.log('   –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:');
        console.log('   1. –†–∞–∑–¥–µ–ª–∏—Ç—å –∫–ª–∞—Å—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã');
        console.log('   2. –í–Ω–µ–¥—Ä–∏—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
        console.log('   3. –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫');
        console.log('   4. –£–ø—Ä–æ—Å—Ç–∏—Ç—å –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –∏ —É–º–µ–Ω—å—à–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω–æ—Å—Ç—å');
        console.log('   5. –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ç–µ—Å—Ç—ã');
      }
      
      console.log('\n‚úÖ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù');
      console.log('   –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ –∞—É–¥–∏—Ç–µ, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º!');
      
      expect(totalIssues).toBeGreaterThan(0);
    });
  });
}); 