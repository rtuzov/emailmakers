/**
 * 🎯 FUNCTIONAL E2E MULTI-DESTINATION WORKFLOW TEST
 * 
 * Функциональный E2E тест полного multi-destination workflow
 * Тестирует интеграцию всех компонентов системы без браузера
 * 
 * @version 1.0.0
 * @requires Jest, Multi-destination types and utilities
 */

import { describe, it, expect } from '@jest/globals';
import path from 'path';

// Import types and utilities
import {
  type MultiDestinationPlan,
  type DestinationPlan,
  type GeographicalScope,
  validateMultiDestinationData,
  MULTI_DESTINATION_LIMITS,
  SUPPORTED_REGIONS,
  TRAVEL_SEASONS
} from '../../src/shared/types/multi-destination-types';

describe('Multi-Destination Functional E2E Tests', () => {

  describe('Complete Workflow Integration', () => {
    
    it('Should validate full Europe Autumn campaign workflow', async () => {
      // Step 1: Create mock geographical scope (as would be generated by ContentSpecialist)
      const geoScope: GeographicalScope = {
        query_type: 'regional',
        scope_level: 'continent',
        regions: ['Europe'],
        countries: ['France', 'Italy', 'Germany', 'Spain'],
        cities: [],
        scope_confidence: 95
      };

      expect(geoScope.query_type).toBe('regional');
      expect(geoScope.regions).toContain('Europe');
      expect(geoScope.scope_confidence).toBeGreaterThan(80);
      console.log('✅ Step 1: Geographical scope analyzed');

      // Step 2: Create destinations (as would be generated by DestinationAnalyzer)
      const destinations: DestinationPlan[] = [
        {
          destination: 'France',
          appeal_score: 95,
          seasonal_fit: 90,
          pricing_tier: 'mid-range',
          estimated_price_range: { min: 450, max: 750, currency: 'EUR' },
          marketing_appeal: {
            primary_attractions: ['Eiffel Tower', 'Louvre Museum'],
            unique_selling_points: ['Romantic atmosphere', 'World-class art'],
            target_audience_fit: 95,
            seasonal_highlights: ['Autumn foliage', 'Wine harvest season']
          }
        },
        {
          destination: 'Italy',
          appeal_score: 92,
          seasonal_fit: 88,
          pricing_tier: 'mid-range',
          estimated_price_range: { min: 400, max: 700, currency: 'EUR' },
          marketing_appeal: {
            primary_attractions: ['Colosseum', 'Vatican City'],
            unique_selling_points: ['Rich history', 'Amazing cuisine'],
            target_audience_fit: 90,
            seasonal_highlights: ['Pleasant weather', 'Harvest festivals']
          }
        },
        {
          destination: 'Germany',
          appeal_score: 88,
          seasonal_fit: 85,
          pricing_tier: 'mid-range',
          estimated_price_range: { min: 350, max: 600, currency: 'EUR' },
          marketing_appeal: {
            primary_attractions: ['Brandenburg Gate', 'Neuschwanstein Castle'],
            unique_selling_points: ['Oktoberfest', 'Christmas markets'],
            target_audience_fit: 88,
            seasonal_highlights: ['Beer festivals', 'Fall colors']
          }
        }
      ];

      expect(destinations.length).toBeGreaterThanOrEqual(MULTI_DESTINATION_LIMITS.MIN_DESTINATIONS);
      expect(destinations.length).toBeLessThanOrEqual(MULTI_DESTINATION_LIMITS.MAX_DESTINATIONS);
      console.log(`✅ Step 2: Generated ${destinations.length} destinations`);

      // Step 3: Create unified campaign plan (as would be generated by MultiDestinationPlanner)
      const campaignPlan: MultiDestinationPlan = {
        campaign_id: 'europe_autumn_2024_test123',
        geographical_scope: geoScope,
        destinations: destinations,
        seasonal_context: {
          target_season: 'autumn',
          optimal_months: [9, 10, 11],
          climate_considerations: {
            temperature_range: '15-25°C',
            weather_conditions: ['mild', 'occasional_rain'],
            daylight_hours: '10-12 hours'
          }
        },
        campaign_metadata: {
          total_destinations: destinations.length,
          primary_region: 'Europe',
          campaign_theme: 'autumn_discovery',
          target_demographics: 'travel_enthusiasts',
          budget_range: { min: 350, max: 750, currency: 'EUR' }
        }
      };

      expect(campaignPlan.campaign_id).toMatch(/^europe_autumn_\d{4}/);
      expect(campaignPlan.seasonal_context?.target_season).toBe('autumn');
      console.log('✅ Step 3: Campaign plan created');

      // Step 4: Validate layout compatibility (as would be done by DesignSpecialist)
      const optimalDestinationCount = destinations.length;
      let selectedLayoutType: 'grid' | 'compact' | 'carousel';
      
      if (optimalDestinationCount <= 3) {
        selectedLayoutType = 'compact';
      } else if (optimalDestinationCount <= 6) {
        selectedLayoutType = 'grid';
      } else {
        selectedLayoutType = 'carousel';
      }

      const templateName = `multi-destination-${selectedLayoutType}.mjml`;
      expect(['grid', 'compact', 'carousel']).toContain(selectedLayoutType);
      expect(templateName).toMatch(/\.mjml$/);
      console.log(`✅ Step 4: Selected ${selectedLayoutType} layout, template: ${templateName}`);

      // Step 5: Generate mock HTML (as would be done by MJML compilation)
      const mockHtmlOutput = generateMockHTML(campaignPlan, selectedLayoutType);
      
      expect(mockHtmlOutput).toBeDefined();
      expect(typeof mockHtmlOutput).toBe('string');
      expect(mockHtmlOutput.length).toBeGreaterThan(2000); // 2KB minimum
      expect(mockHtmlOutput.length).toBeLessThan(102400); // 100KB limit
      expect(mockHtmlOutput).toMatch(/<!DOCTYPE html/i);
      expect(mockHtmlOutput).toContain('<body>');
      expect(mockHtmlOutput).toMatch(/europe/i);
      expect(mockHtmlOutput).toMatch(/autumn/i);
      console.log(`✅ Step 5: HTML generated (${mockHtmlOutput.length} bytes)`);

      // Step 6: Generate assets (as would be done by Figma API / asset manager)
      const assets = generateAssets(campaignPlan);
      
      expect(assets).toBeDefined();
      expect(Array.isArray(assets)).toBe(true);
      expect(assets.length).toBeGreaterThan(0);
      
      const hasHeroImage = assets.some(asset => asset.includes('hero'));
      const hasDestinationImages = assets.some(asset => 
        destinations.some(dest => asset.toLowerCase().includes(dest.destination.toLowerCase()))
      );
      
      expect(hasHeroImage).toBe(true);
      expect(hasDestinationImages).toBe(true);
      console.log(`✅ Step 6: Generated ${assets.length} assets`);

      // Step 7: Quality validation (as would be done by QualitySpecialist)
      const qualityResults = validateEmailQuality({
        html: mockHtmlOutput,
        assets: assets,
        campaign: campaignPlan
      });
      
      expect(qualityResults.isValid).toBe(true);
      expect(qualityResults.qualityScore).toBeGreaterThan(70);
      expect(qualityResults.emailSizeValid).toBe(true);
      expect(qualityResults.assetValidation.valid).toBe(true);
      console.log(`✅ Step 7: Quality validation passed (score: ${qualityResults.qualityScore}%)`);

      // Step 8: Data consistency validation
      const dataValidation = validateMultiDestinationData(campaignPlan);
      
      expect(dataValidation.isValid).toBe(true);
      expect(dataValidation.errors).toHaveLength(0);
      expect(dataValidation.validationScore).toBeGreaterThan(70);
      console.log(`✅ Step 8: Data validation passed (score: ${dataValidation.validationScore}%)`);

      // Step 9: Asset organization (as would be done by DeliverySpecialist)
      const organizedAssets = organizeAssetsByDestination(assets, destinations);
      
      expect(organizedAssets.byCountry).toBeDefined();
      expect(Object.keys(organizedAssets.byCountry).length).toBeGreaterThan(0);
      expect(organizedAssets.shared).toBeDefined();
      expect(organizedAssets.metadata.totalAssets).toBe(assets.length);
      console.log(`✅ Step 9: Assets organized by ${Object.keys(organizedAssets.byCountry).length} countries`);

      // Final workflow validation
      const workflowSummary = {
        status: 'completed',
        campaign_id: campaignPlan.campaign_id,
        destinations_count: destinations.length,
        layout_type: selectedLayoutType,
        html_size: mockHtmlOutput.length,
        assets_count: assets.length,
        quality_score: qualityResults.qualityScore,
        validation_score: dataValidation.validationScore,
        processing_time: Date.now() // Mock processing time
      };

      expect(workflowSummary.status).toBe('completed');
      expect(workflowSummary.quality_score).toBeGreaterThan(70);
      expect(workflowSummary.validation_score).toBeGreaterThan(70);
      
      console.log('🎉 Complete Europe Autumn workflow successfully validated!');
      console.log(`   Final Summary: ${JSON.stringify(workflowSummary, null, 2)}`);
    });

    it('Should validate Asia Winter campaign workflow', async () => {
      // Quick test for Asia Winter scenario
      const geoScope: GeographicalScope = {
        query_type: 'regional',
        scope_level: 'continent',
        regions: ['Asia'],
        countries: ['Japan', 'Thailand', 'India'],
        cities: [],
        scope_confidence: 88
      };

      const destinations: DestinationPlan[] = [
        {
          destination: 'Japan',
          appeal_score: 94,
          seasonal_fit: 95,
          pricing_tier: 'luxury'
        },
        {
          destination: 'Thailand',
          appeal_score: 91,
          seasonal_fit: 89,
          pricing_tier: 'budget'
        },
        {
          destination: 'India',
          appeal_score: 87,
          seasonal_fit: 85,
          pricing_tier: 'mid-range'
        }
      ];

      const campaignPlan: MultiDestinationPlan = {
        campaign_id: 'asia_winter_2024_test456',
        geographical_scope: geoScope,
        destinations: destinations,
        seasonal_context: {
          target_season: 'winter',
          optimal_months: [12, 1, 2]
        },
        campaign_metadata: {
          total_destinations: destinations.length,
          primary_region: 'Asia',
          campaign_theme: 'winter_escape',
          target_demographics: 'winter_travelers'
        }
      };

      expect(campaignPlan.campaign_id).toMatch(/^asia_winter_\d{4}/);
      expect(campaignPlan.seasonal_context?.target_season).toBe('winter');
      expect(campaignPlan.geographical_scope.regions).toContain('Asia');

      const dataValidation = validateMultiDestinationData(campaignPlan);
      expect(dataValidation.isValid).toBe(true);

      console.log('🎉 Asia Winter workflow validation completed!');
    });
  });

  describe('Type System Validation', () => {
    
    it('Should validate all multi-destination types work correctly', () => {
      // Test supported regions
      expect(SUPPORTED_REGIONS).toContain('europe');
      expect(SUPPORTED_REGIONS).toContain('asia');
      
      // Test travel seasons
      expect(TRAVEL_SEASONS).toContain('autumn');
      expect(TRAVEL_SEASONS).toContain('winter');
      
      // Test limits
      expect(MULTI_DESTINATION_LIMITS.MIN_DESTINATIONS).toBe(2);
      expect(MULTI_DESTINATION_LIMITS.MAX_DESTINATIONS).toBe(12);
      
      console.log('✅ Type system validation passed');
    });

    it('Should handle edge cases gracefully', () => {
      // Test null/undefined data
      const nullValidation = validateMultiDestinationData(null);
      expect(nullValidation.isValid).toBe(false);
      expect(nullValidation.validationScore).toBe(0);
      
      // Test empty destinations
      const emptyData = {
        campaign_id: 'test_empty',
        destinations: []
      };
      
      const emptyValidation = validateMultiDestinationData(emptyData);
      expect(emptyValidation.isValid).toBe(false);
      expect(emptyValidation.errors.length).toBeGreaterThan(0);
      
      console.log('✅ Edge cases handled correctly');
    });
  });
});

/**
 * Generate mock HTML content for testing
 */
function generateMockHTML(campaign: MultiDestinationPlan, layoutType: string): string {
  const destinations = campaign.destinations;
  const season = campaign.seasonal_context?.target_season || 'autumn';
  
  const destinationCards = destinations.map(dest => `
    <div class="destination-card" style="margin: 20px; padding: 20px; border: 1px solid #ddd;">
      <h3>${dest.destination}</h3>
      <p>Appeal Score: ${dest.appeal_score}/100</p>
      <p>Seasonal Fit: ${dest.seasonal_fit || 85}/100</p>
      <p>Pricing: ${dest.pricing_tier}</p>
      <img src="https://cdn.example.com/${dest.destination.toLowerCase()}-${season}.jpg" 
           alt="${dest.destination}" 
           style="width: 100%; max-width: 300px; height: 200px;" />
    </div>
  `).join('');
  
  return `<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${campaign.campaign_id} - Multi-Destination Campaign</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 0; padding: 20px; max-width: 640px; }
    .header { text-align: center; margin-bottom: 30px; }
    .destinations { display: ${layoutType === 'grid' ? 'grid' : 'block'}; gap: 20px; }
    .destination-card { background: white; border-radius: 8px; overflow: hidden; }
    @media (max-width: 600px) { .destinations { display: block; } }
  </style>
</head>
<body>
  <div class="header">
    <h1>Discover ${campaign.geographical_scope.regions.join(' & ')} This ${season}</h1>
    <p>Experience the beauty of ${season} with our ${destinations.length} carefully selected destinations</p>
  </div>
  
  <div class="destinations">
    ${destinationCards}
  </div>
  
  <div style="text-align: center; margin-top: 40px;">
    <a href="https://example.com/book" style="background: #007bff; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px;">
      Book Your ${season.charAt(0).toUpperCase() + season.slice(1)} Journey
    </a>
  </div>
  
  <div style="margin-top: 40px; text-align: center; color: #666; font-size: 12px;">
    <p>Campaign: ${campaign.campaign_id} | Layout: ${layoutType}</p>
    <p>Destinations: ${destinations.length} | Generated: ${new Date().toISOString()}</p>
  </div>
</body>
</html>`;
}

/**
 * Generate mock assets for campaign
 */
function generateAssets(campaign: MultiDestinationPlan): string[] {
  const assets: string[] = [];
  const season = campaign.seasonal_context?.target_season || 'autumn';
  
  // Hero image
  assets.push(`${campaign.campaign_id}-hero-${season}.jpg`);
  
  // Destination images
  campaign.destinations.forEach(dest => {
    assets.push(`${dest.destination.toLowerCase()}-${season}.jpg`);
    assets.push(`${dest.destination.toLowerCase()}-thumbnail.jpg`);
  });
  
  // Branding assets
  assets.push(`${campaign.campaign_id}-logo.svg`);
  assets.push(`${campaign.campaign_id}-background.jpg`);
  
  return assets;
}

/**
 * Validate email quality (mock implementation)
 */
function validateEmailQuality(params: {
  html: string;
  assets: string[];
  campaign: MultiDestinationPlan;
}) {
  const { html, assets, campaign } = params;
  
  const htmlSizeKB = Buffer.byteLength(html, 'utf8') / 1024;
  const emailSizeValid = htmlSizeKB <= 100; // 100KB limit
  
  const assetValidation = {
    valid: assets.length > 0 && assets.every(asset => asset.match(/\.(jpg|jpeg|png|svg|webp)$/i)),
    count: assets.length
  };
  
  const destinationValidation = {
    valid: campaign.destinations.length >= 2 && campaign.destinations.length <= 12,
    count: campaign.destinations.length
  };
  
  let qualityScore = 100;
  if (!emailSizeValid) qualityScore -= 20;
  if (!assetValidation.valid) qualityScore -= 15;
  if (!destinationValidation.valid) qualityScore -= 25;
  
  return {
    isValid: qualityScore >= 70,
    qualityScore,
    emailSizeValid,
    assetValidation,
    destinationValidation,
    htmlSizeKB: Math.round(htmlSizeKB * 100) / 100
  };
}

/**
 * Organize assets by destination (mock implementation)
 */
function organizeAssetsByDestination(assets: string[], destinations: DestinationPlan[]) {
  const byCountry: Record<string, string[]> = {};
  const shared: string[] = [];
  
  destinations.forEach(dest => {
    byCountry[dest.destination] = assets.filter(asset => 
      asset.toLowerCase().includes(dest.destination.toLowerCase())
    );
  });
  
  // Shared assets (hero, logo, background)
  assets.forEach(asset => {
    const isShared = asset.includes('hero') || asset.includes('logo') || asset.includes('background');
    if (isShared) {
      shared.push(asset);
    }
  });
  
  return {
    byCountry,
    shared,
    metadata: {
      totalAssets: assets.length,
      countriesCount: Object.keys(byCountry).length,
      sharedCount: shared.length,
      organizationDate: new Date().toISOString()
    }
  };
}