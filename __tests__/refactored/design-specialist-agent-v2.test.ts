/**
 * üß™ DESIGN SPECIALIST AGENT V2 - COMPREHENSIVE TESTS
 * 
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã:
 * - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
 * - –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ fallback –ª–æ–≥–∏–∫–∏
 * - –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
 */

import { 
  DesignSpecialistAgentV2, 
  DesignSpecialistInputV2, 
  DesignSpecialistOutputV2, 
  DesignTaskType 
} from '../../src/agent/specialists/design-specialist-agent-v2';

describe('DesignSpecialistAgentV2', () => {
  let agent: DesignSpecialistAgentV2;

  beforeEach(() => {
    agent = new DesignSpecialistAgentV2();
    // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    agent.clearCaches();
  });

  describe('Initialization', () => {
    it('should initialize all services correctly', () => {
      const capabilities = agent.getCapabilities();
      
      expect(capabilities.agent_id).toBe('design-specialist-v2');
      expect(capabilities.version).toBe('2.0');
      expect(capabilities.supported_tasks).toContain('find_assets');
      expect(capabilities.supported_tasks).toContain('render_email');
      expect(capabilities.supported_tasks).toContain('optimize_design');
      expect(capabilities.performance_metrics.error_recovery).toBe(false); // –°—Ç—Ä–æ–≥–∏–π –ø–æ–¥—Ö–æ–¥
    });

    it('should have proper service separation', () => {
      const perfStats = agent.getPerformanceStats();
      
      expect(perfStats).toHaveProperty('asset_manager');
      expect(perfStats).toHaveProperty('rendering_service');
      expect(perfStats).toHaveProperty('error_metrics');
      expect(perfStats).toHaveProperty('system_health');
    });
  });

  describe('Input Validation', () => {
    it('should reject null/undefined input', async () => {
      await expect(agent.executeTask(null as any)).rejects.toThrow('Input is required');
      await expect(agent.executeTask(undefined as any)).rejects.toThrow('Input is required');
    });

    it('should reject missing task_type', async () => {
      const input = {
        content_package: { subject: 'Test' }
      } as DesignSpecialistInputV2;

      await expect(agent.executeTask(input)).rejects.toThrow('task_type is required');
    });

    it('should reject invalid task_type', async () => {
      const input = {
        task_type: 'invalid_task' as DesignTaskType,
        content_package: { subject: 'Test' }
      };

      await expect(agent.executeTask(input)).rejects.toThrow('Invalid task_type');
    });

    it('should reject missing content_package', async () => {
      const input = {
        task_type: 'find_assets'
      } as DesignSpecialistInputV2;

      await expect(agent.executeTask(input)).rejects.toThrow('content_package is required');
    });
  });

  describe('Content Extraction', () => {
    it('should extract content correctly from complete_content structure', async () => {
      const input: DesignSpecialistInputV2 = {
        task_type: 'find_assets',
        content_package: {
          complete_content: {
            subject: '–°–∫–∏–¥–∫–∞ 50% –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã!',
            preheader: '–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å',
            body: '–î—Ä—É–∑—å—è, —É –Ω–∞—Å –æ—Ç–ª–∏—á–Ω–∞—è –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö –ª—é–±–∏—Ç–µ–ª–µ–π –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π!',
            cta: '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–µ–π—á–∞—Å'
          },
          content_metadata: {
            language: 'ru',
            tone: 'friendly',
            word_count: 15
          }
        }
      };

      const result = await agent.executeTask(input);
      expect(result.success).toBe(true);
      expect(result.task_type).toBe('find_assets');
    });

    it('should fail without required content fields', async () => {
      const input: DesignSpecialistInputV2 = {
        task_type: 'find_assets',
        content_package: {
          complete_content: {
            subject: 'Test' // –ù–µ—Ç preheader, body, cta
          }
        }
      };

      const result = await agent.executeTask(input);
      expect(result.success).toBe(false);
      expect(result.error).toContain('Preheader is required');
    });

    it('should fail with too short content', async () => {
      const input: DesignSpecialistInputV2 = {
        task_type: 'find_assets',
        content_package: {
          complete_content: {
            subject: 'AB', // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            preheader: 'CD',
            body: 'Short',
            cta: 'X'
          }
        }
      };

      const result = await agent.executeTask(input);
      expect(result.success).toBe(false);
      expect(result.error).toContain('must be at least');
    });
  });

  describe('Find Assets Task', () => {
    const validInput: DesignSpecialistInputV2 = {
      task_type: 'find_assets',
      content_package: {
        complete_content: {
          subject: '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –º–µ—á—Ç—ã: –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã —Å–æ —Å–∫–∏–¥–∫–æ–π!',
          preheader: '–û—Ç–∫—Ä–æ–π –º–∏—Ä —Å –Ω–∞–º–∏',
          body: '–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –≤ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ! –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ —Å–∞–º—ã–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.',
          cta: '–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ'
        },
        content_metadata: {
          language: 'ru',
          tone: 'friendly'
        }
      },
      asset_requirements: {
        tags: ['–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Å–∞–º–æ–ª–µ—Ç', '–æ—Ç–ø—É—Å–∫'],
        emotional_tone: 'positive',
        campaign_type: 'promotional',
        target_count: 3,
        preferred_emotion: 'happy'
      }
    };

    it('should find assets successfully', async () => {
      const result = await agent.executeTask(validInput);
      
      expect(result.success).toBe(true);
      expect(result.task_type).toBe('find_assets');
      expect(result.results.assets).toBeDefined();
      expect(result.recommendations.next_actions).toContain('Use found assets for email rendering');
      expect(result.analytics.operations_performed).toBe(1);
      expect(result.analytics.confidence_score).toBeGreaterThanOrEqual(0);
    });

    it('should generate AI tags when none provided', async () => {
      const inputWithoutTags = {
        ...validInput,
        asset_requirements: {
          emotional_tone: 'positive' as const,
          campaign_type: 'promotional' as const,
          target_count: 3,
          preferred_emotion: 'happy' as const
        }
      };

      const result = await agent.executeTask(inputWithoutTags);
      
      // –î–æ–ª–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–≥–∏ —á–µ—Ä–µ–∑ AI
      expect(result.success).toBe(true);
      expect(result.results.assets?.search_metadata.query_tags.length).toBeGreaterThan(0);
    });

    it('should use caching for repeated requests', async () => {
      // –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
      const result1 = await agent.executeTask(validInput);
      const stats1 = agent.getPerformanceStats();
      
      // –í—Ç–æ—Ä–æ–π –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const result2 = await agent.executeTask(validInput);
      const stats2 = agent.getPerformanceStats();
      
      expect(result1.success).toBe(true);
      expect(result2.success).toBe(true);
      // –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä–µ–µ (–∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ)
      expect(result2.analytics.execution_time_ms).toBeLessThanOrEqual(result1.analytics.execution_time_ms);
    });
  });

  describe('Render Email Task', () => {
    const validInput: DesignSpecialistInputV2 = {
      task_type: 'render_email',
      content_package: {
        complete_content: {
          subject: '–≠–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞–º',
          preheader: '–¢–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è - —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã',
          body: '–î–æ—Ä–æ–≥–∏–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏! –ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∞–≤–∏–∞–±–∏–ª–µ—Ç–∞–º –≤ —Å–∞–º—ã–µ –∫—Ä–∞—Å–∏–≤—ã–µ —É–≥–æ–ª–∫–∏ –º–∏—Ä–∞.',
          cta: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
        },
        content_metadata: {
          language: 'ru',
          tone: 'professional'
        }
      },
      rendering_requirements: {
        template_type: 'promotional',
        email_client_optimization: 'universal',
        responsive_design: true,
        seasonal_theme: false,
        include_dark_mode: false
      }
    };

    it('should render email successfully', async () => {
      const result = await agent.executeTask(validInput);
      
      expect(result.success).toBe(true);
      expect(result.task_type).toBe('render_email');
      expect(result.results.rendering).toBeDefined();
      expect(result.results.rendering?.html_content).toContain('<html');
      expect(result.handoff_data).toBeDefined();
      expect(result.recommendations.next_agent).toBe('quality_specialist');
    });

    it('should choose correct rendering action based on requirements', async () => {
      const seasonalInput = {
        ...validInput,
        rendering_requirements: {
          ...validInput.rendering_requirements,
          seasonal_theme: true
        }
      };

      const result = await agent.executeTask(seasonalInput);
      expect(result.success).toBe(true);
      // Seasonal rendering –¥–æ–ª–∂–µ–Ω –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ–∑–æ–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    });

    it('should auto-search assets when none provided', async () => {
      const inputWithoutAssets = {
        ...validInput
        // –ù–µ—Ç asset_requirements - –¥–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –∞—Å—Å–µ—Ç—ã
      };

      const result = await agent.executeTask(inputWithoutAssets);
      
      expect(result.success).toBe(true);
      expect(result.analytics.operations_performed).toBe(2); // Search + rendering
    });

    it('should create valid handoff data', async () => {
      const result = await agent.executeTask(validInput);
      
      expect(result.success).toBe(true);
      expect(result.handoff_data).toBeDefined();
      
      const handoff = result.handoff_data!;
      expect(handoff.email_package.html_content).toBeTruthy();
      expect(handoff.original_content.complete_content.subject).toBe(validInput.content_package.complete_content.subject);
      expect(handoff.trace_id).toBeTruthy();
      expect(handoff.timestamp).toBeTruthy();
    });
  });

  describe('Optimize Design Task', () => {
    const validInput: DesignSpecialistInputV2 = {
      task_type: 'optimize_design',
      content_package: {
        complete_content: {
          subject: '–ë–æ–ª—å—à–∞—è —Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç–æ–≤!',
          preheader: '–°–∫–∏–¥–∫–∏ –¥–æ 70% –Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
          body: '–î—Ä—É–∑—å—è! –ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è—Ö. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã.',
          cta: '–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç'
        },
        content_metadata: {
          language: 'ru',
          tone: 'urgent'
        }
      },
      rendering_requirements: {
        template_type: 'promotional',
        email_client_optimization: 'all'
      }
    };

    it('should optimize design successfully', async () => {
      const result = await agent.executeTask(validInput);
      
      expect(result.success).toBe(true);
      expect(result.task_type).toBe('optimize_design');
      expect(result.results.optimization).toBeDefined();
      expect(result.recommendations.next_agent).toBe('delivery_specialist');
      expect(result.analytics.confidence_score).toBeGreaterThan(80); // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –≤—ã—Å–æ–∫—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    });

    it('should reduce file size during optimization', async () => {
      const result = await agent.executeTask(validInput);
      
      expect(result.success).toBe(true);
      const optimization = result.results.optimization!;
      expect(optimization.performance_metrics.total_size_kb).toBeLessThan(100); // –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ 100KB
    });
  });

  describe('Error Handling', () => {
    it('should handle content extraction errors properly', async () => {
      const invalidInput: DesignSpecialistInputV2 = {
        task_type: 'find_assets',
        content_package: {
          complete_content: {
            // –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç subject
            preheader: 'Test',
            body: 'Test body',
            cta: 'Test CTA'
          }
        }
      };

      const result = await agent.executeTask(invalidInput);
      
      expect(result.success).toBe(false);
      expect(result.error).toContain('Subject is required');
      expect(result.trace_id).toBeTruthy();
      expect(result.analytics.operations_performed).toBe(0);
      expect(result.analytics.confidence_score).toBe(0);
    });

    it('should not use fallback logic', async () => {
      const input: DesignSpecialistInputV2 = {
        task_type: 'find_assets',
        content_package: {
          complete_content: {
            subject: '', // –ü—É—Å—Ç–æ–π subject
            preheader: 'Test',
            body: 'Test body',
            cta: 'Test CTA'
          }
        }
      };

      const result = await agent.executeTask(input);
      
      // –î–æ–ª–∂–µ–Ω —Å—Ç—Ä–æ–≥–æ –ø—Ä–æ–≤–∞–ª–∏–≤–∞—Ç—å—Å—è –±–µ–∑ fallback
      expect(result.success).toBe(false);
      expect(result.error).toBeTruthy();
    });

    it('should provide meaningful error messages', async () => {
      const input: DesignSpecialistInputV2 = {
        task_type: 'render_email',
        content_package: {
          complete_content: {
            subject: 'AB', // –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π
            preheader: 'Test preheader',
            body: 'Test body content',
            cta: 'Test CTA'
          }
        }
      };

      const result = await agent.executeTask(input);
      
      expect(result.success).toBe(false);
      expect(result.error).toContain('ID:'); // –î–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å error ID
      expect(result.recommendations.next_actions).toContain('Review error details');
    });
  });

  describe('Performance and Caching', () => {
    it('should track performance metrics accurately', async () => {
      const input: DesignSpecialistInputV2 = {
        task_type: 'find_assets',
        content_package: {
          complete_content: {
            subject: '–¢–µ—Å—Ç–æ–≤—ã–π email –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
            preheader: '–ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç—Ä–∏–∫–∏',
            body: '–≠—Ç–æ—Ç email –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.',
            cta: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ'
          },
          content_metadata: {
            language: 'ru',
            tone: 'professional'
          }
        }
      };

      const result = await agent.executeTask(input);
      
      expect(result.success).toBe(true);
      expect(result.analytics.execution_time_ms).toBeGreaterThan(0);
      expect(result.analytics.execution_time_ms).toBeLessThan(30000); // –ù–µ –±–æ–ª–µ–µ 30 —Å–µ–∫—É–Ω–¥
      expect(result.analytics.operations_performed).toBeGreaterThan(0);
      expect(result.analytics.cache_hit_rate).toBeGreaterThanOrEqual(0);
    });

    it('should clear caches properly', () => {
      const statsBefore = agent.getPerformanceStats();
      
      agent.clearCaches();
      
      const statsAfter = agent.getPerformanceStats();
      
      // –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏
      expect(statsAfter.asset_manager.size).toBe(0);
      expect(statsAfter.rendering_service.size).toBe(0);
    });
  });

  describe('Task Type Unification', () => {
    it('should have only 3 main task types (no duplicates)', () => {
      const capabilities = agent.getCapabilities();
      
      expect(capabilities.supported_tasks).toHaveLength(3);
      expect(capabilities.supported_tasks).toEqual(['find_assets', 'render_email', 'optimize_design']);
    });

    it('should handle all task types without overlap', async () => {
      const baseInput = {
        content_package: {
          complete_content: {
            subject: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á',
            preheader: '–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø',
            body: '–≠—Ç–æ—Ç —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–¥–∞—á –∞–≥–µ–Ω—Ç–∞.',
            cta: '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á—É'
          },
          content_metadata: {
            language: 'ru',
            tone: 'professional'
          }
        }
      };

      const taskTypes: DesignTaskType[] = ['find_assets', 'render_email', 'optimize_design'];
      
      for (const taskType of taskTypes) {
        const input: DesignSpecialistInputV2 = {
          ...baseInput,
          task_type: taskType
        };

        const result = await agent.executeTask(input);
        
        expect(result.success).toBe(true);
        expect(result.task_type).toBe(taskType);
      }
    });
  });

  describe('System Health Monitoring', () => {
    it('should report system health correctly', () => {
      const health = agent.getPerformanceStats().system_health;
      
      expect(health.status).toMatch(/healthy|degraded|critical/);
      expect(health.critical_errors_count).toBeGreaterThanOrEqual(0);
      expect(Array.isArray(health.recommendations)).toBe(true);
    });

    it('should track error metrics', () => {
      const errorMetrics = agent.getPerformanceStats().error_metrics;
      
      expect(errorMetrics.total_errors).toBeGreaterThanOrEqual(0);
      expect(typeof errorMetrics.errors_by_type).toBe('object');
      expect(typeof errorMetrics.errors_by_severity).toBe('object');
      expect(errorMetrics.critical_errors_last_hour).toBeGreaterThanOrEqual(0);
    });
  });
}); 