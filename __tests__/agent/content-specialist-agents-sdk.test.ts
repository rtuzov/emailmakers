/**
 * üìù CONTENT SPECIALIST AGENT - OPENAI AGENTS SDK TEST
 * 
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è OpenAI Agents SDK –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ OpenAI API
 */

import { writeFileSync, mkdirSync, existsSync } from 'fs';
import * as path from 'path';

describe('Content Specialist Agent - OpenAI Agents SDK Test', () => {
  const testResultsDir = path.join(__dirname, '../test-results');
  const baseUrl = 'http://localhost:3000';

  beforeAll(() => {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!existsSync(testResultsDir)) {
      mkdirSync(testResultsDir, { recursive: true });
    }
  });

  it('should use OpenAI Agents SDK (not direct OpenAI API)', async () => {
    const requestBody = {
      task_type: 'generate_content',
      campaign_brief: {
        topic: '–ì–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –°–æ—á–∏',
        campaign_type: 'promotional',
        target_audience: '—Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏',
        seasonal_context: '–∑–∏–º–∞',
        brand_context: 'kupibilet'
      },
      content_requirements: {
        content_type: 'complete_campaign',
        tone: 'friendly',
        language: 'ru',
        generate_variants: false
      },
      previous_results: {
        pricing_data: {
          pricing_insights: {
            price_trend: 'increasing',
            urgency_level: 'high'
          },
          marketing_copy: {
            urgency_level: 'high'
          }
        }
      }
    };

    console.log('ü§ñ Testing OpenAI Agents SDK usage...');
    const startTime = Date.now();

    const response = await fetch(`${baseUrl}/api/agent/content-specialist`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody)
    });

    const responseTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è Response time: ${responseTime}ms`);

    expect(response.status).toBe(200);

    const result = await response.json();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–∞–π–ª
    const resultFilePath = path.join(testResultsDir, 'content-specialist-agents-sdk-result.json');
    writeFileSync(resultFilePath, JSON.stringify(result, null, 2));
    console.log('üíæ OpenAI Agents SDK result saved to:', resultFilePath);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è
    expect(result.success).toBe(true);
    expect(result.task_type).toBe('generate_content');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –æ—Ç OpenAI Agents SDK
    expect(result.results).toBeDefined();
    expect(result.recommendations).toBeDefined();
    expect(result.analytics).toBeDefined();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º handoff –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
    expect(result.recommendations.handoff_data).toBeDefined();
    expect(result.recommendations.handoff_data.content_package).toBeDefined();
    expect(result.recommendations.handoff_data.content_package.complete_content).toBeDefined();
    
    const content = result.recommendations.handoff_data.content_package.complete_content;
    expect(content.subject).toBeDefined();
    expect(content.preheader).toBeDefined();
    expect(content.body).toBeDefined();
    expect(content.cta).toBeDefined();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    expect(typeof content.subject).toBe('string');
    expect(content.subject.length).toBeGreaterThan(0);
    expect(typeof content.body).toBe('string');
    expect(content.body.length).toBeGreaterThan(100);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    expect(result.recommendations.handoff_data.content_package.content_metadata).toBeDefined();
    expect(result.recommendations.handoff_data.content_package.content_metadata.language).toBe('ru');
    
    console.log('‚úÖ OpenAI Agents SDK test completed successfully!');
    console.log('üìä Content generated:', {
      subject: content.subject,
      preheader: content.preheader,
      bodyLength: content.body.length,
      cta: content.cta,
      language: result.recommendations.handoff_data.content_package.content_metadata.language,
      tone: result.recommendations.handoff_data.content_package.content_metadata.tone
    });
    
    // –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–≥–µ–Ω—Ç—É
    const handoffData = {
      source_agent: 'content_specialist',
      timestamp: new Date().toISOString(),
      success: true,
      ready_for_next_agent: true,
      next_agent: 'design_specialist',
      content_package: content,
      execution_time: responseTime,
      used_openai_agents_sdk: true // –ú–∞—Ä–∫–µ—Ä —Ç–æ–≥–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è OpenAI Agents SDK
    };
    
    const handoffFilePath = path.join(testResultsDir, 'content-specialist-agents-sdk-handoff.json');
    writeFileSync(handoffFilePath, JSON.stringify(handoffData, null, 2));
    console.log('üîÑ Handoff data saved to:', handoffFilePath);

  }, 60000); // 60 second timeout for real OpenAI Agents SDK calls
}); 