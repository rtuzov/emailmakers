/**
 * Comprehensive Route Extraction Test
 * Tests the fixed route extraction functionality to ensure Russian city names
 * are properly converted to IATA codes and invalid words are filtered out
 */

import { ContentSpecialistAgent } from '../../src/agent/specialists/content-specialist-agent';

describe('Route Extraction Comprehensive Test', () => {
  let contentSpecialist: ContentSpecialistAgent;

  beforeEach(() => {
    contentSpecialist = new ContentSpecialistAgent();
  });

  afterEach(async () => {
    await contentSpecialist.shutdown();
  });

  describe('Fixed Route Extraction', () => {
    test('should NOT extract "–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã" as origin city', () => {
      const text = "–ì–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –°–æ—á–∏ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã";
      
      // Access the private method for testing
      const extractRoutesFromText = (contentSpecialist as any).extractRoutesFromText.bind(contentSpecialist);
      const routes = extractRoutesFromText(text);

      console.log('üß™ Testing text:', text);
      console.log('üìç Extracted routes:', routes);

      // Should extract "–ú–æ—Å–∫–≤–∞ ‚Üí –°–æ—á–∏", NOT "–ê–≤–∏–∞–±–∏–ª–µ—Ç—ã ‚Üí –°–æ—á–∏"
      expect(routes).toHaveLength(1);
      expect(routes[0]).toEqual({
        origin: 'MOW', // –ú–æ—Å–∫–≤–∞
        destination: 'AER' // –°–æ—á–∏
      });
    });

    test('should properly extract routes from various Russian text patterns', () => {
      const testCases = [
        {
          text: "–ë–∏–ª–µ—Ç—ã –∏–∑ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞ –≤ –ü–∞—Ä–∏–∂",
          expected: [{ origin: 'LED', destination: 'PAR' }]
        },
        {
          text: "–î–µ—à–µ–≤—ã–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –ú–æ—Å–∫–≤–∞-–õ–æ–Ω–¥–æ–Ω",
          expected: [{ origin: 'MOW', destination: 'LON' }]
        },
        {
          text: "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –î—É–±–∞–π –∏–∑ –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥–∞",
          expected: [{ origin: 'SVX', destination: 'DXB' }]
        },
        {
          text: "–û—Ç–¥—ã—Ö –Ω–∞ –ë–∞–ª–∏",
          expected: [{ origin: 'MOW', destination: 'DPS' }] // Default origin for Bali
        }
      ];

      const extractRoutesFromText = (contentSpecialist as any).extractRoutesFromText.bind(contentSpecialist);

      testCases.forEach(({ text, expected }) => {
        const routes = extractRoutesFromText(text);
        console.log(`üß™ Testing: "${text}"`);
        console.log(`üìç Expected: ${JSON.stringify(expected)}`);
        console.log(`üìç Actual: ${JSON.stringify(routes)}`);
        
        expect(routes).toHaveLength(expected.length);
        routes.forEach((route, index) => {
          expect(route).toEqual(expected[index]);
        });
      });
    });

    test('should filter out non-city words from route extraction', () => {
      const excludeWords = [
        '–∞–≤–∏–∞–±–∏–ª–µ—Ç—ã', '–±–∏–ª–µ—Ç—ã', '—Ä–µ–π—Å—ã', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è', '—Ç—É—Ä—ã', 
        '–æ—Ç–¥—ã—Ö', '–∫–∞–Ω–∏–∫—É–ª—ã', '–≥–æ—Ä—è—â–∏–µ', '–∞–∫—Ü–∏–∏', '—Å–∫–∏–¥–∫–∏'
      ];

      const extractRoutesFromText = (contentSpecialist as any).extractRoutesFromText.bind(contentSpecialist);

      excludeWords.forEach(word => {
        const text = `${word} –≤ –°–æ—á–∏`;
        const routes = extractRoutesFromText(text);
        
        console.log(`üß™ Testing exclude word: "${word}"`);
        console.log(`üìç Text: "${text}"`);
        console.log(`üìç Routes: ${JSON.stringify(routes)}`);

        // Should extract default route to Sochi, not use the exclude word as origin
        if (routes.length > 0) {
          expect(routes[0].origin).not.toBe(word.toUpperCase());
          expect(routes[0].destination).toBe('AER'); // –°–æ—á–∏
        }
      });
    });

    test('should handle complex travel marketing text correctly', () => {
      const complexText = `
        üî• –ì–û–†–Ø–©–ò–ï –ê–í–ò–ê–ë–ò–õ–ï–¢–´! 
        
        –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è:
        - –ú–æ—Å–∫–≤–∞ ‚Üí –°–æ—á–∏ –æ—Ç 5,990‚ÇΩ
        - –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ ‚Üí –ü–∞—Ä–∏–∂ –æ—Ç 15,990‚ÇΩ  
        - –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ ‚Üí –î—É–±–∞–π –æ—Ç 25,990‚ÇΩ
        
        –ë—Ä–æ–Ω–∏—Ä—É–π—Ç–µ –±–∏–ª–µ—Ç—ã –Ω–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã!
        –û—Ç–¥—ã—Ö –≤ –¢—É—Ä—Ü–∏–∏ –∏–∑ –ö–∞–∑–∞–Ω–∏ - –ª—É—á—à–∏–µ —Ü–µ–Ω—ã!
      `;

      const extractRoutesFromText = (contentSpecialist as any).extractRoutesFromText.bind(contentSpecialist);
      const routes = extractRoutesFromText(complexText);

      console.log('üß™ Testing complex marketing text');
      console.log('üìç Extracted routes:', routes);

      // Should extract multiple valid routes
      expect(routes.length).toBeGreaterThan(0);
      
      // Verify specific routes are correctly extracted
      const expectedRoutes = [
        { origin: 'MOW', destination: 'AER' }, // –ú–æ—Å–∫–≤–∞ ‚Üí –°–æ—á–∏
        { origin: 'LED', destination: 'PAR' }, // –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥ ‚Üí –ü–∞—Ä–∏–∂
        { origin: 'SVX', destination: 'DXB' }, // –ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥ ‚Üí –î—É–±–∞–π
        { origin: 'KZN', destination: 'MOW' }  // –ö–∞–∑–∞–Ω—å ‚Üí default for Turkey (approximation)
      ];

      // Check that we have valid IATA codes
      routes.forEach(route => {
        expect(route.origin).toMatch(/^[A-Z]{3}$/);
        expect(route.destination).toMatch(/^[A-Z]{3}$/);
        expect(route.origin).not.toBe(route.destination);
      });
    });

    test('should handle edge cases and invalid inputs', () => {
      const edgeCases = [
        "",
        "–ù–∏–∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–æ–≤ –≤ —ç—Ç–æ–º —Ç–µ–∫—Å—Ç–µ",
        "123 456 789",
        "–∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –±–∏–ª–µ—Ç—ã —Ä–µ–π—Å—ã", // Only exclude words
        "–≤ –≤ –≤ –∏–∑ –∏–∑ –∏–∑" // Only prepositions
      ];

      const extractRoutesFromText = (contentSpecialist as any).extractRoutesFromText.bind(contentSpecialist);

      edgeCases.forEach(text => {
        const routes = extractRoutesFromText(text);
        console.log(`üß™ Testing edge case: "${text}"`);
        console.log(`üìç Routes: ${JSON.stringify(routes)}`);
        
        // Should return empty array or valid routes only
        routes.forEach(route => {
          expect(route.origin).toMatch(/^[A-Z]{3}$/);
          expect(route.destination).toMatch(/^[A-Z]{3}$/);
          expect(route.origin).not.toBe(route.destination);
        });
      });
    });

    test('should demonstrate the original bug fix', () => {
      // This is the exact text that caused the original issue
      const originalProblemText = "–ì–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –°–æ—á–∏ –∏–∑ –ú–æ—Å–∫–≤—ã –Ω–∞ –Ω–æ–≤–æ–≥–æ–¥–Ω–∏–µ –∫–∞–Ω–∏–∫—É–ª—ã";
      
      const extractRoutesFromText = (contentSpecialist as any).extractRoutesFromText.bind(contentSpecialist);
      const routes = extractRoutesFromText(originalProblemText);

      console.log('üß™ Original problem text:', originalProblemText);
      console.log('üìç Fixed extraction result:', routes);

      // BEFORE FIX: Would have extracted [{ origin: "–ê–í–ò–ê–ë–ò–õ–ï–¢–´", destination: "AER" }]
      // AFTER FIX: Should extract [{ origin: "MOW", destination: "AER" }]
      
      expect(routes).toHaveLength(1);
      expect(routes[0]).toEqual({
        origin: 'MOW', // –ú–æ—Å–∫–≤–∞ (not "–ê–í–ò–ê–ë–ò–õ–ï–¢–´")
        destination: 'AER' // –°–æ—á–∏
      });

      // Verify the bug is fixed
      expect(routes[0].origin).not.toBe('–ê–í–ò–ê–ë–ò–õ–ï–¢–´');
      expect(routes[0].origin).not.toBe('–∞–≤–∏–∞–±–∏–ª–µ—Ç—ã');
    });
  });
}); 