/**
 * üìù CONTENT SPECIALIST AGENT API TESTS
 * 
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ContentSpecialistAgent —á–µ—Ä–µ–∑ API endpoint
 * –ë–ï–ó –ü–†–Ø–ú–û–ì–û –ò–ú–ü–û–†–¢–ê –ú–û–î–£–õ–ï–ô - –∏—Å–ø–æ–ª—å–∑—É–µ–º HTTP –∑–∞–ø—Ä–æ—Å—ã
 */

import { promises as fs } from 'fs';
import { statSync, existsSync, mkdirSync, writeFileSync } from 'fs';
import * as path from 'path';

describe('ContentSpecialistAgent API Tests', () => {
  const testResultsDir = path.join(__dirname, '../test-results');
  const baseUrl = 'http://localhost:3000';

  beforeAll(async () => {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–æ–≤
    if (!existsSync(testResultsDir)) {
      mkdirSync(testResultsDir, { recursive: true });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
    if (!process.env.OPENAI_API_KEY) {
      throw new Error('OPENAI_API_KEY environment variable is required for real tests');
    }

    console.log('üîë OpenAI API Key found, proceeding with API tests...');
  });

  describe('Real Content Generation via API', () => {
    it('should generate real email content through API endpoint', async () => {
      const requestBody = {
        task_type: 'generate_content',
        campaign_brief: {
          topic: '–ì–æ—Ä—è—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –≤ –°–æ—á–∏',
          campaign_type: 'promotional',
          target_audience: '—Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏',
          seasonal_context: '–∑–∏–º–∞',
          brand_context: 'kupibilet'
        },
        content_requirements: {
          content_type: 'complete_campaign',
          tone: 'friendly',
          language: 'ru',
          generate_variants: false
        },
        previous_results: {
          pricing_data: {
            pricing_insights: {
              price_trend: 'increasing',
              urgency_level: 'high'
            },
            marketing_copy: {
              urgency_level: 'high'
            }
          }
        }
      };

      console.log('üöÄ Starting REAL Content Specialist API test...');
      console.log('üìã Request body:', JSON.stringify(requestBody, null, 2));
      console.log('‚è±Ô∏è  Test timeout: 60 seconds');

      const startTime = Date.now();
      
      try {
        // –î–µ–ª–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π HTTP –∑–∞–ø—Ä–æ—Å –∫ API
        const response = await fetch(`${baseUrl}/api/agent/content-specialist`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(requestBody)
        });

        const executionTime = Date.now() - startTime;

        console.log(`‚úÖ API response received in ${executionTime}ms`);
        console.log('üìä Response status:', response.status);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
        expect(response.ok).toBe(true);
        expect(response.status).toBe(200);

        const result = await response.json();

        console.log('üìä Result structure:', Object.keys(result));

        // –í–°–ï–ì–î–ê —Å–æ—Ö—Ä–∞–Ω—è–µ–º –†–ï–ê–õ–¨–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Design Specialist
        const resultFilePath = path.join(testResultsDir, 'content-specialist-openai-result.json');
        writeFileSync(resultFilePath, JSON.stringify(result, null, 2));

        console.log('üíæ Real OpenAI result saved to:', resultFilePath);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try {
          const fileStats = statSync(resultFilePath);
          console.log('üìÑ File size:', fileStats.size, 'bytes');
        } catch (err) {
          console.log('üìÑ File created successfully (size check skipped)');
        }

        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        expect(result).toBeDefined();
        expect(result.success).toBe(true);
        expect(result.task_type).toBe('generate_content');
        expect(result.results).toBeDefined();
        expect(result.recommendations).toBeDefined();
        expect(result.analytics).toBeDefined();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞
        expect(result.recommendations.next_agent).toBe('design_specialist');
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        console.log('üîç Detailed result structure:');
        console.log('   - success:', result.success);
        console.log('   - task_type:', result.task_type);
        console.log('   - results keys:', Object.keys(result.results || {}));
        console.log('   - recommendations keys:', Object.keys(result.recommendations || {}));
        console.log('   - analytics keys:', Object.keys(result.analytics || {}));
        
        if (result.recommendations.handoff_data) {
          console.log('   - handoff_data keys:', Object.keys(result.recommendations.handoff_data));
          
          if (result.recommendations.handoff_data.content_package) {
            console.log('   - content_package keys:', Object.keys(result.recommendations.handoff_data.content_package));
            
            if (result.recommendations.handoff_data.content_package.content) {
              const content = result.recommendations.handoff_data.content_package.content;
              
              console.log('üìù REAL Generated Content from OpenAI API:');
              console.log('   Subject:', content.subject);
              console.log('   Preheader:', content.preheader);
              console.log('   Body (first 150 chars):', content.body?.substring(0, 150) + '...');
              console.log('   CTA:', content.cta);
              console.log('   Language:', content.language);
              console.log('   Tone:', content.tone);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç OpenAI
              expect(content.subject).toBeDefined();
              expect(content.subject).not.toBe('');
              expect(typeof content.subject).toBe('string');
              expect(content.subject.length).toBeGreaterThan(5);

              expect(content.preheader).toBeDefined();
              expect(content.preheader).not.toBe('');
              expect(typeof content.preheader).toBe('string');
              expect(content.preheader.length).toBeGreaterThan(10);

              expect(content.body).toBeDefined();
              expect(content.body).not.toBe('');
              expect(typeof content.body).toBe('string');
              expect(content.body.length).toBeGreaterThan(20);

              expect(content.cta).toBeDefined();
              expect(content.cta).not.toBe('');
              expect(typeof content.cta).toBe('string');
              expect(content.cta.length).toBeGreaterThan(3);

              expect(content.language).toBe('ru');
              expect(content.tone).toBe('friendly');

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
              expect(content.subject).toMatch(/[–∞-—è—ë]/i);
              expect(content.body).toMatch(/[–∞-—è—ë]/i);

              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–æ–Ω—Ç–µ–Ω—Ç —Å–≤—è–∑–∞–Ω —Å —Ç–µ–º–æ–π
              const topicKeywords = ['—Å–æ—á–∏', '–∞–≤–∏–∞–±–∏–ª–µ—Ç', '–±–∏–ª–µ—Ç', '–ø—É—Ç–µ—à–µ—Å—Ç–≤', '–æ—Ç–¥—ã—Ö'];
              const fullText = (content.subject + ' ' + content.body + ' ' + content.preheader).toLowerCase();
              const hasTopicKeywords = topicKeywords.some(keyword => fullText.includes(keyword));
              expect(hasTopicKeywords).toBe(true);
            } else {
              console.log('‚ö†Ô∏è  content_package.content is missing');
            }
          } else {
            console.log('‚ö†Ô∏è  content_package is missing');
          }
        } else {
          console.log('‚ö†Ô∏è  handoff_data is missing');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏–∫—É
        if (result.analytics) {
          expect(result.analytics.execution_time).toBeGreaterThan(0);
          expect(result.analytics.confidence_score).toBeGreaterThan(0);
          expect(result.analytics.confidence_score).toBeLessThanOrEqual(100);

          console.log('üìà Analytics from real API execution:');
          console.log('   Execution Time:', result.analytics.execution_time, 'ms');
          console.log('   Confidence Score:', result.analytics.confidence_score, '%');
          console.log('   Operations Performed:', result.analytics.operations_performed);
          console.log('   Agent Efficiency:', result.analytics.agent_efficiency, '%');
        }

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–∫–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π –∞–≥–µ–Ω—Ç
        const handoffFilePath = path.join(testResultsDir, 'content-specialist-handoff.json');
        const handoffData = {
          source_agent: 'content_specialist',
          timestamp: new Date().toISOString(),
          execution_time_ms: executionTime,
          openai_response: result,
          ready_for_design_agent: !!(result.recommendations?.handoff_data?.content_package?.content),
          content_summary: result.recommendations?.handoff_data?.content_package?.content ? {
            has_subject: !!result.recommendations.handoff_data.content_package.content.subject,
            has_body: !!result.recommendations.handoff_data.content_package.content.body,
            has_cta: !!result.recommendations.handoff_data.content_package.content.cta,
            language: result.recommendations.handoff_data.content_package.content.language,
            tone: result.recommendations.handoff_data.content_package.content.tone
          } : null
        };
        
        writeFileSync(handoffFilePath, JSON.stringify(handoffData, null, 2));
        console.log('üîó Handoff data saved to:', handoffFilePath);

        console.log('‚úÖ Content Specialist test completed!');
        console.log('üîÑ Files ready for next agent:');
        console.log('   1. Full result:', resultFilePath);
        console.log('   2. Handoff data:', handoffFilePath);

      } catch (error) {
        console.error('‚ùå Real API test failed:', error);
        
        // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        if (error instanceof Error) {
          console.error('Error message:', error.message);
          console.error('Error stack:', error.stack);
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ –≤ —Ñ–∞–π–ª
        const errorFilePath = path.join(testResultsDir, 'content-specialist-error.json');
        writeFileSync(errorFilePath, JSON.stringify({
          error: error instanceof Error ? error.message : String(error),
          timestamp: new Date().toISOString(),
          test_type: 'content_specialist_api'
        }, null, 2));
        
        throw error;
      }

    }, 60000); // 60 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ API –≤—ã–∑–æ–≤–∞
  });

  describe('Server Health Check', () => {
    it('should verify server is running', async () => {
      try {
        const response = await fetch(`${baseUrl}/api/health`);
        expect(response.ok).toBe(true);
        
        const health = await response.json();
        console.log('üè• Server health status:', health.status);
        
      } catch (error) {
        console.error('‚ùå Server is not running. Please start the server first:', error);
        throw new Error('Server is not running on port 3000. Please run: npm run dev');
      }
    });
  });

  describe('Environment Check', () => {
    it('should verify OpenAI API key is configured', async () => {
      try {
        const response = await fetch(`${baseUrl}/api/agent/env-check`);
        expect(response.ok).toBe(true);
        
        const envCheck = await response.json();
        console.log('üîß Environment check summary:');
        console.log('   - Total services:', envCheck.summary?.total_services);
        console.log('   - Ready services:', envCheck.summary?.ready_services);
        console.log('   - Critical ready:', envCheck.summary?.critical_ready);
        
        expect(envCheck.summary?.critical_ready).toBe(true);
        
      } catch (error) {
        console.error('‚ùå Environment check failed:', error);
        throw error;
      }
    });
  });
});

/**
 * üìã –§–ê–ô–õ–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í –î–õ–Ø –°–õ–ï–î–£–Æ–©–ò–• –ê–ì–ï–ù–¢–û–í
 * 
 * –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ —Å–æ–∑–¥–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã:
 * 
 * 1. content-specialist-openai-result.json
 *    - –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç OpenAI API
 *    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏
 * 
 * 2. content-specialist-handoff.json  
 *    - –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ Design Specialist
 *    - –°–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏ —Ñ–ª–∞–≥–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
 * 
 * 3. content-specialist-error.json (–µ—Å–ª–∏ –æ—à–∏–±–∫–∞)
 *    - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */ 