/**
 * Search Parser Unit Tests
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ –∏ —Ñ—É–Ω–∫—Ü–∏–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
 */

import {
  parseSearchQuery,
  calculateRelevanceScore,
  highlightSearchTerms,
  createSearchSnippet,
  validateSearchQuery,
  defaultSearchWeights
} from '@/shared/utils/search-parser'

describe('üîç Search Parser Tests', () => {
  describe('parseSearchQuery', () => {
    test('should parse simple terms', () => {
      const result = parseSearchQuery('–ø–∞—Ä–∏–∂ –æ—Ç–¥—ã—Ö')
      
      expect(result.terms).toEqual(['–ø–∞—Ä–∏–∂', '–æ—Ç–¥—ã—Ö'])
      expect(result.exactPhrases).toEqual([])
      expect(result.excludedTerms).toEqual([])
      expect(result.fieldQueries).toEqual([])
      expect(result.orQueries).toEqual([])
      expect(result.originalQuery).toBe('–ø–∞—Ä–∏–∂ –æ—Ç–¥—ã—Ö')
    })

    test('should parse exact phrases', () => {
      const result = parseSearchQuery('–∫—É–ø–∏–±–∏–ª–µ—Ç "–ø–∞—Ä–∫ –≥–æ—Ä—å–∫–æ–≥–æ" –º–æ—Å–∫–≤–∞')
      
      expect(result.terms).toEqual(['–∫—É–ø–∏–±–∏–ª–µ—Ç', '–º–æ—Å–∫–≤–∞'])
      expect(result.exactPhrases).toEqual(['–ø–∞—Ä–∫ –≥–æ—Ä—å–∫–æ–≥–æ'])
      expect(result.excludedTerms).toEqual([])
    })

    test('should parse excluded terms', () => {
      const result = parseSearchQuery('–æ—Ç–¥—ã—Ö -–¥–æ—Ä–æ–≥–æ -–±—é–¥–∂–µ—Ç')
      
      expect(result.terms).toEqual(['–æ—Ç–¥—ã—Ö'])
      expect(result.excludedTerms).toEqual(['–¥–æ—Ä–æ–≥–æ', '–±—é–¥–∂–µ—Ç'])
      expect(result.exactPhrases).toEqual([])
    })

    test('should parse field queries', () => {
      const result = parseSearchQuery('name:–ø–∞—Ä–∏–∂ status:published description:–æ—Ç–¥—ã—Ö')
      
      expect(result.fieldQueries).toEqual([
        { field: 'name', value: '–ø–∞—Ä–∏–∂' },
        { field: 'status', value: 'published' },
        { field: 'description', value: '–æ—Ç–¥—ã—Ö' }
      ])
      expect(result.terms).toEqual([])
    })

    test('should parse OR queries', () => {
      const result = parseSearchQuery('–º–æ—Å–∫–≤–∞ OR —Å–ø–± OR –ø–∏—Ç–µ—Ä')
      
      expect(result.orQueries).toEqual([
        ['–º–æ—Å–∫–≤–∞'],
        ['—Å–ø–±'],
        ['–ø–∏—Ç–µ—Ä']
      ])
      expect(result.terms).toEqual([])
    })

    test('should parse complex mixed query', () => {
      const result = parseSearchQuery('–æ—Ç–¥—ã—Ö "–≥–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã" -–¥–æ—Ä–æ–≥–æ name:–ø–∞—Ä–∏–∂ —Å–∫–∏–¥–∫–∞ OR –∞–∫—Ü–∏—è')
      
      expect(result.terms).toEqual([])  // –í—Å–µ —Ç–µ—Ä–º—ã —Ç–µ–ø–µ—Ä—å –≤ OR –≥—Ä—É–ø–ø–∞—Ö
              expect(result.exactPhrases).toEqual(['–≥–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã'])
      expect(result.excludedTerms).toEqual(['–¥–æ—Ä–æ–≥–æ'])
      expect(result.fieldQueries).toEqual([
        { field: 'name', value: '–ø–∞—Ä–∏–∂' }
      ])
      expect(result.orQueries).toEqual([
        ['–æ—Ç–¥—ã—Ö'], // –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Ç–æ–∂–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è OR –≥—Ä—É–ø–ø–æ–π
        ['—Å–∫–∏–¥–∫–∞'],
        ['–∞–∫—Ü–∏—è']
      ])
    })

    test('should handle empty query', () => {
      const result = parseSearchQuery('')
      
      expect(result.terms).toEqual([])
      expect(result.exactPhrases).toEqual([])
      expect(result.excludedTerms).toEqual([])
      expect(result.fieldQueries).toEqual([])
      expect(result.orQueries).toEqual([])
      expect(result.originalQuery).toBe('')
    })

    test('should handle query with only spaces', () => {
      const result = parseSearchQuery('   ')
      
      expect(result.terms).toEqual([])
      expect(result.originalQuery).toBe('')
    })
  })

  describe('calculateRelevanceScore', () => {
    test('should calculate score for simple terms', () => {
      const query = parseSearchQuery('–ø–∞—Ä–∏–∂ –æ—Ç–¥—ã—Ö')
      const text = '–û—Ç–¥—ã—Ö –≤ –ü–∞—Ä–∏–∂–µ - —ç—Ç–æ –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è'
      
      const score = calculateRelevanceScore(text, query, 1.0)
      
      expect(score).toBeGreaterThan(0)
      expect(score).toBe(5 + 5) // '–ø–∞—Ä–∏–∂' (5 chars) + '–æ—Ç–¥—ã—Ö' (5 chars)
    })

    test('should give higher score for exact phrases', () => {
      const query = parseSearchQuery('"–≥–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã"')
      const text = '–ì–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –æ—Ç –ö—É–ø–∏–±–∏–ª–µ—Ç - –ª—É—á—à–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'
      
      const score = calculateRelevanceScore(text, query, 1.0)
      
              expect(score).toBe(30) // '–≥–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã' (18 chars) * 2 (exact phrase multiplier)
    })

    test('should apply weight multipliers', () => {
      const query = parseSearchQuery('–ø–∞—Ä–∏–∂')
      const text = '–ü–∞—Ä–∏–∂ - –≥–æ—Ä–æ–¥ –ª—é–±–≤–∏'
      
      const score1 = calculateRelevanceScore(text, query, 1.0)
      const score2 = calculateRelevanceScore(text, query, 3.0)
      
      expect(score2).toBe(score1 * 3)
    })

    test('should reduce score for excluded terms', () => {
      const query = parseSearchQuery('–æ—Ç–¥—ã—Ö -–¥–æ—Ä–æ–≥–æ')
      const text1 = '–û—Ç–¥—ã—Ö –≤ –ü–∞—Ä–∏–∂–µ'
      const text2 = '–û—Ç–¥—ã—Ö –≤ –ü–∞—Ä–∏–∂–µ, –Ω–æ –¥–æ—Ä–æ–≥–æ'
      
      const score1 = calculateRelevanceScore(text1, query, 1.0)
      const score2 = calculateRelevanceScore(text2, query, 1.0)
      
      expect(score1).toBeGreaterThan(score2)
    })

    test('should handle OR queries correctly', () => {
      const query = parseSearchQuery('–º–æ—Å–∫–≤–∞ OR —Å–ø–±')
      const text1 = '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ú–æ—Å–∫–≤—É'
      const text2 = '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –°–ü–±'
      const text3 = '–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –ö–∞–∑–∞–Ω—å'
      
      const score1 = calculateRelevanceScore(text1, query, 1.0)
      const score2 = calculateRelevanceScore(text2, query, 1.0)
      const score3 = calculateRelevanceScore(text3, query, 1.0)
      
      expect(score1).toBeGreaterThan(0)
      expect(score2).toBeGreaterThan(0)
      expect(score3).toBe(0)
    })

    test('should return 0 for no matches', () => {
      const query = parseSearchQuery('–ø–∞—Ä–∏–∂')
      const text = '–û—Ç–¥—ã—Ö –≤ –õ–æ–Ω–¥–æ–Ω–µ'
      
      const score = calculateRelevanceScore(text, query, 1.0)
      
      expect(score).toBe(0)
    })
  })

  describe('highlightSearchTerms', () => {
    test('should highlight simple terms', () => {
      const query = parseSearchQuery('–ø–∞—Ä–∏–∂ –æ—Ç–¥—ã—Ö')
      const text = '–û—Ç–¥—ã—Ö –≤ –ü–∞—Ä–∏–∂ —ç—Ç–æ –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ'
      
      const highlighted = highlightSearchTerms(text, query)
      
      expect(highlighted).toContain('<mark>–û—Ç–¥—ã—Ö</mark>')
      expect(highlighted).toContain('<mark>–ü–∞—Ä–∏–∂</mark>')
    })

    test('should highlight exact phrases', () => {
      const query = parseSearchQuery('"–≥–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã"')
      const text = '–ì–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã –æ—Ç –ö—É–ø–∏–±–∏–ª–µ—Ç'
      
      const highlighted = highlightSearchTerms(text, query)
      
              expect(highlighted).toContain('<mark>–ì–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã</mark>')
    })

    test('should use custom highlight tag', () => {
      const query = parseSearchQuery('–ø–∞—Ä–∏–∂')
      const text = '–ü–∞—Ä–∏–∂ - –≥–æ—Ä–æ–¥ –º–µ—á—Ç—ã'
      
      const highlighted = highlightSearchTerms(text, query, 'strong')
      
      expect(highlighted).toContain('<strong>–ü–∞—Ä–∏–∂</strong>')
    })

    test('should handle case insensitive highlighting', () => {
      const query = parseSearchQuery('–ü–ê–†–ò–ñ')
      const text = '–ø–∞—Ä–∏–∂ - –∫—Ä–∞—Å–∏–≤—ã–π –≥–æ—Ä–æ–¥'
      
      const highlighted = highlightSearchTerms(text, query)
      
      expect(highlighted).toContain('<mark>–ø–∞—Ä–∏–∂</mark>')
    })

    test('should handle overlapping matches correctly', () => {
      const query = parseSearchQuery('–≥–æ—Ä–æ–¥ "–ø–∞—Ä–∏–∂ –≥–æ—Ä–æ–¥"')
      const text = '–ü–∞—Ä–∏–∂ –≥–æ—Ä–æ–¥ –ª—é–±–≤–∏'
      
      const highlighted = highlightSearchTerms(text, query)
      
      // Longer phrases should take precedence
      expect(highlighted).toContain('<mark>–ü–∞—Ä–∏–∂ –≥–æ—Ä–æ–¥</mark>')
    })
  })

  describe('createSearchSnippet', () => {
    test('should create snippet with context', () => {
      const query = parseSearchQuery('–ø–∞—Ä–∏–∂')
      const text = '–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è. –ü–∞—Ä–∏–∂ —è–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–∞–º—ã—Ö –∫—Ä–∞—Å–∏–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤ –º–∏—Ä–∞. –ó–¥–µ—Å—å –º–Ω–æ–≥–æ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π.'
      
      const snippet = createSearchSnippet(text, query, 50)
      
      expect(snippet).toContain('–ü–∞—Ä–∏–∂')
      expect(snippet.length).toBeLessThanOrEqual(53) // 50 + ellipsis
      expect(snippet).toContain('–ü–∞—Ä–∏–∂')
      // Should have some form of context indication
      expect(snippet.includes('...') || snippet.length <= 50).toBe(true)
    })

    test('should return beginning if no matches', () => {
      const query = parseSearchQuery('–ª–æ–Ω–¥–æ–Ω')
      const text = '–ü–∞—Ä–∏–∂ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∞—Å–∏–≤—ã–º –≥–æ—Ä–æ–¥–æ–º —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π'
      
      const snippet = createSearchSnippet(text, query, 30)
      
      expect(snippet).toBe('–ü–∞—Ä–∏–∂ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä–∞—Å–∏–≤—ã–º –≥–æ—Ä–æ–¥–æ–º...')
    })

    test('should handle short text correctly', () => {
      const query = parseSearchQuery('–ø–∞—Ä–∏–∂')
      const text = '–ü–∞—Ä–∏–∂ –∫—Ä–∞—Å–∏–≤'
      
      const snippet = createSearchSnippet(text, query, 50)
      
      expect(snippet).toBe('–ü–∞—Ä–∏–∂ –∫—Ä–∞—Å–∏–≤')
    })

    test('should find first match in long text', () => {
      const query = parseSearchQuery('–≤—Ç–æ—Ä–æ–π')
      const text = '–ü–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü —Ç–µ–∫—Å—Ç–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞. –í—Ç–æ—Ä–æ–π –∞–±–∑–∞—Ü —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω–æ–µ —Å–ª–æ–≤–æ. –¢—Ä–µ—Ç–∏–π –∞–±–∑–∞—Ü —Ç–æ–∂–µ.'
      
      const snippet = createSearchSnippet(text, query, 50)
      
      expect(snippet).toContain('–í—Ç–æ—Ä–æ–π')
      expect(snippet).not.toContain('–ü–µ—Ä–≤—ã–π')
    })
  })

  describe('validateSearchQuery', () => {
    test('should validate correct queries', () => {
      const result = validateSearchQuery('–ø–∞—Ä–∏–∂ "–≥–æ—Ä—è—â–∏–µ –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã" -–¥–æ—Ä–æ–≥–æ name:–æ—Ç–µ–ª—å')
      
      expect(result.valid).toBe(true)
      expect(result.errors).toEqual([])
    })

    test('should reject empty queries', () => {
      const result = validateSearchQuery('')
      
      expect(result.valid).toBe(false)
      expect(result.errors).toContain('Search query cannot be empty')
    })

    test('should reject too long queries', () => {
      const longQuery = 'a'.repeat(501)
      const result = validateSearchQuery(longQuery)
      
      expect(result.valid).toBe(false)
      expect(result.errors).toContain('Search query too long (maximum 500 characters)')
    })

    test('should detect unmatched quotes', () => {
      const result = validateSearchQuery('–ø–∞—Ä–∏–∂ "–Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –∫–∞–≤—ã—á–∫–∞')
      
      expect(result.valid).toBe(false)
      expect(result.errors).toContain('Unmatched quotes in search query')
    })

    test('should validate field names', () => {
      const result = validateSearchQuery('invalidfield:value')
      
      expect(result.valid).toBe(false)
      expect(result.errors).toContain('Invalid field "invalidfield" in field:value query')
    })

    test('should accept valid field names', () => {
      const result = validateSearchQuery('name:value description:test status:published')
      
      expect(result.valid).toBe(true)
      expect(result.errors).toEqual([])
    })
  })

  describe('Edge Cases', () => {
    test('should handle special characters in search', () => {
      const query = parseSearchQuery('user@example.com +7(999)123-45-67')
      
      expect(query.terms).toContain('user@example.com')
      expect(query.terms).toContain('+7(999)123-45-67')
    })

    test('should handle unicode characters', () => {
      const query = parseSearchQuery('üòä —ç–º–æ–¥–∑–∏ —Ç–µ—Å—Ç')
      
      expect(query.terms).toContain('üòä')
      expect(query.terms).toContain('—ç–º–æ–¥–∑–∏')
      expect(query.terms).toContain('—Ç–µ—Å—Ç')
    })

    test('should handle mixed language search', () => {
      const query = parseSearchQuery('Paris –ø–∞—Ä–∏–∂ English —Ä—É—Å—Å–∫–∏–π')
      
      expect(query.terms).toContain('paris')
      expect(query.terms).toContain('–ø–∞—Ä–∏–∂')
      expect(query.terms).toContain('english')
      expect(query.terms).toContain('—Ä—É—Å—Å–∫–∏–π')
    })

    test('should handle HTML in text for highlighting', () => {
      const query = parseSearchQuery('test')
      const text = '<p>This is a test</p>'
      
      const highlighted = highlightSearchTerms(text, query)
      
      expect(highlighted).toBe('<p>This is a <mark>test</mark></p>')
    })
  })
})