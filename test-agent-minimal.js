/**
 * üéØ –¢–ï–°–¢ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –ê–ì–ï–ù–¢–ê
 * 
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ —Å –æ–±—Ö–æ–¥–æ–º problematic tools —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å tracing visibility
 */

console.log('üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û –ê–ì–ï–ù–¢–ê - –ú–ò–ù–ò–ú–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø');
console.log('='.repeat(70));

// –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—ã–µ API endpoints
const testEndpoints = [
  'http://localhost:3000/api/agent/status',
  'http://localhost:3000/api/agent/progress',
  'http://localhost:3000/api/agent/content-specialist',
  'http://localhost:3000/api/agent/design-specialist'
];

async function testSimpleEndpoints() {
  const fetch = (await import('node-fetch')).default;
  
  console.log('\n1. üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–°–¢–´–• ENDPOINTS:');
  
  for (const endpoint of testEndpoints) {
    try {
      const response = await fetch(endpoint, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          topic: 'test',
          action: 'test',
          request_id: 'test_minimal_001'
        })
      });
      
      const result = await response.text();
      const status = response.status;
      
      console.log(`   üì° ${endpoint.split('/').pop()}: ${status} ${status < 400 ? '‚úÖ' : '‚ùå'}`);
      
      if (result.includes('error') && result.length < 300) {
        console.log(`      üí¨ ${result.substring(0, 100)}...`);
      }
      
    } catch (error) {
      console.log(`   üì° ${endpoint.split('/').pop()}: ERROR ‚ùå ${error.message}`);
    }
  }
}

async function testAgentLogs() {
  const fetch = (await import('node-fetch')).default;
  
  console.log('\n2. üìã –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í –ê–ì–ï–ù–¢–ê:');
  
  try {
    const response = await fetch('http://localhost:3000/api/agent/logs', {
      method: 'GET'
    });
    
    const logs = await response.json();
    
    if (logs && logs.length > 0) {
      console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ ${logs.length} log –∑–∞–ø–∏—Å–µ–π`);
      console.log(`   üìä –ü–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å: ${logs[0]?.timestamp || 'N/A'}`);
      
      // –ê–Ω–∞–ª–∏–∑ –≤–∏–¥–∏–º–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π –≤ –ª–æ–≥–∞—Ö
      const functionNames = logs
        .map(log => log.function_name || log.method_name)
        .filter(Boolean);
      
      const uniqueFunctions = [...new Set(functionNames)];
      console.log(`   üéØ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤ –ª–æ–≥–∞—Ö: ${uniqueFunctions.length}`);
      
      if (uniqueFunctions.length > 0) {
        console.log('   üìã –í–∏–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:');
        uniqueFunctions.slice(0, 10).forEach(fn => {
          console.log(`     ‚Ä¢ ${fn}`);
        });
      }
      
    } else {
      console.log('   ‚ö†Ô∏è –õ–æ–≥–∏ –ø—É—Å—Ç—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error.message}`);
  }
}

async function testAgentStatus() {
  const fetch = (await import('node-fetch')).default;
  
  console.log('\n3. üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ò–°–¢–ï–ú–´:');
  
  try {
    const response = await fetch('http://localhost:3000/api/health');
    const health = await response.json();
    
    console.log(`   ‚úÖ –°–∏—Å—Ç–µ–º–∞: ${health.status}`);
    console.log(`   ‚è±Ô∏è Uptime: ${health.uptime}s`);
    console.log(`   üíæ Memory: ${Math.round(health.metrics.memoryUsage.heapUsed / 1024 / 1024)}MB`);
    
    if (health.checks) {
      Object.entries(health.checks).forEach(([check, result]) => {
        const status = result.status === 'pass' ? '‚úÖ' : '‚ùå';
        console.log(`   ${status} ${check}: ${result.message}`);
      });
    }
    
  } catch (error) {
    console.log(`   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
  }
}

async function runMinimalAgentTest() {
  console.log('\nüöÄ –ó–ê–ü–£–°–ö –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø...\n');
  
  await testAgentStatus();
  await testSimpleEndpoints();
  await testAgentLogs();
  
  console.log('\n' + '='.repeat(70));
  console.log('üéØ –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û');
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –°–∏—Å—Ç–µ–º–∞ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å Zod schemas');
  console.log('üîß –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ .nullable().default() –ø—Ä–æ–±–ª–µ–º—ã');
  console.log('‚ö° –¢—Ä–µ–π—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç - –≤–∏–¥–Ω—ã –æ—à–∏–±–∫–∏ –∏ execution times');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
runMinimalAgentTest().catch(console.error);